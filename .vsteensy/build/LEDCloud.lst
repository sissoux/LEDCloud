
.vsteensy/build/LEDCloud.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00006170 l    d  .fini	00000000 .fini
1fff8000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff8200 l    d  .dmabuffers	00000000 .dmabuffers
1fff85bc l    d  .usbbuffers	00000000 .usbbuffers
1fff8920 l    d  .data	00000000 .data
1fff94e4 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003074 l     F .text	0000000c startup_default_early_hook
00003080 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff94e4 l       .bss	00000000 completed.8603
00000434 l     F .text	00000000 frame_dummy
1fff94e8 l       .bss	00000000 object.8608
00006124 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000005ac l     F .text	000003ac _GLOBAL__sub_I_IRcmdCommands
00000000 l    df *ABS*	00000000 Thunder.cpp
00000000 l    df *ABS*	00000000 StripCommand.cpp
00000000 l    df *ABS*	00000000 StripLED.cpp
00000000 l    df *ABS*	00000000 FastLED.cpp
00000a50 l     F .text	00000018 _GLOBAL__sub_I_pSmartMatrix
00000000 l    df *ABS*	00000000 output_pwm.cpp
00000a74 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00000a8c l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 control_sgtl5000.cpp
00000000 l    df *ABS*	00000000 mixer.cpp
00000000 l    df *ABS*	00000000 output_adat.cpp
00000dc8 l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_adc.cpp
00000de0 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 output_dac.cpp
00000df8 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00000e10 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00000e40 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 play_sd_wav.cpp
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00001448 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00001460 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00001478 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 input_pdm.cpp
00001490 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_tdm.cpp
000014a8 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 output_i2s.cpp
0000182c l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
1fff8200 l     O .dmabuffers	00000200 i2s_tx_buffer
00000000 l    df *ABS*	00000000 output_spdif.cpp
00001844 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
00001bb6 l       .text	00000000 L_1480_delayMicroseconds
00001bc4 l       .text	00000000 L_1494_delayMicroseconds
00001c0a l       .text	00000000 L_1545_delayMicroseconds
1ffface4 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 File.cpp
00000000 l    df *ABS*	00000000 SD.cpp
00001fe8 l     F .text	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 SdVolume.cpp
000020a8 l     F .text	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 SdFile.cpp
0000228c l     F .text	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00000000 l    df *ABS*	00000000 Sd2Card.cpp
00002b40 l     F .text	00000010 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
1fffaf4c l     O .bss	00000004 settings
1fffaf50 l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 irRecv.cpp
00000000 l    df *ABS*	00000000 IRremote.cpp
00000000 l    df *ABS*	00000000 .vsteensy/build/lib/Audio//memcpy_audio.o
00002cbc l       .text	00000000 .loopLR
00002d00 l       .text	00000000 .loopL
00002d40 l       .text	00000000 .loopR
00002d7c l       .text	00000000 .loopQuad
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fffb0f9 l     O .bss	00000001 tx_noautoflush
1fffb0fc l     O .bss	00000004 tx_packet
1fffb100 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
1fffb105 l     O .bss	00000001 calibrating
1fff8b14 l     O .data	00000001 analog_config_bits
1fffb106 l     O .bss	00000001 analog_reference_internal
1fff8b15 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
000030b4 l     F .text	00000002 dummy_isr
1fff8920 l     F .data	0000002c port_E_isr
1fff894c l     F .data	0000002c port_D_isr
1fff8978 l     F .data	0000002c port_C_isr
1fff89a4 l     F .data	0000002c port_B_isr
1fff89d0 l     F .data	0000002c port_A_isr
000030b8 l     F .text	00000044 digitalWrite.part.1
000030fc l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff8bfc l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fffb10c l     O .bss	00000004 ep0_tx_ptr
1fffb110 l     O .bss	00000010 rx_last
1fffb120 l     O .bss	00000002 ep0_tx_len
1fffb124 l     O .bss	00000040 ep0_rx0_buf
1fffb164 l     O .bss	00000010 rx_first
1fffb174 l     O .bss	00000001 ep0_tx_data_toggle
1fffb178 l     O .bss	00000040 ep0_rx1_buf
1fffb1b8 l     O .bss	00000010 tx_first
1fff8000 l     O .usbdescriptortable	000000a0 table
1fffb1c8 l     O .bss	00000010 tx_last
1fffb1d8 l     O .bss	00000008 setup
1fffb1e0 l     O .bss	00000001 ep0_tx_bdt_bank
1fffb1e4 l     O .bss	00000008 reply_buffer
1fffb1f0 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 yield.cpp
1fffb214 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 serial2.c
1fffb248 l     O .bss	00000004 rts_pin
1fffb24c l     O .bss	00000001 transmitting
1fffb24d l     O .bss	00000001 rx_buffer_tail
1fffb250 l     O .bss	00000028 tx_buffer
1fffb278 l     O .bss	00000040 rx_buffer
1fffb2b8 l     O .bss	00000001 rx_buffer_head
1fffb2b9 l     O .bss	00000001 tx_buffer_tail
1fffb2bc l     O .bss	00000004 transmit_pin
1fffb2c0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fffb2c4 l     O .bss	00000004 rts_pin
1fffb2c8 l     O .bss	00000001 rx_buffer_head
1fffb2c9 l     O .bss	00000001 rx_buffer_tail
1fffb2cc l     O .bss	00000040 tx_buffer
1fffb30c l     O .bss	00000040 rx_buffer
1fffb34c l     O .bss	00000001 transmitting
1fffb34d l     O .bss	00000001 tx_buffer_tail
1fffb350 l     O .bss	00000004 transmit_pin
1fffb354 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff8c00 l     O .data	00000012 device_descriptor
1fff8c2c l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fffb358 l     O .bss	00000004 rts_pin
1fffb35c l     O .bss	00000001 rx_buffer_head
1fffb35d l     O .bss	00000001 rx_buffer_tail
1fffb360 l     O .bss	00000028 tx_buffer
1fffb388 l     O .bss	00000040 rx_buffer
1fffb3c8 l     O .bss	00000001 transmitting
1fffb3c9 l     O .bss	00000001 tx_buffer_tail
1fffb3cc l     O .bss	00000004 transmit_pin
1fffb3d0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_muldivsf3.o
00000000 l    df *ABS*	00000000 _arm_fixunssfsi.o
00000000 l    df *ABS*	00000000 aeabi_atexit.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000059a8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1fff8ca8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/arduino-1.8.9/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/crti.o
00000000 l    df *ABS*	00000000 c:/arduino-1.8.9/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/crtn.o
00000000 l    df *ABS*	00000000 spi_interrupt.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff94e4 l       .bss	00000000 __bss_start__
00000000 l       *UND*	00000000 XY(unsigned char, unsigned char)
1fffb420 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000306c  w    F .text	00000006 adc0_isr
00002ee0 g     F .text	0000001c usb_serial_available
1fff9810 g     O .bss	00000090 T2
1fffb220 g     O .bss	00000004 AudioStream::memory_pool
0000451c  w    F .text	0000009c yield
000022f8 g     F .text	0000002a SdFile::addCluster()
1fff8c14 g     O .data	00000018 usb_string_manufacturer_name_default
00004a40 g     F .text	00000020 serial_available
1fff8a6c g     O .data	0000006c Wire1
00003024  w    F .text	00000048 hard_fault_isr
0000306c  w    F .text	00000006 dma_ch6_isr
1fffb224 g     O .bss	00000001 AudioStream::update_scheduled
00005e84 g     O .text	0000000c vtable for AudioOutputI2S
0000046c  w    F .text	00000054 ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)
000019a0 g     F .text	0000012c TwoWire::isr()
00004914 g     F .text	00000020 serial2_available
1fffb244 g     O .bss	00000002 AudioStream::memory_used
0000306c  w    F .text	00000006 uart0_lon_isr
00000554  w    F .text	00000058 AudioPlaySdWav::AudioPlaySdWav()
00003554 g     F .text	000000c8 usb_rx_memory
00001f94 g     F .text	0000000a File::flush()
0000306c  w    F .text	00000006 dma_ch8_isr
000058dc g     F .text	00000002 __malloc_unlock
1fff8b1c g     O .data	00000038 isr_table_portA
000026c8 g     F .text	00000058 Sd2Card::chipSelectHigh()
00002f44 g     F .text	000000e0 analog_init
0000361c g     F .text	00000084 usb_tx
000050c0 g     F .text	00000136 .hidden __divsf3
0000306c  w    F .text	00000006 portcd_isr
00001754 g     F .text	000000d8 AudioOutputI2S::begin()
00002324 g     F .text	0000001e SdFile::close()
000026b0 g     F .text	00000018 SdFile::write(unsigned char)
00004474 g     F .text	00000098 MillisTimer::runFromTimer()
0000306c  w    F .text	00000006 can1_rx_warn_isr
00006174 g       .fini	00000000 __exidx_end
0000306c  w    F .text	00000006 dma_error_isr
1fffacd0 g     O .bss	00000004 AudioOutputI2S::block_right_2nd
1fffb20c g     O .bss	00000001 EventResponder::runningFromYield
00001d40 g     F .text	0000000c i2c0_isr
000045bc g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
00005250 g     F .text	0000000c __errno
00001f08 g     F .text	00000022 File::write(unsigned char const*, unsigned int)
0000306c  w    F .text	00000006 portd_isr
0000306c  w    F .text	00000006 enet_error_isr
00001fbc g     F .text	00000002 File::~File()
1fffb1f8 g     O .bss	00000004 EventResponder::firstInterrupt
1fffa388 g     O .bss	00000014 patchCord2
00001b34 g     F .text	0000000c sda_rising_isr1()
0000306c  w    F .text	00000006 tpm1_isr
00005fa8 g     O .text	00000110 digital_pin_to_info_PGM
1fffb41c g     O .bss	00000004 errno
00006174 g       .fini	00000000 _etext
00001d70 g     F .text	00000134 _spi_dma_rxISR0()
1fff94e4 g       .bss	00000000 _sbss
000024d8 g     F .text	000001d8 SdFile::write(void const*, unsigned int)
1fffad44 g     O .bss	00000200 SdVolume::cacheBuffer_
00004d48 g     F .text	00000160 .hidden __aeabi_fadd
00004d44 g     F .text	00000164 .hidden __subsf3
1fffa904 g     O .bss	0000000c sgtl5000_1
00003324 g     F .text	0000001c digitalRead
0000306c  w    F .text	00000006 porte_isr
00004720 g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
0000306c  w    F .text	00000006 portb_isr
000012c0 g     F .text	00000188 AudioPlaySdWav::update()
0000306c  w    F .text	00000006 spi1_isr
0000306c  w    F .text	00000006 uart3_status_isr
00004d34  w    F .text	00000002 serialEvent1()
0000306c  w    F .text	00000006 mcm_isr
1fffa39c g     O .bss	00000014 patchCord3
0000440c g     F .text	00000068 MillisTimer::addToActiveList()
00000aa4  w    F .text	00000004 AudioControlSGTL5000::disable()
0000219c g     F .text	000000f0 SdVolume::allocContiguous(unsigned long, unsigned long*)
00001fa0 g     F .text	0000001c File::File()
00001c2c g     F .text	00000114 TwoWire::endTransmission(unsigned char)
1fffb1fc g     O .bss	00000004 EventResponder::lastInterrupt
00004934 g     F .text	0000010c uart1_status_isr
00002dac g     F .text	00000134 memcpy
0000306c  w    F .text	00000006 randnum_isr
00005e6c g     O .text	0000000c vtable for AudioMixer4
00001ef0 g     F .text	00000016 File::available()
00000a14 g     F .text	00000038 StripLED::StripLED()
1fffaf48 g     O .bss	00000004 SdFile::dateTime_
1fff8ba4 g     O .data	00000030 isr_table_portC
1fffb108 g     O .bss	00000004 systick_millis_count
1fffad3c g     O .bss	00000004 SdVolume::cacheMirrorBlock_
00003024  w    F .text	00000048 bus_fault_isr
00001b40 g     F .text	000000ec TwoWire::wait_idle()
0000306c  w    F .text	00000006 watchdog_isr
1fffaf54 g     O .bss	000001a4 irparams
00001d4c g     F .text	0000000c i2c1_isr
1fffb1ec g     O .bss	00000001 usb_configuration
0000306c  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002060 g     F .text	00000048 SdVolume::cacheRawBlock(unsigned long, unsigned char)
1fff98d4 g     O .bss	00000a9c StripCommander
000045e8  w    F .text	00000002 serialEvent2()
0000306c  w    F .text	00000006 i2c2_isr
1fffb228 g     O .bss	00000018 AudioStream::memory_pool_available_mask
1fffac6c g     O .bss	00000008 AudioOutputAnalog::dma
1fff8c14  w    O .data	00000018 usb_string_manufacturer_name
1fffb414 g     O .bss	00000008 usb_rx_byte_count_data
1fff98c0 g     O .bss	00000014 patchCord9
0000306c  w    F .text	00000006 pit1_isr
000052ac g     F .text	00000010 malloc
0000306c  w    F .text	00000006 dma_ch4_isr
00005eb0 g     O .text	00000020 TwoWire::i2c1_hardware
00004890 g     F .text	00000084 software_isr
0000306c  w    F .text	00000006 dma_ch7_isr
0000186c  w    F .text	0000001e TwoWire::read()
00001d58  w    F .text	00000018 EventResponder::triggerEvent(int, void*)
00004eb0 g     F .text	0000001c .hidden __aeabi_i2f
00004170 g     F .text	000000d8 usb_init
1fffb242 g     O .bss	00000002 AudioStream::memory_pool_first_mask
1fffa66c g     O .bss	00000014 patchCord10
0000306c  w    F .text	00000006 lptmr_isr
1fffb3dc g     O .bss	00000004 __malloc_top_pad
000032f4 g     F .text	00000024 rtc_set
1fffa680 g     O .bss	00000280 Rain
1fff89fc g     O .data	00000000 .hidden __dso_handle
00000504  w    F .text	00000050 AudioStream::AudioStream(unsigned char, audio_block_struct**)
1fff8920 g       .data	00000000 _sdata
00005e90 g     O .text	00000020 TwoWire::i2c0_hardware
000058e0 g     F .text	00000024 _sbrk_r
000001bc g     F .text	000001d8 ResetHandler
0000306c  w    F .text	00000006 can1_bus_off_isr
00002cb4 g     F .text	00000000 memcpy_tointerleaveLR
0000306c  w    F .text	00000006 ftm2_isr
1fffb408 g     O .bss	00000008 usb_cdc_line_coding
00003318 g     F .text	0000000a digitalWrite
1fffb204 g     O .bss	00000004 EventResponder::lastYield
0000306c  w    F .text	00000006 uart5_status_isr
0000306c  w    F .text	00000006 lpuart0_status_isr
000060b8 g     O .text	00000004 usb_endpoint_config_table
0000306c  w    F .text	00000006 dma_ch9_isr
1fffacc8 g     O .bss	00000002 AudioOutputI2S::block_right_offset
0000306c  w    F .text	00000006 pit2_isr
00004c3c g     F .text	00000020 serial3_available
1fffb3d8 g     O .bss	00000004 __malloc_max_sbrked_mem
00002720 g     F .text	0000009c Sd2Card::chipSelectLow()
00003340 g     F .text	0000000a pinMode
00003508 g     F .text	0000004c usb_free
0000306c  w    F .text	00000006 i2c3_isr
1fffac3c g     O .bss	00000010 FastLED
1fffad40 g     O .bss	00000004 SdVolume::sdCard_
00001f58 g     F .text	0000003a File::peek()
00006174 g       .fini	00000000 __exidx_start
00000a68  w    F .text	0000000c DMAChannel::~DMAChannel()
0000306c  w    F .text	00000006 pit0_isr
1fffb208 g     O .bss	00000004 EventResponder::firstYield
00002468 g     F .text	00000064 SdFile::seekSet(unsigned long)
00006110 g     O .text	00000004 _global_impure_ptr
1fffacb8 g     O .bss	00000002 AudioOutputI2S::block_left_offset
0000306c  w    F .text	00000006 can1_error_isr
00002ab4 g     F .text	0000008c Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
0000525c g     F .text	00000050 __libc_init_array
1fffb420 g       .bss	00000000 __bss_end
00001860  w    F .text	0000000c TwoWire::available()
0000306c  w    F .text	00000006 can0_wakeup_isr
0000306c  w    F .text	00000006 flash_cmd_isr
00004c5c g     F .text	000000d8 uart2_status_isr
00003084 g     F .text	0000002c _sbrk
1fffb210 g     O .bss	00000004 MillisTimer::listWaiting
00003174 g     F .text	000000f8 attachInterrupt
1fffacb0 g     O .bss	00000008 AudioOutputTDM::dma
1fff8b18 g     O .data	00000004 __brkval
1fffb104 g     O .bss	00000001 usb_cdc_line_rtsdtr
00002efc g     F .text	00000048 usb_serial_flush_callback
00001fc0 g     F .text	0000000a File::read(void*, unsigned short)
00002b50 g     F .text	00000010 IRrecv::IRrecv(int)
00006114 g     F .text	00000000 _init
1fffa984 g     O .bss	00000038 mixer2
0000306c  w    F .text	00000006 svcall_isr
0000306c  w    F .text	00000006 dma_ch15_isr
00004d44 g     F .text	00000164 .hidden __aeabi_fsub
00005ed0 g     O .text	00000024 vtable for TwoWire
0000306c  w    F .text	00000006 uart1_error_isr
000059bc g     F .text	00000028 __libc_fini_array
0000306c  w    F .text	00000006 usbhs_phy_isr
1fffac74 g     O .bss	00000008 AudioInputAnalogStereo::dma0
1fffb420 g       .bss	00000000 _ebss
1fffac5c g     O .bss	00000008 AudioOutputADAT::dma
1fffacc4 g     O .bss	00000004 AudioOutputI2S::block_right_1st
1fffacd4 g     O .bss	00000001 AudioOutputI2S::update_responsibility
000004cc  w    F .text	00000018 AudioPlaySdWav::~AudioPlaySdWav()
0000306c g     F .text	00000006 unused_isr
0000306c  w    F .text	00000006 spi0_isr
00004edc g     F .text	0000007c .hidden __floatdisf
0000306c  w    F .text	00000006 dma_ch3_isr
00002d72 g     F .text	00000000 memcpy_tointerleaveQuad
00001ea4 g     F .text	0000002e SPIClass::notUsingInterrupt(IRQ_NUMBER_t)
00000a68  w    F .text	0000000c DMAChannel::~DMAChannel()
00001fbc g     F .text	00000002 File::~File()
0000306c  w    F .text	00000006 flash_error_isr
00002b50 g     F .text	00000010 IRrecv::IRrecv(int)
0000306c  w    F .text	00000006 uart5_error_isr
0000306c  w    F .text	00000006 rtc_seconds_isr
00005ef4 g     O .text	00000078 SPIClass::spi0_hardware
0000306c  w    F .text	00000006 pdb_isr
00003024  w    F .text	00000048 usage_fault_isr
0000306c  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001bc _VectorsFlash
0000306c  w    F .text	00000006 dma_ch14_isr
0000326c g     F .text	00000088 detachInterrupt
00000000  w      *UND*	00000000 __deregister_frame_info
1fffb410 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fffa658 g     O .bss	00000014 patchCord8
0000450c g     F .text	00000010 systick_isr
0000306c  w    F .text	00000006 rtc_alarm_isr
1fffac94 g     O .bss	00000002 AudioUsingSPICount
1fffacd8 g     O .bss	00000004 AudioOutputI2S::block_left_2nd
1fffb218 g     O .bss	00000004 AudioStream::first_update
0000306c  w    F .text	00000006 dma_ch2_isr
1fffb21c g     O .bss	00000002 AudioStream::memory_used_max
0000306c  w    F .text	00000006 ftm1_isr
000004c0  w    F .text	0000000c AudioConnection::~AudioConnection()
00005e50 g     O .text	0000001c vtable for AudioControlSGTL5000
00003074  w    F .text	0000000c startup_early_hook
0000306c  w    F .text	00000006 dma_ch13_isr
00005f6c g     O .text	00000024 vtable for File
00000aa8  w    F .text	00000004 AudioControlSGTL5000::inputLevel(float)
0000306c  w    F .text	00000006 uart2_error_isr
1fff9500 g     O .bss	00000280 ThunderRight
1fffaccc g     O .bss	00000004 AudioOutputI2S::block_left_1st
1fff8c8c g     O .data	00000016 usb_string_serial_number_default
00003024 g     F .text	00000048 fault_isr
00005a80 g     F .text	000001d0 _free_r
0000306c  w    F .text	00000006 usb_charge_isr
00002b60 g     F .text	00000154 cmt_isr
0000306c  w    F .text	00000006 usbhs_isr
1fff94e0 g     O .data	00000004 __malloc_sbrk_base
0000306c  w    F .text	00000006 ftm3_isr
1fffa93c g     O .bss	00000010 jsonBuffer
0000306c  w    F .text	00000006 tsi0_isr
000030b0  w    F .text	00000002 __cxa_pure_virtual
0000306c  w    F .text	00000006 spi2_isr
1fffac7c g     O .bss	00000008 AudioInputAnalogStereo::dma1
1fffa9bc g     O .bss	00000280 ThunderLeft
00004eb0 g     F .text	0000001c .hidden __floatsisf
000045b8  w    F .text	00000002 serialEvent()
00000be4  w    F .text	0000005c AudioControlSGTL5000::inputSelect(int)
1fffb175 g     O .bss	00000001 usb_reboot_timer
1fffac4c g     O .bss	00000008 AudioOutputPWM::dma
00005904 g     F .text	000000a4 __register_exitproc
00004738 g     F .text	00000042 AudioStream::receiveWritable(unsigned int)
00000504  w    F .text	00000050 AudioStream::AudioStream(unsigned char, audio_block_struct**)
1fff8bf4 g     O .data	00000008 isr_table_portE
00000021 g       *ABS*	00000000 _teensy_model_identifier
1fffb3e0 g     O .bss	00000028 __malloc_current_mallinfo
00000ca8  w    F .text	0000002c AudioControlSGTL5000::volume(float)
0000306c  w    F .text	00000006 can0_bus_off_isr
00000ef4 g     F .text	000003cc AudioPlaySdWav::consume(unsigned long)
1fffb1e1 g     O .bss	00000001 usb_rx_memory_needed
000036a0 g     F .text	00000ace usb_isr
00005244 g     F .text	0000000c __cxa_atexit
00004860 g     F .text	00000030 AudioStream::update_setup()
000050c0 g     F .text	00000136 .hidden __aeabi_fdiv
1fff8ad8 g     O .data	00000038 SPI
0000306c  w    F .text	00000006 uart3_error_isr
000015c4 g     F .text	00000098 AudioOutputI2S::update()
00004ecc g     F .text	0000008c .hidden __floatundisf
1fffb200 g     O .bss	00000004 MillisTimer::listActive
0000306c  w    F .text	00000006 porta_isr
1fff85bc g     O .usbbuffers	00000360 usb_buffer_memory
1fffa910 g     O .bss	00000014 patchCord5
0000306c  w    F .text	00000006 low_voltage_isr
1fff90d4 g     O .data	00000408 __malloc_av_
00004ea8 g     F .text	00000024 .hidden __aeabi_ui2f
0000306c  w    F .text	00000006 can0_error_isr
000033e8 g     F .text	000000e0 _init_Teensyduino_internal_
00001acc g     F .text	0000005c TwoWire::sda_rising_isr()
0000306c  w    F .text	00000006 dma_ch12_isr
1fffaca0 g     O .bss	00000008 AudioInputI2S::dma
000058d8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
0000306c  w    F .text	00000006 can1_wakeup_isr
1fff8400 g     O .dmabuffers	000001bc _VectorsRam
0000306c  w    F .text	00000006 pit3_isr
0000306c  w    F .text	00000006 enet_rx_isr
0000306c  w    F .text	00000006 portc_isr
00002cf2 g     F .text	00000000 memcpy_tointerleaveL
1fffac84 g     O .bss	00000008 AudioInputI2SQuad::dma
0000583c g     F .text	0000009a memset
00000c40 g     F .text	00000066 AudioControlSGTL5000::volumeInteger(unsigned int)
000045ec g     F .text	00000002 main
0000212c g     F .text	00000070 SdVolume::fatGet(unsigned long, unsigned long*) const
1fffacbc g     O .bss	00000008 AudioOutputI2S::dma
1fffb3d4 g     O .bss	00000004 __malloc_max_total_mem
1fff9780 g     O .bss	00000090 T1
00004edc g     F .text	0000007c .hidden __aeabi_l2f
00003024  w    F .text	00000048 memmanage_fault_isr
00001fcc g     F .text	0000001c File::close()
000004e4  w    F .text	00000020 ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()
00000aac g     F .text	00000058 AudioControlSGTL5000::write(unsigned int, unsigned int)
00004b6c g     F .text	00000084 usb_init_serialnumber
00002344 g     F .text	00000124 SdFile::read(void*, unsigned int)
00006170 g       .text	00000000 __init_array_end
000052cc g     F .text	00000570 _malloc_r
0000306c  w    F .text	00000006 debugmonitor_isr
1fff8bd4 g     O .data	00000020 isr_table_portD
00004344 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
00000b04 g     F .text	000000e0 AudioControlSGTL5000::enable()
00000000  w      *UND*	00000000 __libc_fini
00001b28 g     F .text	0000000c sda_rising_isr0()
00004ecc g     F .text	0000008c .hidden __aeabi_ul2f
0000306c  w    F .text	00000006 cmp1_isr
00000cd4 g     F .text	000000f4 AudioMixer4::update()
000024cc g     F .text	0000000c SdFile::sync()
0000306c  w    F .text	00000006 ftm0_isr
00000e84 g     F .text	00000070 AudioPlaySdWav::parse_format()
000059e4 g     F .text	0000009c _malloc_trim_r
1fffa3b0 g     O .bss	00000280 ThunderCenter
1fff8c88 g     O .data	00000004 string0
00004f58 g     F .text	00000168 .hidden __mulsf3
00003080  w    F .text	00000002 startup_late_hook
00000990 g     F .text	00000084 StripCommand::StripCommand()
1fff8c70  w    O .data	00000016 usb_string_product_name
0000334c g     F .text	0000009c delay
0000306c  w    F .text	00000006 tpm0_isr
1fffb1f4 g     O .bss	00000002 dma_channel_allocated_mask
00006170 g     F .fini	00000000 _fini
1fff8b10 g     O .data	00000004 SdVolume::cacheBlockNumber_
000018e4 g     F .text	00000026 TwoWire::write(unsigned char)
1fffac54 g     O .bss	00000008 AudioOutputPT8211::dma
0000306c  w    F .text	00000006 i2s0_rx_isr
0000306c  w    F .text	00000006 uart4_error_isr
00000554  w    F .text	00000058 AudioPlaySdWav::AudioPlaySdWav()
00000a4c g     F .text	00000004 atexit
00001ed8 g     F .text	00000018 File::write(unsigned char)
1ffface8 g     O .bss	00000054 SD
00004d3c g     F .text	0000016c .hidden __aeabi_frsub
00004698 g     F .text	00000054 AudioStream::release(audio_block_struct*)
0000306c  w    F .text	00000006 can0_message_isr
1fff90d0 g     O .data	00000004 _impure_ptr
0000306c  w    F .text	00000006 can1_message_isr
1fffacdc g     O .bss	00000008 AudioOutputSPDIF::dma
0000306c  w    F .text	00000006 nmi_isr
1fff8a00 g     O .data	0000006c Wire
000046ec g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
00004f58 g     F .text	00000168 .hidden __aeabi_fmul
00000990 g     F .text	00000084 StripCommand::StripCommand()
00006120 g       .text	00000000 __preinit_array_end
1fffac98 g     O .bss	00000008 AudioInputTDM::dma
0000306c  w    F .text	00000006 sdhc_isr
1fffa924 g     O .bss	00000004 IRRepeatTimeout
000045f0 g     F .text	000000a8 AudioStream::allocate()
0000188c  w    F .text	00000016 TwoWire::peek()
000018a4  w    F .text	00000002 TwoWire::flush()
000060bc g     O .text	00000054 usb_descriptor_list
000027bc g     F .text	00000054 Sd2Card::waitNotBusy(unsigned int)
0000306c  w    F .text	00000006 dma_ch10_isr
00001ed4  w    F .text	00000002 Print::flush()
1fffa374 g     O .bss	00000014 patchCord1
0000306c  w    F .text	00000006 uart0_error_isr
1fffa928 g     O .bss	00000014 patchCord4
000034c8 g     F .text	00000040 usb_malloc
0000306c  w    F .text	00000006 i2s0_isr
20008000 g       .bss	00000000 _estack
00004310 g     F .text	00000034 DMAChannel::release()
00001f2c g     F .text	0000002a File::read()
0000306c  w    F .text	00000006 enet_timer_isr
0000477c g     F .text	00000068 AudioConnection::connect()
000028c8 g     F .text	00000060 Sd2Card::waitStartBlock()
1fffaca8 g     O .bss	00000008 AudioInputPDM::dma
000018a8 g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
1fff94e4 g       .data	00000000 _edata
1fffa644 g     O .bss	00000014 patchCord7
0000306c  w    F .text	00000006 i2s0_tx_isr
0000306c  w    F .text	00000006 adc1_isr
1fff98a0 g     O .bss	00000020 i2s1
0000306c  w    F .text	00000006 cmp0_isr
00004bf0 g     F .text	0000004c ultoa
00005f90 g     O .text	00000018 vtable for SdFile
000051f8 g     F .text	0000003e .hidden __aeabi_f2uiz
000004e4  w    F .text	00000020 ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()
00001fa0 g     F .text	0000001c File::File()
0000190c g     F .text	00000094 TwoWire::begin()
00000e58 g     F .text	0000002a AudioPlaySdWav::begin()
000043c4 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff94dc g     O .data	00000004 __malloc_trim_threshold
000047e4 g     F .text	0000007a AudioConnection::disconnect()
000029e8 g     F .text	000000cc Sd2Card::writeData(unsigned char, unsigned char const*)
00004ea8 g     F .text	00000024 .hidden __floatunsisf
1fffb0f8 g     O .bss	00000001 usb_cdc_transmit_flush_timer
00000a14 g     F .text	00000038 StripLED::StripLED()
1fffb246 g     O .bss	00000002 AudioStream::cpu_cycles_total
0000306c  w    F .text	00000006 pit_isr
000004cc  w    F .text	00000018 AudioPlaySdWav::~AudioPlaySdWav()
00002810 g     F .text	000000b8 Sd2Card::cardCommand(unsigned char, unsigned long)
0000200c g     F .text	00000054 SdVolume::cacheFlush()
00005c5c  w    O .text	0000000c vtable for ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>
0000306c  w    F .text	00000006 dac0_isr
00006120 g       .text	00000000 __init_array_start
0000306c  w    F .text	00000006 can1_tx_warn_isr
000051f8 g     F .text	0000003e .hidden __fixunssfsi
00002928 g     F .text	000000c0 Sd2Card::SD_readBlock(unsigned long, unsigned char*)
00004a60 g     F .text	0000010c uart0_status_isr
000014c0 g     F .text	00000104 AudioOutputI2S::isr()
0000306c  w    F .text	00000006 mcg_isr
0000165c g     F .text	000000f8 AudioOutputI2S::config_i2s()
00000400 g     O .text	00000010 flashconfigbytes
00000958 g     F .text	00000038 Thunder::Thunder(char const*, StripCommand*)
00004248 g     F .text	000000c8 DMAChannel::begin(bool)
1fff8c70 g     O .data	00000016 usb_string_product_name_default
1fffac8c g     O .bss	00000008 AudioOutputI2SQuad::dma
0000306c  w    F .text	00000006 dma_ch1_isr
1fffa630 g     O .bss	00000014 patchCord6
00002d32 g     F .text	00000000 memcpy_tointerleaveR
0000306c  w    F .text	00000006 dma_ch5_isr
0000306c  w    F .text	00000006 can0_rx_warn_isr
0000306c  w    F .text	00000006 can0_tx_warn_isr
0000306c  w    F .text	00000006 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
1fffac64 g     O .bss	00000008 AudioInputAnalog::dma
1fffb240 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00006120 g       .text	00000000 __preinit_array_start
00005c50  w    O .text	0000000c vtable for AudioStream
00004d38  w    F .text	00000002 serialEvent3()
00005238 g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00005e78 g     O .text	0000000c vtable for AudioPlaySdWav
0000306c  w    F .text	00000006 cmp2_isr
00004d48 g     F .text	00000160 .hidden __addsf3
1fffa94c g     O .bss	00000038 mixer1
00004408 g     F .text	00000004 pendablesrvreq_isr
0000185c  w    F .text	00000004 Print::availableForWrite()
000004c0  w    F .text	0000000c AudioConnection::~AudioConnection()
1fff8b54 g     O .data	00000050 isr_table_portB
0000306c  w    F .text	00000006 wakeup_isr
00000958 g     F .text	00000038 Thunder::Thunder(char const*, StripCommand*)
1fffa370 g     O .bss	00000004 RefreshOutputTimer
0000306c  w    F .text	00000006 cmp3_isr
000052bc g     F .text	00000010 free
1fffaf44 g     O .bss	00000001 SdVolume::cacheDirty_
0000306c  w    F .text	00000006 tpm2_isr
0000306c  w    F .text	00000006 dma_ch0_isr
1fff8c8c  w    O .data	00000016 usb_string_serial_number
0000306c  w    F .text	00000006 enet_tx_isr
1fffa900 g     O .bss	00000001 IR



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ....m0..%0..
      10:	%0..%0..%0..%0..
      20:	%0..%0..%0..m0..
      30:	m0..%0...D...E..
      40:	m0..m0..m0..m0..
      50:	m0..m0..m0..m0..
      60:	m0..m0..m0..m0..
      70:	m0..m0..m0..m0..
      80:	m0..m0..m0..m0..
      90:	m0..m0..m0..m0..
      a0:	A...M...m0..m0..
      b0:	m0..m0..m0..m0..
      c0:	m0..m0..m0..m0..
      d0:	m0..m0..m0..m0..
      e0:	m0..m0..m0..m0..
      f0:	m0..aJ..m0..5I..
     100:	m0..]L..m0..m0..
     110:	m0..m0..m0..m0..
     120:	m0..m0..m0..m0..
     130:	m0..m0..m0..m0..
     140:	m0..a+..m0..m0..
     150:	m0..m0..m0..m0..
     160:	m0...6..m0..m0..
     170:	m0..m0..m0..m0..
     180:	m0..m0..m0..m0..
     190:	m0..m0..m0..m0..
     1a0:	m0..m0..m0..m0..
     1b0:	m0..m0...H..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	movw	r2, #55592	; 0xd928
     1ca:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	nop
	__asm__ volatile ("nop");
     1ce:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	bl	3074 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	mov.w	r2, #150994944	; 0x9000000
     1da:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	ldr	r3, [r2, #0]
     1e8:	ands.w	r3, r3, #256	; 0x100
     1ec:	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	mov.w	r3, #5376	; 0x1500
     1f6:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	ldrb	r2, [r3, #0]
     1fc:	lsls	r1, r2, #28
     1fe:	bpl.n	208 <ResetHandler+0x4c>
     200:	ldrb	r2, [r3, #0]
     202:	orr.w	r2, r2, #8
     206:	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	movs	r2, #42	; 0x2a
     20e:	strb	r2, [r3, #0]
     210:	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	cmp	r3, r1
     216:	bcs.n	222 <ResetHandler+0x66>
     218:	ldr.w	r0, [r2, #4]!
     21c:	str.w	r0, [r3], #4
     220:	b.n	214 <ResetHandler+0x58>
     222:	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	movs	r2, #0
     228:	cmp	r3, r1
     22a:	bcs.n	232 <ResetHandler+0x76>
     22c:	str.w	r2, [r3], #4
     230:	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	movs	r3, #0
     238:	ldr.w	r0, [r2, r3, lsl #2]
     23c:	str.w	r0, [r1, r3, lsl #2]
     240:	adds	r3, #1
     242:	cmp	r3, #111	; 0x6f
     244:	bne.n	238 <ResetHandler+0x7c>
     246:	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	movs	r1, #128	; 0x80
     24c:	strb.w	r1, [r3], #1
     250:	cmp	r3, r2
     252:	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	movs	r2, #138	; 0x8a
     25e:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	sub.w	r3, r3, #4096	; 0x1000
     264:	movs	r2, #36	; 0x24
     266:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	movs	r2, #160	; 0xa0
     26a:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	ldrb	r2, [r3, #6]
     26e:	lsls	r2, r2, #30
     270:	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	ldrb	r2, [r3, #6]
     274:	lsls	r4, r2, #27
     276:	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	ldrb	r3, [r2, #6]
     27c:	and.w	r3, r3, #12
     280:	cmp	r3, #8
     282:	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	movs	r2, #3
     288:	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	movs	r2, #64	; 0x40
     28c:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r0, r2, #26
     292:	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	ldrb	r1, [r2, #6]
     298:	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	lsls	r1, r1, #25
     29c:	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	movs	r1, #2
     2a6:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	movs	r2, #32
     2aa:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	ldrb	r2, [r3, #6]
     2ae:	and.w	r2, r2, #12
     2b2:	cmp	r2, #12
     2b4:	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	movs	r2, #0
     2c4:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	movs	r2, #7
     2c8:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	bl	33e8 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	ldr	r3, [r3, #0]
     2dc:	lsls	r2, r3, #31
     2de:	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	bl	32f4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	ldrb	r3, [r3, #0]
     2f0:	lsls	r3, r3, #25
     2f2:	bpl.n	308 <ResetHandler+0x14c>
     2f4:	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	ldr	r2, [r4, #0]
     2fa:	cmp	r2, r3
     2fc:	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	bl	32f4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	movs	r3, #0
     306:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	bl	525c <__libc_init_array>

	startup_late_hook();
     30c:	bl	3080 <startup_late_hook>
	main();
     310:	bl	45ec <main>
     314:	b.n	314 <ResetHandler+0x158>
     316:	nop
     318:	.word	0x4005200e
     31c:	.word	0x40048030
     320:	.word	0x00043f82
     324:	.word	0x2b000001
     328:	.word	0x4003d010
     32c:	.word	0x4003d014
     330:	.word	0x4007d002
     334:	.word	0x4007e000
     338:	.word	0x1fff94e4
     33c:	.word	0x00006170
     340:	.word	0x1fff8920
     344:	.word	0x1fff94e4
     348:	.word	0x1fffb420
     34c:	.word	0x1fff8400
     350:	.word	0x00000000
     354:	.word	0xe000e400
     358:	.word	0xe000e45f
     35c:	.word	0xe000ed08
     360:	.word	0x40065000
     364:	.word	0x40064000
     368:	.word	0x40048044
     36c:	.word	0x01030000
     370:	.word	0x40048004
     374:	.word	0x000510c0
     378:	.word	0xe000e014
     37c:	.word	0x000176ff
     380:	.word	0x20200000
     384:	.word	0x00000031
     388:	.word	0x4003e01c
     38c:	.word	0x5a94c3a5
     390:	.word	0x4007f000
     394:	.word	0xffffffff
     398:	.word	0xffffffff
     39c:	.word	0xffffffff
     3a0:	.word	0xffffffff
     3a4:	.word	0xffffffff
     3a8:	.word	0xffffffff
     3ac:	.word	0xffffffff
     3b0:	.word	0xffffffff
     3b4:	.word	0xffffffff
     3b8:	.word	0xffffffff
     3bc:	.word	0xffffffff
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff94e4
     42c:	.word	0x00000000
     430:	.word	0x00006174

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff94e8
     460:	.word	0x00006174
     464:	.word	0x1fff94e4
     468:	.word	0x00000000

0000046c <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)>:
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     46c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     470:	ldr	r4, [r0, #8]
     472:	cbz	r4, 492 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)+0x26>
     474:	ldr	r3, [r4, #8]
     476:	ldr	r5, [r4, #4]
     478:	adds	r3, #3
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
     47a:	bic.w	r3, r3, #3
    case JSON_UNDEFINED:
      return 0;
     47e:	adds	r2, r1, r3
      StripCommander.fadeToHSV(root["H"], root["S"], root["V"], root["Delay"]);
    }
    else if (strcmp(method, "setToRGB") == 0) //{method:setToRGB,R:255,G:100,B:0}
    {
      Serial.println("set to RGB value");
      StripCommander.setToRGB(root["R"], root["G"], root["B"]);
     480:	cmp	r2, r5
     482:	str	r3, [r4, #8]
     484:	bhi.n	492 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)+0x26>
     486:	add.w	r0, r4, #12
     48a:	str	r2, [r4, #8]
      LastFrameShowed = false;
     48c:	add	r0, r3
     48e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else
    {
      Serial.println("ca ne marche pas ^^");
    }
  }
}
     492:	ldr	r7, [r0, #12]
     494:	cmp	r1, r7
     496:	mov	r8, r1
     498:	it	cc
     49a:	movcc	r8, r7
     49c:	mov	r5, r0
     49e:	add.w	r0, r8, #12
     4a2:	mov	r6, r1
     4a4:	bl	52ac <malloc>
      return _ptr[1];
    }
  };

  static bool equals(const TChar* str, const char* expected) {
    return strcmp(reinterpret_cast<const char*>(str), expected) == 0;
     4a8:	cbz	r0, 4bc <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)+0x50>
     4aa:	lsls	r7, r7, #1
     4ac:	stmia.w	r0, {r4, r8}
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
     4b0:	str	r0, [r5, #8]
     4b2:	str	r6, [r0, #8]
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     4b4:	str	r7, [r5, #12]
     4b6:	adds	r0, #12
     4b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000004c0 <AudioConnection::~AudioConnection()>:
     4c0:	push	{r4, lr}
     4c2:	mov	r4, r0
     4c4:	bl	47e4 <AudioConnection::disconnect()>
     4c8:	mov	r0, r4
     4ca:	pop	{r4, pc}

000004cc <AudioPlaySdWav::~AudioPlaySdWav()>:
     4cc:	push	{r4, lr}
     4ce:	ldr	r3, [pc, #16]	; (4e0 <AudioPlaySdWav::~AudioPlaySdWav()+0x14>)
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     4d0:	mov	r4, r0
     4d2:	str.w	r3, [r0], #24
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     4d6:	bl	1fbc <File::~File()>
     4da:	mov	r0, r4
      if (!strcmp("true", _content.asString)) return 1;
     4dc:	pop	{r4, pc}
     4de:	nop
     4e0:	.word	0x00005e80

000004e4 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()>:
     4e4:	push	{r3, r4, r5, lr}
     4e6:	mov	r5, r0
     4e8:	ldr	r0, [r0, #8]
     4ea:	ldr	r3, [pc, #20]	; (500 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()+0x1c>)
     4ec:	str	r3, [r5, #0]
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     4ee:	cbz	r0, 4fc <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()+0x18>
     4f0:	ldr	r4, [r0, #0]
     4f2:	bl	52bc <free>
     4f6:	mov	r0, r4
     4f8:	cmp	r4, #0
     4fa:	bne.n	4f0 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()+0xc>
     4fc:	mov	r0, r5
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     4fe:	pop	{r3, r4, r5, pc}
     500:	.word	0x00005c64

00000504 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     504:	movs	r3, #0
     506:	push	{r4}
     508:	ldr	r4, [pc, #64]	; (54c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x48>)
      if (!strcmp("true", _content.asString)) return 1;
     50a:	strb	r1, [r0, #9]
     50c:	str	r2, [r0, #16]
     50e:	str	r4, [r0, #0]
     510:	strb	r3, [r0, #8]
     512:	str	r3, [r0, #12]
     514:	cbz	r1, 528 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
     516:	mov	r1, r3
     518:	b.n	51c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
     51a:	ldr	r2, [r0, #16]
     51c:	str.w	r1, [r2, r3, lsl #2]
     520:	ldrb	r2, [r0, #9]
     522:	adds	r3, #1
     524:	cmp	r2, r3
     526:	bgt.n	51a <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x16>
     528:	ldr	r3, [pc, #36]	; (550 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4c>)
     52a:	ldr	r2, [r3, #0]
     52c:	cbnz	r2, 532 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
     52e:	b.n	548 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x44>
     530:	mov	r2, r3
     532:	ldr	r3, [r2, #20]
     534:	cmp	r3, #0
     536:	bne.n	530 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2c>
     538:	str	r0, [r2, #20]
     53a:	movs	r3, #0
     53c:	str	r3, [r0, #20]
     53e:	strh	r3, [r0, #4]
     540:	strh	r3, [r0, #6]
     542:	strb	r3, [r0, #10]
     544:	pop	{r4}
     546:	bx	lr
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     548:	str	r0, [r3, #0]
     54a:	b.n	53a <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x36>
     54c:	.word	0x00005c58
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     550:	.word	0x1fffb218

00000554 <AudioPlaySdWav::AudioPlaySdWav()>:
     554:	ldr	r1, [pc, #72]	; (5a0 <AudioPlaySdWav::AudioPlaySdWav()+0x4c>)
     556:	ldr	r2, [r1, #0]
      if (!strcmp("true", _content.asString)) return 1;
     558:	push	{r3, r4, r5, lr}
     55a:	movs	r3, #0
     55c:	ldr	r5, [pc, #68]	; (5a4 <AudioPlaySdWav::AudioPlaySdWav()+0x50>)
     55e:	str	r5, [r0, #0]
     560:	mov	r4, r0
     562:	strb	r3, [r0, #9]
     564:	str	r3, [r0, #16]
     566:	strb	r3, [r0, #8]
     568:	str	r3, [r0, #12]
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     56a:	cbnz	r2, 570 <AudioPlaySdWav::AudioPlaySdWav()+0x1c>
     56c:	b.n	59c <AudioPlaySdWav::AudioPlaySdWav()+0x48>
     56e:	mov	r2, r3
     570:	ldr	r3, [r2, #20]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     572:	cmp	r3, #0
     574:	bne.n	56e <AudioPlaySdWav::AudioPlaySdWav()+0x1a>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     576:	str	r4, [r2, #20]
     578:	mov	r0, r4
     57a:	movs	r5, #0
     57c:	ldr	r3, [pc, #40]	; (5a8 <AudioPlaySdWav::AudioPlaySdWav()+0x54>)
      if (!strcmp("true", _content.asString)) return 1;
     57e:	str	r5, [r4, #20]
     580:	strh	r5, [r4, #4]
     582:	strh	r5, [r4, #6]
     584:	strb	r5, [r4, #10]
     586:	str.w	r3, [r0], #24
     58a:	bl	1fa0 <File::File()>
     58e:	mov	r0, r4
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     590:	str	r5, [r4, #108]	; 0x6c
     592:	str	r5, [r4, #112]	; 0x70
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
     594:	bl	e58 <AudioPlaySdWav::begin()>
     598:	mov	r0, r4
  bool operator!=(const ListIterator<T> &other) const {
    return _node != other._node;
  }

  ListIterator<T> &operator++() {
    if (_node) _node = _node->next;
     59a:	pop	{r3, r4, r5, pc}
     59c:	str	r0, [r1, #0]
     59e:	b.n	578 <AudioPlaySdWav::AudioPlaySdWav()+0x24>
     5a0:	.word	0x1fffb218
     5a4:	.word	0x00005c58
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
     5a8:	.word	0x00005e80

000005ac <_GLOBAL__sub_I_IRcmdCommands>:
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     5ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5b0:	movs	r1, #8
     5b2:	sub	sp, #20
     5b4:	ldr	r0, [pc, #780]	; (8c4 <_GLOBAL__sub_I_IRcmdCommands+0x318>)
     5b6:	ldr	r7, [pc, #784]	; (8c8 <_GLOBAL__sub_I_IRcmdCommands+0x31c>)
     5b8:	ldr	r6, [pc, #784]	; (8cc <_GLOBAL__sub_I_IRcmdCommands+0x320>)
     5ba:	ldr	r5, [pc, #788]	; (8d0 <_GLOBAL__sub_I_IRcmdCommands+0x324>)
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
     5bc:	ldr.w	r9, [pc, #872]	; 928 <_GLOBAL__sub_I_IRcmdCommands+0x37c>
     5c0:	bl	2b50 <IRrecv::IRrecv(int)>
    {
      StripCommander.fadeToRGB(root["R"], root["G"], root["B"], root["Delay"]);
    }
    else if (strcmp(method, "fadeToHSV") == 0) //{method:fadeToHSV,H:160,S:255,V:255,Delay:2000}
    {
      StripCommander.fadeToHSV(root["H"], root["S"], root["V"], root["Delay"]);
     5c4:	ldr	r0, [pc, #780]	; (8d4 <_GLOBAL__sub_I_IRcmdCommands+0x328>)
     5c6:	bl	990 <StripCommand::StripCommand()>
     5ca:	ldr	r2, [pc, #776]	; (8d4 <_GLOBAL__sub_I_IRcmdCommands+0x328>)
     5cc:	ldr	r1, [pc, #776]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     5ce:	ldr	r0, [pc, #780]	; (8dc <_GLOBAL__sub_I_IRcmdCommands+0x330>)
     5d0:	bl	958 <Thunder::Thunder(char const*, StripCommand*)>
    else
    {
      Serial.println("ca ne marche pas ^^");
    }
  }
}
     5d4:	ldr	r2, [pc, #764]	; (8d4 <_GLOBAL__sub_I_IRcmdCommands+0x328>)
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     5d6:	ldr	r1, [pc, #768]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     5d8:	ldr	r0, [pc, #772]	; (8e0 <_GLOBAL__sub_I_IRcmdCommands+0x334>)
     5da:	bl	958 <Thunder::Thunder(char const*, StripCommand*)>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     5de:	ldr	r2, [pc, #772]	; (8e4 <_GLOBAL__sub_I_IRcmdCommands+0x338>)
     5e0:	ldr	r3, [pc, #772]	; (8e8 <_GLOBAL__sub_I_IRcmdCommands+0x33c>)
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     5e2:	ldr	r1, [r2, #0]
     5e4:	str	r1, [sp, #8]
     5e6:	ldr	r4, [sp, #8]
     5e8:	ldr	r2, [r2, #0]
      if (!strcmp("true", _content.asString)) return 1;
     5ea:	str	r2, [sp, #12]
     5ec:	ldr	r1, [pc, #764]	; (8ec <_GLOBAL__sub_I_IRcmdCommands+0x340>)
     5ee:	ldr	r0, [sp, #12]
     5f0:	ldr	r2, [pc, #764]	; (8f0 <_GLOBAL__sub_I_IRcmdCommands+0x344>)
     5f2:	str	r0, [r1, #0]
     5f4:	mov.w	r1, #256	; 0x100
     5f8:	str	r1, [r3, #12]
     5fa:	mov	r0, r3
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     5fc:	mov.w	r8, #0
     600:	str	r4, [r2, #0]
     602:	ldr	r1, [pc, #752]	; (8f4 <_GLOBAL__sub_I_IRcmdCommands+0x348>)
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     604:	ldr	r2, [pc, #752]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     606:	ldr	r4, [pc, #756]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     608:	str	r4, [r3, #0]
     60a:	str.w	r8, [r3, #8]
      if (!strcmp("true", _content.asString)) return 1;
     60e:	bl	5238 <__aeabi_atexit>
     612:	ldr	r0, [pc, #748]	; (900 <_GLOBAL__sub_I_IRcmdCommands+0x354>)
     614:	bl	554 <AudioPlaySdWav::AudioPlaySdWav()>
     618:	ldr	r2, [pc, #732]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     61a:	ldr	r1, [pc, #744]	; (904 <_GLOBAL__sub_I_IRcmdCommands+0x358>)
     61c:	ldr	r0, [pc, #736]	; (900 <_GLOBAL__sub_I_IRcmdCommands+0x354>)
     61e:	bl	5238 <__aeabi_atexit>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     622:	ldr	r0, [pc, #740]	; (908 <_GLOBAL__sub_I_IRcmdCommands+0x35c>)
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     624:	bl	554 <AudioPlaySdWav::AudioPlaySdWav()>
     628:	ldr	r2, [pc, #716]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     62a:	ldr	r1, [pc, #728]	; (904 <_GLOBAL__sub_I_IRcmdCommands+0x358>)
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     62c:	ldr	r0, [pc, #728]	; (908 <_GLOBAL__sub_I_IRcmdCommands+0x35c>)
     62e:	bl	5238 <__aeabi_atexit>
     632:	ldr	r0, [pc, #728]	; (90c <_GLOBAL__sub_I_IRcmdCommands+0x360>)
      if (!strcmp("true", _content.asString)) return 1;
     634:	bl	554 <AudioPlaySdWav::AudioPlaySdWav()>
     638:	ldr	r2, [pc, #700]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     63a:	ldr	r1, [pc, #712]	; (904 <_GLOBAL__sub_I_IRcmdCommands+0x358>)
     63c:	ldr	r0, [pc, #716]	; (90c <_GLOBAL__sub_I_IRcmdCommands+0x360>)
     63e:	bl	5238 <__aeabi_atexit>
     642:	ldr	r0, [pc, #716]	; (910 <_GLOBAL__sub_I_IRcmdCommands+0x364>)
     644:	bl	554 <AudioPlaySdWav::AudioPlaySdWav()>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     648:	ldr	r2, [pc, #684]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     64a:	ldr	r1, [pc, #696]	; (904 <_GLOBAL__sub_I_IRcmdCommands+0x358>)
     64c:	ldr	r0, [pc, #704]	; (910 <_GLOBAL__sub_I_IRcmdCommands+0x364>)
     64e:	bl	5238 <__aeabi_atexit>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     652:	add.w	r2, r7, #40	; 0x28
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     656:	movs	r1, #4
     658:	mov	r0, r7
     65a:	bl	504 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
      if (!strcmp("true", _content.asString)) return 1;
     65e:	mov.w	r4, #65536	; 0x10000
     662:	add.w	r2, r6, #40	; 0x28
     666:	movs	r1, #4
     668:	mov	r0, r6
     66a:	str	r4, [r7, #24]
     66c:	str	r4, [r7, #28]
     66e:	str	r4, [r7, #32]
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     670:	str	r4, [r7, #36]	; 0x24
     672:	str.w	r9, [r7]
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     676:	bl	504 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     67a:	ldr.w	lr, [pc, #688]	; 92c <_GLOBAL__sub_I_IRcmdCommands+0x380>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     67e:	str	r4, [r6, #24]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     680:	movs	r0, #2
     682:	add.w	r2, r5, #24
     686:	str	r4, [r6, #28]
      if (!strcmp("true", _content.asString)) return 1;
     688:	str	r4, [r6, #32]
     68a:	str	r4, [r6, #36]	; 0x24
     68c:	mov	r3, r8
     68e:	str.w	r9, [r6]
     692:	mov	r1, r8
     694:	strb.w	r8, [r5, #8]
     698:	str.w	r8, [r5, #12]
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     69c:	str.w	lr, [r5]
     6a0:	strb	r0, [r5, #9]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     6a2:	str	r2, [r5, #16]
     6a4:	mov	r4, r5
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     6a6:	b.n	6aa <_GLOBAL__sub_I_IRcmdCommands+0xfe>
     6a8:	ldr	r2, [r4, #16]
     6aa:	str.w	r1, [r2, r3, lsl #2]
      if (!strcmp("true", _content.asString)) return 1;
     6ae:	ldrb	r2, [r5, #9]
     6b0:	ldr	r0, [pc, #540]	; (8d0 <_GLOBAL__sub_I_IRcmdCommands+0x324>)
     6b2:	adds	r3, #1
     6b4:	cmp	r2, r3
     6b6:	bgt.n	6a8 <_GLOBAL__sub_I_IRcmdCommands+0xfc>
     6b8:	ldr	r3, [pc, #600]	; (914 <_GLOBAL__sub_I_IRcmdCommands+0x368>)
     6ba:	ldr	r2, [r3, #0]
     6bc:	cbnz	r2, 6c2 <_GLOBAL__sub_I_IRcmdCommands+0x116>
     6be:	b.n	8c0 <_GLOBAL__sub_I_IRcmdCommands+0x314>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     6c0:	mov	r2, r3
     6c2:	ldr	r3, [r2, #20]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     6c4:	cmp	r3, #0
     6c6:	bne.n	6c0 <_GLOBAL__sub_I_IRcmdCommands+0x114>
     6c8:	str	r5, [r2, #20]
     6ca:	ldr.w	sl, [pc, #612]	; 930 <_GLOBAL__sub_I_IRcmdCommands+0x384>
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     6ce:	ldr	r3, [pc, #584]	; (918 <_GLOBAL__sub_I_IRcmdCommands+0x36c>)
     6d0:	ldr	r0, [pc, #508]	; (8d0 <_GLOBAL__sub_I_IRcmdCommands+0x324>)
     6d2:	str	r3, [r5, #0]
      if (!strcmp("true", _content.asString)) return 1;
     6d4:	movs	r4, #0
     6d6:	str	r4, [r5, #20]
     6d8:	strh	r4, [r5, #4]
     6da:	strh	r4, [r5, #6]
     6dc:	strb	r4, [r5, #10]
     6de:	bl	1754 <AudioOutputI2S::begin()>
     6e2:	ldr	r3, [pc, #540]	; (900 <_GLOBAL__sub_I_IRcmdCommands+0x354>)
     6e4:	ldr.w	fp, [pc, #588]	; 934 <_GLOBAL__sub_I_IRcmdCommands+0x388>
     6e8:	str.w	r3, [sl]
     6ec:	mov	r0, sl
     6ee:	strb.w	r4, [sl, #8]
     6f2:	str.w	r7, [sl, #4]
     6f6:	strb.w	r4, [sl, #9]
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
     6fa:	str.w	r4, [sl, #12]
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     6fe:	strb.w	r4, [sl, #16]
     702:	bl	477c <AudioConnection::connect()>
     706:	ldr	r2, [pc, #496]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     708:	ldr	r1, [pc, #528]	; (91c <_GLOBAL__sub_I_IRcmdCommands+0x370>)
     70a:	ldr.w	r9, [pc, #556]	; 938 <_GLOBAL__sub_I_IRcmdCommands+0x38c>
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
     70e:	ldr.w	r8, [pc, #556]	; 93c <_GLOBAL__sub_I_IRcmdCommands+0x390>
    case JSON_UNDEFINED:
      return 0;
     712:	mov	r0, sl
      LastFrameShowed = false;
    }
    else if (strcmp(method, "setToHSV") == 0) //{method:setToHSV,H:255,S:100,V:0}
    {
      Serial.println("set to HSV value");
      StripCommander.setToHSV(root["H"], root["S"], root["V"]);
     714:	bl	5238 <__aeabi_atexit>
     718:	ldr	r3, [pc, #484]	; (900 <_GLOBAL__sub_I_IRcmdCommands+0x354>)
     71a:	strb.w	r4, [fp, #9]
     71e:	mov.w	sl, #1
      LastFrameShowed = false;
     722:	mov	r0, fp
     724:	stmia.w	fp, {r3, r6}
    else
    {
      Serial.println("ca ne marche pas ^^");
    }
  }
}
     728:	str.w	r4, [fp, #12]
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     72c:	strb.w	r4, [fp, #16]
     730:	strb.w	sl, [fp, #8]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     734:	bl	477c <AudioConnection::connect()>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     738:	ldr	r2, [pc, #444]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     73a:	ldr	r1, [pc, #480]	; (91c <_GLOBAL__sub_I_IRcmdCommands+0x370>)
     73c:	mov	r0, fp
      if (!strcmp("true", _content.asString)) return 1;
     73e:	bl	5238 <__aeabi_atexit>
     742:	ldr	r3, [pc, #452]	; (908 <_GLOBAL__sub_I_IRcmdCommands+0x35c>)
     744:	str.w	r3, [r9]
     748:	mov	r0, r9
     74a:	strb.w	r4, [r9, #8]
     74e:	str.w	r7, [r9, #4]
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     752:	strb.w	sl, [r9, #9]
     756:	str.w	r4, [r9, #12]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     75a:	strb.w	r4, [r9, #16]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     75e:	bl	477c <AudioConnection::connect()>
      if (!strcmp("true", _content.asString)) return 1;
     762:	ldr	r2, [pc, #404]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     764:	ldr	r1, [pc, #436]	; (91c <_GLOBAL__sub_I_IRcmdCommands+0x370>)
     766:	ldr.w	fp, [pc, #472]	; 940 <_GLOBAL__sub_I_IRcmdCommands+0x394>
     76a:	mov	r0, r9
     76c:	bl	5238 <__aeabi_atexit>
     770:	ldr	r3, [pc, #404]	; (908 <_GLOBAL__sub_I_IRcmdCommands+0x35c>)
     772:	strb.w	sl, [r8, #8]
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     776:	stmia.w	r8, {r3, r7}
     77a:	mov	r0, r8
      if (!strcmp("true", _content.asString)) return 1;
     77c:	mov.w	r3, #2
     780:	strb.w	r3, [r8, #9]
     784:	str.w	r4, [r8, #12]
     788:	strb.w	r4, [r8, #16]
     78c:	bl	477c <AudioConnection::connect()>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     790:	ldr	r2, [pc, #356]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     792:	ldr	r1, [pc, #392]	; (91c <_GLOBAL__sub_I_IRcmdCommands+0x370>)
     794:	ldr.w	r9, [pc, #376]	; 910 <_GLOBAL__sub_I_IRcmdCommands+0x364>
     798:	mov	r0, r8
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     79a:	bl	5238 <__aeabi_atexit>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     79e:	ldr.w	r8, [pc, #420]	; 944 <_GLOBAL__sub_I_IRcmdCommands+0x398>
     7a2:	strb.w	r4, [fp, #8]
     7a6:	movs	r3, #3
     7a8:	mov	r0, fp
     7aa:	strb.w	r3, [fp, #9]
     7ae:	str	r3, [sp, #4]
     7b0:	str.w	r7, [fp, #4]
     7b4:	str.w	r4, [fp, #12]
     7b8:	strb.w	r4, [fp, #16]
     7bc:	str.w	r9, [fp]
     7c0:	bl	477c <AudioConnection::connect()>
     7c4:	ldr	r2, [pc, #304]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     7c6:	ldr	r1, [pc, #340]	; (91c <_GLOBAL__sub_I_IRcmdCommands+0x370>)
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
     7c8:	mov	r0, fp
     7ca:	bl	5238 <__aeabi_atexit>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     7ce:	ldr.w	fp, [pc, #376]	; 948 <_GLOBAL__sub_I_IRcmdCommands+0x39c>
     7d2:	ldr	r3, [sp, #4]
     7d4:	strb.w	r3, [r8, #9]
     7d8:	mov	r0, r8
     7da:	str.w	r9, [r8]
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
     7de:	str.w	r6, [r8, #4]
     7e2:	strb.w	sl, [r8, #8]
        StripCommander.flash(random(0, NUM_LEDS));
      }
    }
    else if (strcmp(method, "groupFlash") == 0) //{method:groupFlash,Group:0,Direction:1}
    {
      StripCommander.groupFlash(root["Group"], root["Direction"]);
     7e6:	str.w	r4, [r8, #12]
     7ea:	strb.w	r4, [r8, #16]
     7ee:	bl	477c <AudioConnection::connect()>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     7f2:	ldr	r2, [pc, #260]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     7f4:	ldr	r1, [pc, #292]	; (91c <_GLOBAL__sub_I_IRcmdCommands+0x370>)
     7f6:	ldr.w	r9, [pc, #340]	; 94c <_GLOBAL__sub_I_IRcmdCommands+0x3a0>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     7fa:	mov	r0, r8
     7fc:	bl	5238 <__aeabi_atexit>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     800:	ldr.w	r8, [pc, #264]	; 90c <_GLOBAL__sub_I_IRcmdCommands+0x360>
     804:	strb.w	r4, [fp, #8]
      if (!strcmp("true", _content.asString)) return 1;
     808:	mov	r0, fp
     80a:	str.w	r6, [fp, #4]
     80e:	strb.w	sl, [fp, #9]
     812:	str.w	r4, [fp, #12]
     816:	strb.w	r4, [fp, #16]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     81a:	str.w	r8, [fp]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     81e:	bl	477c <AudioConnection::connect()>
      if (!strcmp("true", _content.asString)) return 1;
     822:	ldr	r2, [pc, #212]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     824:	ldr	r1, [pc, #244]	; (91c <_GLOBAL__sub_I_IRcmdCommands+0x370>)
     826:	mov	r0, fp
     828:	bl	5238 <__aeabi_atexit>
     82c:	ldr.w	fp, [pc, #288]	; 950 <_GLOBAL__sub_I_IRcmdCommands+0x3a4>
     830:	str.w	r8, [r9]
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     834:	mov.w	r3, #2
      }
}

void startTHunder()
{
  T1.trig(&ThunderCenter);
     838:	mov	r0, r9
     83a:	strb.w	r3, [r9, #9]
     83e:	str.w	r6, [r9, #4]
    {
      StripCommander.groupFlash(root["Group"], root["Direction"]);
    }
    else if (strcmp(method, "rdmGroupFlash") == 0) //{method:rdmGroupFlash}
    {
      StripCommander.groupFlash();
     842:	strb.w	sl, [r9, #8]
     846:	str.w	r4, [r9, #12]
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
    default:
      return static_cast<T>(_content.asFloat);
     84a:	strb.w	r4, [r9, #16]
     84e:	bl	477c <AudioConnection::connect()>
     852:	ldr	r2, [pc, #164]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    }
    else if (strcmp(method, "rain") == 0) //{method:rain}
    {
      toggleRain();
     854:	ldr	r1, [pc, #196]	; (91c <_GLOBAL__sub_I_IRcmdCommands+0x370>)
     856:	ldr.w	r8, [pc, #252]	; 954 <_GLOBAL__sub_I_IRcmdCommands+0x3a8>
     85a:	mov	r0, r9
     85c:	bl	5238 <__aeabi_atexit>
     860:	mov	r0, fp
     862:	strb.w	r4, [fp, #8]
     866:	str.w	r7, [fp]
     86a:	str.w	r5, [fp, #4]
     86e:	strb.w	r4, [fp, #9]
     872:	str.w	r4, [fp, #12]
     876:	strb.w	r4, [fp, #16]
     87a:	bl	477c <AudioConnection::connect()>
     87e:	ldr	r2, [pc, #120]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     880:	ldr	r1, [pc, #152]	; (91c <_GLOBAL__sub_I_IRcmdCommands+0x370>)
     882:	mov	r0, fp
     884:	bl	5238 <__aeabi_atexit>
     888:	mov	r0, r8
     88a:	strb.w	sl, [r8, #9]
     88e:	str.w	r6, [r8]
     892:	str.w	r5, [r8, #4]
     896:	strb.w	r4, [r8, #8]
     89a:	str.w	r4, [r8, #12]
     89e:	strb.w	r4, [r8, #16]
     8a2:	bl	477c <AudioConnection::connect()>
     8a6:	mov	r0, r8
     8a8:	ldr	r2, [pc, #76]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     8aa:	ldr	r1, [pc, #112]	; (91c <_GLOBAL__sub_I_IRcmdCommands+0x370>)
     8ac:	bl	5238 <__aeabi_atexit>
     8b0:	ldr	r3, [pc, #108]	; (920 <_GLOBAL__sub_I_IRcmdCommands+0x374>)
     8b2:	ldr	r2, [pc, #112]	; (924 <_GLOBAL__sub_I_IRcmdCommands+0x378>)
     8b4:	str	r2, [r3, #0]
     8b6:	movs	r2, #10
     8b8:	strb	r2, [r3, #8]
     8ba:	add	sp, #20
     8bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8c0:	str	r0, [r3, #0]
     8c2:	b.n	6ca <_GLOBAL__sub_I_IRcmdCommands+0x11e>
     8c4:	.word	0x1fffa900
     8c8:	.word	0x1fffa94c
     8cc:	.word	0x1fffa984
     8d0:	.word	0x1fff98a0
     8d4:	.word	0x1fff98d4
     8d8:	.word	0x00005e04
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
     8dc:	.word	0x1fff9780
     8e0:	.word	0x1fff9810
     8e4:	.word	0x1fffb108
     8e8:	.word	0x1fffa93c
     8ec:	.word	0x1fffa924
     8f0:	.word	0x1fffa370
     8f4:	.word	0x000004e5
     8f8:	.word	0x1fff89fc
     8fc:	.word	0x00005c64
     900:	.word	0x1fffa680
     904:	.word	0x000004cd
     908:	.word	0x1fffa9bc
     90c:	.word	0x1fff9500
     910:	.word	0x1fffa3b0
    default:
      return static_cast<T>(_content.asFloat);
     914:	.word	0x1fffb218
     918:	.word	0x00005e8c
     91c:	.word	0x000004c1
     920:	.word	0x1fffa904
     924:	.word	0x00005e58
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
     928:	.word	0x00005e74
     92c:	.word	0x00005c58
     930:	.word	0x1fffa374
     934:	.word	0x1fffa388
     938:	.word	0x1fffa39c
     93c:	.word	0x1fffa928
     940:	.word	0x1fffa910
     944:	.word	0x1fffa630
     948:	.word	0x1fffa644
     94c:	.word	0x1fffa658
     950:	.word	0x1fff98c0
     954:	.word	0x1fffa66c

00000958 <Thunder::Thunder(char const*, StripCommand*)>:
#include "Thunder.h"

Thunder::Thunder(const char *FileName, StripCommand *_stripCommander)
     958:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     95a:	ldr	r3, [pc, #48]	; (98c <Thunder::Thunder(char const*, StripCommand*)+0x34>)
     95c:	sub	sp, #8
     95e:	ldr	r3, [r3, #0]
     960:	str	r3, [sp, #4]
	return ret;
     962:	ldr	r3, [sp, #4]
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
     964:	str	r3, [r0, #4]
     966:	movs	r3, #0
     968:	mov	r4, r0
     96a:	mov	r6, r1
     96c:	mov	r5, r2
     96e:	strb	r3, [r0, #0]
     970:	strb	r3, [r0, #1]
     972:	strb	r3, [r0, #2]
     974:	strb	r3, [r0, #20]
     976:	strb	r3, [r0, #21]
     978:	mov	r1, r3
     97a:	movs	r2, #120	; 0x78
     97c:	adds	r0, #24
     97e:	bl	583c <memset>
{
    this->filename = FileName;
    this->StripCommander_p = _stripCommander;
}
     982:	mov	r0, r4
#include "Thunder.h"

Thunder::Thunder(const char *FileName, StripCommand *_stripCommander)
{
    this->filename = FileName;
     984:	str	r6, [r4, #8]
    this->StripCommander_p = _stripCommander;
     986:	str	r5, [r4, #16]
}
     988:	add	sp, #8
     98a:	pop	{r4, r5, r6, pc}
     98c:	.word	0x1fffb108

00000990 <StripCommand::StripCommand()>:

#include "StripCommand.h"
#include "FastLED.h"

StripCommand::StripCommand()
     990:	push	{r4, r5, r6, r7, lr}
     992:	ldr	r4, [pc, #116]	; (a08 <StripCommand::StripCommand()+0x78>)
     994:	sub	sp, #12
     996:	mov	r6, r0
     998:	mov	r7, r0
     99a:	add.w	lr, r4, #48	; 0x30
     99e:	ldr	r0, [r4, #0]
     9a0:	ldr	r1, [r4, #4]
     9a2:	ldr	r2, [r4, #8]
     9a4:	ldr	r3, [r4, #12]
     9a6:	mov	r5, r7
     9a8:	stmia	r5!, {r0, r1, r2, r3}
     9aa:	adds	r4, #16
     9ac:	cmp	r4, lr
     9ae:	mov	r7, r5
     9b0:	bne.n	99e <StripCommand::StripCommand()+0xe>
     9b2:	ldr	r0, [r4, #0]
     9b4:	ldr	r1, [r4, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9b6:	ldr	r2, [pc, #84]	; (a0c <StripCommand::StripCommand()+0x7c>)
     9b8:	ldr	r3, [pc, #84]	; (a10 <StripCommand::StripCommand()+0x80>)
     9ba:	stmia	r7!, {r0, r1}
     9bc:	ldr	r2, [r2, #0]
     9be:	str	r2, [sp, #4]
	return ret;
     9c0:	ldr	r2, [sp, #4]
     9c2:	ldr	r0, [r3, #0]
     9c4:	ldrh	r1, [r3, #4]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     9c6:	str.w	r2, [r6, #232]	; 0xe8
     9ca:	movs	r3, #0
     9cc:	movs	r2, #1
     9ce:	str	r0, [r6, #56]	; 0x38
     9d0:	strh	r1, [r6, #60]	; 0x3c
     9d2:	strb.w	r2, [r6, #230]	; 0xe6
     9d6:	strb.w	r2, [r6, #699]	; 0x2bb
     9da:	strb.w	r3, [r6, #236]	; 0xec
     9de:	strb.w	r3, [r6, #237]	; 0xed
     9e2:	strh.w	r3, [r6, #238]	; 0xee
     9e6:	strh.w	r3, [r6, #240]	; 0xf0
     9ea:	strb.w	r3, [r6, #242]	; 0xf2
     9ee:	add.w	r4, r6, #700	; 0x2bc
     9f2:	addw	r5, r6, #2716	; 0xa9c
     9f6:	mov	r0, r4
     9f8:	adds	r4, #36	; 0x24
     9fa:	bl	a14 <StripLED::StripLED()>
     9fe:	cmp	r4, r5
     a00:	bne.n	9f6 <StripCommand::StripCommand()+0x66>
{
}
     a02:	mov	r0, r6
     a04:	add	sp, #12
     a06:	pop	{r4, r5, r6, r7, pc}
     a08:	.word	0x00005e10
     a0c:	.word	0x1fffb108
     a10:	.word	0x00005e48

00000a14 <StripLED::StripLED()>:
#include "StripLED.h"

StripLED::StripLED()
     a14:	push	{r4, r5, r6}
     a16:	movs	r2, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a18:	ldr	r1, [pc, #44]	; (a48 <StripLED::StripLED()+0x34>)
     a1a:	strb	r2, [r0, #2]
     a1c:	sub	sp, #12
     a1e:	ldr	r1, [r1, #0]
     a20:	str	r1, [sp, #4]
	return ret;
     a22:	ldr	r6, [sp, #4]
     a24:	strh	r2, [r0, #0]
     a26:	movs	r1, #100	; 0x64
     a28:	movs	r5, #10
     a2a:	movs	r4, #30
     a2c:	strb	r2, [r0, #3]
     a2e:	strb	r2, [r0, #8]
     a30:	strb	r2, [r0, #9]
     a32:	strb	r2, [r0, #10]
     a34:	strh	r2, [r0, #22]
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
     a36:	str	r6, [r0, #4]
     a38:	strh	r5, [r0, #12]
     a3a:	strh	r4, [r0, #14]
     a3c:	strh	r1, [r0, #16]
     a3e:	strh	r1, [r0, #18]
{
}
     a40:	add	sp, #12
     a42:	pop	{r4, r5, r6}
     a44:	bx	lr
     a46:	nop
     a48:	.word	0x1fffb108

00000a4c <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
     a4c:	movs	r0, #0
     a4e:	bx	lr

00000a50 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
     a50:	ldr	r3, [pc, #16]	; (a64 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
     a52:	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
     a54:	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
     a56:	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
     a5a:	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
     a5c:	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
     a5e:	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
     a60:	str	r2, [r3, #12]
     a62:	bx	lr
     a64:	.word	0x1fffac3c

00000a68 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     a68:	push	{r4, lr}
     a6a:	mov	r4, r0
		release();
     a6c:	bl	4310 <DMAChannel::release()>
	}
     a70:	mov	r0, r4
     a72:	pop	{r4, pc}

00000a74 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE>:
uint32_t  AudioOutputPWM::block_offset = 0;
bool AudioOutputPWM::update_responsibility = false;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
     a74:	ldr	r2, [pc, #8]	; (a80 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0xc>)
     a76:	ldr	r1, [pc, #12]	; (a84 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x10>)
     a78:	ldr	r0, [pc, #12]	; (a88 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x14>)
     a7a:	b.w	5238 <__aeabi_atexit>
     a7e:	nop
     a80:	.word	0x1fff89fc
     a84:	.word	0x00000a69
     a88:	.word	0x1fffac4c

00000a8c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
	static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
	static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
     a8c:	ldr	r2, [pc, #8]	; (a98 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
     a8e:	ldr	r1, [pc, #12]	; (a9c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
     a90:	ldr	r0, [pc, #12]	; (aa0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
     a92:	b.w	5238 <__aeabi_atexit>
     a96:	nop
     a98:	.word	0x1fff89fc
     a9c:	.word	0x00000a69
     aa0:	.word	0x1fffac54

00000aa4 <AudioControlSGTL5000::disable()>:
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
     aa4:	movs	r0, #0
     aa6:	bx	lr

00000aa8 <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
     aa8:	movs	r0, #0
     aaa:	bx	lr

00000aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>:
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
     aac:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     aae:	ldr	r4, [pc, #80]	; (b00 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x54>)
     ab0:	ldrb	r3, [r0, #8]
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
     ab2:	cmp	r1, #36	; 0x24
     ab4:	it	eq
     ab6:	strheq	r2, [r0, #6]
     ab8:	lsls	r3, r3, #1
		transmitting = 1;
     aba:	movs	r5, #1
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
     abc:	mov	r6, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
     abe:	mov	r0, r4
     ac0:	ubfx	r1, r1, #8, #8
     ac4:	mov	r7, r2
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     ac6:	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
     aca:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
     ace:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
     ad2:	bl	18e4 <TwoWire::write(unsigned char)>
     ad6:	uxtb	r1, r6
     ad8:	mov	r0, r4
     ada:	bl	18e4 <TwoWire::write(unsigned char)>
     ade:	ubfx	r1, r7, #8, #8
     ae2:	mov	r0, r4
     ae4:	bl	18e4 <TwoWire::write(unsigned char)>
     ae8:	uxtb	r1, r7
     aea:	mov	r0, r4
     aec:	bl	18e4 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
     af0:	mov	r1, r5
     af2:	mov	r0, r4
     af4:	bl	1c2c <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
     af8:	clz	r0, r0
     afc:	lsrs	r0, r0, #5
     afe:	pop	{r3, r4, r5, r6, r7, pc}
     b00:	.word	0x1fff8a00

00000b04 <AudioControlSGTL5000::enable()>:
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
     b04:	push	{r4, r5, r6, lr}
	muted = true;
     b06:	movs	r6, #1
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
     b08:	mov	r4, r0
	muted = true;
     b0a:	strb	r6, [r0, #4]
	Wire.begin();
     b0c:	ldr	r0, [pc, #208]	; (be0 <AudioControlSGTL5000::enable()+0xdc>)
     b0e:	bl	190c <TwoWire::begin()>
	delay(5);
     b12:	movs	r0, #5
     b14:	bl	334c <delay>
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
     b18:	mov	r0, r4
     b1a:	movw	r2, #16480	; 0x4060
     b1e:	movs	r1, #48	; 0x30
     b20:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
     b24:	mov	r5, r0
     b26:	cmp	r0, #0
     b28:	beq.n	bdc <AudioControlSGTL5000::enable()+0xd8>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
     b2a:	movs	r2, #108	; 0x6c
     b2c:	movs	r1, #38	; 0x26
     b2e:	mov	r0, r4
     b30:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
     b34:	mov.w	r2, #498	; 0x1f2
     b38:	movs	r1, #40	; 0x28
     b3a:	mov	r0, r4
     b3c:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
     b40:	movw	r2, #3874	; 0xf22
     b44:	movs	r1, #44	; 0x2c
     b46:	mov	r0, r4
     b48:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
     b4c:	movw	r2, #17478	; 0x4446
     b50:	movs	r1, #60	; 0x3c
     b52:	mov	r0, r4
     b54:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
     b58:	movw	r2, #311	; 0x137
     b5c:	movs	r1, #36	; 0x24
     b5e:	mov	r0, r4
     b60:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
     b64:	movw	r2, #16639	; 0x40ff
     b68:	movs	r1, #48	; 0x30
     b6a:	mov	r0, r4
     b6c:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
     b70:	movs	r2, #115	; 0x73
     b72:	movs	r1, #2
     b74:	mov	r0, r4
     b76:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
     b7a:	mov.w	r0, #400	; 0x190
     b7e:	bl	334c <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
     b82:	movw	r2, #7453	; 0x1d1d
     b86:	movs	r1, #46	; 0x2e
     b88:	mov	r0, r4
     b8a:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
     b8e:	movs	r2, #4
     b90:	mov	r1, r2
     b92:	mov	r0, r4
     b94:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_I2S_CTRL, 0x0130); // SCLK=32*Fs, 16bit, I2S format
     b98:	mov.w	r2, #304	; 0x130
     b9c:	movs	r1, #6
     b9e:	mov	r0, r4
     ba0:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
     ba4:	movs	r2, #16
     ba6:	movs	r1, #10
     ba8:	mov	r0, r4
     baa:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
     bae:	movs	r2, #0
     bb0:	movs	r1, #14
     bb2:	mov	r0, r4
     bb4:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
     bb8:	movw	r2, #15420	; 0x3c3c
     bbc:	movs	r1, #16
     bbe:	mov	r0, r4
     bc0:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
     bc4:	movw	r2, #32639	; 0x7f7f
     bc8:	movs	r1, #34	; 0x22
     bca:	mov	r0, r4
     bcc:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
     bd0:	movs	r2, #54	; 0x36
     bd2:	movs	r1, #36	; 0x24
     bd4:	mov	r0, r4
     bd6:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	//mute = false;
	semi_automated = true;
     bda:	strb	r6, [r4, #9]
	return true;
}
     bdc:	mov	r0, r5
     bde:	pop	{r4, r5, r6, pc}
     be0:	.word	0x1fff8a00

00000be4 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
     be4:	push	{r4, lr}
     be6:	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
     be8:	cbz	r1, bf2 <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
     bea:	cmp	r1, #1
     bec:	beq.n	c12 <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
     bee:	movs	r0, #0
     bf0:	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
     bf2:	movs	r2, #85	; 0x55
     bf4:	movs	r1, #32
     bf6:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
     bfa:	cmp	r0, #0
     bfc:	beq.n	bee <AudioControlSGTL5000::inputSelect(int)+0xa>
     bfe:	ldrh	r2, [r4, #6]
     c00:	orr.w	r2, r2, #4
     c04:	mov	r0, r4
     c06:	uxth	r2, r2
     c08:	movs	r1, #36	; 0x24
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
     c0a:	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
     c0e:	b.w	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
     c12:	movw	r2, #371	; 0x173
     c16:	movs	r1, #42	; 0x2a
     c18:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
     c1c:	cmp	r0, #0
     c1e:	beq.n	bee <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
     c20:	movs	r2, #136	; 0x88
     c22:	movs	r1, #32
     c24:	mov	r0, r4
     c26:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
     c2a:	cmp	r0, #0
     c2c:	beq.n	bee <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
     c2e:	ldrh	r2, [r4, #6]
     c30:	mov	r0, r4
     c32:	bic.w	r2, r2, #4
     c36:	movs	r1, #36	; 0x24
		} else {
			return false;
		}
	}
     c38:	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
     c3c:	b.w	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>

00000c40 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
     c40:	push	{r3, r4, r5, lr}
     c42:	mov	r5, r0
	if (n == 0) {
     c44:	cbz	r1, c84 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x44>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
     c46:	cmp	r1, #128	; 0x80
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
     c48:	ldrb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
     c4a:	itte	ls
     c4c:	rsbls	r4, r1, #128	; 0x80
     c50:	orrls.w	r4, r4, r4, lsl #8
     c54:	movhi	r4, #0
	}
	if (muted) {
     c56:	cbnz	r3, c66 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x26>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
     c58:	mov	r2, r4
     c5a:	mov	r0, r5
     c5c:	movs	r1, #34	; 0x22
}
     c5e:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
     c62:	b.w	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
     c66:	ldrh	r2, [r0, #6]
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
		muted = false;
     c68:	movs	r3, #0
     c6a:	bic.w	r2, r2, #16
     c6e:	strb	r3, [r0, #4]
     c70:	movs	r1, #36	; 0x24
     c72:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
     c76:	mov	r2, r4
     c78:	mov	r0, r5
     c7a:	movs	r1, #34	; 0x22
}
     c7c:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
     c80:	b.w	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
     c84:	movs	r3, #1
     c86:	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
     c88:	movw	r2, #32639	; 0x7f7f
     c8c:	movs	r1, #34	; 0x22
     c8e:	bl	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
     c92:	ldrh	r2, [r5, #6]
     c94:	orr.w	r2, r2, #16
     c98:	mov	r0, r5
     c9a:	uxth	r2, r2
     c9c:	movs	r1, #36	; 0x24
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
     c9e:	ldmia.w	sp!, {r3, r4, r5, lr}
     ca2:	b.w	aac <AudioControlSGTL5000::write(unsigned int, unsigned int)>
     ca6:	nop

00000ca8 <AudioControlSGTL5000::volume(float)>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
     ca8:	mov	r3, r1
     caa:	push	{r4, lr}
     cac:	ldr	r1, [pc, #28]	; (ccc <AudioControlSGTL5000::volume(float)+0x24>)
     cae:	mov	r4, r0
     cb0:	mov	r0, r3
     cb2:	bl	4f58 <__aeabi_fmul>
     cb6:	ldr	r1, [pc, #24]	; (cd0 <AudioControlSGTL5000::volume(float)+0x28>)
     cb8:	bl	4d48 <__addsf3>
     cbc:	bl	51f8 <__aeabi_f2uiz>
     cc0:	mov	r1, r0
     cc2:	mov	r0, r4
     cc4:	ldmia.w	sp!, {r4, lr}
     cc8:	b.w	c40 <AudioControlSGTL5000::volumeInteger(unsigned int)>
     ccc:	.word	0x43010000
     cd0:	.word	0x3eff7cee

00000cd4 <AudioMixer4::update()>:
}

#endif

void AudioMixer4::update(void)
{
     cd4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
     cd8:	mov.w	r8, #0
}

#endif

void AudioMixer4::update(void)
{
     cdc:	mov	r6, r0
     cde:	add.w	r5, r0, #24
	audio_block_t *in, *out=NULL;
     ce2:	mov	r7, r8
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
     ce4:	mov	r1, r8
     ce6:	mov	r0, r6
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
     ce8:	cmp	r7, #0
     cea:	beq.n	d8c <AudioMixer4::update()+0xb8>
			if (out) {
				int32_t mult = multiplier[channel];
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
     cec:	bl	4720 <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
     cf0:	cbz	r0, d30 <AudioMixer4::update()+0x5c>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
     cf2:	ldr	r4, [r5, #0]
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
     cf4:	cmp.w	r4, #65536	; 0x10000
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
     cf8:	add.w	r1, r7, #4
     cfc:	add.w	lr, r0, #4

static void applyGainThenAdd(int16_t *data, const int16_t *in, int32_t mult)
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
     d00:	add.w	ip, r7, #260	; 0x104

	if (mult == MULTI_UNITYGAIN) {
     d04:	beq.n	d56 <AudioMixer4::update()+0x82>
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
	} else {
		do {
			uint32_t tmp32 = *src++; // read 2 samples from *data
     d06:	ldr.w	r2, [lr], #4
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     d0a:	smulwb	r3, r4, r2
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     d0e:	smulwt	r9, r4, r2
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     d12:	ssat	r2, #16, r3
     d16:	ssat	r3, #16, r9
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
     d1a:	pkhbt	r3, r2, r3, lsl #16
			int32_t val1 = signed_multiply_32x16b(mult, tmp32);
			int32_t val2 = signed_multiply_32x16t(mult, tmp32);
			val1 = signed_saturate_rshift(val1, 16, 0);
			val2 = signed_saturate_rshift(val2, 16, 0);
			tmp32 = pack_16b_16b(val2, val1);
			uint32_t tmp32b = *dst;
     d1e:	ldr	r2, [r1, #0]
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     d20:	qadd16	r3, r3, r2
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
     d24:	str.w	r3, [r1], #4
		} while (dst < end);
     d28:	cmp	ip, r1
     d2a:	bhi.n	d06 <AudioMixer4::update()+0x32>
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
     d2c:	bl	4698 <AudioStream::release(audio_block_struct*)>
void AudioMixer4::update(void)
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
     d30:	add.w	r8, r8, #1
     d34:	cmp.w	r8, #4
     d38:	add.w	r5, r5, #4
     d3c:	bne.n	ce4 <AudioMixer4::update()+0x10>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
			}
		}
	}
	if (out) {
     d3e:	cmp	r7, #0
     d40:	beq.n	dc4 <AudioMixer4::update()+0xf0>
		transmit(out);
     d42:	mov	r0, r6
     d44:	mov	r1, r7
     d46:	movs	r2, #0
     d48:	bl	46ec <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
     d4c:	mov	r0, r7
	}
}
     d4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			}
		}
	}
	if (out) {
		transmit(out);
		release(out);
     d52:	b.w	4698 <AudioStream::release(audio_block_struct*)>
     d56:	add.w	r1, r7, #12
     d5a:	add.w	r4, r0, #12
     d5e:	ldr.w	r3, [r1, #-8]
     d62:	ldr.w	r2, [r4, #-8]
     d66:	qadd16	r3, r3, r2
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
     d6a:	str.w	r3, [r1, #-8]
     d6e:	ldr.w	r2, [r4, #-4]
     d72:	ldr.w	r3, [r1, #-4]
     d76:	qadd16	r3, r3, r2
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
     d7a:	cmp	ip, r1
	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
     d7c:	str.w	r3, [r1, #-4]
     d80:	add.w	r4, r4, #8
		} while (dst < end);
     d84:	add.w	r1, r1, #8
     d88:	bhi.n	d5e <AudioMixer4::update()+0x8a>
     d8a:	b.n	d2c <AudioMixer4::update()+0x58>
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
     d8c:	bl	4738 <AudioStream::receiveWritable(unsigned int)>
			if (out) {
     d90:	mov	r7, r0
     d92:	cmp	r0, #0
     d94:	beq.n	d30 <AudioMixer4::update()+0x5c>
				int32_t mult = multiplier[channel];
     d96:	ldr	r0, [r5, #0]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
     d98:	cmp.w	r0, #65536	; 0x10000
     d9c:	beq.n	d30 <AudioMixer4::update()+0x5c>
     d9e:	adds	r1, r7, #4
#define MULTI_UNITYGAIN 65536

static void applyGain(int16_t *data, int32_t mult)
{
	uint32_t *p = (uint32_t *)data;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
     da0:	add.w	r4, r7, #260	; 0x104

	do {
		uint32_t tmp32 = *p; // read 2 samples from *data
     da4:	ldr	r3, [r1, #0]
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     da6:	smulwb	r2, r0, r3
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     daa:	smulwt	r3, r0, r3
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     dae:	ssat	r2, #16, r2
     db2:	ssat	r3, #16, r3
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
     db6:	pkhbt	r3, r2, r3, lsl #16
		int32_t val1 = signed_multiply_32x16b(mult, tmp32);
		int32_t val2 = signed_multiply_32x16t(mult, tmp32);
		val1 = signed_saturate_rshift(val1, 16, 0);
		val2 = signed_saturate_rshift(val2, 16, 0);
		*p++ = pack_16b_16b(val2, val1);
     dba:	str.w	r3, [r1], #4
	} while (p < end);
     dbe:	cmp	r4, r1
     dc0:	bhi.n	da4 <AudioMixer4::update()+0xd0>
     dc2:	b.n	d30 <AudioMixer4::update()+0x5c>
     dc4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000dc8 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
     dc8:	ldr	r2, [pc, #8]	; (dd4 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
     dca:	ldr	r1, [pc, #12]	; (dd8 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
     dcc:	ldr	r0, [pc, #12]	; (ddc <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
     dce:	b.w	5238 <__aeabi_atexit>
     dd2:	nop
     dd4:	.word	0x1fff89fc
     dd8:	.word	0x00000a69
     ddc:	.word	0x1fffac5c

00000de0 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
     de0:	ldr	r2, [pc, #8]	; (dec <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
     de2:	ldr	r1, [pc, #12]	; (df0 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
     de4:	ldr	r0, [pc, #12]	; (df4 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
     de6:	b.w	5238 <__aeabi_atexit>
     dea:	nop
     dec:	.word	0x1fff89fc
     df0:	.word	0x00000a69
     df4:	.word	0x1fffac64

00000df8 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
     df8:	ldr	r2, [pc, #8]	; (e04 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
     dfa:	ldr	r1, [pc, #12]	; (e08 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
     dfc:	ldr	r0, [pc, #12]	; (e0c <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
     dfe:	b.w	5238 <__aeabi_atexit>
     e02:	nop
     e04:	.word	0x1fff89fc
     e08:	.word	0x00000a69
     e0c:	.word	0x1fffac6c

00000e10 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
     e10:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
     e12:	ldr	r5, [pc, #28]	; (e30 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
     e14:	ldr	r4, [pc, #28]	; (e34 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
     e16:	ldr	r0, [pc, #32]	; (e38 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
     e18:	mov	r2, r5
     e1a:	mov	r1, r4
     e1c:	bl	5238 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
     e20:	mov	r2, r5
     e22:	mov	r1, r4
     e24:	ldr	r0, [pc, #20]	; (e3c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
     e26:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
     e2a:	b.w	5238 <__aeabi_atexit>
     e2e:	nop
     e30:	.word	0x1fff89fc
     e34:	.word	0x00000a69
     e38:	.word	0x1fffac74
     e3c:	.word	0x1fffac7c

00000e40 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
     e40:	ldr	r2, [pc, #8]	; (e4c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
     e42:	ldr	r1, [pc, #12]	; (e50 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
     e44:	ldr	r0, [pc, #12]	; (e54 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
     e46:	b.w	5238 <__aeabi_atexit>
     e4a:	nop
     e4c:	.word	0x1fff89fc
     e50:	.word	0x00000a69
     e54:	.word	0x1fffac84

00000e58 <AudioPlaySdWav::begin()>:
#define STATE_PARSE4			11 // ignoring unknown chunk after "fmt "
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
     e58:	push	{r3, r4, r5, lr}
     e5a:	mov	r4, r0
	state = STATE_STOP;
	state_play = STATE_STOP;
	data_length = 0;
	if (block_left) {
     e5c:	ldr	r0, [r0, #108]	; 0x6c
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
	state = STATE_STOP;
     e5e:	movs	r3, #13
	state_play = STATE_STOP;
	data_length = 0;
     e60:	movs	r5, #0
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
	state = STATE_STOP;
     e62:	strb.w	r3, [r4, #635]	; 0x27b
	state_play = STATE_STOP;
     e66:	strb.w	r3, [r4, #636]	; 0x27c
	data_length = 0;
     e6a:	str	r5, [r4, #96]	; 0x60
	if (block_left) {
     e6c:	cbz	r0, e74 <AudioPlaySdWav::begin()+0x1c>
		release(block_left);
     e6e:	bl	4698 <AudioStream::release(audio_block_struct*)>
		block_left = NULL;
     e72:	str	r5, [r4, #108]	; 0x6c
	}
	if (block_right) {
     e74:	ldr	r0, [r4, #112]	; 0x70
     e76:	cbz	r0, e80 <AudioPlaySdWav::begin()+0x28>
		release(block_right);
     e78:	bl	4698 <AudioStream::release(audio_block_struct*)>
		block_right = NULL;
     e7c:	movs	r3, #0
     e7e:	str	r3, [r4, #112]	; 0x70
     e80:	pop	{r3, r4, r5, pc}
     e82:	nop

00000e84 <AudioPlaySdWav::parse_format()>:
	uint16_t format;
	uint16_t channels;
	uint32_t rate, b2m;
	uint16_t bits;

	format = header[0];
     e84:	ldr	r3, [r0, #56]	; 0x38
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;
     e86:	uxth	r2, r3
     e88:	cmp	r2, #1
     e8a:	beq.n	e90 <AudioPlaySdWav::parse_format()+0xc>
     e8c:	movs	r0, #0
	// if they're not the expected values, all we could do is
	// return false.  Do any real wav files have unexpected
	// values in these other fields?
	state_play = num;
	return true;
}
     e8e:	bx	lr
	format = header[0];
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;

	rate = header[1];
     e90:	ldr	r2, [r0, #60]	; 0x3c
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
     e92:	movw	r1, #44100	; 0xac44
     e96:	cmp	r2, r1
     e98:	beq.n	ee0 <AudioPlaySdWav::parse_format()+0x5c>
		b2m = B2M_44100;
	} else if (rate == 22050) {
     e9a:	movw	r1, #22050	; 0x5622
     e9e:	cmp	r2, r1
     ea0:	beq.n	eda <AudioPlaySdWav::parse_format()+0x56>
		b2m = B2M_22050;
		num |= 4;
	} else if (rate == 11025) {
     ea2:	movw	r1, #11025	; 0x2b11
     ea6:	cmp	r2, r1
     ea8:	bne.n	e8c <AudioPlaySdWav::parse_format()+0x8>
		b2m = B2M_11025;
     eaa:	ldr	r1, [pc, #60]	; (ee8 <AudioPlaySdWav::parse_format()+0x64>)
		num |= 4;
     eac:	movs	r2, #4
	} else {
		return false;
	}

	channels = header[0] >> 16;
     eae:	lsrs	r3, r3, #16
	//Serial.print("  channels = ");
	//Serial.println(channels);
	if (channels == 1) {
     eb0:	cmp	r3, #1
     eb2:	beq.n	ebe <AudioPlaySdWav::parse_format()+0x3a>
	} else if (channels == 2) {
     eb4:	cmp	r3, #2
     eb6:	bne.n	e8c <AudioPlaySdWav::parse_format()+0x8>
		b2m >>= 1;
     eb8:	lsrs	r1, r1, #1
		num |= 1;
     eba:	orr.w	r2, r2, #1
	} else {
		return false;
	}

	bits = header[3] >> 16;
     ebe:	ldrh.w	r3, [r0, #70]	; 0x46
	//Serial.print("  bits = ");
	//Serial.println(bits);
	if (bits == 8) {
     ec2:	cmp	r3, #8
     ec4:	beq.n	ed0 <AudioPlaySdWav::parse_format()+0x4c>
	} else if (bits == 16) {
     ec6:	cmp	r3, #16
     ec8:	bne.n	e8c <AudioPlaySdWav::parse_format()+0x8>
		b2m >>= 1;
     eca:	lsrs	r1, r1, #1
		num |= 2;
     ecc:	orr.w	r2, r2, #2
	} else {
		return false;
	}

	bytes2millis = b2m;
     ed0:	str	r1, [r0, #104]	; 0x68

	// we're not checking the byte rate and block align fields
	// if they're not the expected values, all we could do is
	// return false.  Do any real wav files have unexpected
	// values in these other fields?
	state_play = num;
     ed2:	strb.w	r2, [r0, #636]	; 0x27c
	return true;
     ed6:	movs	r0, #1
     ed8:	bx	lr
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
		b2m = B2M_44100;
	} else if (rate == 22050) {
		b2m = B2M_22050;
     eda:	ldr	r1, [pc, #16]	; (eec <AudioPlaySdWav::parse_format()+0x68>)
		num |= 4;
     edc:	movs	r2, #4
     ede:	b.n	eae <AudioPlaySdWav::parse_format()+0x2a>

	rate = header[1];
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
		b2m = B2M_44100;
     ee0:	ldr	r1, [pc, #12]	; (ef0 <AudioPlaySdWav::parse_format()+0x6c>)
#define B2M_22050 (uint32_t)((double)4294967296000.0 / AUDIO_SAMPLE_RATE_EXACT * 2.0)
#define B2M_11025 (uint32_t)((double)4294967296000.0 / AUDIO_SAMPLE_RATE_EXACT * 4.0)

bool AudioPlaySdWav::parse_format(void)
{
	uint8_t num = 0;
     ee2:	movs	r2, #0
     ee4:	b.n	eae <AudioPlaySdWav::parse_format()+0x2a>
     ee6:	nop
     ee8:	.word	0x1735ee34
     eec:	.word	0x0b9af71a
     ef0:	.word	0x05cd7b8d

00000ef4 <AudioPlaySdWav::consume(unsigned long)>:

// https://ccrma.stanford.edu/courses/422/projects/WaveFormat/

// Consume already buffered data.  Returns true if audio transmitted.
bool AudioPlaySdWav::consume(uint32_t size)
{
     ef4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
     ef8:	ldrh.w	r6, [r0, #630]	; 0x276
     efc:	add.w	r7, r0, #118	; 0x76

// https://ccrma.stanford.edu/courses/422/projects/WaveFormat/

// Consume already buffered data.  Returns true if audio transmitted.
bool AudioPlaySdWav::consume(uint32_t size)
{
     f00:	sub	sp, #12
	uint32_t len;
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
     f02:	add	r6, r7
start:
	if (size == 0) return false;
     f04:	cbz	r1, f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
		if (header[0] == 0x61746164) {
     f06:	ldr.w	fp, [pc, #948]	; 12bc <AudioPlaySdWav::consume(unsigned long)+0x3c8>
     f0a:	mov	r4, r0
     f0c:	mov	r5, r1
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		p += len;
		size -= len;
		data_length = 8;
     f0e:	mov.w	sl, #8
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
		data_length = 8;
		header_offset = 0;
     f12:	mov.w	r9, #0
	Serial.print(", space = ");
	Serial.print((AUDIO_BLOCK_SAMPLES - block_offset) * 2);
	Serial.print(", state = ");
	Serial.println(state);
#endif
	switch (state) {
     f16:	ldrb.w	r3, [r4, #635]	; 0x27b
     f1a:	cmp	r3, #13
     f1c:	bhi.w	11d0 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
     f20:	tbh	[pc, r3, lsl #1]
     f24:	.word	0x000f000f
     f28:	.word	0x009e00d3
     f2c:	.word	0x000f000f
     f30:	.word	0x000f000f
     f34:	.word	0x00130116
     f38:	.word	0x00710045
     f3c:	.word	0x000f0087
	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
     f40:	str	r2, [r4, #96]	; 0x60
		state = STATE_PARSE1;
		goto start;

	  // playing mono at native sample rate
	  case STATE_DIRECT_8BIT_MONO:
		return false;
     f42:	movs	r0, #0
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
     f44:	add	sp, #12
     f46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		//Serial.println("unknown WAV header");
		break;

	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
     f4a:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
     f4c:	ldrb.w	r3, [r4, #634]	; 0x27a
     f50:	cmp	r2, r5
     f52:	add.w	r0, r4, #56	; 0x38
     f56:	it	cs
     f58:	movcs	r2, r5
     f5a:	add	r0, r3
     f5c:	mov	r1, r6
     f5e:	mov	r8, r2
     f60:	bl	2dac <memcpy>
		header_offset += len;
     f64:	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
     f68:	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
     f6c:	ldr	r3, [r4, #96]	; 0x60
	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
     f6e:	add	r1, r8
		buffer_offset += len;
		data_length -= len;
     f70:	rsb	r3, r8, r3
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
		buffer_offset += len;
     f74:	add	r2, r8
	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
     f76:	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
     f7a:	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
     f7e:	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
     f80:	str	r3, [sp, #4]
     f82:	cmp	r3, #0
     f84:	bne.n	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		if (parse_format()) {
     f86:	mov	r0, r4
     f88:	bl	e84 <AudioPlaySdWav::parse_format()>
     f8c:	cmp	r0, #0
     f8e:	beq.w	11d0 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
			header_offset = 0;
			state = STATE_PARSE3;
     f92:	movs	r2, #10
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
			header_offset = 0;
     f94:	ldr	r3, [sp, #4]
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
     f96:	str.w	sl, [r4, #96]	; 0x60
		data_length -= len;
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
     f9a:	rsb	r5, r8, r5
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
     f9e:	add	r6, r8
			size -= len;
			data_length = 8;
			header_offset = 0;
     fa0:	strb.w	r3, [r4, #634]	; 0x27a
			state = STATE_PARSE3;
     fa4:	strb.w	r2, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
     fa8:	cmp	r5, #0
     faa:	bne.n	f16 <AudioPlaySdWav::consume(unsigned long)+0x22>
     fac:	b.n	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.println("unknown audio format");
		break;

	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
     fae:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
     fb0:	ldrb.w	r3, [r4, #634]	; 0x27a
     fb4:	cmp	r2, r5
     fb6:	add.w	r0, r4, #56	; 0x38
     fba:	it	cs
     fbc:	movcs	r2, r5
     fbe:	add	r0, r3
     fc0:	mov	r1, r6
     fc2:	mov	r8, r2
     fc4:	bl	2dac <memcpy>
		header_offset += len;
     fc8:	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
     fcc:	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
     fd0:	ldr	r3, [r4, #96]	; 0x60
	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
     fd2:	add	r1, r8
		buffer_offset += len;
     fd4:	add	r2, r8
		data_length -= len;
     fd6:	rsb	r3, r8, r3
	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
     fda:	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
     fde:	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
     fe2:	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
     fe4:	cmp	r3, #0
     fe6:	bne.n	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
		if (header[0] == 0x61746164) {
     fe8:	ldr	r1, [r4, #56]	; 0x38
		//Serial.print(header[0], HEX);
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
     fea:	ldr	r2, [r4, #60]	; 0x3c
     fec:	str	r2, [r4, #96]	; 0x60
		if (header[0] == 0x61746164) {
     fee:	cmp	r1, fp
		if (data_length > 0) return false;
		//Serial.print("chunk id = ");
		//Serial.print(header[0], HEX);
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
     ff0:	add	r6, r8
		size -= len;
     ff2:	rsb	r5, r8, r5
		data_length = header[1];
		if (header[0] == 0x61746164) {
     ff6:	beq.w	11fc <AudioPlaySdWav::consume(unsigned long)+0x308>
				block_right = allocate();
				if (!block_right) return false;
			}
			total_length = data_length;
		} else {
			state = STATE_PARSE4;
     ffa:	movs	r3, #11
     ffc:	strb.w	r3, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    1000:	cmp	r5, #0
    1002:	bne.n	f16 <AudioPlaySdWav::consume(unsigned long)+0x22>
    1004:	b.n	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		}
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
    1006:	ldr	r2, [r4, #96]	; 0x60
			data_length -= size;
			buffer_offset += size;
    1008:	ldrh.w	r3, [r4, #630]	; 0x276
		}
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
    100c:	cmp	r5, r2
    100e:	bcc.w	12a8 <AudioPlaySdWav::consume(unsigned long)+0x3b4>
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
    1012:	add	r3, r2
		data_length = 8;
		header_offset = 0;
		state = STATE_PARSE3;
    1014:	movs	r1, #10
			data_length -= size;
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
    1016:	subs	r5, r5, r2
		buffer_offset += data_length;
		data_length = 8;
    1018:	str.w	sl, [r4, #96]	; 0x60
		if (size < data_length) {
			data_length -= size;
			buffer_offset += size;
			return false;
		}
		p += data_length;
    101c:	add	r6, r2
		size -= data_length;
		buffer_offset += data_length;
		data_length = 8;
		header_offset = 0;
    101e:	strb.w	r9, [r4, #634]	; 0x27a
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
    1022:	strh.w	r3, [r4, #630]	; 0x276
		data_length = 8;
		header_offset = 0;
		state = STATE_PARSE3;
    1026:	strb.w	r1, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    102a:	cmp	r5, #0
    102c:	bne.w	f16 <AudioPlaySdWav::consume(unsigned long)+0x22>
    1030:	b.n	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.println("consumed unknown chunk");
		goto start;

	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
    1032:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		buffer_offset += len;
    1034:	ldrh.w	r1, [r4, #630]	; 0x276
    1038:	cmp	r5, r2
    103a:	mov	r3, r5
    103c:	it	cs
    103e:	movcs	r3, r2
    1040:	add	r1, r3
		data_length -= len;
		if (data_length > 0) return false;
    1042:	subs	r2, r2, r3

	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
    1044:	strh.w	r1, [r4, #630]	; 0x276
		data_length -= len;
		if (data_length > 0) return false;
    1048:	bne.w	f40 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		p += len;
		size -= len;
    104c:	subs	r5, r5, r3
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		p += len;
    104e:	add	r6, r3
		size -= len;
		data_length = 8;
    1050:	str.w	sl, [r4, #96]	; 0x60
		state = STATE_PARSE1;
    1054:	strb.w	sl, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    1058:	cmp	r5, #0
    105a:	bne.w	f16 <AudioPlaySdWav::consume(unsigned long)+0x22>
    105e:	b.n	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		state = STATE_STOP;
		return false;

	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
    1060:	ldr	r3, [r4, #96]	; 0x60
		data_length -= size;
		if (leftover_bytes) {
    1062:	ldrb.w	r1, [r4, #637]	; 0x27d
    1066:	cmp	r5, r3
    1068:	it	cs
    106a:	movcs	r5, r3
		return false;

	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
		data_length -= size;
    106c:	subs	r2, r3, r5
    106e:	str	r2, [r4, #96]	; 0x60
		if (leftover_bytes) {
    1070:	cmp	r1, #0
    1072:	beq.w	11e2 <AudioPlaySdWav::consume(unsigned long)+0x2ee>
			block_left->data[block_offset] = header[0];
    1076:	ldr	r1, [r4, #108]	; 0x6c
    1078:	ldrh.w	r3, [r4, #116]	; 0x74
    107c:	ldr	r0, [r4, #56]	; 0x38
    107e:	add.w	ip, r1, r3, lsl #1
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
    1082:	mov.w	lr, #0
	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
		data_length -= size;
		if (leftover_bytes) {
			block_left->data[block_offset] = header[0];
    1086:	strh.w	r0, [ip, #4]
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
    108a:	strb.w	lr, [r4, #637]	; 0x27d
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    108e:	ldr	r0, [r4, #112]	; 0x70
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
    1090:	ldrb.w	ip, [r6, #1]
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
    1094:	ldrb.w	lr, [r6], #2
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    1098:	add.w	r0, r0, r3, lsl #1
    109c:	adds	r3, #1
    109e:	uxth	r3, r3
    10a0:	orr.w	lr, lr, ip, lsl #8
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    10a4:	cmp	r3, #127	; 0x7f
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    10a6:	strh.w	r3, [r4, #116]	; 0x74
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
    10aa:	sub.w	r5, r5, #2
			block_right->data[block_offset++] = (msb << 8) | lsb;
    10ae:	strh.w	lr, [r0, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    10b2:	bhi.w	126a <AudioPlaySdWav::consume(unsigned long)+0x376>
				data_length += size;
				buffer_offset = p - buffer;
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
    10b6:	cmp	r5, #0
    10b8:	bne.w	11e2 <AudioPlaySdWav::consume(unsigned long)+0x2ee>
				if (data_length == 0) break;
    10bc:	cmp	r2, #0
    10be:	beq.w	11ee <AudioPlaySdWav::consume(unsigned long)+0x2fa>
				leftover_bytes = 0;
    10c2:	strb.w	r5, [r4, #637]	; 0x27d
				return false;
    10c6:	mov	r0, r5
    10c8:	b.n	f44 <AudioPlaySdWav::consume(unsigned long)+0x50>
	  case STATE_DIRECT_8BIT_STEREO:
		return false;

	  // playing mono at native sample rate
	  case STATE_DIRECT_16BIT_MONO:
		if (size > data_length) size = data_length;
    10ca:	ldr	r3, [r4, #96]	; 0x60
    10cc:	ldr	r1, [r4, #108]	; 0x6c
    10ce:	cmp	r5, r3
    10d0:	it	cs
    10d2:	movcs	r5, r3
		data_length -= size;
    10d4:	rsb	ip, r5, r3
    10d8:	adds	r6, #2
    10da:	str.w	ip, [r4, #96]	; 0x60
    10de:	b.n	10e8 <AudioPlaySdWav::consume(unsigned long)+0x1f4>
    10e0:	adds	r6, #2
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
    10e2:	cmp	r5, #0
    10e4:	beq.w	122c <AudioPlaySdWav::consume(unsigned long)+0x338>
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    10e8:	ldrh.w	r2, [r4, #116]	; 0x74
	  // playing mono at native sample rate
	  case STATE_DIRECT_16BIT_MONO:
		if (size > data_length) size = data_length;
		data_length -= size;
		while (1) {
			lsb = *p++;
    10ec:	ldrb.w	r0, [r6, #-2]
			msb = *p++;
    10f0:	ldrb.w	lr, [r6, #-1]
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    10f4:	adds	r3, r2, #1
    10f6:	uxth	r3, r3
    10f8:	add.w	r2, r1, r2, lsl #1
    10fc:	orr.w	r0, r0, lr, lsl #8
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    1100:	cmp	r3, #127	; 0x7f
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    1102:	strh.w	r3, [r4, #116]	; 0x74
		if (size > data_length) size = data_length;
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
    1106:	sub.w	r5, r5, #2
			block_left->data[block_offset++] = (msb << 8) | lsb;
    110a:	strh	r0, [r2, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    110c:	bls.n	10e0 <AudioPlaySdWav::consume(unsigned long)+0x1ec>
				transmit(block_left, 0);
    110e:	movs	r2, #0
    1110:	mov	r0, r4
    1112:	bl	46ec <AudioStream::transmit(audio_block_struct*, unsigned char)>
				transmit(block_left, 1);
    1116:	movs	r2, #1
    1118:	ldr	r1, [r4, #108]	; 0x6c
    111a:	mov	r0, r4
    111c:	bl	46ec <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
    1120:	ldr	r0, [r4, #108]	; 0x6c
    1122:	bl	4698 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
				data_length += size;
    1126:	ldr	r3, [r4, #96]	; 0x60
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
    1128:	ldr	r0, [r4, #112]	; 0x70
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
				data_length += size;
    112a:	add	r5, r3
				buffer_offset = p - buffer;
    112c:	subs	r6, r6, r7
			block_left->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
    112e:	movs	r3, #0
				data_length += size;
				buffer_offset = p - buffer;
    1130:	strh.w	r6, [r4, #630]	; 0x276
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
				data_length += size;
    1134:	str	r5, [r4, #96]	; 0x60
			block_left->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
    1136:	str	r3, [r4, #108]	; 0x6c
				data_length += size;
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
    1138:	cbz	r0, 1140 <AudioPlaySdWav::consume(unsigned long)+0x24c>
    113a:	bl	4698 <AudioStream::release(audio_block_struct*)>
    113e:	ldr	r5, [r4, #96]	; 0x60
				if (data_length == 0) state = STATE_STOP;
    1140:	cbnz	r5, 1148 <AudioPlaySdWav::consume(unsigned long)+0x254>
    1142:	movs	r3, #13
    1144:	strb.w	r3, [r4, #635]	; 0x27b
				return true;
    1148:	movs	r0, #1
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
    114a:	add	sp, #12
    114c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Serial.println(state);
#endif
	switch (state) {
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
    1150:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    1152:	ldrb.w	r3, [r4, #634]	; 0x27a
    1156:	cmp	r2, r5
    1158:	add.w	r0, r4, #56	; 0x38
    115c:	it	cs
    115e:	movcs	r2, r5
    1160:	add	r0, r3
    1162:	mov	r1, r6
    1164:	mov	r8, r2
    1166:	bl	2dac <memcpy>
		header_offset += len;
    116a:	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    116e:	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    1172:	ldr	r3, [r4, #96]	; 0x60
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    1174:	add	r1, r8
		buffer_offset += len;
    1176:	add	r2, r8
		data_length -= len;
    1178:	rsb	r3, r8, r3
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    117c:	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    1180:	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    1184:	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    1186:	cmp	r3, #0
    1188:	bne.w	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
    118c:	ldr	r2, [r4, #56]	; 0x38
    118e:	ldr	r1, [pc, #296]	; (12b8 <AudioPlaySdWav::consume(unsigned long)+0x3c4>)
    1190:	cmp	r2, r1
    1192:	bne.n	11d0 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
    1194:	ldr	r2, [r4, #64]	; 0x40
    1196:	sub.w	r1, r1, #15728640	; 0xf00000
    119a:	subw	r1, r1, #2043	; 0x7fb
    119e:	cmp	r2, r1
    11a0:	bne.n	11d0 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
			//Serial.println("is wav file");
			if (header[3] == 0x20746D66) {
    11a2:	add.w	r1, r1, #3674210304	; 0xdb000000
    11a6:	ldr	r2, [r4, #68]	; 0x44
    11a8:	add.w	r1, r1, #1974272	; 0x1e2000
    11ac:	addw	r1, r1, #3087	; 0xc0f
    11b0:	cmp	r2, r1
    11b2:	beq.n	1216 <AudioPlaySdWav::consume(unsigned long)+0x322>
				// first chuck is something other than "fmt "
				//Serial.print("skipping \"");
				//Serial.printf("\" (%08X), ", __builtin_bswap32(header[3]));
				//Serial.print(header[4]);
				//Serial.println(" bytes");
				header_offset = 12;
    11b4:	movs	r3, #12
    11b6:	ldr	r2, [r4, #72]	; 0x48
    11b8:	strb.w	r3, [r4, #634]	; 0x27a
				state = STATE_PARSE5;
    11bc:	strb.w	r3, [r4, #635]	; 0x27b
			}
			p += len;
			size -= len;
    11c0:	rsb	r5, r8, r5
				//Serial.print(header[4]);
				//Serial.println(" bytes");
				header_offset = 12;
				state = STATE_PARSE5;
			}
			p += len;
    11c4:	add	r6, r8
			size -= len;
			data_length = header[4];
    11c6:	str	r2, [r4, #96]	; 0x60
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    11c8:	cmp	r5, #0
    11ca:	bne.w	f16 <AudioPlaySdWav::consume(unsigned long)+0x22>
    11ce:	b.n	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>

	  // this is not supposed to happen!
	  //default:
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
    11d0:	movs	r3, #13
	state = STATE_STOP;
	return false;
    11d2:	movs	r0, #0

	  // this is not supposed to happen!
	  //default:
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
    11d4:	strb.w	r3, [r4, #636]	; 0x27c
	state = STATE_STOP;
    11d8:	strb.w	r3, [r4, #635]	; 0x27b
	return false;
}
    11dc:	add	sp, #12
    11de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			if (size == 0) {
    11e2:	subs	r5, #2
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
			goto right16;
		}
		while (1) {
			lsb = *p++;
    11e4:	ldrb	r0, [r6, #0]
			msb = *p++;
    11e6:	ldrb.w	lr, [r6, #1]
			size -= 2;
			if (size == 0) {
    11ea:	bne.n	1236 <AudioPlaySdWav::consume(unsigned long)+0x342>
				if (data_length == 0) break;
    11ec:	cbnz	r2, 124c <AudioPlaySdWav::consume(unsigned long)+0x358>
		//Serial.println("end of file reached");
		// end of file reached
		if (block_offset > 0) {
			// TODO: fill remainder of last block with zero and transmit
		}
		state = STATE_STOP;
    11ee:	movs	r3, #13
		return false;
    11f0:	movs	r0, #0
		//Serial.println("end of file reached");
		// end of file reached
		if (block_offset > 0) {
			// TODO: fill remainder of last block with zero and transmit
		}
		state = STATE_STOP;
    11f2:	strb.w	r3, [r4, #635]	; 0x27b
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
    11f6:	add	sp, #12
    11f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
			state = state_play;
    11fc:	ldrb.w	r1, [r4, #636]	; 0x27c
			//Serial.print("wav: found data chunk, len=");
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
    1200:	strb.w	r3, [r4, #637]	; 0x27d
			state = state_play;
			if (state & 1) {
    1204:	lsls	r3, r1, #31
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
			state = state_play;
    1206:	strb.w	r1, [r4, #635]	; 0x27b
			if (state & 1) {
    120a:	bmi.n	125a <AudioPlaySdWav::consume(unsigned long)+0x366>
				// if we're going to start stereo
				// better allocate another output block
				block_right = allocate();
				if (!block_right) return false;
			}
			total_length = data_length;
    120c:	str	r2, [r4, #100]	; 0x64
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    120e:	cmp	r5, #0
    1210:	bne.w	f16 <AudioPlaySdWav::consume(unsigned long)+0x22>
    1214:	b.n	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
			//Serial.println("is wav file");
			if (header[3] == 0x20746D66) {
				// "fmt " header
				if (header[4] < 16) {
    1216:	ldr	r2, [r4, #72]	; 0x48
    1218:	sub.w	r1, r2, #16
    121c:	cmp	r1, #24
    121e:	bhi.n	11d0 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
					//Serial.println("WAVEFORMATEXTENSIBLE too long");
					break;
				}
				//Serial.println("header ok");
				header_offset = 0;
				state = STATE_PARSE2;
    1220:	movs	r1, #9
					// size of header[] should accomodate them...
					//Serial.println("WAVEFORMATEXTENSIBLE too long");
					break;
				}
				//Serial.println("header ok");
				header_offset = 0;
    1222:	strb.w	r3, [r4, #634]	; 0x27a
				state = STATE_PARSE2;
    1226:	strb.w	r1, [r4, #635]	; 0x27b
    122a:	b.n	11c0 <AudioPlaySdWav::consume(unsigned long)+0x2cc>
				if (block_right) release(block_right);
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
				if (data_length == 0) break;
    122c:	cmp.w	ip, #0
    1230:	bne.w	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
    1234:	b.n	11ee <AudioPlaySdWav::consume(unsigned long)+0x2fa>
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
    1236:	ldr	r1, [r4, #108]	; 0x6c
    1238:	ldrh.w	r3, [r4, #116]	; 0x74
    123c:	add.w	ip, r1, r3, lsl #1
    1240:	orr.w	r0, r0, lr, lsl #8
			leftover_bytes = 0;
			goto right16;
		}
		while (1) {
			lsb = *p++;
			msb = *p++;
    1244:	adds	r6, #2
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
    1246:	strh.w	r0, [ip, #4]
    124a:	b.n	108e <AudioPlaySdWav::consume(unsigned long)+0x19a>
    124c:	ldrh	r3, [r6, #0]
			lsb = *p++;
			msb = *p++;
			size -= 2;
			if (size == 0) {
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
    124e:	str	r3, [r4, #56]	; 0x38
				leftover_bytes = 2;
    1250:	movs	r3, #2
				return false;
    1252:	mov	r0, r5
			msb = *p++;
			size -= 2;
			if (size == 0) {
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
    1254:	strb.w	r3, [r4, #637]	; 0x27d
				return false;
    1258:	b.n	f44 <AudioPlaySdWav::consume(unsigned long)+0x50>
			leftover_bytes = 0;
			state = state_play;
			if (state & 1) {
				// if we're going to start stereo
				// better allocate another output block
				block_right = allocate();
    125a:	bl	45f0 <AudioStream::allocate()>
    125e:	str	r0, [r4, #112]	; 0x70
				if (!block_right) return false;
    1260:	cmp	r0, #0
    1262:	beq.w	f42 <AudioPlaySdWav::consume(unsigned long)+0x4e>
    1266:	ldr	r2, [r4, #96]	; 0x60
    1268:	b.n	120c <AudioPlaySdWav::consume(unsigned long)+0x318>
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
    126a:	movs	r2, #0
    126c:	mov	r0, r4
    126e:	bl	46ec <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
				block_left = NULL;
    1272:	mov.w	r8, #0
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				release(block_left);
    1276:	ldr	r0, [r4, #108]	; 0x6c
    1278:	bl	4698 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
				transmit(block_right, 1);
    127c:	movs	r2, #1
    127e:	ldr	r1, [r4, #112]	; 0x70
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				release(block_left);
				block_left = NULL;
    1280:	str.w	r8, [r4, #108]	; 0x6c
				transmit(block_right, 1);
    1284:	mov	r0, r4
    1286:	bl	46ec <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_right);
    128a:	ldr	r0, [r4, #112]	; 0x70
    128c:	bl	4698 <AudioStream::release(audio_block_struct*)>
				block_right = NULL;
				data_length += size;
    1290:	ldr	r0, [r4, #96]	; 0x60
				transmit(block_left, 0);
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
    1292:	str.w	r8, [r4, #112]	; 0x70
				data_length += size;
				buffer_offset = p - buffer;
    1296:	subs	r6, r6, r7
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
    1298:	add	r0, r5
				buffer_offset = p - buffer;
    129a:	strh.w	r6, [r4, #630]	; 0x276
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
    129e:	str	r0, [r4, #96]	; 0x60
				buffer_offset = p - buffer;
				if (data_length == 0) state = STATE_STOP;
    12a0:	cmp	r0, #0
    12a2:	beq.w	1142 <AudioPlaySdWav::consume(unsigned long)+0x24e>
    12a6:	b.n	1148 <AudioPlaySdWav::consume(unsigned long)+0x254>
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
			data_length -= size;
    12a8:	subs	r2, r2, r5
			buffer_offset += size;
    12aa:	add	r5, r3
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
			data_length -= size;
    12ac:	str	r2, [r4, #96]	; 0x60
			buffer_offset += size;
    12ae:	strh.w	r5, [r4, #630]	; 0x276
			return false;
    12b2:	movs	r0, #0
    12b4:	b.n	f44 <AudioPlaySdWav::consume(unsigned long)+0x50>
    12b6:	nop
    12b8:	.word	0x46464952
    12bc:	.word	0x61746164

000012c0 <AudioPlaySdWav::update()>:
void AudioPlaySdWav::update(void)
{
	int32_t n;

	// only update if we're playing
	if (state == STATE_STOP) return;
    12c0:	ldrb.w	r3, [r0, #635]	; 0x27b
    12c4:	cmp	r3, #13
    12c6:	beq.w	1422 <AudioPlaySdWav::update()+0x162>
	}
}


void AudioPlaySdWav::update(void)
{
    12ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12ce:	mov	r4, r0

	// only update if we're playing
	if (state == STATE_STOP) return;

	// allocate the audio blocks to transmit
	block_left = allocate();
    12d0:	bl	45f0 <AudioStream::allocate()>
    12d4:	str	r0, [r4, #108]	; 0x6c
	if (block_left == NULL) return;
    12d6:	cmp	r0, #0
    12d8:	beq.w	1402 <AudioPlaySdWav::update()+0x142>
	if (state < 8 && (state & 1) == 1) {
    12dc:	ldrb.w	r3, [r4, #635]	; 0x27b
    12e0:	cmp	r3, #7
    12e2:	bls.w	1406 <AudioPlaySdWav::update()+0x146>
			return;
		}
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
    12e6:	movs	r3, #0
    12e8:	str	r3, [r4, #112]	; 0x70
	block_offset = 0;

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
    12ea:	ldrh.w	r3, [r4, #632]	; 0x278
    12ee:	ldrh.w	r1, [r4, #630]	; 0x276
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
	}
	block_offset = 0;
    12f2:	movs	r2, #0

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
    12f4:	subs	r1, r3, r1
	if (n > 0) {
    12f6:	cmp	r1, r2
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
	}
	block_offset = 0;
    12f8:	strh.w	r2, [r4, #116]	; 0x74

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
	if (n > 0) {
    12fc:	ble.n	130a <AudioPlaySdWav::update()+0x4a>
		// we have buffered data
		if (consume(n)) return; // it was enough to transmit audio
    12fe:	mov	r0, r4
    1300:	bl	ef4 <AudioPlaySdWav::consume(unsigned long)>
    1304:	cmp	r0, #0
    1306:	bne.w	1430 <AudioPlaySdWav::update()+0x170>
	}

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
    130a:	ldrb.w	r3, [r4, #635]	; 0x27b
    130e:	cmp	r3, #13
    1310:	add.w	r6, r4, #24
    1314:	beq.n	1362 <AudioPlaySdWav::update()+0xa2>
    1316:	mov	r0, r6
    1318:	bl	1ef0 <File::available()>
    131c:	cbz	r0, 1362 <AudioPlaySdWav::update()+0xa2>
    131e:	add.w	r7, r4, #118	; 0x76
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
    1322:	mov.w	r8, #0
    1326:	b.n	1348 <AudioPlaySdWav::update()+0x88>
    1328:	strh.w	r8, [r4, #630]	; 0x276
		bool parsing = (state >= 8);
    132c:	ldrb.w	r5, [r4, #635]	; 0x27b
		bool txok = consume(buffer_length);
    1330:	bl	ef4 <AudioPlaySdWav::consume(unsigned long)>
		if (txok) {
			if (state != STATE_STOP) return;
    1334:	ldrb.w	r3, [r4, #635]	; 0x27b
		buffer_length = wavfile.read(buffer, 512);
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
		if (txok) {
    1338:	cmp	r0, #0
    133a:	bne.n	13fe <AudioPlaySdWav::update()+0x13e>
			if (state != STATE_STOP) return;
		} else {
			if (state != STATE_STOP) {
    133c:	cmp	r3, #13
    133e:	beq.n	1362 <AudioPlaySdWav::update()+0xa2>
				if (parsing && state < 8) goto readagain;
    1340:	cmp	r5, #7
    1342:	bls.n	1382 <AudioPlaySdWav::update()+0xc2>
    1344:	cmp	r3, #7
    1346:	bhi.n	1382 <AudioPlaySdWav::update()+0xc2>

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
    1348:	mov	r1, r7
    134a:	mov.w	r2, #512	; 0x200
    134e:	mov	r0, r6
    1350:	bl	1fc0 <File::read(void*, unsigned short)>
    1354:	uxth	r3, r0
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
    1356:	mov	r1, r3
    1358:	mov	r0, r4

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
    135a:	strh.w	r3, [r4, #632]	; 0x278
		if (buffer_length == 0) goto end;
    135e:	cmp	r3, #0
    1360:	bne.n	1328 <AudioPlaySdWav::update()+0x68>
				else goto cleanup;
			}
		}
	}
end:	// end of file reached or other reason to stop
	wavfile.close();
    1362:	mov	r0, r6
    1364:	bl	1fcc <File::close()>
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    1368:	ldr	r2, [pc, #212]	; (1440 <AudioPlaySdWav::update()+0x180>)
    136a:	ldrh	r3, [r2, #0]
    136c:	cmp	r3, #0
    136e:	bne.n	1424 <AudioPlaySdWav::update()+0x164>
		SPI.notUsingInterrupt(IRQ_SOFTWARE);
    1370:	movs	r1, #94	; 0x5e
    1372:	ldr	r0, [pc, #208]	; (1444 <AudioPlaySdWav::update()+0x184>)
    1374:	bl	1ea4 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>
#if defined(HAS_KINETIS_SDHC)	
	if (!(SIM_SCGC3 & SIM_SCGC3_SDHC)) AudioStopUsingSPI();
#else 	
	AudioStopUsingSPI();
#endif	
	state_play = STATE_STOP;
    1378:	movs	r3, #13
    137a:	strb.w	r3, [r4, #636]	; 0x27c
	state = STATE_STOP;
    137e:	strb.w	r3, [r4, #635]	; 0x27b
cleanup:
	if (block_left) {
    1382:	ldr	r0, [r4, #108]	; 0x6c
    1384:	cbz	r0, 13c4 <AudioPlaySdWav::update()+0x104>
		if (block_offset > 0) {
    1386:	ldrh.w	r3, [r4, #116]	; 0x74
    138a:	cbz	r3, 13bc <AudioPlaySdWav::update()+0xfc>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    138c:	cmp	r3, #127	; 0x7f
    138e:	bhi.n	13a4 <AudioPlaySdWav::update()+0xe4>
    1390:	add.w	r3, r0, r3, lsl #1
    1394:	adds	r3, #2
    1396:	add.w	r5, r0, #258	; 0x102
				block_left->data[i] = 0;
    139a:	movs	r2, #0
    139c:	strh.w	r2, [r3, #2]!
	state_play = STATE_STOP;
	state = STATE_STOP;
cleanup:
	if (block_left) {
		if (block_offset > 0) {
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    13a0:	cmp	r3, r5
    13a2:	bne.n	139c <AudioPlaySdWav::update()+0xdc>
				block_left->data[i] = 0;
			}
			transmit(block_left, 0);
    13a4:	mov	r1, r0
    13a6:	movs	r2, #0
    13a8:	mov	r0, r4
    13aa:	bl	46ec <AudioStream::transmit(audio_block_struct*, unsigned char)>
			if (state < 8 && (state & 1) == 0) {
    13ae:	ldrb.w	r3, [r4, #635]	; 0x27b
    13b2:	cmp	r3, #7
    13b4:	bhi.n	13ba <AudioPlaySdWav::update()+0xfa>
    13b6:	lsls	r3, r3, #31
    13b8:	bpl.n	1434 <AudioPlaySdWav::update()+0x174>
    13ba:	ldr	r0, [r4, #108]	; 0x6c
				transmit(block_left, 1);
			}
		}
		release(block_left);
    13bc:	bl	4698 <AudioStream::release(audio_block_struct*)>
		block_left = NULL;
    13c0:	movs	r3, #0
    13c2:	str	r3, [r4, #108]	; 0x6c
	}
	if (block_right) {
    13c4:	ldr	r0, [r4, #112]	; 0x70
    13c6:	cbz	r0, 1402 <AudioPlaySdWav::update()+0x142>
		if (block_offset > 0) {
    13c8:	ldrh.w	r3, [r4, #116]	; 0x74
    13cc:	cbz	r3, 13f2 <AudioPlaySdWav::update()+0x132>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    13ce:	cmp	r3, #127	; 0x7f
    13d0:	bhi.n	13e6 <AudioPlaySdWav::update()+0x126>
    13d2:	add.w	r3, r0, r3, lsl #1
    13d6:	adds	r3, #2
    13d8:	add.w	r5, r0, #258	; 0x102
				block_right->data[i] = 0;
    13dc:	movs	r2, #0
    13de:	strh.w	r2, [r3, #2]!
		release(block_left);
		block_left = NULL;
	}
	if (block_right) {
		if (block_offset > 0) {
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    13e2:	cmp	r5, r3
    13e4:	bne.n	13de <AudioPlaySdWav::update()+0x11e>
				block_right->data[i] = 0;
			}
			transmit(block_right, 1);
    13e6:	mov	r1, r0
    13e8:	movs	r2, #1
    13ea:	mov	r0, r4
    13ec:	bl	46ec <AudioStream::transmit(audio_block_struct*, unsigned char)>
    13f0:	ldr	r0, [r4, #112]	; 0x70
		}
		release(block_right);
    13f2:	bl	4698 <AudioStream::release(audio_block_struct*)>
		block_right = NULL;
    13f6:	movs	r3, #0
    13f8:	str	r3, [r4, #112]	; 0x70
    13fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
		if (txok) {
			if (state != STATE_STOP) return;
    13fe:	cmp	r3, #13
    1400:	beq.n	1362 <AudioPlaySdWav::update()+0xa2>
    1402:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (state == STATE_STOP) return;

	// allocate the audio blocks to transmit
	block_left = allocate();
	if (block_left == NULL) return;
	if (state < 8 && (state & 1) == 1) {
    1406:	lsls	r2, r3, #31
    1408:	bpl.w	12e6 <AudioPlaySdWav::update()+0x26>
		// if we're playing stereo, allocate another
		// block for the right channel output
		block_right = allocate();
    140c:	bl	45f0 <AudioStream::allocate()>
    1410:	str	r0, [r4, #112]	; 0x70
		if (block_right == NULL) {
    1412:	cmp	r0, #0
    1414:	bne.w	12ea <AudioPlaySdWav::update()+0x2a>
			release(block_left);
    1418:	ldr	r0, [r4, #108]	; 0x6c
			transmit(block_right, 1);
		}
		release(block_right);
		block_right = NULL;
	}
}
    141a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (state < 8 && (state & 1) == 1) {
		// if we're playing stereo, allocate another
		// block for the right channel output
		block_right = allocate();
		if (block_right == NULL) {
			release(block_left);
    141e:	b.w	4698 <AudioStream::release(audio_block_struct*)>
    1422:	bx	lr
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    1424:	subs	r3, #1
    1426:	uxth	r3, r3
    1428:	strh	r3, [r2, #0]
    142a:	cmp	r3, #0
    142c:	beq.n	1370 <AudioPlaySdWav::update()+0xb0>
    142e:	b.n	1378 <AudioPlaySdWav::update()+0xb8>
    1430:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
				block_left->data[i] = 0;
			}
			transmit(block_left, 0);
			if (state < 8 && (state & 1) == 0) {
				transmit(block_left, 1);
    1434:	movs	r2, #1
    1436:	ldr	r1, [r4, #108]	; 0x6c
    1438:	mov	r0, r4
    143a:	bl	46ec <AudioStream::transmit(audio_block_struct*, unsigned char)>
    143e:	b.n	13ba <AudioPlaySdWav::update()+0xfa>
    1440:	.word	0x1fffac94
    1444:	.word	0x1fff8ad8

00001448 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
//audio_block_t * AudioOutputI2SQuad::inputQueueArray[4];
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    1448:	ldr	r2, [pc, #8]	; (1454 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    144a:	ldr	r1, [pc, #12]	; (1458 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    144c:	ldr	r0, [pc, #12]	; (145c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    144e:	b.w	5238 <__aeabi_atexit>
    1452:	nop
    1454:	.word	0x1fff89fc
    1458:	.word	0x00000a69
    145c:	.word	0x1fffac8c

00001460 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    1460:	ldr	r2, [pc, #8]	; (146c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    1462:	ldr	r1, [pc, #12]	; (1470 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    1464:	ldr	r0, [pc, #12]	; (1474 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    1466:	b.w	5238 <__aeabi_atexit>
    146a:	nop
    146c:	.word	0x1fff89fc
    1470:	.word	0x00000a69
    1474:	.word	0x1fffac98

00001478 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    1478:	ldr	r2, [pc, #8]	; (1484 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    147a:	ldr	r1, [pc, #12]	; (1488 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    147c:	ldr	r0, [pc, #12]	; (148c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    147e:	b.w	5238 <__aeabi_atexit>
    1482:	nop
    1484:	.word	0x1fff89fc
    1488:	.word	0x00000a69
    148c:	.word	0x1fffaca0

00001490 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    1490:	ldr	r2, [pc, #8]	; (149c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    1492:	ldr	r1, [pc, #12]	; (14a0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    1494:	ldr	r0, [pc, #12]	; (14a4 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    1496:	b.w	5238 <__aeabi_atexit>
    149a:	nop
    149c:	.word	0x1fff89fc
    14a0:	.word	0x00000a69
    14a4:	.word	0x1fffaca8

000014a8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    14a8:	ldr	r2, [pc, #8]	; (14b4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    14aa:	ldr	r1, [pc, #12]	; (14b8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    14ac:	ldr	r0, [pc, #12]	; (14bc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    14ae:	b.w	5238 <__aeabi_atexit>
    14b2:	nop
    14b4:	.word	0x1fff89fc
    14b8:	.word	0x00000a69
    14bc:	.word	0x1fffacb0

000014c0 <AudioOutputI2S::isr()>:
	dma.enable();
}


void AudioOutputI2S::isr(void)
{
    14c0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    14c4:	ldr	r3, [pc, #208]	; (1598 <AudioOutputI2S::isr()+0xd8>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    14c6:	ldr	r0, [pc, #212]	; (159c <AudioOutputI2S::isr()+0xdc>)
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    14c8:	ldr	r2, [r3, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    14ca:	ldr	r1, [pc, #212]	; (15a0 <AudioOutputI2S::isr()+0xe0>)
    14cc:	ldr	r2, [r2, #0]
    14ce:	ldrb	r3, [r3, #4]
    14d0:	strb	r3, [r1, #0]
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    14d2:	cmp	r2, r0
    14d4:	bcs.n	152a <AudioOutputI2S::isr()+0x6a>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    14d6:	ldr	r3, [pc, #204]	; (15a4 <AudioOutputI2S::isr()+0xe4>)
    14d8:	ldrb	r3, [r3, #0]
    14da:	cbnz	r3, 1530 <AudioOutputI2S::isr()+0x70>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    14dc:	ldr.w	sl, [pc, #212]	; 15b4 <AudioOutputI2S::isr()+0xf4>
	blockR = AudioOutputI2S::block_right_1st;
    14e0:	ldr.w	r9, [pc, #212]	; 15b8 <AudioOutputI2S::isr()+0xf8>
	offsetL = AudioOutputI2S::block_left_offset;
    14e4:	ldr.w	r8, [pc, #212]	; 15bc <AudioOutputI2S::isr()+0xfc>
	offsetR = AudioOutputI2S::block_right_offset;
    14e8:	ldr.w	fp, [pc, #212]	; 15c0 <AudioOutputI2S::isr()+0x100>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    14ec:	ldr.w	r6, [sl]
	blockR = AudioOutputI2S::block_right_1st;
    14f0:	ldr.w	r7, [r9]
	offsetL = AudioOutputI2S::block_left_offset;
    14f4:	ldrh.w	r4, [r8]
	offsetR = AudioOutputI2S::block_right_offset;
    14f8:	ldrh.w	r5, [fp]

	if (blockL && blockR) {
    14fc:	cmp	r6, #0
    14fe:	beq.n	157a <AudioOutputI2S::isr()+0xba>
    1500:	cbz	r7, 156c <AudioOutputI2S::isr()+0xac>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    1502:	adds	r2, r7, #4
    1504:	adds	r1, r6, #4
    1506:	add.w	r2, r2, r5, lsl #1
    150a:	add.w	r1, r1, r4, lsl #1
    150e:	bl	2cb4 <memcpy_tointerleaveLR>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    1512:	adds	r5, #64	; 0x40
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    1514:	adds	r4, #64	; 0x40
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    1516:	cmp	r4, #127	; 0x7f
    1518:	bhi.n	1554 <AudioOutputI2S::isr()+0x94>
		AudioOutputI2S::block_left_offset = offsetL;
    151a:	strh.w	r4, [r8]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    151e:	cmp	r5, #127	; 0x7f
    1520:	bhi.n	153a <AudioOutputI2S::isr()+0x7a>
		AudioOutputI2S::block_right_offset = offsetR;
    1522:	strh.w	r5, [fp]
    1526:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
    152a:	sub.w	r0, r0, #256	; 0x100
    152e:	b.n	14dc <AudioOutputI2S::isr()+0x1c>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    1530:	ldr	r3, [pc, #116]	; (15a8 <AudioOutputI2S::isr()+0xe8>)
    1532:	mov.w	r2, #1073741824	; 0x40000000
    1536:	str	r2, [r3, #0]
    1538:	b.n	14dc <AudioOutputI2S::isr()+0x1c>
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    153a:	movs	r4, #0
		AudioStream::release(blockR);
    153c:	mov	r0, r7
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    153e:	strh.w	r4, [fp]
		AudioStream::release(blockR);
    1542:	bl	4698 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    1546:	ldr	r3, [pc, #100]	; (15ac <AudioOutputI2S::isr()+0xec>)
    1548:	ldr	r2, [r3, #0]
    154a:	str.w	r2, [r9]
		AudioOutputI2S::block_right_2nd = NULL;
    154e:	str	r4, [r3, #0]
    1550:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    1554:	movs	r4, #0
		AudioStream::release(blockL);
    1556:	mov	r0, r6
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    1558:	strh.w	r4, [r8]
		AudioStream::release(blockL);
    155c:	bl	4698 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    1560:	ldr	r3, [pc, #76]	; (15b0 <AudioOutputI2S::isr()+0xf0>)
    1562:	ldr	r2, [r3, #0]
    1564:	str.w	r2, [sl]
		AudioOutputI2S::block_left_2nd = NULL;
    1568:	str	r4, [r3, #0]
    156a:	b.n	151e <AudioOutputI2S::isr()+0x5e>
	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    156c:	adds	r1, r6, #4
    156e:	add.w	r1, r1, r4, lsl #1
    1572:	bl	2cf2 <memcpy_tointerleaveL>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    1576:	adds	r4, #64	; 0x40
    1578:	b.n	1516 <AudioOutputI2S::isr()+0x56>
	} else if (blockR) {
    157a:	cbz	r7, 158a <AudioOutputI2S::isr()+0xca>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    157c:	adds	r1, r7, #4
    157e:	add.w	r1, r1, r5, lsl #1
    1582:	bl	2d32 <memcpy_tointerleaveR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    1586:	adds	r5, #64	; 0x40
    1588:	b.n	1516 <AudioOutputI2S::isr()+0x56>
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    158a:	mov.w	r2, #256	; 0x100
    158e:	mov	r1, r7
    1590:	bl	583c <memset>
    1594:	b.n	1516 <AudioOutputI2S::isr()+0x56>
    1596:	nop
    1598:	.word	0x1fffacbc
    159c:	.word	0x1fff8300
    15a0:	.word	0x4000801f
    15a4:	.word	0x1fffacd4
    15a8:	.word	0xe000e208
    15ac:	.word	0x1fffacd0
    15b0:	.word	0x1fffacd8
    15b4:	.word	0x1fffaccc
    15b8:	.word	0x1fffacc4
    15bc:	.word	0x1fffacb8
    15c0:	.word	0x1fffacc8

000015c4 <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    15c4:	push	{r4, r5, r6, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    15c6:	movs	r1, #0




void AudioOutputI2S::update(void)
{
    15c8:	mov	r4, r0
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    15ca:	bl	4720 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    15ce:	cbz	r0, 15f2 <AudioOutputI2S::update()+0x2e>
		__disable_irq();
    15d0:	cpsid	i
		if (block_left_1st == NULL) {
    15d2:	ldr	r2, [pc, #112]	; (1644 <AudioOutputI2S::update()+0x80>)
    15d4:	ldr	r3, [r2, #0]
    15d6:	cmp	r3, #0
    15d8:	beq.n	162e <AudioOutputI2S::update()+0x6a>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    15da:	ldr	r1, [pc, #108]	; (1648 <AudioOutputI2S::update()+0x84>)
    15dc:	ldr	r5, [r1, #0]
    15de:	cbz	r5, 1622 <AudioOutputI2S::update()+0x5e>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
			block_left_offset = 0;
    15e0:	ldr	r6, [pc, #104]	; (164c <AudioOutputI2S::update()+0x88>)
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    15e2:	str	r5, [r2, #0]
			block_left_2nd = block;
			block_left_offset = 0;
    15e4:	movs	r2, #0
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
    15e6:	str	r0, [r1, #0]
			block_left_offset = 0;
    15e8:	strh	r2, [r6, #0]
			__enable_irq();
    15ea:	cpsie	i
			release(tmp);
    15ec:	mov	r0, r3
    15ee:	bl	4698 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    15f2:	mov	r0, r4
    15f4:	movs	r1, #1
    15f6:	bl	4720 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    15fa:	cbz	r0, 1620 <AudioOutputI2S::update()+0x5c>
		__disable_irq();
    15fc:	cpsid	i
		if (block_right_1st == NULL) {
    15fe:	ldr	r2, [pc, #80]	; (1650 <AudioOutputI2S::update()+0x8c>)
    1600:	ldr	r3, [r2, #0]
    1602:	cbz	r3, 1638 <AudioOutputI2S::update()+0x74>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    1604:	ldr	r1, [pc, #76]	; (1654 <AudioOutputI2S::update()+0x90>)
    1606:	ldr	r4, [r1, #0]
    1608:	cbz	r4, 1628 <AudioOutputI2S::update()+0x64>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
    160a:	ldr	r5, [pc, #76]	; (1658 <AudioOutputI2S::update()+0x94>)
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    160c:	str	r4, [r2, #0]
			block_right_2nd = block;
			block_right_offset = 0;
    160e:	movs	r2, #0
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
    1610:	str	r0, [r1, #0]
			block_right_offset = 0;
    1612:	strh	r2, [r5, #0]
			__enable_irq();
    1614:	cpsie	i
			release(tmp);
    1616:	mov	r0, r3
		}
	}
}
    1618:	ldmia.w	sp!, {r4, r5, r6, lr}
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
			__enable_irq();
			release(tmp);
    161c:	b.w	4698 <AudioStream::release(audio_block_struct*)>
    1620:	pop	{r4, r5, r6, pc}
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
    1622:	str	r0, [r1, #0]
			__enable_irq();
    1624:	cpsie	i
    1626:	b.n	15f2 <AudioOutputI2S::update()+0x2e>
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
    1628:	str	r0, [r1, #0]
			__enable_irq();
    162a:	cpsie	i
    162c:	pop	{r4, r5, r6, pc}
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
    162e:	ldr	r1, [pc, #28]	; (164c <AudioOutputI2S::update()+0x88>)
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
    1630:	str	r0, [r2, #0]
			block_left_offset = 0;
    1632:	strh	r3, [r1, #0]
			__enable_irq();
    1634:	cpsie	i
    1636:	b.n	15f2 <AudioOutputI2S::update()+0x2e>
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
    1638:	ldr	r1, [pc, #28]	; (1658 <AudioOutputI2S::update()+0x94>)
	}
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
    163a:	str	r0, [r2, #0]
			block_right_offset = 0;
    163c:	strh	r3, [r1, #0]
			__enable_irq();
    163e:	cpsie	i
    1640:	pop	{r4, r5, r6, pc}
    1642:	nop
    1644:	.word	0x1fffaccc
    1648:	.word	0x1fffacd8
    164c:	.word	0x1fffacb8
    1650:	.word	0x1fffacc4
    1654:	.word	0x1fffacd0
    1658:	.word	0x1fffacc8

0000165c <AudioOutputI2S::config_i2s()>:


void AudioOutputI2S::config_i2s(void)
{
#if defined(KINETISK) || defined(KINETISL)
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    165c:	ldr	r3, [pc, #160]	; (1700 <AudioOutputI2S::config_i2s()+0xa4>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    165e:	ldr	r1, [pc, #164]	; (1704 <AudioOutputI2S::config_i2s()+0xa8>)


void AudioOutputI2S::config_i2s(void)
{
#if defined(KINETISK) || defined(KINETISL)
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    1660:	ldr	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    1662:	ldr	r0, [pc, #164]	; (1708 <AudioOutputI2S::config_i2s()+0xac>)


void AudioOutputI2S::config_i2s(void)
{
#if defined(KINETISK) || defined(KINETISL)
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    1664:	orr.w	r2, r2, #32768	; 0x8000
    1668:	str	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    166a:	ldr	r2, [r1, #0]
    166c:	orr.w	r2, r2, #2
    1670:	str	r2, [r1, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    1672:	ldr	r2, [r3, #0]
    1674:	orr.w	r2, r2, #2
    1678:	str	r2, [r3, #0]

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    167a:	ldr	r3, [r0, #0]
    167c:	cmp	r3, #0
    167e:	blt.n	16fe <AudioOutputI2S::config_i2s()+0xa2>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
    1680:	ldr	r3, [pc, #136]	; (170c <AudioOutputI2S::config_i2s()+0xb0>)
    1682:	ldr	r3, [r3, #0]
    1684:	cmp	r3, #0
    1686:	blt.n	16fe <AudioOutputI2S::config_i2s()+0xa2>

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    1688:	ldr	r2, [pc, #132]	; (1710 <AudioOutputI2S::config_i2s()+0xb4>)
    168a:	mov.w	r3, #1124073472	; 0x43000000
    168e:	str	r3, [r2, #0]
	while (I2S0_MCR & I2S_MCR_DUF) ;
    1690:	ldr	r3, [r2, #0]
    1692:	cmp	r3, #0
    1694:	blt.n	1690 <AudioOutputI2S::config_i2s()+0x34>
#endif
#endif


void AudioOutputI2S::config_i2s(void)
{
    1696:	push	{r4, r5, r6, r7, lr}
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    1698:	ldr	r4, [pc, #120]	; (1714 <AudioOutputI2S::config_i2s()+0xb8>)

	// configure transmitter
	I2S0_TMR = 0;
    169a:	ldr	r0, [pc, #124]	; (1718 <AudioOutputI2S::config_i2s()+0xbc>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    169c:	ldr.w	lr, [pc, #168]	; 1748 <AudioOutputI2S::config_i2s()+0xec>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    16a0:	ldr	r1, [pc, #120]	; (171c <AudioOutputI2S::config_i2s()+0xc0>)
	I2S0_TCR3 = I2S_TCR3_TCE;
    16a2:	ldr	r3, [pc, #124]	; (1720 <AudioOutputI2S::config_i2s()+0xc4>)
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    16a4:	ldr	r2, [pc, #124]	; (1724 <AudioOutputI2S::config_i2s()+0xc8>)
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    16a6:	ldr	r7, [pc, #128]	; (1728 <AudioOutputI2S::config_i2s()+0xcc>)

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    16a8:	ldr	r6, [pc, #128]	; (172c <AudioOutputI2S::config_i2s()+0xd0>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    16aa:	ldr	r5, [pc, #132]	; (1730 <AudioOutputI2S::config_i2s()+0xd4>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    16ac:	movw	ip, #4112	; 0x1010
    16b0:	str.w	ip, [r4]

	// configure transmitter
	I2S0_TMR = 0;
    16b4:	movs	r4, #0
    16b6:	str	r4, [r0, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    16b8:	movs	r0, #1
    16ba:	str.w	r0, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    16be:	ldr.w	lr, [pc, #140]	; 174c <AudioOutputI2S::config_i2s()+0xf0>
    16c2:	str.w	lr, [r1]
	I2S0_TCR3 = I2S_TCR3_TCE;
    16c6:	mov.w	r1, #65536	; 0x10000
    16ca:	str	r1, [r3, #0]
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    16cc:	ldr	r3, [pc, #100]	; (1734 <AudioOutputI2S::config_i2s()+0xd8>)
    16ce:	str	r3, [r2, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    16d0:	ldr.w	lr, [pc, #124]	; 1750 <AudioOutputI2S::config_i2s()+0xf4>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
	I2S0_TCR3 = I2S_TCR3_TCE;
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    16d4:	ldr	r2, [pc, #96]	; (1738 <AudioOutputI2S::config_i2s()+0xdc>)
    16d6:	str	r2, [r7, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    16d8:	str	r4, [r6, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    16da:	str	r0, [r5, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    16dc:	add.w	r0, r0, #1191182336	; 0x47000000
    16e0:	str.w	r0, [lr]
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    16e4:	ldr	r4, [pc, #84]	; (173c <AudioOutputI2S::config_i2s()+0xe0>)
	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
    16e6:	str	r1, [r7, #120]	; 0x78
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    16e8:	ldr	r0, [pc, #84]	; (1740 <AudioOutputI2S::config_i2s()+0xe4>)
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    16ea:	ldr	r1, [pc, #88]	; (1744 <AudioOutputI2S::config_i2s()+0xe8>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    16ec:	str.w	r3, [r6, #-80]
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    16f0:	mov.w	r3, #1536	; 0x600
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    16f4:	str	r2, [r5, #16]

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    16f6:	str	r3, [r4, #0]
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    16f8:	str	r3, [r0, #0]
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    16fa:	str	r3, [r1, #0]
    16fc:	pop	{r4, r5, r6, r7, pc}
    16fe:	bx	lr
    1700:	.word	0x4004803c
    1704:	.word	0x40048040
    1708:	.word	0x4002f000
    170c:	.word	0x4002f080
    1710:	.word	0x4002f100
    1714:	.word	0x4002f104
    1718:	.word	0x4002f060
    171c:	.word	0x4002f008
    1720:	.word	0x4002f00c
    1724:	.word	0x4002f010
    1728:	.word	0x4002f014
    172c:	.word	0x4002f0e0
    1730:	.word	0x4002f084
    1734:	.word	0x00011f1b
    1738:	.word	0x1f1f1f00
    173c:	.word	0x4004b008
    1740:	.word	0x4004b00c
    1744:	.word	0x4004b018
    1748:	.word	0x4002f004
    174c:	.word	0x07000001
    1750:	.word	0x4002f088

00001754 <AudioOutputI2S::begin()>:
#if defined(__IMXRT1062__)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
    1754:	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    1756:	ldr	r4, [pc, #160]	; (17f8 <AudioOutputI2S::begin()+0xa4>)
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    1758:	ldr	r7, [pc, #160]	; (17fc <AudioOutputI2S::begin()+0xa8>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    175a:	movs	r1, #1
    175c:	mov	r0, r4
    175e:	bl	4248 <DMAChannel::begin(bool)>

	block_left_1st = NULL;
    1762:	ldr	r2, [pc, #156]	; (1800 <AudioOutputI2S::begin()+0xac>)
	block_right_1st = NULL;
    1764:	ldr	r3, [pc, #156]	; (1804 <AudioOutputI2S::begin()+0xb0>)

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_left_1st = NULL;
    1766:	movs	r5, #0
    1768:	str	r5, [r2, #0]
	block_right_1st = NULL;
    176a:	str	r5, [r3, #0]

	config_i2s();
    176c:	bl	165c <AudioOutputI2S::config_i2s()>

#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0
    1770:	ldr	r3, [pc, #148]	; (1808 <AudioOutputI2S::begin()+0xb4>)

	dma.TCD->SADDR = i2s_tx_buffer;
    1772:	ldr	r2, [pc, #152]	; (180c <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
    1774:	ldr.w	lr, [pc, #176]	; 1828 <AudioOutputI2S::begin()+0xd4>

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    1778:	ldr	r0, [pc, #148]	; (1810 <AudioOutputI2S::begin()+0xbc>)
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);

	I2S0_TCSR = I2S_TCSR_SR;
    177a:	ldr	r1, [pc, #152]	; (1814 <AudioOutputI2S::begin()+0xc0>)
	block_right_1st = NULL;

	config_i2s();

#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0
    177c:	mov.w	r6, #1536	; 0x600
    1780:	str	r6, [r3, #0]

	dma.TCD->SADDR = i2s_tx_buffer;
    1782:	ldr	r3, [r4, #0]
	dma.TCD->SOFF = 2;
    1784:	movs	r6, #2
	config_i2s();

#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
    1786:	str	r2, [r3, #0]
	dma.TCD->SOFF = 2;
    1788:	strh	r6, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    178a:	ldrb	r2, [r4, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
    178c:	str.w	lr, [r3, #16]
    1790:	add.w	r2, r2, #1073741824	; 0x40000000

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    1794:	str	r0, [r3, #12]
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    1796:	str	r6, [r3, #8]
    1798:	add.w	r2, r2, #135168	; 0x21000
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    179c:	mov.w	r0, #256	; 0x100
#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    17a0:	movw	lr, #257	; 0x101
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    17a4:	movs	r6, #6
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    17a6:	strh	r0, [r3, #22]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
    17a8:	strh	r5, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    17aa:	strh	r0, [r3, #30]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
    17ac:	str	r5, [r3, #24]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    17ae:	strh	r6, [r3, #28]
#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    17b0:	strh.w	lr, [r3, #6]
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    17b4:	movs	r0, #143	; 0x8f
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);

	I2S0_TCSR = I2S_TCSR_SR;
    17b6:	mov.w	r3, #16777216	; 0x1000000

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    17ba:	strb	r5, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    17bc:	strb	r0, [r2, #0]
    17be:	str	r3, [r1, #0]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    17c0:	str	r7, [r1, #0]
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
#endif
	update_responsibility = update_setup();
    17c2:	bl	4860 <AudioStream::update_setup()>
    17c6:	ldrb	r2, [r4, #4]
    17c8:	ldr	r3, [pc, #76]	; (1818 <AudioOutputI2S::begin()+0xc4>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    17ca:	ldr	r5, [pc, #80]	; (181c <AudioOutputI2S::begin()+0xc8>)
    17cc:	strb	r0, [r3, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    17ce:	asrs	r3, r2, #5
    17d0:	lsls	r3, r3, #2
    17d2:	add.w	r3, r3, #3758096384	; 0xe0000000
    17d6:	add.w	r3, r3, #57600	; 0xe100

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    17da:	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    17de:	movs	r1, #1
    17e0:	and.w	r2, r2, #31
    17e4:	lsl.w	r2, r1, r2

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    17e8:	ldr	r6, [pc, #52]	; (1820 <AudioOutputI2S::begin()+0xcc>)
    17ea:	str.w	r6, [r5, r0, lsl #2]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    17ee:	ldr	r1, [pc, #52]	; (1824 <AudioOutputI2S::begin()+0xd0>)
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    17f0:	str	r2, [r3, #0]
    17f2:	ldrb	r3, [r4, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    17f4:	strb	r3, [r1, #0]
    17f6:	pop	{r3, r4, r5, r6, r7, pc}
    17f8:	.word	0x1fffacbc
    17fc:	.word	0x90000001
    1800:	.word	0x1fffaccc
    1804:	.word	0x1fffacc4
    1808:	.word	0x4004b004
    180c:	.word	0x1fff8200
    1810:	.word	0xfffffe00
    1814:	.word	0x4002f000
    1818:	.word	0x1fffacd4
    181c:	.word	0x1fff8400
    1820:	.word	0x000014c1
    1824:	.word	0x4000801b
    1828:	.word	0x4002f022

0000182c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    182c:	ldr	r2, [pc, #8]	; (1838 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    182e:	ldr	r1, [pc, #12]	; (183c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    1830:	ldr	r0, [pc, #12]	; (1840 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    1832:	b.w	5238 <__aeabi_atexit>
    1836:	nop
    1838:	.word	0x1fff89fc
    183c:	.word	0x00000a69
    1840:	.word	0x1fffacbc

00001844 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    1844:	ldr	r2, [pc, #8]	; (1850 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    1846:	ldr	r1, [pc, #12]	; (1854 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    1848:	ldr	r0, [pc, #12]	; (1858 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    184a:	b.w	5238 <__aeabi_atexit>
    184e:	nop
    1850:	.word	0x1fff89fc
    1854:	.word	0x00000a69
    1858:	.word	0x1fffacdc

0000185c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    185c:	movs	r0, #0
    185e:	bx	lr

00001860 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    1860:	ldrb.w	r2, [r0, #57]	; 0x39
    1864:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    1868:	subs	r0, r2, r0
    186a:	bx	lr

0000186c <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    186c:	ldrb.w	r3, [r0, #56]	; 0x38
    1870:	ldrb.w	r2, [r0, #57]	; 0x39
    1874:	cmp	r2, r3
    1876:	bls.n	1884 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    1878:	adds	r2, r3, #1
    187a:	add	r3, r0
    187c:	strb.w	r2, [r0, #56]	; 0x38
    1880:	ldrb	r0, [r3, #24]
    1882:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1884:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    1888:	bx	lr
    188a:	nop

0000188c <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    188c:	ldrb.w	r3, [r0, #56]	; 0x38
    1890:	ldrb.w	r2, [r0, #57]	; 0x39
    1894:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    1896:	itte	hi
    1898:	addhi	r3, r3, r0
    189a:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    189c:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    18a0:	bx	lr
    18a2:	nop

000018a4 <TwoWire::flush()>:
	virtual void flush(void) {
    18a4:	bx	lr
    18a6:	nop

000018a8 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    18a8:	push	{r3, r4, r5, lr}
    18aa:	mov	r5, r0
	if (transmitting || slave_mode) {
    18ac:	ldrh.w	r0, [r0, #94]	; 0x5e
    18b0:	cbz	r0, 18d8 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    18b2:	ldrb.w	r3, [r5, #93]	; 0x5d
    18b6:	mov	r4, r2
    18b8:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    18bc:	cmp	r4, r2
    18be:	bhi.n	18da <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    18c0:	add.w	r0, r5, #59	; 0x3b
    18c4:	add	r0, r3
    18c6:	mov	r2, r4
    18c8:	bl	2dac <memcpy>
		txBufferLength += quantity;
    18cc:	ldrb.w	r3, [r5, #93]	; 0x5d
    18d0:	add	r3, r4
    18d2:	strb.w	r3, [r5, #93]	; 0x5d
    18d6:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    18d8:	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    18da:	movs	r0, #1
    18dc:	mov	r4, r2
    18de:	strb	r0, [r5, #4]
    18e0:	b.n	18c0 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    18e2:	nop

000018e4 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    18e4:	ldrh.w	r3, [r0, #94]	; 0x5e
    18e8:	cbz	r3, 1906 <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    18ea:	ldrb.w	r3, [r0, #93]	; 0x5d
    18ee:	cmp	r3, #32
    18f0:	bhi.n	1902 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    18f2:	adds	r2, r0, r3
    18f4:	adds	r3, #1
    18f6:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    18fa:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    18fc:	strb.w	r1, [r2, #59]	; 0x3b
    1900:	bx	lr
    1902:	movs	r3, #1
    1904:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    1906:	movs	r0, #0
    1908:	bx	lr
    190a:	nop

0000190c <TwoWire::begin()>:
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    190c:	movs	r3, #0
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    190e:	ldr	r2, [r0, #20]
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    1910:	strb.w	r3, [r0, #56]	; 0x38
	rxBufferLength = 0;
    1914:	strb.w	r3, [r0, #57]	; 0x39
	txBufferIndex = 0;
    1918:	strb.w	r3, [r0, #92]	; 0x5c
	txBufferLength = 0;
    191c:	strb.w	r3, [r0, #93]	; 0x5d
	transmitting = 0;
    1920:	strb.w	r3, [r0, #94]	; 0x5e
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
    1924:	strb.w	r3, [r0, #95]	; 0x5f
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    1928:	ldmia	r2, {r1, r2}

void sda_rising_isr0(void);
void sda_rising_isr1(void);

void TwoWire::begin(void)
{
    192a:	push	{r4, r5}
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    192c:	ldr	r5, [r1, #0]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    192e:	ldr	r4, [r0, #16]
	rxBufferIndex = 0;
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
    1930:	str	r3, [r0, #100]	; 0x64
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    1932:	orrs	r2, r5
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
    1934:	str	r3, [r0, #104]	; 0x68
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    1936:	str	r2, [r1, #0]
	port().C1 = 0;
    1938:	strb	r3, [r4, #2]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    193a:	ldr	r2, [r0, #20]
    193c:	ldrb.w	r3, [r0, #97]	; 0x61
    1940:	ldr	r1, [pc, #88]	; (199c <TwoWire::begin()+0x90>)
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    1942:	ldr	r4, [r2, #0]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    1944:	add	r3, r2
    1946:	ldrb	r5, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1948:	ldrb	r3, [r3, #13]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    194a:	add.w	r5, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    194e:	lsls	r3, r3, #8
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    1950:	ldr	r5, [r5, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1952:	and.w	r3, r3, #1792	; 0x700
    1956:	orr.w	r3, r3, #100	; 0x64
    195a:	str	r3, [r5, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    195c:	ldrb.w	r3, [r0, #98]	; 0x62
    1960:	add	r3, r2
    1962:	ldrb	r5, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1964:	ldrb	r3, [r3, #23]
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    1966:	add.w	r1, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    196a:	lsls	r3, r3, #8
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    196c:	ldr	r1, [r1, #4]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    196e:	and.w	r3, r3, #1792	; 0x700
    1972:	orr.w	r3, r3, #100	; 0x64
    1976:	str	r3, [r1, #0]
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    1978:	ldr	r1, [r4, #0]
    197a:	ldr	r3, [r2, #4]
    197c:	tst	r1, r3
    197e:	beq.n	198c <TwoWire::begin()+0x80>
    1980:	ldr	r3, [r0, #16]
		port().F = I2C_F_DIV56; // 0.96 MHz
	}
	port().FLT = 4;
#elif F_BUS == 48000000
	if (frequency < 400000) {
		port().F = 0x27;	// 100 kHz
    1982:	movs	r2, #39	; 0x27
    1984:	strb	r2, [r3, #1]
    1986:	ldr	r3, [r0, #16]
	} else if (frequency < 1000000) {
		port().F = 0x1A; // 400 kHz
	} else {
		port().F = 0x0D; // 1 MHz
	}
	port().FLT = 4;
    1988:	movs	r2, #4
    198a:	strb	r2, [r3, #6]
    198c:	ldr	r3, [r0, #16]
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	setClock(100000);
	port().C2 = I2C_C2_HDRS;
    198e:	movs	r2, #32
    1990:	strb	r2, [r3, #5]
    1992:	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
    1994:	movs	r2, #128	; 0x80
    1996:	strb	r2, [r3, #2]
	//pinMode(3, OUTPUT);
	//pinMode(4, OUTPUT);
}
    1998:	pop	{r4, r5}
    199a:	bx	lr
    199c:	.word	0x00005fa8

000019a0 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    19a0:	push	{r4, lr}
    19a2:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    19a4:	ldrb	r3, [r2, #3]
    19a6:	uxtb	r3, r3
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    19a8:	lsls	r1, r3, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    19aa:	mov	r4, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    19ac:	bpl.n	1a2a <TwoWire::isr()+0x8a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    19ae:	movs	r1, #16
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    19b0:	lsls	r0, r3, #25

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    19b2:	strb	r1, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    19b4:	bpl.n	1a28 <TwoWire::isr()+0x88>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    19b6:	and.w	r3, r3, #4
    19ba:	and.w	r2, r3, #255	; 0xff
    19be:	cmp	r3, #0
    19c0:	beq.n	1a66 <TwoWire::isr()+0xc6>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    19c2:	ldr	r1, [pc, #244]	; (1ab8 <TwoWire::isr()+0x118>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    19c4:	ldr	r2, [r4, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    19c6:	movs	r3, #0
    19c8:	strb	r3, [r1, #0]
			txBufferLength = 0;
    19ca:	strb.w	r3, [r4, #93]	; 0x5d
			if (user_onRequest != NULL) {
    19ce:	cmp	r2, #0
    19d0:	beq.n	1a8a <TwoWire::isr()+0xea>
				user_onRequest();
    19d2:	blx	r2
			}
			if (txBufferLength == 0) {
    19d4:	ldrb.w	r3, [r4, #93]	; 0x5d
    19d8:	cmp	r3, #0
    19da:	beq.n	1a8a <TwoWire::isr()+0xea>
    19dc:	ldr	r3, [r4, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    19de:	movs	r2, #208	; 0xd0
    19e0:	strb	r2, [r3, #2]
    19e2:	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
    19e4:	ldrb.w	r2, [r4, #59]	; 0x3b
    19e8:	strb	r2, [r3, #4]
    19ea:	ldr	r3, [r4, #16]
			txBufferIndex = 1;
    19ec:	movs	r2, #1
    19ee:	strb.w	r2, [r4, #92]	; 0x5c
			receiving = 1;
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
    19f2:	movs	r2, #2
    19f4:	strb	r2, [r3, #3]
		return;
    19f6:	pop	{r4, pc}
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
    19f8:	ldr	r3, [pc, #192]	; (1abc <TwoWire::isr()+0x11c>)
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    19fa:	strb.w	r0, [r4, #96]	; 0x60
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
    19fe:	cmp	r4, r3
    1a00:	beq.n	1a98 <TwoWire::isr()+0xf8>
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		} else if (this == &Wire1) {
    1a02:	ldr	r3, [pc, #188]	; (1ac0 <TwoWire::isr()+0x120>)
    1a04:	cmp	r4, r3
    1a06:	beq.n	1aae <TwoWire::isr()+0x10e>
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    1a08:	ldrb.w	r1, [r4, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    1a0c:	ldrb	r3, [r2, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    1a0e:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    1a10:	uxtb	r3, r3
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    1a12:	bhi.n	1a24 <TwoWire::isr()+0x84>
    1a14:	ldr	r0, [pc, #160]	; (1ab8 <TwoWire::isr()+0x118>)
    1a16:	ldrb	r0, [r0, #0]
    1a18:	cbz	r0, 1a24 <TwoWire::isr()+0x84>
			rxBuffer[rxBufferLength++] = data;
    1a1a:	adds	r0, r4, r1
    1a1c:	adds	r1, #1
    1a1e:	strb.w	r1, [r4, #57]	; 0x39
    1a22:	strb	r3, [r0, #24]
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    1a24:	movs	r3, #2
    1a26:	strb	r3, [r2, #3]
    1a28:	pop	{r4, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    1a2a:	lsls	r1, r3, #25
    1a2c:	bmi.n	19b6 <TwoWire::isr()+0x16>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    1a2e:	ldrb	r1, [r2, #2]
	if (c1 & I2C_C1_TX) {
    1a30:	and.w	r1, r1, #16
    1a34:	and.w	r0, r1, #255	; 0xff
    1a38:	cmp	r1, #0
    1a3a:	beq.n	19f8 <TwoWire::isr()+0x58>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    1a3c:	ands.w	r3, r3, #1
    1a40:	bne.n	1a80 <TwoWire::isr()+0xe0>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    1a42:	ldrb.w	r1, [r4, #92]	; 0x5c
    1a46:	ldrb.w	r0, [r4, #93]	; 0x5d
    1a4a:	cmp	r0, r1
				port().D = txBuffer[txBufferIndex++];
    1a4c:	itttt	hi
    1a4e:	addhi	r3, r1, #1
    1a50:	addhi	r1, r1, r4
    1a52:	strbhi.w	r3, [r4, #92]	; 0x5c
    1a56:	ldrbhi.w	r3, [r1, #59]	; 0x3b
			} else {
				port().D = 0;
    1a5a:	strb	r3, [r2, #4]
    1a5c:	ldr	r3, [r4, #16]
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    1a5e:	movs	r2, #208	; 0xd0
    1a60:	strb	r2, [r3, #2]
    1a62:	ldr	r2, [r4, #16]
    1a64:	b.n	1a24 <TwoWire::isr()+0x84>
    1a66:	ldr	r3, [r4, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    1a68:	strb.w	r2, [r4, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    1a6c:	movs	r2, #192	; 0xc0
    1a6e:	strb	r2, [r3, #2]
    1a70:	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    1a72:	ldr	r2, [pc, #68]	; (1ab8 <TwoWire::isr()+0x118>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    1a74:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    1a76:	movs	r1, #1
    1a78:	strb	r1, [r2, #0]
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
    1a7a:	movs	r2, #2
    1a7c:	strb	r2, [r3, #3]
		return;
    1a7e:	pop	{r4, pc}
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    1a80:	movs	r3, #192	; 0xc0
    1a82:	strb	r3, [r2, #2]
    1a84:	ldr	r2, [r4, #16]
			data = port().D;
    1a86:	ldrb	r3, [r2, #4]
    1a88:	b.n	1a24 <TwoWire::isr()+0x84>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    1a8a:	movs	r2, #1
				txBuffer[0] = 0;
    1a8c:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    1a8e:	strb.w	r2, [r4, #93]	; 0x5d
				txBuffer[0] = 0;
    1a92:	strb.w	r3, [r4, #59]	; 0x3b
    1a96:	b.n	19dc <TwoWire::isr()+0x3c>
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
    1a98:	ldr	r2, [r4, #20]
    1a9a:	ldrb.w	r3, [r4, #97]	; 0x61
    1a9e:	ldr	r1, [pc, #36]	; (1ac4 <TwoWire::isr()+0x124>)
		} else if (this == &Wire1) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
    1aa0:	add	r3, r2
    1aa2:	movs	r2, #3
    1aa4:	ldrb	r0, [r3, #8]
    1aa6:	bl	3174 <attachInterrupt>
    1aaa:	ldr	r2, [r4, #16]
    1aac:	b.n	1a08 <TwoWire::isr()+0x68>
    1aae:	ldr	r2, [r4, #20]
    1ab0:	ldrb.w	r3, [r4, #97]	; 0x61
    1ab4:	ldr	r1, [pc, #16]	; (1ac8 <TwoWire::isr()+0x128>)
    1ab6:	b.n	1aa0 <TwoWire::isr()+0x100>
    1ab8:	.word	0x1ffface4
    1abc:	.word	0x1fff8a00
    1ac0:	.word	0x1fff8a6c
    1ac4:	.word	0x00001b29
    1ac8:	.word	0x00001b35

00001acc <TwoWire::sda_rising_isr()>:
    1acc:	ldr	r3, [r0, #16]
#endif

void TwoWire::sda_rising_isr(void)
{
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
    1ace:	ldrb	r3, [r3, #3]
    1ad0:	and.w	r3, r3, #32
    1ad4:	cbz	r3, 1af4 <TwoWire::sda_rising_isr()+0x28>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
    1ad6:	ldrb.w	r3, [r0, #96]	; 0x60
    1ada:	adds	r3, #1
    1adc:	uxtb	r3, r3
    1ade:	cmp	r3, #1
    1ae0:	strb.w	r3, [r0, #96]	; 0x60
    1ae4:	bls.n	1b1c <TwoWire::sda_rising_isr()+0x50>
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
    1ae6:	ldr	r2, [r0, #20]
    1ae8:	ldrb.w	r3, [r0, #97]	; 0x61
    1aec:	add	r3, r2
    1aee:	ldrb	r0, [r3, #8]
    1af0:	b.w	326c <detachInterrupt>
	Wire1.sda_rising_isr();
}
#endif

void TwoWire::sda_rising_isr(void)
{
    1af4:	push	{r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
    1af6:	ldr	r2, [r0, #20]
    1af8:	and.w	r5, r3, #255	; 0xff
    1afc:	ldrb.w	r3, [r0, #97]	; 0x61
    1b00:	add	r3, r2
    1b02:	mov	r4, r0
    1b04:	ldrb	r0, [r3, #8]
    1b06:	bl	326c <detachInterrupt>
		if (user_onReceive != NULL) {
    1b0a:	ldr	r3, [r4, #104]	; 0x68
    1b0c:	cbz	r3, 1b26 <TwoWire::sda_rising_isr()+0x5a>
			rxBufferIndex = 0;
    1b0e:	strb.w	r5, [r4, #56]	; 0x38
			user_onReceive(rxBufferLength);
    1b12:	ldrb.w	r0, [r4, #57]	; 0x39
		if (++irqcount >= 2 || !slave_mode) {
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
		}
	}
	//digitalWrite(3, LOW);
}
    1b16:	ldmia.w	sp!, {r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
		if (user_onReceive != NULL) {
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
    1b1a:	bx	r3
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
    1b1c:	ldrb.w	r3, [r0, #95]	; 0x5f
    1b20:	cmp	r3, #0
    1b22:	beq.n	1ae6 <TwoWire::sda_rising_isr()+0x1a>
    1b24:	bx	lr
    1b26:	pop	{r4, r5, r6, pc}

00001b28 <sda_rising_isr0()>:
#if !defined(WIRE_HAS_STOP_INTERRUPT)

#if defined(WIRE_IMPLEMENT_WIRE)
void sda_rising_isr0(void)
{
	Wire.sda_rising_isr();
    1b28:	ldr	r0, [pc, #4]	; (1b30 <sda_rising_isr0()+0x8>)
    1b2a:	b.w	1acc <TwoWire::sda_rising_isr()>
    1b2e:	nop
    1b30:	.word	0x1fff8a00

00001b34 <sda_rising_isr1()>:
}
#endif
#if defined(WIRE_IMPLEMENT_WIRE1)
void sda_rising_isr1(void)
{
	Wire1.sda_rising_isr();
    1b34:	ldr	r0, [pc, #4]	; (1b3c <sda_rising_isr1()+0x8>)
    1b36:	b.w	1acc <TwoWire::sda_rising_isr()>
    1b3a:	nop
    1b3c:	.word	0x1fff8a6c

00001b40 <TwoWire::wait_idle()>:
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    1b40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b44:	ldr	r7, [pc, #220]	; (1c24 <L_1545_delayMicroseconds+0x1a>)
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    1b46:	ldr.w	r9, [pc, #224]	; 1c28 <L_1545_delayMicroseconds+0x1e>
    1b4a:	ldr	r3, [r7, #0]
    1b4c:	ldr	r2, [r0, #16]
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    1b4e:	sub	sp, #8
    1b50:	mov	r6, r0
    1b52:	str	r3, [sp, #0]
	return ret;
    1b54:	ldr.w	r8, [sp]
	bool reset=false;
    1b58:	movs	r1, #0
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    1b5a:	movs	r5, #160	; 0xa0
	uint8_t i2c_status(void) {
		return port().S;
    1b5c:	ldrb	r3, [r2, #3]
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    1b5e:	lsls	r3, r3, #26
    1b60:	bpl.n	1c1a <L_1545_delayMicroseconds+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b62:	ldr	r3, [r7, #0]
    1b64:	str	r3, [sp, #4]
	return ret;
    1b66:	ldr	r3, [sp, #4]
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
    1b68:	rsb	r3, r8, r3
#if 1
		if (waited > 15 && !reset) {
    1b6c:	cmp	r3, #15
    1b6e:	bls.n	1b5c <TwoWire::wait_idle()+0x1c>
    1b70:	cbz	r1, 1b86 <TwoWire::wait_idle()+0x46>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
    1b72:	cmp	r3, #16
    1b74:	beq.n	1b5c <TwoWire::wait_idle()+0x1c>
			// bus stuck busy too long
			port().C1 = 0;
    1b76:	movs	r0, #0
    1b78:	strb	r0, [r2, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    1b7a:	ldr	r3, [r6, #16]
			port().C1 = I2C_C1_IICEN;
    1b7c:	movs	r2, #128	; 0x80
    1b7e:	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
    1b80:	add	sp, #8
    1b82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
    1b86:	ldr	r2, [r6, #20]
    1b88:	ldrb.w	r3, [r6, #97]	; 0x61
    1b8c:	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
    1b8e:	movs	r1, #5
    1b90:	ldrb	r0, [r3, #8]
    1b92:	bl	3340 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    1b96:	ldr	r2, [r6, #20]
    1b98:	ldrb.w	r3, [r6, #97]	; 0x61
    1b9c:	add	r3, r2
			pinMode(scl_pin, OUTPUT);
    1b9e:	movs	r1, #1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    1ba0:	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
    1ba4:	mov	r0, sl
    1ba6:	bl	3340 <pinMode>
    1baa:	movs	r4, #9
			for (int i=0; i < 9; i++) {
				digitalWrite(scl_pin, LOW);
    1bac:	movs	r1, #0
    1bae:	mov	r0, sl
    1bb0:	bl	3318 <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    1bb4:	mov	r3, r5

00001bb6 <L_1480_delayMicroseconds>:
    1bb6:	subs	r3, #1
    1bb8:	bne.n	1bb6 <L_1480_delayMicroseconds>
				delayMicroseconds(5);
				digitalWrite(scl_pin, HIGH);
    1bba:	movs	r1, #1
    1bbc:	mov	r0, sl
    1bbe:	bl	3318 <digitalWrite>
    1bc2:	mov	r3, r5

00001bc4 <L_1494_delayMicroseconds>:
    1bc4:	subs	r3, #1
    1bc6:	bne.n	1bc4 <L_1494_delayMicroseconds>
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
			pinMode(scl_pin, OUTPUT);
			for (int i=0; i < 9; i++) {
    1bc8:	subs	r4, #1
    1bca:	bne.n	1bac <TwoWire::wait_idle()+0x6c>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    1bcc:	ldr	r0, [r6, #20]
    1bce:	ldrb.w	r1, [r6, #97]	; 0x61
    1bd2:	add	r1, r0
    1bd4:	mov.w	r2, #320	; 0x140
    1bd8:	ldrb	r4, [r1, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1bda:	ldrb	r3, [r1, #13]
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    1bdc:	add.w	r1, r9, r4, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1be0:	lsls	r3, r3, #8
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    1be2:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1be4:	and.w	r3, r3, #1792	; 0x700
    1be8:	orr.w	r3, r3, #100	; 0x64
    1bec:	str	r3, [r1, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    1bee:	ldrb.w	r3, [r6, #98]	; 0x62
    1bf2:	add	r3, r0
    1bf4:	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1bf6:	ldrb	r3, [r3, #23]
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    1bf8:	add.w	r1, r9, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1bfc:	lsls	r3, r3, #8
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    1bfe:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1c00:	and.w	r3, r3, #1792	; 0x700
    1c04:	orr.w	r3, r3, #100	; 0x64
    1c08:	str	r3, [r1, #0]

00001c0a <L_1545_delayMicroseconds>:
    1c0a:	subs	r2, #1
    1c0c:	bne.n	1c0a <L_1545_delayMicroseconds>
    1c0e:	ldr	r2, [r6, #16]
	uint8_t i2c_status(void) {
		return port().S;
    1c10:	ldrb	r3, [r2, #3]
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    1c12:	lsls	r3, r3, #26
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
    1c14:	mov.w	r1, #1
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    1c18:	bmi.n	1b62 <TwoWire::wait_idle()+0x22>
			//Serial.println("abort");
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
    1c1a:	movs	r0, #1
}
    1c1c:	add	sp, #8
    1c1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c22:	nop
    1c24:	.word	0x1fffb108
    1c28:	.word	0x00005fa8

00001c2c <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    1c2c:	push	{r4, r5, r6, r7, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    1c2e:	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    1c30:	movs	r2, #18
    1c32:	strb	r2, [r3, #3]
    1c34:	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    1c36:	ldrb	r3, [r2, #2]
    1c38:	and.w	r3, r3, #32
	}
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    1c3c:	sub	sp, #20
    1c3e:	mov	r4, r0
    1c40:	mov	r5, r1
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    1c42:	cmp	r3, #0
    1c44:	beq.n	1d04 <TwoWire::endTransmission(unsigned char)+0xd8>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    1c46:	movs	r3, #180	; 0xb4
    1c48:	strb	r3, [r2, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c4a:	ldr	r1, [pc, #240]	; (1d3c <TwoWire::endTransmission(unsigned char)+0x110>)
    1c4c:	ldr	r2, [r4, #16]
    1c4e:	ldr	r3, [r1, #0]
    1c50:	str	r3, [sp, #0]
	return ret;
    1c52:	ldr	r6, [sp, #0]
    1c54:	b.n	1c62 <TwoWire::endTransmission(unsigned char)+0x36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c56:	ldr	r3, [r1, #0]
    1c58:	str	r3, [sp, #4]
	return ret;
    1c5a:	ldr	r3, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
    1c5c:	subs	r3, r3, r6
    1c5e:	cmp	r3, #4
    1c60:	bhi.n	1ce8 <TwoWire::endTransmission(unsigned char)+0xbc>
	uint8_t i2c_status(void) {
		return port().S;
    1c62:	ldrb	r3, [r2, #3]
	}
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    1c64:	and.w	r3, r3, #32
    1c68:	and.w	r0, r3, #255	; 0xff
    1c6c:	cmp	r3, #0
    1c6e:	beq.n	1c56 <TwoWire::endTransmission(unsigned char)+0x2a>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    1c70:	ldrb.w	r3, [r4, #93]	; 0x5d
    1c74:	cmp	r3, #0
    1c76:	beq.n	1cdc <TwoWire::endTransmission(unsigned char)+0xb0>
    1c78:	mov.w	lr, #0
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    1c7c:	mov.w	ip, #2
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
		port().D = txBuffer[i];
    1c80:	add.w	r3, r4, lr
    1c84:	ldrb.w	r3, [r3, #59]	; 0x3b
    1c88:	strb	r3, [r2, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c8a:	ldr	r3, [r1, #0]
    1c8c:	str	r3, [sp, #12]
	return ret;
    1c8e:	ldr	r7, [sp, #12]
    1c90:	ldr	r0, [r4, #16]
    1c92:	b.n	1ca4 <TwoWire::endTransmission(unsigned char)+0x78>
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
    1c94:	lsls	r3, r3, #26
    1c96:	bpl.n	1cb4 <TwoWire::endTransmission(unsigned char)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c98:	ldr	r3, [r1, #0]
    1c9a:	str	r3, [sp, #8]
	return ret;
    1c9c:	ldr	r3, [sp, #8]
			if (millis() - wait_begin > 5) {
    1c9e:	subs	r3, r3, r7
    1ca0:	cmp	r3, #5
    1ca2:	bhi.n	1cf6 <TwoWire::endTransmission(unsigned char)+0xca>
    1ca4:	ldrb	r3, [r0, #3]
    1ca6:	uxtb	r3, r3
		port().D = txBuffer[i];
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
    1ca8:	and.w	r2, r3, #2
    1cac:	and.w	r6, r2, #255	; 0xff
    1cb0:	cmp	r2, #0
    1cb2:	beq.n	1c94 <TwoWire::endTransmission(unsigned char)+0x68>
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    1cb4:	strb.w	ip, [r0, #3]
    1cb8:	ldr	r6, [r4, #16]
    1cba:	ldrb	r3, [r6, #3]
    1cbc:	uxtb	r3, r3
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
    1cbe:	lsls	r7, r3, #27
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    1cc0:	mov	r2, r6
    1cc2:	bmi.n	1d20 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
    1cc4:	lsls	r7, r3, #26
    1cc6:	bpl.n	1d20 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
    1cc8:	lsls	r3, r3, #31
    1cca:	bmi.n	1d30 <TwoWire::endTransmission(unsigned char)+0x104>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    1ccc:	add.w	lr, lr, #1
    1cd0:	ldrb.w	r3, [r4, #93]	; 0x5d
    1cd4:	uxtb.w	lr, lr
    1cd8:	cmp	r3, lr
    1cda:	bhi.n	1c80 <TwoWire::endTransmission(unsigned char)+0x54>
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	uint8_t i, status, ret=0;
    1cdc:	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
    1cde:	cbnz	r5, 1d28 <TwoWire::endTransmission(unsigned char)+0xfc>
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
    1ce0:	movs	r3, #0
    1ce2:	strb.w	r3, [r4, #94]	; 0x5e
    1ce6:	b.n	1cf2 <TwoWire::endTransmission(unsigned char)+0xc6>
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    1ce8:	strb	r0, [r2, #2]
    1cea:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    1cec:	movs	r2, #128	; 0x80
    1cee:	strb	r2, [r3, #2]
			//Serial.println("abort2");
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
    1cf0:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    1cf2:	add	sp, #20
    1cf4:	pop	{r4, r5, r6, r7, pc}
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    1cf6:	strb	r6, [r0, #2]
    1cf8:	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
    1cfa:	movs	r2, #128	; 0x80
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
    1cfc:	movs	r0, #4
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
				port().C1 = I2C_C1_IICEN;
    1cfe:	strb	r2, [r3, #2]
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    1d00:	add	sp, #20
    1d02:	pop	{r4, r5, r6, r7, pc}
    1d04:	and.w	r6, r3, #255	; 0xff
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    1d08:	bl	1b40 <TwoWire::wait_idle()>
    1d0c:	cbnz	r0, 1d14 <TwoWire::endTransmission(unsigned char)+0xe8>
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
    1d0e:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    1d10:	add	sp, #20
    1d12:	pop	{r4, r5, r6, r7, pc}
    1d14:	ldr	r3, [r4, #16]
		if (!wait_idle()) {
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    1d16:	strb.w	r6, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    1d1a:	movs	r2, #176	; 0xb0
    1d1c:	strb	r2, [r3, #2]
    1d1e:	b.n	1c4a <TwoWire::endTransmission(unsigned char)+0x1e>
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
			// suddenly lost control of the bus!
			port().C1 = I2C_C1_IICEN;
    1d20:	movs	r3, #128	; 0x80
    1d22:	strb	r3, [r6, #2]
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
    1d24:	movs	r0, #4
    1d26:	b.n	1cde <TwoWire::endTransmission(unsigned char)+0xb2>
    1d28:	ldr	r6, [r4, #16]
			break;
		}
	}
	if (sendStop) {
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
    1d2a:	movs	r3, #128	; 0x80
    1d2c:	strb	r3, [r6, #2]
    1d2e:	b.n	1ce0 <TwoWire::endTransmission(unsigned char)+0xb4>
			if (i == 0) {
				//Serial.printf("endTransmission err6\n");
				ret = 2; // 2:received NACK on transmit of address
			} else {
				//Serial.printf("endTransmission err7\n");
				ret = 3; // 3:received NACK on transmit of data 
    1d30:	cmp.w	lr, #0
    1d34:	ite	eq
    1d36:	moveq	r0, #2
    1d38:	movne	r0, #3
    1d3a:	b.n	1d2a <TwoWire::endTransmission(unsigned char)+0xfe>
    1d3c:	.word	0x1fffb108

00001d40 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    1d40:	ldr	r0, [pc, #4]	; (1d48 <i2c0_isr+0x8>)
    1d42:	b.w	19a0 <TwoWire::isr()>
    1d46:	nop
    1d48:	.word	0x1fff8a00

00001d4c <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    1d4c:	ldr	r0, [pc, #4]	; (1d54 <i2c1_isr+0x8>)
    1d4e:	b.w	19a0 <TwoWire::isr()>
    1d52:	nop
    1d54:	.word	0x1fff8a6c

00001d58 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1d58:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1d5a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1d5c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1d5e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1d60:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1d62:	beq.n	1d6a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1d64:	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1d66:	b.w	4344 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1d6a:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    1d6c:	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1d6e:	bx	r3

00001d70 <_spi_dma_rxISR0()>:
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1d70:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    1d72:	ldr	r3, [pc, #280]	; (1e8c <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1d74:	ldr	r2, [pc, #280]	; (1e90 <_spi_dma_rxISR0()+0x120>)
    1d76:	ldr	r0, [r3, #48]	; 0x30
    1d78:	ldr	r4, [r3, #44]	; 0x2c
    1d7a:	ldrb	r1, [r0, #4]
    1d7c:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    1d7e:	ldr	r1, [pc, #276]	; (1e94 <_spi_dma_rxISR0()+0x124>)
    1d80:	ldrb	r2, [r4, #4]
    1d82:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    1d84:	ldr	r2, [r3, #40]	; 0x28
    1d86:	ldrb	r0, [r0, #4]
    1d88:	strb	r0, [r1, #0]
    1d8a:	cmp	r2, #0
    1d8c:	beq.n	1e1c <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    1d8e:	ldr	r1, [r3, #4]
    1d90:	ldr	r1, [r1, #12]
    1d92:	cmp	r2, r1
    1d94:	bhi.n	1e14 <_spi_dma_rxISR0()+0xa4>
    1d96:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1d98:	ldrh	r4, [r1, #30]
    1d9a:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    1d9c:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1da0:	bmi.n	1e6e <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    1da2:	ubfx	r0, r0, #0, #15
    1da6:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1da8:	ldrh	r0, [r1, #30]
    1daa:	uxth	r0, r0
    1dac:	strh	r0, [r1, #22]
    1dae:	ldr	r1, [r3, #48]	; 0x30
    1db0:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1db2:	ldrh	r0, [r1, #30]
    1db4:	lsls	r0, r0, #16
    1db6:	bmi.n	1e5e <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    1db8:	ubfx	r0, r2, #0, #15
    1dbc:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1dbe:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    1dc0:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1dc2:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    1dc4:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1dc8:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    1dca:	it	ne
    1dcc:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    1dce:	str	r4, [r3, #40]	; 0x28
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    1dd0:	ldr	r1, [r3, #44]	; 0x2c
    1dd2:	ldr	r0, [pc, #184]	; (1e8c <_spi_dma_rxISR0()+0x11c>)
    1dd4:	ldr	r1, [r1, #0]
    1dd6:	ldr	r5, [r1, #0]
    1dd8:	add.w	r4, r0, #36	; 0x24
    1ddc:	cmp	r5, r4
    1dde:	beq.n	1e4e <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    1de0:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    1de2:	ldr	r4, [r0, #12]
    1de4:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    1de8:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    1dea:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    1dec:	itete	ne
    1dee:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    1df0:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    1df2:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    1df4:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    1df6:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    1dfa:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    1dfc:	str	r4, [r0, #52]	; 0x34
    1dfe:	ldr	r1, [r3, #48]	; 0x30
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1e00:	ldr	r3, [pc, #148]	; (1e98 <_spi_dma_rxISR0()+0x128>)
    1e02:	ldrb	r1, [r1, #4]
    1e04:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    1e06:	ldr	r1, [pc, #132]	; (1e8c <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    1e08:	cbz	r2, 1e10 <_spi_dma_rxISR0()+0xa0>
    1e0a:	ldr	r2, [r1, #44]	; 0x2c
    1e0c:	ldrb	r2, [r2, #4]
    1e0e:	strb	r2, [r3, #0]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e10:	pop	{r4, r5, r6, r7}
    1e12:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    1e14:	subs	r2, r2, r1
    1e16:	str	r2, [r3, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    1e18:	movs	r2, #1
    1e1a:	b.n	1dd0 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1e1c:	ldr	r0, [r3, #52]	; 0x34
    1e1e:	ldr	r1, [r3, #0]
    1e20:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    1e22:	ldr	r4, [pc, #120]	; (1e9c <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    1e24:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    1e26:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    1e28:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1e2a:	ldr	r5, [r5, #0]
    1e2c:	ldr	r6, [pc, #112]	; (1ea0 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    1e2e:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1e32:	movs	r7, #3
    1e34:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    1e36:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1e38:	strb.w	r7, [r3, #37]	; 0x25
    1e3c:	bne.n	1e7e <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1e3e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1e40:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1e42:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1e44:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1e46:	beq.n	1e86 <_spi_dma_rxISR0()+0x116>
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e48:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1e4a:	b.w	4344 <EventResponder::triggerEventNotImmediate()>
    1e4e:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    1e50:	ldrb.w	r0, [r0, #36]	; 0x24

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    1e54:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    1e56:	orr.w	r0, r0, #2147483648	; 0x80000000
    1e5a:	str	r0, [r1, #52]	; 0x34
    1e5c:	b.n	1dfe <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1e5e:	ldrh	r4, [r1, #30]
    1e60:	ubfx	r0, r2, #0, #9
    1e64:	and.w	r4, r4, #65024	; 0xfe00
    1e68:	orrs	r0, r4
    1e6a:	strh	r0, [r1, #30]
    1e6c:	b.n	1dbe <_spi_dma_rxISR0()+0x4e>
    1e6e:	ldrh	r4, [r1, #30]
    1e70:	ubfx	r0, r0, #0, #9
    1e74:	and.w	r4, r4, #65024	; 0xfe00
    1e78:	orrs	r0, r4
    1e7a:	strh	r0, [r1, #30]
    1e7c:	b.n	1da8 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1e7e:	mov	r3, r5
    1e80:	mov	r1, r2
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e82:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1e84:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1e86:	ldr	r3, [r0, #8]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e88:	pop	{r4, r5, r6, r7}
    1e8a:	bx	r3
    1e8c:	.word	0x1fff8ad8
    1e90:	.word	0x4000801f
    1e94:	.word	0x4000801c
    1e98:	.word	0x4000801b
    1e9c:	.word	0xff0f0000
    1ea0:	.word	0x00001d59

00001ea4 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>:
}

void SPIClass::notUsingInterrupt(IRQ_NUMBER_t interruptName)
{
	uint32_t n = (uint32_t)interruptName;
	if (n >= NVIC_NUM_INTERRUPTS) return;
    1ea4:	cmp	r1, #94	; 0x5e
    1ea6:	bhi.n	1ed0 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)+0x2c>
	//Serial.printf("interruptMask[1] = %08X\n", interruptMask[1]);
	//Serial.printf("interruptMask[2] = %08X\n", interruptMask[2]);
}

void SPIClass::notUsingInterrupt(IRQ_NUMBER_t interruptName)
{
    1ea8:	push	{r4, r5}
	uint32_t n = (uint32_t)interruptName;
	if (n >= NVIC_NUM_INTERRUPTS) return;
	interruptMask[n >> 5] &= ~(1 << (n & 0x1F));
    1eaa:	lsrs	r5, r1, #5
    1eac:	add.w	r4, r0, r5, lsl #2
    1eb0:	and.w	r1, r1, #31
    1eb4:	ldr	r3, [r4, #12]
    1eb6:	movs	r2, #1
    1eb8:	lsl.w	r1, r2, r1
    1ebc:	bic.w	r1, r3, r1
    1ec0:	str	r1, [r4, #12]
	if (interruptMask[n >> 5] == 0) {
    1ec2:	cbnz	r1, 1ece <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)+0x2a>
		interruptMasksUsed &= ~(1 << (n >> 5));
    1ec4:	ldrb	r3, [r0, #11]
    1ec6:	lsls	r2, r5
    1ec8:	bic.w	r2, r3, r2
    1ecc:	strb	r2, [r0, #11]
	}
}
    1ece:	pop	{r4, r5}
    1ed0:	bx	lr
    1ed2:	nop

00001ed4 <Print::flush()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
    1ed4:	bx	lr
    1ed6:	nop

00001ed8 <File::write(unsigned char)>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    1ed8:	push	{r4, lr}
    1eda:	sub	sp, #8
    1edc:	add	r3, sp, #8
  return write(&val, 1);
    1ede:	ldr	r2, [r0, #0]
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    1ee0:	strb.w	r1, [r3, #-1]!
  return write(&val, 1);
    1ee4:	ldr	r4, [r2, #4]
    1ee6:	mov	r1, r3
    1ee8:	movs	r2, #1
    1eea:	blx	r4
}
    1eec:	add	sp, #8
    1eee:	pop	{r4, pc}

00001ef0 <File::available()>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    1ef0:	ldr	r0, [r0, #28]
    1ef2:	cbz	r0, 1f04 <File::available()+0x14>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
    1ef4:	ldr	r3, [r0, #24]
    1ef6:	ldr	r0, [r0, #12]
    1ef8:	movw	r2, #32767	; 0x7fff
    1efc:	subs	r0, r3, r0
    1efe:	cmp	r0, r2
    1f00:	it	cs
    1f02:	movcs	r0, r2
}
    1f04:	bx	lr
    1f06:	nop

00001f08 <File::write(unsigned char const*, unsigned int)>:
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    1f08:	ldr	r3, [r0, #28]

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    1f0a:	push	{r4, lr}
    1f0c:	mov	r4, r0
  size_t t;
  if (!_file) {
    1f0e:	cbz	r3, 1f20 <File::write(unsigned char const*, unsigned int)+0x18>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1f10:	movs	r0, #0
    1f12:	strb	r0, [r3, #4]
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    1f14:	ldr	r0, [r4, #28]
    1f16:	bl	24d8 <SdFile::write(void const*, unsigned int)>
    1f1a:	ldr	r3, [r4, #28]
  if (_file->getWriteError()) {
    1f1c:	ldrb	r3, [r3, #4]
    1f1e:	cbz	r3, 1f28 <File::write(unsigned char const*, unsigned int)+0x20>
    1f20:	movs	r3, #1
    1f22:	strb	r3, [r4, #4]

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    setWriteError();
    return 0;
    1f24:	movs	r0, #0
    1f26:	pop	{r4, pc}
  if (_file->getWriteError()) {
    setWriteError();
    return 0;
  }
  return t;
}
    1f28:	pop	{r4, pc}
    1f2a:	nop

00001f2c <File::read()>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    1f2c:	ldr	r0, [r0, #28]
    1f2e:	cbz	r0, 1f50 <File::read()+0x24>
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    1f30:	push	{lr}
    1f32:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1f34:	movs	r2, #1
    1f36:	add.w	r1, sp, #7
    1f3a:	bl	2344 <SdFile::read(void*, unsigned int)>
    1f3e:	cmp	r0, #1
    1f40:	ite	eq
    1f42:	ldrbeq.w	r0, [sp, #7]
    1f46:	movne.w	r0, #4294967295
  if (_file) 
    return _file->read();
  return -1;
}
    1f4a:	add	sp, #12
    1f4c:	ldr.w	pc, [sp], #4
}

int File::read() {
  if (_file) 
    return _file->read();
  return -1;
    1f50:	mov.w	r0, #4294967295
    1f54:	bx	lr
    1f56:	nop

00001f58 <File::peek()>:
  }
  return t;
}

int File::peek() {
  if (! _file) 
    1f58:	ldr	r3, [r0, #28]
    1f5a:	cbz	r3, 1f8e <File::peek()+0x36>
    return 0;
  }
  return t;
}

int File::peek() {
    1f5c:	push	{r4, lr}
    1f5e:	sub	sp, #8
    1f60:	mov	r4, r0
    1f62:	movs	r2, #1
    1f64:	mov	r0, r3
    1f66:	add.w	r1, sp, #7
    1f6a:	bl	2344 <SdFile::read(void*, unsigned int)>
    1f6e:	cmp	r0, #1
    1f70:	beq.n	1f7a <File::peek()+0x22>
    1f72:	mov.w	r0, #4294967295
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    1f76:	add	sp, #8
    1f78:	pop	{r4, pc}
int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    1f7a:	ldr	r0, [r4, #28]
    1f7c:	ldrb.w	r4, [sp, #7]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    1f80:	ldr	r1, [r0, #12]
    1f82:	subs	r1, #1
    1f84:	bl	2468 <SdFile::seekSet(unsigned long)>

int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
    1f88:	mov	r0, r4
  if (c != -1) _file->seekCur(-1);
  return c;
}
    1f8a:	add	sp, #8
    1f8c:	pop	{r4, pc}
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    1f8e:	mov	r0, r3

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    1f90:	bx	lr
    1f92:	nop

00001f94 <File::flush()>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    1f94:	ldr	r0, [r0, #28]
    1f96:	cbz	r0, 1f9c <File::flush()+0x8>
    _file->sync();
    1f98:	b.w	24cc <SdFile::sync()>
    1f9c:	bx	lr
    1f9e:	nop

00001fa0 <File::File()>:
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1fa0:	mov.w	r2, #1000	; 0x3e8
       Serial.println(nfilecount, DEC);
    */
  }
}

File::File(void) {
    1fa4:	ldr	r1, [pc, #16]	; (1fb8 <File::File()+0x18>)
    1fa6:	str	r2, [r0, #8]
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1fa8:	movs	r2, #0
    1faa:	str	r1, [r0, #0]
    1fac:	strb	r2, [r0, #4]
    1fae:	strb	r2, [r0, #12]
  _file = 0;
    1fb0:	str	r2, [r0, #28]
  _name[0] = 0;
    1fb2:	strb	r2, [r0, #13]
  //Serial.print("Created empty file object");
}
    1fb4:	bx	lr
    1fb6:	nop
    1fb8:	.word	0x00005f74

00001fbc <File::~File()>:

File::~File(void) {
  //  Serial.print("Deleted file object");
}
    1fbc:	bx	lr
    1fbe:	nop

00001fc0 <File::read(void*, unsigned short)>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    1fc0:	ldr	r0, [r0, #28]
    1fc2:	cbz	r0, 1fc8 <File::read(void*, unsigned short)+0x8>
    return _file->read(buf, nbyte);
    1fc4:	b.w	2344 <SdFile::read(void*, unsigned int)>
  return 0;
}
    1fc8:	bx	lr
    1fca:	nop

00001fcc <File::close()>:
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
  if (_file) {
    1fcc:	ldr	r3, [r0, #28]
    1fce:	cbz	r3, 1fe6 <File::close()+0x1a>
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    1fd0:	push	{r4, lr}
    1fd2:	mov	r4, r0
  if (_file) {
    _file->close();
    1fd4:	mov	r0, r3
    1fd6:	bl	2324 <SdFile::close()>
    free(_file); 
    1fda:	ldr	r0, [r4, #28]
    1fdc:	bl	52bc <free>
    _file = 0;
    1fe0:	movs	r3, #0
    1fe2:	str	r3, [r4, #28]
    1fe4:	pop	{r4, pc}
    1fe6:	bx	lr

00001fe8 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    1fe8:	ldr	r3, [pc, #24]	; (2004 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1fea:	ldr	r2, [pc, #28]	; (2008 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    1fec:	str	r2, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1fee:	movs	r1, #2
    1ff0:	movs	r2, #0
    1ff2:	str	r1, [r3, #4]
    1ff4:	strb	r2, [r3, #2]
    1ff6:	strb.w	r2, [r3, #36]	; 0x24
    1ffa:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1ffe:	strb.w	r2, [r3, #50]	; 0x32
    2002:	bx	lr
    2004:	.word	0x1ffface8
    2008:	.word	0x00005f98

0000200c <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    200c:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    200e:	ldr	r4, [pc, #60]	; (204c <SdVolume::cacheFlush()+0x40>)
    2010:	ldrb	r3, [r4, #0]
    2012:	cbnz	r3, 2018 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    2014:	movs	r0, #1
}
    2016:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2018:	ldr	r3, [pc, #52]	; (2050 <SdVolume::cacheFlush()+0x44>)
    201a:	ldr	r5, [pc, #56]	; (2054 <SdVolume::cacheFlush()+0x48>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    201c:	ldr	r1, [r3, #0]
    201e:	ldr	r0, [r5, #0]
    2020:	ldr	r2, [pc, #52]	; (2058 <SdVolume::cacheFlush()+0x4c>)
    2022:	bl	2ab4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    2026:	cbz	r0, 2046 <SdVolume::cacheFlush()+0x3a>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2028:	ldr	r6, [pc, #48]	; (205c <SdVolume::cacheFlush()+0x50>)
    202a:	ldr	r1, [r6, #0]
    202c:	cbnz	r1, 2036 <SdVolume::cacheFlush()+0x2a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    202e:	movs	r3, #0
    2030:	strb	r3, [r4, #0]
  }
  return true;
    2032:	movs	r0, #1
    2034:	pop	{r4, r5, r6, pc}
    2036:	ldr	r0, [r5, #0]
    2038:	ldr	r2, [pc, #28]	; (2058 <SdVolume::cacheFlush()+0x4c>)
    203a:	bl	2ab4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    203e:	cbz	r0, 2046 <SdVolume::cacheFlush()+0x3a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    2040:	movs	r3, #0
    2042:	str	r3, [r6, #0]
    2044:	b.n	202e <SdVolume::cacheFlush()+0x22>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    2046:	movs	r0, #0
    2048:	pop	{r4, r5, r6, pc}
    204a:	nop
    204c:	.word	0x1fffaf44
    2050:	.word	0x1fff8b10
    2054:	.word	0x1fffad40
    2058:	.word	0x1fffad44
    205c:	.word	0x1fffad3c

00002060 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2060:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    2062:	ldr	r5, [pc, #52]	; (2098 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x38>)
    2064:	ldr	r3, [r5, #0]
    2066:	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2068:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    206a:	beq.n	208a <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    206c:	mov	r4, r0
    if (!cacheFlush()) return false;
    206e:	bl	200c <SdVolume::cacheFlush()>
    2072:	cbnz	r0, 2078 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    2074:	movs	r0, #0
    2076:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2078:	ldr	r3, [pc, #32]	; (209c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    207a:	ldr	r2, [pc, #36]	; (20a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x40>)
    207c:	ldr	r0, [r3, #0]
    207e:	mov	r1, r4
    2080:	bl	2928 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    2084:	cmp	r0, #0
    2086:	beq.n	2074 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    2088:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    208a:	ldr	r3, [pc, #24]	; (20a4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x44>)
    208c:	ldrb	r1, [r3, #0]
    208e:	orrs	r1, r6
    2090:	strb	r1, [r3, #0]
  return true;
    2092:	movs	r0, #1
}
    2094:	pop	{r4, r5, r6, pc}
    2096:	nop
    2098:	.word	0x1fff8b10
    209c:	.word	0x1fffad40
    20a0:	.word	0x1fffad44
    20a4:	.word	0x1fffaf44

000020a8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    20a8:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    20aa:	ldrb.w	r3, [r0, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    20ae:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    20b0:	cmp	r3, #16

  if (lba != cacheBlockNumber_) {
    20b2:	ldr	r3, [pc, #104]	; (211c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    20b4:	mov	r5, r0
    20b6:	mov	r6, r1
    20b8:	mov	r7, r2

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    20ba:	ldr	r3, [r3, #0]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    20bc:	beq.n	20ec <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    20be:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    20c2:	cmp	r4, r3
    20c4:	bne.n	20f4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    20c6:	and.w	r6, r6, #127	; 0x7f
    20ca:	ldr	r2, [pc, #84]	; (2120 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    20cc:	str.w	r7, [r2, r6, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    20d0:	ldr	r1, [pc, #80]	; (2124 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    20d2:	ldrb	r0, [r5, #24]
    20d4:	ldrb	r2, [r1, #0]
    20d6:	cmp	r0, #1
    20d8:	orr.w	r2, r2, #1
    20dc:	strb	r2, [r1, #0]
    20de:	bls.n	2112 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6a>
    20e0:	ldr	r1, [r5, #8]
    20e2:	ldr	r2, [pc, #68]	; (2128 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    20e4:	add	r3, r1
    20e6:	str	r3, [r2, #0]
  return true;
    20e8:	movs	r0, #1
    20ea:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    20ec:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    20f0:	cmp	r4, r3
    20f2:	beq.n	2106 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x5e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    20f4:	movs	r1, #0
    20f6:	mov	r0, r4
    20f8:	bl	2060 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    20fc:	cbz	r0, 2114 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
  }
  // store entry
  if (fatType_ == 16) {
    20fe:	ldrb.w	r3, [r5, #32]
    2102:	cmp	r3, #16
    2104:	bne.n	2116 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2106:	uxtb	r6, r6
    2108:	ldr	r2, [pc, #20]	; (2120 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    210a:	mov	r3, r4
    210c:	strh.w	r7, [r2, r6, lsl #1]
    2110:	b.n	20d0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    2112:	movs	r0, #1
}
    2114:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2116:	mov	r3, r4
    2118:	b.n	20c6 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    211a:	nop
    211c:	.word	0x1fff8b10
    2120:	.word	0x1fffad44
    2124:	.word	0x1fffaf44
    2128:	.word	0x1fffad3c

0000212c <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    212c:	ldr	r3, [r0, #12]
    212e:	adds	r3, #1
    2130:	cmp	r3, r1
    2132:	bcc.n	2166 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2134:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2136:	ldrb.w	r3, [r0, #32]
    213a:	cmp	r3, #16
  if (lba != cacheBlockNumber_) {
    213c:	ldr	r3, [pc, #84]	; (2194 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x68>)
    213e:	mov	r4, r0
    2140:	mov	r6, r2
    2142:	mov	r5, r1
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    2144:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    2146:	ldr	r3, [r3, #0]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2148:	beq.n	216a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    214a:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    214e:	cmp	r0, r3
    2150:	bne.n	2172 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x46>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2152:	and.w	r1, r5, #127	; 0x7f
    2156:	ldr	r3, [pc, #64]	; (2198 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    2158:	ldr.w	r3, [r3, r1, lsl #2]
    215c:	bic.w	r3, r3, #4026531840	; 0xf0000000
    2160:	str	r3, [r6, #0]
    2162:	movs	r0, #1
  }
  return true;
}
    2164:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    2166:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    2168:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    216a:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    216e:	cmp	r0, r3
    2170:	beq.n	2182 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x56>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2172:	movs	r1, #0
    2174:	bl	2060 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2178:	cbz	r0, 2190 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
  }
  if (fatType_ == 16) {
    217a:	ldrb.w	r3, [r4, #32]
    217e:	cmp	r3, #16
    2180:	bne.n	2152 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2182:	uxtb	r1, r5
    2184:	ldr	r3, [pc, #16]	; (2198 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    2186:	ldrh.w	r3, [r3, r1, lsl #1]
    218a:	str	r3, [r6, #0]
    218c:	movs	r0, #1
    218e:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    2190:	movs	r0, #0
    2192:	pop	{r4, r5, r6, pc}
    2194:	.word	0x1fff8b10
    2198:	.word	0x1fffad44

0000219c <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    219c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    21a0:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    21a2:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    21a4:	cbz	r7, 2202 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    21a6:	adds	r7, #1

    // don't save new start location
    setStart = false;
    21a8:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    21ac:	ldr	r3, [r0, #12]
    21ae:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    21b2:	cbz	r3, 21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    21b4:	mov	fp, r1
    21b6:	mov	r6, r0
    21b8:	mov	r9, r2
    21ba:	mov	r4, r7
    21bc:	movs	r5, #0
    21be:	b.n	21cc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    21c0:	mov	r4, r3
    21c2:	mov	r7, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    21c4:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    21c6:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    21c8:	cmp	r3, r5
    21ca:	bls.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    21cc:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    21ce:	it	cc
    21d0:	movcc	r4, #2
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    21d2:	mov	r1, r4
    21d4:	add	r2, sp, #4
    21d6:	mov	r0, r6
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    21d8:	it	cc
    21da:	movcc	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    21dc:	bl	212c <SdVolume::fatGet(unsigned long, unsigned long*) const>
    21e0:	adds	r3, r4, #1

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    21e2:	subs	r1, r3, r7
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    21e4:	cbz	r0, 21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    if (f != 0) {
    21e6:	ldr	r2, [sp, #4]
    21e8:	cmp	r2, #0
    21ea:	bne.n	21c0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    21ec:	cmp	fp, r1
    21ee:	beq.n	2212 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x76>
    21f0:	mov	r4, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    21f2:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    21f4:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    21f6:	cmp	r3, r5
    21f8:	bhi.n	21cc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    21fa:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    21fc:	add	sp, #12
    21fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    2202:	sub.w	sl, r1, #1
    2206:	clz	sl, sl

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    220a:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    220c:	mov.w	sl, sl, lsr #5
    2210:	b.n	21ac <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2212:	cmp	r4, #1
    2214:	bls.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2216:	ldr	r3, [r6, #12]
    2218:	adds	r3, #1
    221a:	cmp	r4, r3
    221c:	bhi.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    221e:	mvn.w	r2, #4026531840	; 0xf0000000
    2222:	mov	r1, r4
    2224:	mov	r0, r6
    2226:	bl	20a8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    222a:	cmp	r0, #0
    222c:	beq.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // link clusters
  while (endCluster > bgnCluster) {
    222e:	cmp	r7, r4
    2230:	bcs.n	225c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2232:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2234:	cmp	r4, #1
    2236:	bls.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2238:	ldr	r3, [r6, #12]
    223a:	adds	r3, #1
    223c:	cmp	r4, r3
    223e:	bhi.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    2240:	adds	r2, r4, #1
    2242:	mov	r1, r4
    2244:	mov	r0, r6
    2246:	bl	20a8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    224a:	cmp	r0, #0
    224c:	beq.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    224e:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2250:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2254:	beq.n	225c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2256:	cmp	r4, #1
    2258:	bne.n	2238 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9c>
    225a:	b.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    225c:	ldr.w	r1, [r9]
    2260:	cbz	r1, 227a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xde>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2262:	cmp	r1, #1
    2264:	bls.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2266:	ldr	r3, [r6, #12]
    2268:	adds	r3, #1
    226a:	cmp	r1, r3
    226c:	bhi.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    226e:	mov	r2, r7
    2270:	mov	r0, r6
    2272:	bl	20a8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2276:	cmp	r0, #0
    2278:	beq.n	21fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    227a:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    227e:	cmp.w	sl, #0
    2282:	beq.n	2288 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xec>
    2284:	adds	r7, #1
    2286:	str	r7, [r6, #0]

  return true;
    2288:	movs	r0, #1
    228a:	b.n	21fc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

0000228c <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    228c:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    228e:	ldrsb.w	r3, [r0, #5]
    2292:	cmp	r3, #0
    2294:	blt.n	229e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    2296:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    229a:	b.w	200c <SdVolume::cacheFlush()>
    229e:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    22a0:	movs	r1, #1
    22a2:	ldr	r0, [r0, #16]
    22a4:	bl	2060 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    22a8:	cbz	r0, 22ea <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    22aa:	ldrb	r5, [r4, #20]
    22ac:	ldr	r3, [pc, #64]	; (22f0 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    22ae:	adds.w	r5, r3, r5, lsl #5
    22b2:	beq.n	22ea <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    22b4:	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    22b6:	ldr	r2, [pc, #60]	; (22f4 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    22b8:	cmp	r3, #1
    22ba:	itt	ls
    22bc:	ldrls	r3, [r4, #24]
    22be:	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    22c0:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    22c2:	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    22c4:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    22c6:	lsrs	r3, r3, #16
    22c8:	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    22ca:	cbz	r2, 22da <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4e>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    22cc:	add.w	r1, r5, #22
    22d0:	add.w	r0, r5, #24
    22d4:	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    22d6:	ldrh	r3, [r5, #24]
    22d8:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    22da:	ldrb	r3, [r4, #5]
    22dc:	and.w	r3, r3, #127	; 0x7f
    22e0:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    22e2:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    22e6:	b.w	200c <SdVolume::cacheFlush()>
}
    22ea:	movs	r0, #0
    22ec:	pop	{r3, r4, r5, pc}
    22ee:	nop
    22f0:	.word	0x1fffad44
    22f4:	.word	0x1fffaf48

000022f8 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    22f8:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    22fa:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    22fe:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    2300:	movs	r1, #1
    2302:	ldr	r0, [r0, #32]
    2304:	bl	219c <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    2308:	cbz	r0, 2320 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    230a:	ldr	r3, [r4, #28]
    230c:	cbnz	r3, 231e <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    230e:	ldrb	r3, [r4, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    2310:	ldr	r2, [r4, #8]
    2312:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    2314:	orn	r3, r3, #127	; 0x7f
    2318:	strb	r3, [r4, #5]
    231a:	movs	r0, #1
    231c:	pop	{r4, pc}
  }
  return true;
    231e:	movs	r0, #1
}
    2320:	pop	{r4, pc}
    2322:	nop

00002324 <SdFile::close()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    2324:	ldrb	r2, [r0, #6]
    2326:	cbnz	r2, 232c <SdFile::close()+0x8>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    2328:	movs	r0, #0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    232a:	bx	lr
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    232c:	push	{r4, lr}
    232e:	mov	r4, r0
    2330:	bl	228c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  if (!sync())return false;
    2334:	cbz	r0, 233e <SdFile::close()+0x1a>
  type_ = FAT_FILE_TYPE_CLOSED;
    2336:	movs	r3, #0
    2338:	strb	r3, [r4, #6]
  return true;
    233a:	movs	r0, #1
}
    233c:	pop	{r4, pc}
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    233e:	movs	r0, #0
    2340:	pop	{r4, pc}
    2342:	nop

00002344 <SdFile::read(void*, unsigned int)>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    2344:	ldrb	r3, [r0, #6]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2346:	cbnz	r3, 234e <SdFile::read(void*, unsigned int)+0xa>
    2348:	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    234c:	bx	lr
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    234e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2352:	mov	fp, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2354:	ldrb	r1, [r0, #5]
    2356:	lsls	r1, r1, #31
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    2358:	sub	sp, #12
    235a:	mov	r5, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    235c:	bpl.n	2410 <SdFile::read(void*, unsigned int)+0xcc>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    235e:	ldr	r1, [r0, #12]
    2360:	ldr	r4, [r0, #24]
    2362:	subs	r4, r4, r1
    2364:	cmp	r4, r2
    2366:	it	cs
    2368:	movcs	r4, r2
    236a:	mov	r6, r4
    236c:	str	r4, [sp, #4]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    236e:	cmp	r4, #0
    2370:	beq.n	243c <SdFile::read(void*, unsigned int)+0xf8>
    2372:	mov	r2, r3
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    2374:	cmp	r2, #2
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    2376:	ldr.w	r9, [pc, #232]	; 2460 <SdFile::read(void*, unsigned int)+0x11c>

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    237a:	ldr	r7, [pc, #224]	; (245c <SdFile::read(void*, unsigned int)+0x118>)
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    237c:	ldr.w	r8, [pc, #228]	; 2464 <SdFile::read(void*, unsigned int)+0x120>
    2380:	ldr	r2, [r5, #32]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    2382:	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    2386:	beq.n	2408 <SdFile::read(void*, unsigned int)+0xc4>
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2388:	ldrb	r4, [r2, #4]
    238a:	subs	r4, #1
    238c:	and.w	r4, r4, r1, lsr #9
    2390:	uxtb	r4, r4
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
    2392:	cmp.w	sl, #0
    2396:	bne.n	2456 <SdFile::read(void*, unsigned int)+0x112>
    2398:	cmp	r4, #0
    239a:	bne.n	2456 <SdFile::read(void*, unsigned int)+0x112>
        // start of new cluster
        if (curPosition_ == 0) {
    239c:	cmp	r1, #0
    239e:	bne.n	2444 <SdFile::read(void*, unsigned int)+0x100>
          // use first cluster in file
          curCluster_ = firstCluster_;
    23a0:	ldr	r1, [r5, #28]
    23a2:	str	r1, [r5, #8]
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    23a4:	ldrb	r0, [r2, #16]
    23a6:	ldr	r2, [r2, #20]
    23a8:	subs	r1, #2
    23aa:	lsls	r1, r0
    23ac:	add	r4, r2
    23ae:	adds	r0, r1, r4
    }
    int32_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    23b0:	rsb	r4, sl, #512	; 0x200

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    23b4:	ldrb	r2, [r5, #5]
    23b6:	cmp	r4, r6
    23b8:	it	ge
    23ba:	movge	r4, r6
    23bc:	lsls	r3, r2, #25
    23be:	bmi.n	241a <SdFile::read(void*, unsigned int)+0xd6>
    23c0:	cmp.w	r4, #512	; 0x200
    23c4:	beq.n	241a <SdFile::read(void*, unsigned int)+0xd6>
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    23c6:	movs	r1, #0
    23c8:	bl	2060 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    23cc:	cbz	r0, 2410 <SdFile::read(void*, unsigned int)+0xcc>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    23ce:	add.w	lr, sl, r9
      uint8_t* end = src + n;
    23d2:	add.w	r0, lr, r4
      while (src != end) *dst++ = *src++;
    23d6:	cmp	lr, r0
    23d8:	beq.n	23f2 <SdFile::read(void*, unsigned int)+0xae>
    23da:	add.w	r2, fp, #4294967295
    23de:	mov	r3, lr
    23e0:	ldrb.w	r1, [r3], #1
    23e4:	strb.w	r1, [r2, #1]!
    23e8:	cmp	r0, r3
    23ea:	bne.n	23e0 <SdFile::read(void*, unsigned int)+0x9c>
    23ec:	rsb	r0, lr, r0
    23f0:	add	fp, r0
    }
    curPosition_ += n;
    23f2:	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    23f4:	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    23f6:	add	r1, r4
    23f8:	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    23fa:	beq.n	243c <SdFile::read(void*, unsigned int)+0xf8>
    23fc:	ldrb	r2, [r5, #6]
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    23fe:	cmp	r2, #2

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    2400:	ubfx	sl, r1, #0, #9
    2404:	ldr	r2, [r5, #32]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    2406:	bne.n	2388 <SdFile::read(void*, unsigned int)+0x44>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    2408:	ldr	r0, [r2, #36]	; 0x24
    240a:	add.w	r0, r0, r1, lsr #9
    240e:	b.n	23b0 <SdFile::read(void*, unsigned int)+0x6c>
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2410:	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    2414:	add	sp, #12
    2416:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    241a:	ldr	r2, [r7, #0]
    241c:	cmp	r0, r2
    241e:	beq.n	23c6 <SdFile::read(void*, unsigned int)+0x82>
    2420:	mov	r1, r0
    2422:	mov	r2, fp
    2424:	ldr.w	r0, [r8]
    2428:	bl	2928 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
      if (!vol_->readBlock(block, dst)) return -1;
    242c:	cmp	r0, #0
    242e:	beq.n	2410 <SdFile::read(void*, unsigned int)+0xcc>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    2430:	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    2432:	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    2434:	add	r1, r4
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    2436:	add	fp, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    2438:	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    243a:	bne.n	23fc <SdFile::read(void*, unsigned int)+0xb8>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    243c:	ldr	r0, [sp, #4]
}
    243e:	add	sp, #12
    2440:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    2444:	mov	r0, r2
    2446:	ldr	r1, [r5, #8]
    2448:	add.w	r2, r5, #8
    244c:	bl	212c <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2450:	cmp	r0, #0
    2452:	beq.n	2410 <SdFile::read(void*, unsigned int)+0xcc>
    2454:	ldr	r2, [r5, #32]
    2456:	ldr	r1, [r5, #8]
    2458:	b.n	23a4 <SdFile::read(void*, unsigned int)+0x60>
    245a:	nop
    245c:	.word	0x1fff8b10
    2460:	.word	0x1fffad44
    2464:	.word	0x1fffad40

00002468 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    2468:	push	{r3, r4, r5, r6, r7, lr}
    246a:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    246c:	cbz	r3, 2474 <SdFile::seekSet(unsigned long)+0xc>
    246e:	ldr	r2, [r0, #24]
    2470:	cmp	r2, r1
    2472:	bcs.n	2478 <SdFile::seekSet(unsigned long)+0x10>
    2474:	movs	r0, #0
    2476:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    2478:	cmp	r3, #2
    247a:	mov	r7, r1
    247c:	mov	r5, r0
    247e:	beq.n	24b6 <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    2480:	cbz	r7, 24c4 <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    2482:	ldr	r3, [r5, #32]
    2484:	ldr	r1, [r5, #12]
    2486:	ldrb	r4, [r3, #16]
    2488:	subs	r2, r1, #1
    248a:	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    248e:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    2490:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    2492:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    2494:	cmp	r2, r4
    2496:	bls.n	24bc <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    2498:	ldr	r3, [r5, #28]
    249a:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    249c:	add.w	r6, r5, #8
    24a0:	b.n	24b0 <SdFile::seekSet(unsigned long)+0x48>
    24a2:	ldr	r1, [r5, #8]
    24a4:	ldr	r0, [r5, #32]
    24a6:	bl	212c <SdVolume::fatGet(unsigned long, unsigned long*) const>
    24aa:	subs	r4, #1
    24ac:	cmp	r0, #0
    24ae:	beq.n	2474 <SdFile::seekSet(unsigned long)+0xc>
    24b0:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    24b2:	cmp	r4, #0
    24b4:	bne.n	24a2 <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    24b6:	str	r7, [r5, #12]
    return true;
    24b8:	movs	r0, #1
    24ba:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    24bc:	cmp	r1, #0
    24be:	beq.n	2498 <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    24c0:	subs	r4, r4, r2
    24c2:	b.n	249c <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    24c4:	str	r7, [r5, #8]
    curPosition_ = 0;
    24c6:	str	r7, [r5, #12]
    return true;
    24c8:	movs	r0, #1
    24ca:	pop	{r3, r4, r5, r6, r7, pc}

000024cc <SdFile::sync()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    24cc:	ldrb	r3, [r0, #6]
    24ce:	cbz	r3, 24d4 <SdFile::sync()+0x8>
    24d0:	b.w	228c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    24d4:	mov	r0, r3
    24d6:	bx	lr

000024d8 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    24d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24dc:	mov	fp, r1

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    24de:	ldrb	r1, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    24e0:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    24e2:	cmp	r1, #1
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    24e4:	mov	r7, r0
    24e6:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    24e8:	beq.n	24f6 <SdFile::write(void const*, unsigned int)+0x1e>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    24ea:	movs	r3, #1
    24ec:	strb	r3, [r7, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    24ee:	movs	r0, #0
}
    24f0:	add	sp, #20
    24f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    24f6:	ldrb	r2, [r0, #5]
    24f8:	lsls	r1, r2, #30
    24fa:	bpl.n	24ea <SdFile::write(void const*, unsigned int)+0x12>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    24fc:	lsls	r3, r2, #29
    24fe:	bpl.n	2512 <SdFile::write(void const*, unsigned int)+0x3a>
    2500:	ldr	r4, [r7, #12]
    2502:	ldr	r1, [r7, #24]
    2504:	cmp	r4, r1
    2506:	beq.w	265a <SdFile::write(void const*, unsigned int)+0x182>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    250a:	bl	2468 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    250e:	cmp	r0, #0
    2510:	beq.n	24ea <SdFile::write(void const*, unsigned int)+0x12>
  }

  while (nToWrite > 0) {
    2512:	ldr	r3, [sp, #4]
    2514:	ldr	r4, [r7, #12]
    2516:	cmp	r3, #0
    2518:	beq.n	25ae <SdFile::write(void const*, unsigned int)+0xd6>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    251a:	ldr.w	r9, [pc, #396]	; 26a8 <SdFile::write(void const*, unsigned int)+0x1d0>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    251e:	ldr.w	sl, [pc, #396]	; 26ac <SdFile::write(void const*, unsigned int)+0x1d4>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    2522:	ldr.w	r8, [sp, #4]
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2526:	ldr	r0, [r7, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2528:	ldrb	r6, [r0, #4]
    252a:	subs	r6, #1
    252c:	and.w	r6, r6, r4, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    2530:	ands.w	r6, r6, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2534:	ubfx	r4, r4, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    2538:	bne.n	25c0 <SdFile::write(void const*, unsigned int)+0xe8>
    253a:	cmp	r4, #0
    253c:	bne.n	25c0 <SdFile::write(void const*, unsigned int)+0xe8>
      // start of new cluster
      if (curCluster_ == 0) {
    253e:	ldr	r1, [r7, #8]
    2540:	cmp	r1, #0
    2542:	bne.n	2624 <SdFile::write(void const*, unsigned int)+0x14c>
        if (firstCluster_ == 0) {
    2544:	ldr	r2, [r7, #28]
    2546:	cmp	r2, #0
    2548:	beq.n	2648 <SdFile::write(void const*, unsigned int)+0x170>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    254a:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    254c:	rsb	r5, r4, #512	; 0x200
    2550:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    2552:	cmp	r5, r8
    2554:	bls.n	25cc <SdFile::write(void const*, unsigned int)+0xf4>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2556:	ldrb	r5, [r0, #16]
    2558:	ldr	r1, [r0, #20]
    255a:	subs	r2, #2
    255c:	lsls	r2, r5
    255e:	add	r6, r1
    2560:	add	r6, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    2562:	uxth.w	r5, r8
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2566:	cbnz	r4, 2570 <SdFile::write(void const*, unsigned int)+0x98>
    2568:	ldr	r0, [r7, #12]
    256a:	ldr	r2, [r7, #24]
    256c:	cmp	r0, r2
    256e:	bcs.n	260a <SdFile::write(void const*, unsigned int)+0x132>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2570:	mov	r0, r6
    2572:	movs	r1, #1
    2574:	bl	2060 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2578:	cmp	r0, #0
    257a:	beq.n	24ea <SdFile::write(void const*, unsigned int)+0x12>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    257c:	add	r4, r9
      uint8_t* end = dst + n;
    257e:	add.w	lr, r4, r5
      while (dst != end) *dst++ = *src++;
    2582:	cmp	r4, lr
    2584:	beq.n	25a2 <SdFile::write(void const*, unsigned int)+0xca>
    2586:	add.w	r1, fp, #4294967295
    258a:	subs	r2, r4, #1
    258c:	add.w	r6, lr, #4294967295
    2590:	ldrb.w	r0, [r1, #1]!
    2594:	strb.w	r0, [r2, #1]!
    2598:	cmp	r6, r2
    259a:	bne.n	2590 <SdFile::write(void const*, unsigned int)+0xb8>
    259c:	rsb	r4, r4, lr
    25a0:	add	fp, r4
    }
    nToWrite -= n;
    curPosition_ += n;
    25a2:	ldr	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    25a4:	subs.w	r8, r8, r5
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    25a8:	add	r4, r5
    25aa:	str	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    25ac:	bne.n	2526 <SdFile::write(void const*, unsigned int)+0x4e>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    25ae:	ldr	r3, [r7, #24]
    25b0:	cmp	r3, r4
    25b2:	bcs.n	2664 <SdFile::write(void const*, unsigned int)+0x18c>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    25b4:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    25b6:	str	r4, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    25b8:	orr.w	r2, r2, #128	; 0x80
    25bc:	strb	r2, [r7, #5]
    25be:	b.n	2676 <SdFile::write(void const*, unsigned int)+0x19e>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    25c0:	rsb	r5, r4, #512	; 0x200
    25c4:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    25c6:	cmp	r5, r8
    25c8:	ldr	r2, [r7, #8]
    25ca:	bhi.n	2556 <SdFile::write(void const*, unsigned int)+0x7e>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    25cc:	ldrb	r1, [r0, #16]
    25ce:	ldr	r0, [r0, #20]
    25d0:	subs	r2, #2
    25d2:	lsls	r2, r1
    25d4:	add	r6, r0
    if (n == 512) {
    25d6:	cmp.w	r5, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    25da:	add	r6, r2
    if (n == 512) {
    25dc:	bne.n	2566 <SdFile::write(void const*, unsigned int)+0x8e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    25de:	ldr.w	r2, [sl]
    25e2:	cmp	r6, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    25e4:	itt	eq
    25e6:	moveq.w	r2, #4294967295
    25ea:	streq.w	r2, [sl]
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    25ee:	ldr	r2, [pc, #168]	; (2698 <SdFile::write(void const*, unsigned int)+0x1c0>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    25f0:	mov	r1, r6
    25f2:	ldr	r0, [r2, #0]
    25f4:	mov	r2, fp
    25f6:	bl	2ab4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    25fa:	cmp	r0, #0
    25fc:	beq.w	24ea <SdFile::write(void const*, unsigned int)+0x12>
      src += 512;
    2600:	add.w	fp, fp, #512	; 0x200
    2604:	mov.w	r5, #512	; 0x200
    2608:	b.n	25a2 <SdFile::write(void const*, unsigned int)+0xca>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    260a:	bl	200c <SdVolume::cacheFlush()>
    260e:	cmp	r0, #0
    2610:	beq.w	24ea <SdFile::write(void const*, unsigned int)+0x12>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2614:	ldr	r1, [pc, #132]	; (269c <SdFile::write(void const*, unsigned int)+0x1c4>)
        SdVolume::cacheBlockNumber_ = block;
    2616:	str.w	r6, [sl]
    261a:	ldrb	r2, [r1, #0]
    261c:	orr.w	r2, r2, #1
    2620:	strb	r2, [r1, #0]
    2622:	b.n	257c <SdFile::write(void const*, unsigned int)+0xa4>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2624:	add	r2, sp, #12
    2626:	bl	212c <SdVolume::fatGet(unsigned long, unsigned long*) const>
    262a:	cmp	r0, #0
    262c:	beq.w	24f0 <SdFile::write(void const*, unsigned int)+0x18>
        if (vol_->isEOC(next)) {
    2630:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2632:	ldr	r3, [pc, #108]	; (26a0 <SdFile::write(void const*, unsigned int)+0x1c8>)
    2634:	ldrb.w	r5, [r0, #32]
    2638:	ldr	r2, [sp, #12]
    263a:	movw	r1, #65528	; 0xfff8
    263e:	cmp	r5, #16
    2640:	it	ne
    2642:	movne	r1, r3
    2644:	cmp	r2, r1
    2646:	bcc.n	254a <SdFile::write(void const*, unsigned int)+0x72>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2648:	mov	r0, r7
    264a:	bl	22f8 <SdFile::addCluster()>
    264e:	cmp	r0, #0
    2650:	beq.w	24ea <SdFile::write(void const*, unsigned int)+0x12>
    2654:	ldr	r0, [r7, #32]
    2656:	ldr	r2, [r7, #8]
    2658:	b.n	254c <SdFile::write(void const*, unsigned int)+0x74>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    265a:	ldr	r3, [sp, #4]
    265c:	cmp	r3, #0
    265e:	bne.w	251a <SdFile::write(void const*, unsigned int)+0x42>
    2662:	b.n	2676 <SdFile::write(void const*, unsigned int)+0x19e>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    2664:	ldr	r3, [pc, #60]	; (26a4 <SdFile::write(void const*, unsigned int)+0x1cc>)
    2666:	ldrb	r2, [r7, #5]
    2668:	ldr	r3, [r3, #0]
    266a:	cbz	r3, 2676 <SdFile::write(void const*, unsigned int)+0x19e>
    266c:	ldr	r3, [sp, #4]
    266e:	cbz	r3, 2676 <SdFile::write(void const*, unsigned int)+0x19e>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2670:	orr.w	r2, r2, #128	; 0x80
    2674:	strb	r2, [r7, #5]
  }

  if (flags_ & O_SYNC) {
    2676:	lsls	r2, r2, #28
    2678:	bpl.n	268e <SdFile::write(void const*, unsigned int)+0x1b6>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    267a:	ldrb	r3, [r7, #6]
    267c:	cmp	r3, #0
    267e:	beq.w	24ea <SdFile::write(void const*, unsigned int)+0x12>
    2682:	mov	r0, r7
    2684:	bl	228c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2688:	cmp	r0, #0
    268a:	beq.w	24ea <SdFile::write(void const*, unsigned int)+0x12>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    268e:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2690:	add	sp, #20
    2692:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2696:	nop
    2698:	.word	0x1fffad40
    269c:	.word	0x1fffaf44
    26a0:	.word	0x0ffffff8
    26a4:	.word	0x1fffaf48
    26a8:	.word	0x1fffad44
    26ac:	.word	0x1fff8b10

000026b0 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    26b0:	push	{lr}
    26b2:	sub	sp, #12
    26b4:	add	r3, sp, #8
  return write(&b, 1);
    26b6:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    26b8:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    26bc:	mov	r1, r3
    26be:	bl	24d8 <SdFile::write(void const*, unsigned int)>
}
    26c2:	add	sp, #12
    26c4:	ldr.w	pc, [sp], #4

000026c8 <Sd2Card::chipSelectHigh()>:
}
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    26c8:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    26ca:	movs	r1, #1
    26cc:	ldrb	r0, [r0, #0]
    26ce:	bl	3318 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    26d2:	ldr	r2, [pc, #56]	; (270c <Sd2Card::chipSelectHigh()+0x44>)
    26d4:	ldrb	r3, [r2, #0]
    26d6:	cbz	r3, 26fe <Sd2Card::chipSelectHigh()+0x36>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    26d8:	ldr	r1, [pc, #52]	; (2710 <Sd2Card::chipSelectHigh()+0x48>)
    26da:	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    26dc:	movs	r4, #0
    26de:	mov	r0, r3
    26e0:	strb	r4, [r2, #0]
    26e2:	cbz	r3, 26fe <Sd2Card::chipSelectHigh()+0x36>
			if (interruptMasksUsed & 0x01) {
    26e4:	lsls	r4, r3, #31
    26e6:	bpl.n	26f0 <Sd2Card::chipSelectHigh()+0x28>
				NVIC_ISER0 = interruptSave[0];
    26e8:	ldr	r2, [pc, #40]	; (2714 <Sd2Card::chipSelectHigh()+0x4c>)
    26ea:	ldr	r0, [r1, #24]
    26ec:	str	r0, [r2, #0]
    26ee:	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    26f0:	lsls	r2, r3, #30
    26f2:	bmi.n	2700 <Sd2Card::chipSelectHigh()+0x38>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    26f4:	lsls	r3, r0, #29
    26f6:	bpl.n	26fe <Sd2Card::chipSelectHigh()+0x36>
				NVIC_ISER2 = interruptSave[2];
    26f8:	ldr	r3, [pc, #28]	; (2718 <Sd2Card::chipSelectHigh()+0x50>)
    26fa:	ldr	r2, [r1, #32]
    26fc:	str	r2, [r3, #0]
    26fe:	pop	{r4, pc}
			if (interruptMasksUsed & 0x01) {
				NVIC_ISER0 = interruptSave[0];
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
				NVIC_ISER1 = interruptSave[1];
    2700:	ldr	r3, [pc, #24]	; (271c <Sd2Card::chipSelectHigh()+0x54>)
    2702:	ldr	r2, [r1, #28]
    2704:	ldrb	r0, [r1, #11]
    2706:	str	r2, [r3, #0]
    2708:	b.n	26f4 <Sd2Card::chipSelectHigh()+0x2c>
    270a:	nop
    270c:	.word	0x1fffaf50
    2710:	.word	0x1fff8ad8
    2714:	.word	0xe000e100
    2718:	.word	0xe000e108
    271c:	.word	0xe000e104

00002720 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    2720:	ldr	r3, [pc, #120]	; (279c <Sd2Card::chipSelectLow()+0x7c>)
    2722:	ldrb	r2, [r3, #0]
    2724:	cbz	r2, 272e <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    2726:	ldrb	r0, [r0, #0]
    2728:	movs	r1, #0
    272a:	b.w	3318 <digitalWrite>
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    272e:	push	{r4, r5, r6}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2730:	ldr	r2, [pc, #108]	; (27a0 <Sd2Card::chipSelectLow()+0x80>)
    2732:	ldr	r1, [pc, #112]	; (27a4 <Sd2Card::chipSelectLow()+0x84>)
    2734:	ldrb	r4, [r2, #11]
    2736:	ldr	r1, [r1, #0]
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    2738:	movs	r5, #1
    273a:	strb	r5, [r3, #0]
    273c:	cbz	r4, 277a <Sd2Card::chipSelectLow()+0x5a>
			__disable_irq();
    273e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2740:	ldrb	r3, [r2, #11]
    2742:	lsls	r6, r3, #31
    2744:	mov	r4, r3
    2746:	bpl.n	2756 <Sd2Card::chipSelectLow()+0x36>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2748:	ldr	r5, [pc, #92]	; (27a8 <Sd2Card::chipSelectLow()+0x88>)
    274a:	ldr	r4, [r2, #12]
    274c:	ldr	r6, [r5, #0]
    274e:	ands	r4, r6
    2750:	str	r4, [r2, #24]
				NVIC_ICER0 = interruptSave[0];
    2752:	str	r4, [r5, #0]
    2754:	mov	r4, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    2756:	lsls	r5, r3, #30
    2758:	bpl.n	2768 <Sd2Card::chipSelectLow()+0x48>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    275a:	ldr	r5, [pc, #80]	; (27ac <Sd2Card::chipSelectLow()+0x8c>)
    275c:	ldr	r3, [r2, #16]
    275e:	ldr	r6, [r5, #0]
    2760:	ldrb	r4, [r2, #11]
    2762:	ands	r3, r6
    2764:	str	r3, [r2, #28]
				NVIC_ICER1 = interruptSave[1];
    2766:	str	r3, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    2768:	lsls	r3, r4, #29
    276a:	bpl.n	2778 <Sd2Card::chipSelectLow()+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    276c:	ldr	r4, [pc, #64]	; (27b0 <Sd2Card::chipSelectLow()+0x90>)
    276e:	ldr	r3, [r2, #20]
    2770:	ldr	r5, [r4, #0]
    2772:	ands	r3, r5
    2774:	str	r3, [r2, #32]
				NVIC_ICER2 = interruptSave[2];
    2776:	str	r3, [r4, #0]
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    2778:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    277a:	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    277c:	ldr	r2, [r3, #12]
    277e:	cmp	r2, r1
    2780:	beq.n	2792 <Sd2Card::chipSelectLow()+0x72>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    2782:	ldr	r4, [pc, #48]	; (27b4 <Sd2Card::chipSelectLow()+0x94>)
    2784:	str	r4, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2786:	ldr	r2, [pc, #48]	; (27b8 <Sd2Card::chipSelectLow()+0x98>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    2788:	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    278a:	orr.w	r4, r1, #1073741824	; 0x40000000
    278e:	str	r4, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2790:	str	r2, [r3, #0]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    2792:	ldrb	r0, [r0, #0]
    2794:	movs	r1, #0
}
    2796:	pop	{r4, r5, r6}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    2798:	b.w	3318 <digitalWrite>
    279c:	.word	0x1fffaf50
    27a0:	.word	0x1fff8ad8
    27a4:	.word	0x1fffaf4c
    27a8:	.word	0xe000e180
    27ac:	.word	0xe000e184
    27b0:	.word	0xe000e188
    27b4:	.word	0x003f4001
    27b8:	.word	0x803f0000

000027bc <Sd2Card::waitNotBusy(unsigned int)>:
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    27bc:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27be:	ldr	r0, [pc, #72]	; (2808 <Sd2Card::waitNotBusy(unsigned int)+0x4c>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    27c0:	ldr	r2, [pc, #72]	; (280c <Sd2Card::waitNotBusy(unsigned int)+0x50>)
    27c2:	ldr	r3, [r0, #0]
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    27c4:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    27c6:	mov	r6, r2
    27c8:	str	r3, [sp, #0]
	return ret;
    27ca:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    27cc:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    27d0:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    27d2:	ldr	r3, [r2, #0]
    27d4:	orr.w	r3, r3, #1024	; 0x400
    27d8:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    27da:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    27dc:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    27de:	ldr	r3, [r2, #44]	; 0x2c
    27e0:	cmp	r3, #0
    27e2:	bge.n	27de <Sd2Card::waitNotBusy(unsigned int)+0x22>
  return SPI0_POPR;
    27e4:	ldr	r3, [r6, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    27e6:	uxtb	r3, r3
    27e8:	cmp	r3, #255	; 0xff
    27ea:	beq.n	2800 <Sd2Card::waitNotBusy(unsigned int)+0x44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27ec:	ldr	r3, [r0, #0]
    27ee:	str	r3, [sp, #4]
	return ret;
    27f0:	ldr	r3, [sp, #4]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    27f2:	subs	r3, r3, r7
    27f4:	cmp	r3, r1
    27f6:	bcc.n	27d2 <Sd2Card::waitNotBusy(unsigned int)+0x16>
  return false;
    27f8:	movs	r0, #0
}
    27fa:	add	sp, #8
    27fc:	pop	{r4, r5, r6, r7}
    27fe:	bx	lr
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    2800:	movs	r0, #1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    2802:	add	sp, #8
    2804:	pop	{r4, r5, r6, r7}
    2806:	bx	lr
    2808:	.word	0x1fffb108
    280c:	.word	0x4002c000

00002810 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    2810:	push	{r3, r4, r5, r6, r7, lr}
    2812:	mov	r5, r1
  // wait up to 300 ms if busy
  waitNotBusy(300);
    2814:	mov.w	r1, #300	; 0x12c


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    2818:	mov	r6, r2
    281a:	mov	r4, r0
  // wait up to 300 ms if busy
  waitNotBusy(300);
    281c:	bl	27bc <Sd2Card::waitNotBusy(unsigned int)>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2820:	ldr	r3, [pc, #160]	; (28c4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    2822:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2824:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2828:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    282c:	orr.w	r1, r5, #64	; 0x40
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2830:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2832:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2834:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2836:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2838:	ldr	r3, [r2, #44]	; 0x2c
    283a:	cmp	r3, #0
    283c:	bge.n	2838 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x28>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    283e:	ldr	r1, [pc, #132]	; (28c4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2840:	movs	r0, #24
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2842:	mov.w	r7, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2846:	ldr	r2, [r1, #0]
    2848:	lsr.w	r3, r6, r0
    284c:	orr.w	r2, r2, #1024	; 0x400
    2850:	uxtb	r3, r3
    2852:	str	r2, [r1, #0]
  SPI0_SR = SPI_SR_TCF;
    2854:	str	r7, [r1, #44]	; 0x2c
  SPI0_PUSHR = b;
    2856:	str	r3, [r1, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2858:	ldr	r3, [r1, #44]	; 0x2c
    285a:	cmp	r3, #0
    285c:	bge.n	2858 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x48>
    285e:	subs	r0, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    2860:	cmn.w	r0, #8
    2864:	bne.n	2846 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    2866:	cbz	r5, 28be <Sd2Card::cardCommand(unsigned char, unsigned long)+0xae>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    2868:	cmp	r5, #8
    286a:	ite	eq
    286c:	moveq	r1, #135	; 0x87
    286e:	movne	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2870:	ldr	r3, [pc, #80]	; (28c4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    2872:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2874:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2878:	orr.w	r2, r2, #1024	; 0x400
    287c:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    287e:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2880:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2882:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2884:	ldr	r3, [r2, #44]	; 0x2c
    2886:	cmp	r3, #0
    2888:	bge.n	2884 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    288a:	ldr	r2, [pc, #56]	; (28c4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    288c:	movs	r7, #0
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    288e:	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2890:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    2894:	movs	r1, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2896:	ldr	r3, [r2, #0]
    2898:	orr.w	r3, r3, #1024	; 0x400
    289c:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    289e:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    28a0:	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    28a2:	ldr	r3, [r2, #44]	; 0x2c
    28a4:	cmp	r3, #0
    28a6:	bge.n	28a2 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x92>
  return SPI0_POPR;
    28a8:	ldr	r3, [r6, #56]	; 0x38
    28aa:	uxtb	r0, r3
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    28ac:	lsls	r3, r3, #24
    28ae:	strb	r0, [r4, #1]
    28b0:	bmi.n	28b4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>
  return status_;
}
    28b2:	pop	{r3, r4, r5, r6, r7, pc}
    28b4:	adds	r7, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    28b6:	cmp.w	r7, #256	; 0x100
    28ba:	bne.n	2896 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x86>
  return status_;
}
    28bc:	pop	{r3, r4, r5, r6, r7, pc}
    28be:	movs	r1, #149	; 0x95
    28c0:	b.n	2870 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x60>
    28c2:	nop
    28c4:	.word	0x4002c000

000028c8 <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    28c8:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28ca:	ldr	r1, [pc, #84]	; (2920 <Sd2Card::waitStartBlock()+0x58>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    28cc:	ldr	r2, [pc, #84]	; (2924 <Sd2Card::waitStartBlock()+0x5c>)
    28ce:	ldr	r3, [r1, #0]
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    28d0:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    28d2:	mov	r6, r2
    28d4:	str	r3, [sp, #0]
	return ret;
    28d6:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    28d8:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    28dc:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    28de:	ldr	r3, [r2, #0]
    28e0:	orr.w	r3, r3, #1024	; 0x400
    28e4:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    28e6:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    28e8:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    28ea:	ldr	r3, [r2, #44]	; 0x2c
    28ec:	cmp	r3, #0
    28ee:	bge.n	28ea <Sd2Card::waitStartBlock()+0x22>
  return SPI0_POPR;
    28f0:	ldr	r3, [r6, #56]	; 0x38
    28f2:	uxtb	r3, r3
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    28f4:	cmp	r3, #255	; 0xff
    28f6:	strb	r3, [r0, #1]
    28f8:	bne.n	2910 <Sd2Card::waitStartBlock()+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28fa:	ldr	r3, [r1, #0]
    28fc:	str	r3, [sp, #4]
	return ret;
    28fe:	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    2900:	subs	r3, r3, r7
    2902:	cmp.w	r3, #300	; 0x12c
    2906:	bls.n	28de <Sd2Card::waitStartBlock()+0x16>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    2908:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    290a:	add	sp, #8
    290c:	pop	{r4, r5, r6, r7}
    290e:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    2910:	sub.w	r0, r3, #254	; 0xfe
    2914:	clz	r0, r0
    2918:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    291a:	add	sp, #8
    291c:	pop	{r4, r5, r6, r7}
    291e:	bx	lr
    2920:	.word	0x1fffb108
    2924:	.word	0x4002c000

00002928 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    2928:	push	{r3, r4, r5, r6, r7, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    292a:	ldrb	r3, [r0, #2]
    292c:	cmp	r3, #3

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    292e:	mov	r6, r1
    2930:	mov	r4, r0
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    2932:	it	ne
    2934:	lslne	r6, r1, #9

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    2936:	mov	r5, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
  chipSelectLow();
    2938:	bl	2720 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    293c:	mov	r2, r6
    293e:	movs	r1, #17
    2940:	mov	r0, r4
    2942:	bl	2810 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2946:	cbnz	r0, 2950 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    2948:	mov	r0, r4
    294a:	bl	28c8 <Sd2Card::waitStartBlock()>
    294e:	cbnz	r0, 295a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    2950:	mov	r0, r4
    2952:	bl	26c8 <Sd2Card::chipSelectHigh()>
  return false;
    2956:	movs	r0, #0
}
    2958:	pop	{r3, r4, r5, r6, r7, pc}
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    295a:	ldr	r3, [pc, #128]	; (29dc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    295c:	ldr	r1, [pc, #128]	; (29e0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    295e:	ldr	r2, [pc, #132]	; (29e4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    2960:	str	r2, [r3, #0]
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2962:	mov	lr, r1
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2964:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2966:	mov	r2, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2968:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    296a:	mov	r6, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    296c:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
    296e:	add.w	r0, r5, #506	; 0x1fa
    2972:	adds	r1, r5, #2
    2974:	add.w	r7, r5, #508	; 0x1fc
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2978:	ldr	r3, [r2, #44]	; 0x2c
    297a:	tst.w	r3, #240	; 0xf0
    297e:	beq.n	2978 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2980:	str.w	lr, [r6, #52]	; 0x34
    uint16_t w = SPI0_POPR;
    2984:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    2986:	strb.w	r3, [r1, #-1]
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    298a:	asrs	r3, r3, #8
    298c:	strb.w	r3, [r1, #-2]
    2990:	adds	r1, #2
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    2992:	cmp	r7, r1
    2994:	bne.n	2978 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
    2996:	add.w	r5, r5, #512	; 0x200
  while (buf < limit) {
    299a:	cmp	r0, r5
    299c:	bcs.n	29ba <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x92>
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    299e:	ldr	r2, [pc, #60]	; (29dc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    29a0:	mov	r6, r2
    29a2:	ldr	r3, [r2, #44]	; 0x2c
    29a4:	tst.w	r3, #240	; 0xf0
    29a8:	beq.n	29a2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
    uint16_t w = SPI0_POPR;
    29aa:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    29ac:	asrs	r1, r3, #8
    29ae:	strb.w	r1, [r0], #2
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    29b2:	cmp	r0, r5
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    29b4:	strb.w	r3, [r0, #-1]
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    29b8:	bcc.n	29a2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    29ba:	ldr	r3, [pc, #32]	; (29dc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    29bc:	ldr	r1, [pc, #36]	; (29e4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    29be:	ldr	r2, [pc, #32]	; (29e0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    29c0:	str	r1, [r3, #0]
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    29c2:	mov	r1, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    29c4:	str	r2, [r3, #52]	; 0x34
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    29c6:	ldr	r3, [r1, #44]	; 0x2c
    29c8:	ldr	r2, [pc, #16]	; (29dc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    29ca:	tst.w	r3, #240	; 0xf0
    29ce:	beq.n	29c6 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x9e>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    29d0:	mov	r0, r4
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_POPR;
    29d2:	ldr	r3, [r2, #56]	; 0x38
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    29d4:	bl	26c8 <Sd2Card::chipSelectHigh()>
  return true;
    29d8:	movs	r0, #1
    29da:	pop	{r3, r4, r5, r6, r7, pc}
    29dc:	.word	0x4002c000
    29e0:	.word	0x9000ffff
    29e4:	.word	0x801f0400

000029e8 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    29e8:	push	{r4, r5, r6, r7}
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    29ea:	ldr	r6, [pc, #196]	; (2ab0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    29ec:	ldr	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    29ee:	mov.w	r7, #2147483648	; 0x80000000
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    29f2:	orr.w	r3, r3, #1024	; 0x400
    29f6:	str	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    29f8:	mov	r5, r7
    29fa:	str	r7, [r6, #44]	; 0x2c
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    29fc:	mov	r4, r6
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
		SPI0_SR = SPI_SR_TCF;
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    29fe:	str	r1, [r6, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2a00:	mov	r3, r6
    2a02:	adds	r1, r2, #1
    2a04:	addw	r7, r2, #513	; 0x201
    2a08:	ldr	r2, [r4, #44]	; 0x2c
    2a0a:	cmp	r2, #0
    2a0c:	bge.n	2a08 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2a0e:	ldr	r2, [r3, #0]
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i];
    2a10:	ldrb.w	r6, [r1, #-1]
    2a14:	orr.w	r2, r2, #1024	; 0x400
    2a18:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    2a1a:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    2a1c:	str	r6, [r3, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2a1e:	ldr	r2, [r4, #44]	; 0x2c
    2a20:	cmp	r2, #0
    2a22:	bge.n	2a1e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x36>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2a24:	ldr	r2, [r3, #0]
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
    2a26:	ldrb.w	r6, [r1], #2
    2a2a:	orr.w	r2, r2, #1024	; 0x400

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    2a2e:	cmp	r7, r1
    2a30:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    2a32:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    2a34:	str	r6, [r3, #52]	; 0x34
    2a36:	bne.n	2a08 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2a38:	ldr	r1, [pc, #116]	; (2ab0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a3a:	ldr	r2, [r1, #44]	; 0x2c
    2a3c:	ldr	r3, [pc, #112]	; (2ab0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a3e:	cmp	r2, #0
    2a40:	bge.n	2a3a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x52>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a42:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2a44:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a48:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2a4c:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a4e:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a50:	mov	r1, r3
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2a52:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
    2a54:	str	r4, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a56:	ldr	r3, [r1, #44]	; 0x2c
    2a58:	ldr	r2, [pc, #84]	; (2ab0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a5a:	cmp	r3, #0
    2a5c:	bge.n	2a56 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x6e>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a5e:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2a60:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a64:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2a68:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a6a:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a6c:	mov	r1, r2
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2a6e:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    2a70:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a72:	ldr	r3, [r1, #44]	; 0x2c
    2a74:	ldr	r2, [pc, #56]	; (2ab0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a76:	cmp	r3, #0
    2a78:	bge.n	2a72 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8a>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a7a:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2a7c:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a80:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    2a84:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a86:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a88:	mov	r1, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2a8a:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2a8c:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a8e:	ldr	r3, [r1, #44]	; 0x2c
    2a90:	ldr	r2, [pc, #28]	; (2ab0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a92:	cmp	r3, #0
    2a94:	bge.n	2a8e <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa6>
  return SPI0_POPR;
    2a96:	ldr	r3, [r2, #56]	; 0x38
    2a98:	uxtb	r3, r3
    2a9a:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    2a9e:	strb	r3, [r0, #1]
    2aa0:	sub.w	r0, r2, #5
    2aa4:	clz	r0, r0
    2aa8:	lsrs	r0, r0, #5
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    2aaa:	pop	{r4, r5, r6, r7}
    2aac:	bx	lr
    2aae:	nop
    2ab0:	.word	0x4002c000

00002ab4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    2ab4:	push	{r4, r5, r6, lr}
    2ab6:	mov	r4, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    2ab8:	cbz	r1, 2ad8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    2aba:	ldrb	r3, [r0, #2]
    2abc:	cmp	r3, #3
    2abe:	mov	r5, r1
    2ac0:	it	ne
    2ac2:	lslne	r5, r1, #9
    2ac4:	mov	r6, r2
  chipSelectLow();
    2ac6:	bl	2720 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    2aca:	mov	r2, r5
    2acc:	movs	r1, #24
    2ace:	mov	r0, r4
    2ad0:	bl	2810 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2ad4:	mov	r5, r0
    2ad6:	cbz	r0, 2ae2 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2e>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    2ad8:	mov	r0, r4
    2ada:	bl	26c8 <Sd2Card::chipSelectHigh()>
  return false;
    2ade:	movs	r0, #0
}
    2ae0:	pop	{r4, r5, r6, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    2ae2:	mov	r2, r6
    2ae4:	movs	r1, #254	; 0xfe
    2ae6:	mov	r0, r4
    2ae8:	bl	29e8 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    2aec:	cmp	r0, #0
    2aee:	beq.n	2ad8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    2af0:	mov.w	r1, #600	; 0x258
    2af4:	mov	r0, r4
    2af6:	bl	27bc <Sd2Card::waitNotBusy(unsigned int)>
    2afa:	cmp	r0, #0
    2afc:	beq.n	2ad8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    2afe:	mov	r2, r5
    2b00:	movs	r1, #13
    2b02:	mov	r0, r4
    2b04:	bl	2810 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2b08:	cmp	r0, #0
    2b0a:	bne.n	2ad8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2b0c:	ldr	r3, [pc, #44]	; (2b3c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    2b0e:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2b10:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2b14:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    2b18:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2b1a:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2b1c:	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2b1e:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2b20:	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2b22:	ldr	r3, [r1, #44]	; 0x2c
    2b24:	ldr	r2, [pc, #20]	; (2b3c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    2b26:	cmp	r3, #0
    2b28:	bge.n	2b22 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x6e>
  return SPI0_POPR;
    2b2a:	ldr	r3, [r2, #56]	; 0x38
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    2b2c:	tst.w	r3, #255	; 0xff
    2b30:	bne.n	2ad8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    2b32:	mov	r0, r4
    2b34:	bl	26c8 <Sd2Card::chipSelectHigh()>
  return true;
    2b38:	movs	r0, #1
    2b3a:	pop	{r4, r5, r6, pc}
    2b3c:	.word	0x4002c000

00002b40 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    2b40:	ldr	r3, [pc, #4]	; (2b48 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    2b42:	ldr	r2, [pc, #8]	; (2b4c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    2b44:	str	r2, [r3, #0]
    2b46:	bx	lr
    2b48:	.word	0x1fffaf4c
    2b4c:	.word	0x38011001

00002b50 <IRrecv::IRrecv(int)>:
}

//+=============================================================================
IRrecv::IRrecv (int recvpin)
{
	irparams.recvpin = recvpin;
    2b50:	ldr	r3, [pc, #8]	; (2b5c <IRrecv::IRrecv(int)+0xc>)
    2b52:	uxtb	r1, r1
	irparams.blinkflag = 0;
    2b54:	movs	r2, #0
}

//+=============================================================================
IRrecv::IRrecv (int recvpin)
{
	irparams.recvpin = recvpin;
    2b56:	strb	r1, [r3, #1]
	irparams.blinkflag = 0;
    2b58:	strb	r2, [r3, #3]
}
    2b5a:	bx	lr
    2b5c:	.word	0x1fffaf54

00002b60 <cmt_isr>:
#ifdef IR_TIMER_USE_ESP32
void IRTimer()
#else
ISR (TIMER_INTR_NAME)
#endif
{
    2b60:	push	{r4, lr}
	TIMER_RESET;
    2b62:	ldr	r2, [pc, #308]	; (2c98 <cmt_isr+0x138>)
    2b64:	ldr	r3, [pc, #308]	; (2c9c <cmt_isr+0x13c>)

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	// digitalRead() is very slow. Optimisation is possible, but makes the code unportable
	uint8_t  irdata = (uint8_t)digitalRead(irparams.recvpin);
    2b66:	ldr	r4, [pc, #312]	; (2ca0 <cmt_isr+0x140>)
void IRTimer()
#else
ISR (TIMER_INTR_NAME)
#endif
{
	TIMER_RESET;
    2b68:	ldrb	r2, [r2, #0]
    2b6a:	movs	r2, #30
    2b6c:	strb	r2, [r3, #0]

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	// digitalRead() is very slow. Optimisation is possible, but makes the code unportable
	uint8_t  irdata = (uint8_t)digitalRead(irparams.recvpin);
    2b6e:	ldrb	r0, [r4, #1]
    2b70:	bl	3324 <digitalRead>

	irparams.timer++;  // One more 50uS tick
    2b74:	ldr	r3, [r4, #8]
    2b76:	adds	r3, #1
    2b78:	str	r3, [r4, #8]
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
    2b7a:	ldrb	r3, [r4, #4]
    2b7c:	cmp	r3, #100	; 0x64
    2b7e:	itt	hi
    2b80:	movhi	r3, #6
    2b82:	strbhi	r3, [r4, #0]

	switch(irparams.rcvstate) {
    2b84:	ldrb	r3, [r4, #0]
    2b86:	subs	r3, #2
    2b88:	cmp	r3, #4
    2b8a:	bhi.n	2ba0 <cmt_isr+0x40>
    2b8c:	tbb	[pc, r3]
    2b90:	.word	0x5b1c4740
    2b94:	.byte	0x03
    2b95:	.byte	0x00
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
    2b96:	movs	r2, #1
			irparams.rcvstate = STATE_STOP;
    2b98:	movs	r3, #5
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
    2b9a:	strb.w	r2, [r4, #416]	; 0x1a0
			irparams.rcvstate = STATE_STOP;
    2b9e:	strb	r3, [r4, #0]
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
    2ba0:	ldrb	r3, [r4, #3]
    2ba2:	cbz	r3, 2bec <cmt_isr+0x8c>
		if (irdata == MARK)
    2ba4:	cbnz	r0, 2bee <cmt_isr+0x8e>
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    2ba6:	ldrb	r3, [r4, #2]
    2ba8:	ldr	r2, [pc, #244]	; (2ca0 <cmt_isr+0x140>)
    2baa:	cmp	r3, #0
    2bac:	bne.n	2c68 <cmt_isr+0x108>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2bae:	ldr	r2, [pc, #244]	; (2ca4 <cmt_isr+0x144>)
			digitalWriteFast(12, HIGH);
			if (!(CORE_PIN12_DDRREG & CORE_PIN12_BIT)) CORE_PIN12_CONFIG = CONFIG_PULLUP;
		}
		if (val & (1<<5)) {
			digitalWriteFast(13, HIGH);
			if (!(CORE_PIN13_DDRREG & CORE_PIN13_BIT)) CORE_PIN13_CONFIG = CONFIG_PULLUP;
    2bb0:	ldr	r3, [pc, #244]	; (2ca8 <cmt_isr+0x148>)
    2bb2:	movs	r1, #32
    2bb4:	str	r1, [r2, #0]
    2bb6:	ldr	r3, [r3, #0]
    2bb8:	tst.w	r3, #5
    2bbc:	bne.n	2bec <cmt_isr+0x8c>
    2bbe:	ldr	r3, [pc, #236]	; (2cac <cmt_isr+0x14c>)
    2bc0:	movw	r2, #259	; 0x103
    2bc4:	str	r2, [r3, #0]
    2bc6:	pop	{r4, pc}
				irparams.rcvstate                  = STATE_SPACE;
			}
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
    2bc8:	cmp	r0, #0
    2bca:	bne.n	2c4e <cmt_isr+0xee>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    2bcc:	ldrb	r3, [r4, #4]
    2bce:	uxtb	r3, r3
    2bd0:	adds	r2, r3, #1
    2bd2:	uxtb	r2, r2
    2bd4:	adds	r3, #2
    2bd6:	strb	r2, [r4, #4]
    2bd8:	add.w	r3, r4, r3, lsl #2
    2bdc:	ldr	r2, [r4, #8]
    2bde:	str	r2, [r3, #4]
				irparams.timer                     = 0;
				irparams.rcvstate                  = STATE_MARK;
    2be0:	movs	r3, #3
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
				irparams.timer                     = 0;
    2be2:	str	r0, [r4, #8]
				irparams.rcvstate                  = STATE_MARK;
    2be4:	strb	r3, [r4, #0]
			irparams.rcvstate = STATE_STOP;
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
    2be6:	ldrb	r3, [r4, #3]
    2be8:	cmp	r3, #0
    2bea:	bne.n	2ba6 <cmt_isr+0x46>
    2bec:	pop	{r4, pc}
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    2bee:	ldrb	r3, [r4, #2]
    2bf0:	ldr	r2, [pc, #172]	; (2ca0 <cmt_isr+0x140>)
    2bf2:	cmp	r3, #0
    2bf4:	bne.n	2c5c <cmt_isr+0xfc>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2bf6:	ldr	r2, [pc, #184]	; (2cb0 <cmt_isr+0x150>)
			digitalWriteFast(12, LOW);
			if (!(CORE_PIN12_DDRREG & CORE_PIN12_BIT)) CORE_PIN12_CONFIG = CONFIG_NOPULLUP;
		}
		if (!(val & (1<<5))) {
			digitalWriteFast(13, LOW);
			if (!(CORE_PIN13_DDRREG & CORE_PIN13_BIT)) CORE_PIN13_CONFIG = CONFIG_NOPULLUP;
    2bf8:	ldr	r3, [pc, #172]	; (2ca8 <cmt_isr+0x148>)
    2bfa:	movs	r1, #32
    2bfc:	str	r1, [r2, #0]
    2bfe:	ldr	r3, [r3, #0]
    2c00:	tst.w	r3, #5
    2c04:	bne.n	2bec <cmt_isr+0x8c>
    2c06:	ldr	r3, [pc, #164]	; (2cac <cmt_isr+0x14c>)
    2c08:	mov.w	r2, #256	; 0x100
    2c0c:	str	r2, [r3, #0]
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
	}
}
    2c0e:	pop	{r4, pc}
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow

	switch(irparams.rcvstate) {
		//......................................................................
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
    2c10:	cbnz	r0, 2c3e <cmt_isr+0xde>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
    2c12:	ldr	r2, [r4, #8]
    2c14:	ldr	r3, [pc, #136]	; (2ca0 <cmt_isr+0x140>)
    2c16:	cmp	r2, #99	; 0x63
    2c18:	bhi.n	2c74 <cmt_isr+0x114>
					irparams.timer = 0;
    2c1a:	str	r0, [r3, #8]
    2c1c:	b.n	2be6 <cmt_isr+0x86>
				}
			}
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
    2c1e:	cmp	r0, #1
    2c20:	bne.n	2ba0 <cmt_isr+0x40>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    2c22:	ldrb	r3, [r4, #4]
    2c24:	uxtb	r3, r3
    2c26:	adds	r2, r3, #1
    2c28:	uxtb	r2, r2
    2c2a:	adds	r3, #2
    2c2c:	strb	r2, [r4, #4]
    2c2e:	add.w	r3, r4, r3, lsl #2
    2c32:	ldr	r2, [r4, #8]
    2c34:	str	r2, [r3, #4]
				irparams.timer                     = 0;
    2c36:	movs	r2, #0
				irparams.rcvstate                  = STATE_SPACE;
    2c38:	movs	r3, #4
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
				irparams.timer                     = 0;
    2c3a:	str	r2, [r4, #8]
				irparams.rcvstate                  = STATE_SPACE;
    2c3c:	strb	r3, [r4, #0]
			irparams.rcvstate = STATE_STOP;
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
    2c3e:	ldrb	r3, [r4, #3]
    2c40:	cmp	r3, #0
    2c42:	bne.n	2bee <cmt_isr+0x8e>
    2c44:	pop	{r4, pc}
					irparams.rcvstate = STATE_STOP;
			}
			break;
		//......................................................................
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
    2c46:	cmp	r0, #0
    2c48:	bne.n	2c3e <cmt_isr+0xde>
    2c4a:	str	r0, [r4, #8]
    2c4c:	b.n	2be6 <cmt_isr+0x86>
			if (irdata == MARK) {  // Space just ended; Record time
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
				irparams.timer                     = 0;
				irparams.rcvstate                  = STATE_MARK;

			} else if (irparams.timer > GAP_TICKS) {  // Space
    2c4e:	ldr	r3, [r4, #8]
    2c50:	ldr	r2, [pc, #76]	; (2ca0 <cmt_isr+0x140>)
    2c52:	cmp	r3, #100	; 0x64
    2c54:	bls.n	2c3e <cmt_isr+0xde>
					// A long Space, indicates gap between codes
					// Flag the current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting Space width
					irparams.rcvstate = STATE_STOP;
    2c56:	movs	r3, #5
    2c58:	strb	r3, [r2, #0]
    2c5a:	b.n	2c3e <cmt_isr+0xde>
	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    2c5c:	ldrb	r0, [r2, #2]
    2c5e:	movs	r1, #0
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
	}
}
    2c60:	ldmia.w	sp!, {r4, lr}
	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    2c64:	b.w	3318 <digitalWrite>
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    2c68:	ldrb	r0, [r2, #2]
    2c6a:	movs	r1, #1
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
	}
}
    2c6c:	ldmia.w	sp!, {r4, lr}
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    2c70:	b.w	3318 <digitalWrite>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
					irparams.timer = 0;

				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
    2c74:	strb.w	r0, [r3, #416]	; 0x1a0
					irparams.rawlen                    = 0;
    2c78:	strb	r0, [r3, #4]
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    2c7a:	ldrb	r2, [r3, #4]
    2c7c:	uxtb	r2, r2
    2c7e:	adds	r1, r2, #1
    2c80:	uxtb	r1, r1
    2c82:	adds	r2, #2
    2c84:	strb	r1, [r3, #4]
    2c86:	add.w	r2, r3, r2, lsl #2
    2c8a:	ldr	r1, [r3, #8]
    2c8c:	str	r1, [r2, #4]
					irparams.timer                     = 0;
					irparams.rcvstate                  = STATE_MARK;
    2c8e:	movs	r2, #3
				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
					irparams.rawlen                    = 0;
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
					irparams.timer                     = 0;
    2c90:	str	r0, [r3, #8]
					irparams.rcvstate                  = STATE_MARK;
    2c92:	strb	r2, [r3, #0]
    2c94:	b.n	2be6 <cmt_isr+0x86>
    2c96:	nop
    2c98:	.word	0x40062005
    2c9c:	.word	0x40062007
    2ca0:	.word	0x1fffaf54
    2ca4:	.word	0x400ff084
    2ca8:	.word	0x400ff094
    2cac:	.word	0x4004b014
    2cb0:	.word	0x400ff088

00002cb4 <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    2cb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    2cb8:	add.w	lr, r0, #256	; 0x100

00002cbc <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    2cbc:	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    2cc0:	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    2cc4:	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    2cc8:	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    2ccc:	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    2cd0:	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    2cd4:	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    2cd8:	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    2cdc:	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    2ce0:	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    2ce4:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    2ce8:	cmp	lr, r0
	bne .loopLR
    2cea:	bne.n	2cbc <.loopLR>

	pop	{r4-r11,r14}	
    2cec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8,r14}	
#endif
	BX lr
    2cf0:	bx	lr

00002cf2 <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    2cf2:	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    2cf6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    2cfa:	add.w	ip, r0, #256	; 0x100
    2cfe:	nop

00002d00 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    2d00:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    2d04:	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    2d08:	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    2d0c:	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    2d10:	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    2d14:	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    2d18:	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    2d1c:	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    2d20:	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    2d24:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    2d28:	cmp	ip, r0
	bne .loopL
    2d2a:	bne.n	2d00 <.loopL>

	pop	{r4-r11}
    2d2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    2d30:	bx	lr

00002d32 <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    2d32:	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    2d36:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    2d3a:	add.w	ip, r0, #256	; 0x100
    2d3e:	nop

00002d40 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    2d40:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    2d44:	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    2d48:	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    2d4c:	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    2d50:	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    2d54:	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    2d58:	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    2d5c:	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    2d60:	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    2d64:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    2d68:	cmp	ip, r0
	bne .loopR
    2d6a:	bne.n	2d40 <.loopR>

	pop	{r4-r11}
    2d6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    2d70:	bx	lr

00002d72 <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    2d72:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    2d76:	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    2d78:	add.w	fp, r0, #512	; 0x200

00002d7c <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    2d7c:	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    2d80:	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    2d84:	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    2d88:	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    2d8c:	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    2d90:	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    2d94:	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    2d98:	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    2d9c:	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    2da0:	cmp	fp, r0
	bne .loopQuad
    2da2:	bne.n	2d7c <.loopQuad>

	pop	{r4-r11}
    2da4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    2da8:	bx	lr
    2daa:	nop

00002dac <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2dac:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2dae:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2db2:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2db6:	bne.n	2e94 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2db8:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2dba:	bcc.n	2e40 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2dbc:	ldr.w	r3, [r1], #4
    2dc0:	str.w	r3, [r0], #4
    2dc4:	ldr.w	r3, [r1], #4
    2dc8:	str.w	r3, [r0], #4
    2dcc:	ldr.w	r3, [r1], #4
    2dd0:	str.w	r3, [r0], #4
    2dd4:	ldr.w	r3, [r1], #4
    2dd8:	str.w	r3, [r0], #4
    2ddc:	ldr.w	r3, [r1], #4
    2de0:	str.w	r3, [r0], #4
    2de4:	ldr.w	r3, [r1], #4
    2de8:	str.w	r3, [r0], #4
    2dec:	ldr.w	r3, [r1], #4
    2df0:	str.w	r3, [r0], #4
    2df4:	ldr.w	r3, [r1], #4
    2df8:	str.w	r3, [r0], #4
    2dfc:	ldr.w	r3, [r1], #4
    2e00:	str.w	r3, [r0], #4
    2e04:	ldr.w	r3, [r1], #4
    2e08:	str.w	r3, [r0], #4
    2e0c:	ldr.w	r3, [r1], #4
    2e10:	str.w	r3, [r0], #4
    2e14:	ldr.w	r3, [r1], #4
    2e18:	str.w	r3, [r0], #4
    2e1c:	ldr.w	r3, [r1], #4
    2e20:	str.w	r3, [r0], #4
    2e24:	ldr.w	r3, [r1], #4
    2e28:	str.w	r3, [r0], #4
    2e2c:	ldr.w	r3, [r1], #4
    2e30:	str.w	r3, [r0], #4
    2e34:	ldr.w	r3, [r1], #4
    2e38:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2e3c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2e3e:	bcs.n	2dbc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2e40:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2e42:	bcc.n	2e68 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2e44:	ldr.w	r3, [r1], #4
    2e48:	str.w	r3, [r0], #4
    2e4c:	ldr.w	r3, [r1], #4
    2e50:	str.w	r3, [r0], #4
    2e54:	ldr.w	r3, [r1], #4
    2e58:	str.w	r3, [r0], #4
    2e5c:	ldr.w	r3, [r1], #4
    2e60:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2e64:	subs	r2, #16
	bhs	.Lmid_block_loop
    2e66:	bcs.n	2e44 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2e68:	adds	r2, #12
	blo	.Lcopy_less_than_4
    2e6a:	bcc.n	2e78 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2e6c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2e70:	str.w	r3, [r0], #4
	subs	r2, #4
    2e74:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2e76:	bcs.n	2e6c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2e78:	adds	r2, #4
	beq	.Ldone
    2e7a:	beq.n	2e8e <memcpy+0xe2>

	lsls	r2, r2, #31
    2e7c:	lsls	r2, r2, #31
	itt ne
    2e7e:	itt	ne
	ldrbne  r3, [r1], #1
    2e80:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2e84:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2e88:	bcc.n	2e8e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    2e8a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2e8c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2e8e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2e90:	bx	lr
    2e92:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2e94:	cmp	r2, #8
	blo	.Lbyte_copy
    2e96:	bcc.n	2ec0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2e98:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2e9a:	beq.n	2db8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2e9c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2ea0:	beq.n	2db8 <memcpy+0xc>

	rsb	r3, #4
    2ea2:	rsb	r3, r3, #4
	subs	r2, r3
    2ea6:	subs	r2, r2, r3

	lsls    r3, r3, #31
    2ea8:	lsls	r3, r3, #31
	itt ne
    2eaa:	itt	ne
	ldrbne  r3, [r1], #1
    2eac:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2eb0:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2eb4:	bcc.n	2db8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2eb6:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2eba:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2ebe:	b.n	2db8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2ec0:	subs	r2, #4
	blo	.Lcopy_less_than_4
    2ec2:	bcc.n	2e78 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2ec4:	subs	r2, #1
	ldrb    r3, [r1], #1
    2ec6:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2eca:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2ece:	bcs.n	2ec4 <memcpy+0x118>

	ldrb	r3, [r1]
    2ed0:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2ed2:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2ed4:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2ed6:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2ed8:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2eda:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2edc:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2ede:	bx	lr

00002ee0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2ee0:	ldr	r3, [pc, #16]	; (2ef4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    2ee2:	ldr	r2, [pc, #20]	; (2ef8 <usb_serial_available+0x18>)
    2ee4:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    2ee6:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2ee8:	cbz	r3, 2ef2 <usb_serial_available+0x12>
    2eea:	ldrh	r2, [r3, #0]
    2eec:	ldrh	r3, [r3, #2]
    2eee:	subs	r3, r2, r3
    2ef0:	add	r0, r3
	return count;
}
    2ef2:	bx	lr
    2ef4:	.word	0x1fffb100
    2ef8:	.word	0x1fffb414

00002efc <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    2efc:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    2efe:	ldr	r3, [pc, #56]	; (2f38 <usb_serial_flush_callback+0x3c>)
    2f00:	ldrb	r3, [r3, #0]
    2f02:	cbnz	r3, 2f22 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2f04:	ldr	r4, [pc, #52]	; (2f3c <usb_serial_flush_callback+0x40>)
    2f06:	ldr	r1, [r4, #0]
    2f08:	cbz	r1, 2f24 <usb_serial_flush_callback+0x28>
    2f0a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    2f0e:	ldrh	r3, [r1, #2]
    2f10:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2f12:	movs	r0, #4
    2f14:	bl	361c <usb_tx>
		tx_packet = NULL;
    2f18:	str	r5, [r4, #0]
    2f1a:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2f1c:	ldr	r3, [pc, #32]	; (2f40 <usb_serial_flush_callback+0x44>)
    2f1e:	movs	r2, #1
    2f20:	strb	r2, [r3, #0]
    2f22:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2f24:	bl	34c8 <usb_malloc>
		if (tx) {
    2f28:	cmp	r0, #0
    2f2a:	beq.n	2f1c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    2f2c:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    2f2e:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    2f32:	movs	r0, #4
    2f34:	b.w	361c <usb_tx>
    2f38:	.word	0x1fffb0f9
    2f3c:	.word	0x1fffb0fc
    2f40:	.word	0x1fffb0f8

00002f44 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2f44:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2f46:	ldr	r0, [pc, #164]	; (2fec <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2f48:	ldr	r2, [pc, #164]	; (2ff0 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2f4a:	ldr	r3, [pc, #168]	; (2ff4 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2f4c:	ldr	r5, [pc, #168]	; (2ff8 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2f4e:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2f50:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2f52:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2f54:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    2f56:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2f58:	ldr	r4, [pc, #160]	; (2ffc <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2f5a:	cmp	r3, #8
    2f5c:	beq.n	2fc0 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2f5e:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2f60:	ldr	r0, [pc, #156]	; (3000 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2f62:	ldr	r1, [pc, #160]	; (3004 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2f64:	beq.n	2fd6 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2f66:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2f68:	ite	eq
    2f6a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2f6c:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2f6e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2f70:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2f72:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2f74:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2f76:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2f78:	ldr	r3, [pc, #140]	; (3008 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2f7a:	ldr	r1, [pc, #144]	; (300c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2f7c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2f7e:	ldr	r2, [pc, #144]	; (3010 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2f80:	cbz	r3, 2fb2 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2f82:	movs	r3, #1
    2f84:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2f86:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2f88:	ldr	r3, [pc, #136]	; (3014 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2f8a:	ldr	r1, [pc, #140]	; (3018 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2f8c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2f8e:	ldr	r2, [pc, #140]	; (301c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2f90:	cmp	r3, #1
    2f92:	bls.n	2fe2 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2f94:	cmp	r3, #4
    2f96:	bls.n	2fb8 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2f98:	cmp	r3, #8
    2f9a:	bls.n	2fda <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2f9c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2f9e:	ite	ls
    2fa0:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2fa2:	movhi	r3, #135	; 0x87
    2fa4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2fa6:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2fa8:	ldr	r3, [pc, #116]	; (3020 <analog_init+0xdc>)
    2faa:	movs	r2, #1
    2fac:	strb	r2, [r3, #0]
}
    2fae:	pop	{r4, r5}
    2fb0:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2fb2:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2fb4:	str	r3, [r2, #0]
    2fb6:	b.n	2f88 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2fb8:	movs	r3, #132	; 0x84
    2fba:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2fbc:	str	r3, [r2, #0]
    2fbe:	b.n	2fa8 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2fc0:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2fc4:	ldr	r1, [pc, #60]	; (3004 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2fc6:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2fc8:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2fca:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2fcc:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2fce:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2fd0:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2fd2:	str	r3, [r1, #0]
    2fd4:	b.n	2f78 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2fd6:	movs	r2, #57	; 0x39
    2fd8:	b.n	2fca <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2fda:	movs	r3, #133	; 0x85
    2fdc:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2fde:	str	r3, [r2, #0]
    2fe0:	b.n	2fa8 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2fe2:	movs	r3, #128	; 0x80
    2fe4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2fe6:	str	r3, [r2, #0]
    2fe8:	b.n	2fa8 <analog_init+0x64>
    2fea:	nop
    2fec:	.word	0x40074000
    2ff0:	.word	0x40074001
    2ff4:	.word	0x1fff8b14
    2ff8:	.word	0x4003b008
    2ffc:	.word	0x4003b00c
    3000:	.word	0x400bb008
    3004:	.word	0x400bb00c
    3008:	.word	0x1fffb106
    300c:	.word	0x4003b020
    3010:	.word	0x400bb020
    3014:	.word	0x1fff8b15
    3018:	.word	0x4003b024
    301c:	.word	0x400bb024
    3020:	.word	0x1fffb105

00003024 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3024:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3026:	ldr	r4, [pc, #64]	; (3068 <fault_isr+0x44>)
    3028:	b.n	303c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    302a:	ldr	r3, [r4, #0]
    302c:	lsls	r1, r3, #21
    302e:	bmi.n	304c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3030:	ldr	r3, [r4, #0]
    3032:	lsls	r2, r3, #20
    3034:	bmi.n	3056 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3036:	ldr	r3, [r4, #0]
    3038:	lsls	r3, r3, #19
    303a:	bmi.n	3060 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    303c:	ldr	r3, [r4, #0]
    303e:	lsls	r0, r3, #13
    3040:	bpl.n	302a <fault_isr+0x6>
    3042:	bl	36a0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3046:	ldr	r3, [r4, #0]
    3048:	lsls	r1, r3, #21
    304a:	bpl.n	3030 <fault_isr+0xc>
    304c:	bl	4a60 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3050:	ldr	r3, [r4, #0]
    3052:	lsls	r2, r3, #20
    3054:	bpl.n	3036 <fault_isr+0x12>
    3056:	bl	4934 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    305a:	ldr	r3, [r4, #0]
    305c:	lsls	r3, r3, #19
    305e:	bpl.n	303c <fault_isr+0x18>
    3060:	bl	4c5c <uart2_status_isr>
    3064:	b.n	303c <fault_isr+0x18>
    3066:	nop
    3068:	.word	0x40048034

0000306c <unused_isr>:
	}
}

void unused_isr(void)
{
    306c:	push	{r3, lr}
	fault_isr();
    306e:	bl	3024 <fault_isr>
    3072:	nop

00003074 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3074:	ldr	r3, [pc, #4]	; (307c <startup_early_hook+0x8>)
    3076:	movs	r2, #16
    3078:	strh	r2, [r3, #0]
    307a:	bx	lr
    307c:	.word	0x40052000

00003080 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3080:	bx	lr
    3082:	nop

00003084 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3084:	ldr	r1, [pc, #36]	; (30ac <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3086:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3088:	ldr	r3, [r1, #0]
	if (incr != 0) {
    308a:	cbz	r0, 309a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    308c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    308e:	add	r0, r3
    3090:	sub.w	r2, r2, #4096	; 0x1000
    3094:	cmp	r0, r2
    3096:	bcs.n	309e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3098:	str	r0, [r1, #0]
	}
	return prev;
    309a:	mov	r0, r3
}
    309c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    309e:	bl	5250 <__errno>
    30a2:	movs	r3, #12
    30a4:	str	r3, [r0, #0]
			return (void *)-1;
    30a6:	mov.w	r0, #4294967295
    30aa:	pop	{r3, pc}
    30ac:	.word	0x1fff8b18

000030b0 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    30b0:	b.n	30b0 <__cxa_pure_virtual>
    30b2:	nop

000030b4 <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    30b4:	bx	lr
    30b6:	nop

000030b8 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    30b8:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    30ba:	ldr	r3, [pc, #60]	; (30f8 <digitalWrite.part.1+0x40>)
    30bc:	ldr.w	r2, [r3, r0, lsl #3]
    30c0:	ldrb.w	r4, [r2, #640]	; 0x280
    30c4:	cbz	r4, 30d2 <digitalWrite.part.1+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    30c6:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    30c8:	cbz	r1, 30e6 <digitalWrite.part.1+0x2e>
			*portSetRegister(pin) = 1;
    30ca:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    30ce:	pop	{r4}
    30d0:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    30d2:	add.w	r3, r3, r0, lsl #3
    30d6:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    30d8:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    30da:	cbnz	r1, 30ee <digitalWrite.part.1+0x36>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    30dc:	bic.w	r2, r2, #2
    30e0:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    30e2:	pop	{r4}
    30e4:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    30e6:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    30ea:	pop	{r4}
    30ec:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    30ee:	orr.w	r2, r2, #3
    30f2:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    30f4:	pop	{r4}
    30f6:	bx	lr
    30f8:	.word	0x00005fa8

000030fc <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    30fc:	ldr	r2, [pc, #112]	; (3170 <pinMode.part.2+0x74>)
    30fe:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3102:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    3104:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3106:	beq.n	312c <pinMode.part.2+0x30>
    3108:	cmp	r1, #4
    310a:	beq.n	3144 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    310c:	ldr.w	r0, [r2, r0, lsl #3]
    3110:	movs	r2, #0
    3112:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    3116:	cbz	r1, 3124 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    3118:	cmp	r1, #2
    311a:	beq.n	315e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    311c:	cmp	r1, #3
    311e:	beq.n	3166 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    3120:	str	r2, [r3, #0]
    3122:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    3124:	mov.w	r2, #256	; 0x100
    3128:	str	r2, [r3, #0]
    312a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    312c:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3130:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3134:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3138:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    313a:	ldr	r2, [r3, #0]
    313c:	bic.w	r2, r2, #32
    3140:	str	r2, [r3, #0]
    3142:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3144:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3148:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    314c:	movs	r0, #1
    314e:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3152:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    3154:	ldr	r2, [r3, #0]
    3156:	orr.w	r2, r2, #32
    315a:	str	r2, [r3, #0]
    315c:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    315e:	movw	r2, #259	; 0x103
    3162:	str	r2, [r3, #0]
    3164:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    3166:	mov.w	r2, #258	; 0x102
    316a:	str	r2, [r3, #0]
    316c:	bx	lr
    316e:	nop
    3170:	.word	0x00005fa8

00003174 <attachInterrupt>:
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    3174:	cmp	r0, #33	; 0x21
    3176:	bhi.n	320a <attachInterrupt+0x96>
{
	_VectorsRam[irq + 16] = function;
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
    3178:	push	{r3, r4, r5, r6, r7, lr}
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    317a:	cmp	r2, #4
    317c:	bhi.n	3208 <attachInterrupt+0x94>
    317e:	tbb	[pc, r2]
    3182:	.short	0x4b48
    3184:	.short	0x034e
    3186:	.byte	0x45
    3187:	.byte	0x00
    3188:	mov.w	r6, #589824	; 0x90000
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);
    318c:	ldr	r3, [pc, #172]	; (323c <attachInterrupt+0xc8>)
    318e:	add.w	r3, r3, r0, lsl #3
    3192:	mov	r5, r1
    3194:	ldr	r4, [r3, #4]
	if ((*config & 0x00000700) == 0) {
    3196:	ldr	r1, [r4, #0]
    3198:	ands.w	r1, r1, #1792	; 0x700
    319c:	beq.n	3230 <attachInterrupt+0xbc>
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    319e:	ldr	r3, [pc, #160]	; (3240 <attachInterrupt+0xcc>)
    31a0:	ldr	r2, [pc, #160]	; (3244 <attachInterrupt+0xd0>)
    31a2:	ldr	r1, [pc, #164]	; (3248 <attachInterrupt+0xd4>)
    31a4:	str.w	r2, [r3, #412]	; 0x19c

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    31a8:	add.w	r2, r4, #3221225472	; 0xc0000000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    31ac:	ldr	r0, [pc, #156]	; (324c <attachInterrupt+0xd8>)
    31ae:	str.w	r1, [r3, #420]	; 0x1a4

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    31b2:	sub.w	r1, r2, #299008	; 0x49000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    31b6:	ldr	r7, [pc, #152]	; (3250 <attachInterrupt+0xdc>)
    31b8:	str.w	r0, [r3, #416]	; 0x1a0

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    31bc:	cmp	r1, #124	; 0x7c
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    31be:	ldr	r0, [pc, #148]	; (3254 <attachInterrupt+0xe0>)
    31c0:	str.w	r7, [r3, #424]	; 0x1a8
    31c4:	str.w	r0, [r3, #428]	; 0x1ac

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    31c8:	bls.n	3224 <attachInterrupt+0xb0>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    31ca:	sub.w	r3, r2, #303104	; 0x4a000
    31ce:	cmp	r3, #124	; 0x7c
    31d0:	bls.n	3228 <attachInterrupt+0xb4>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    31d2:	sub.w	r3, r2, #307200	; 0x4b000
    31d6:	cmp	r3, #124	; 0x7c
    31d8:	bls.n	322c <attachInterrupt+0xb8>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    31da:	sub.w	r3, r2, #311296	; 0x4c000
    31de:	cmp	r3, #124	; 0x7c
    31e0:	bls.n	3236 <attachInterrupt+0xc2>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    31e2:	sub.w	r2, r2, #315392	; 0x4d000
    31e6:	cmp	r2, #124	; 0x7c
    31e8:	bhi.n	323a <attachInterrupt+0xc6>
    31ea:	ldr	r0, [pc, #108]	; (3258 <attachInterrupt+0xe4>)
	attachInterruptVector(IRQ_PORTD, port_D_isr);
	attachInterruptVector(IRQ_PORTE, port_E_isr);
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    31ec:	cpsid	i
	cfg = *config;
    31ee:	ldr	r3, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    31f0:	bic.w	r3, r3, #983040	; 0xf0000
    31f4:	orr.w	r2, r3, #16777216	; 0x1000000
	*config = cfg;
	isr_table[pin_index] = function;	// set the function pointer
    31f8:	ubfx	r1, r4, #2, #5
	cfg |= mask;
    31fc:	orrs	r6, r2
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
    31fe:	str	r3, [r4, #0]
	isr_table[pin_index] = function;	// set the function pointer
    3200:	str.w	r5, [r0, r1, lsl #2]
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
    3204:	str	r6, [r4, #0]
	__enable_irq();
    3206:	cpsie	i
    3208:	pop	{r3, r4, r5, r6, r7, pc}
    320a:	bx	lr
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    320c:	mov.w	r6, #720896	; 0xb0000
    3210:	b.n	318c <attachInterrupt+0x18>
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
    3212:	mov.w	r6, #524288	; 0x80000
    3216:	b.n	318c <attachInterrupt+0x18>
	  case HIGH:	mask = 0x0C; break;
    3218:	mov.w	r6, #786432	; 0xc0000
    321c:	b.n	318c <attachInterrupt+0x18>
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    321e:	mov.w	r6, #655360	; 0xa0000
    3222:	b.n	318c <attachInterrupt+0x18>

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    3224:	ldr	r0, [pc, #52]	; (325c <attachInterrupt+0xe8>)
    3226:	b.n	31ec <attachInterrupt+0x78>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    3228:	ldr	r0, [pc, #52]	; (3260 <attachInterrupt+0xec>)
    322a:	b.n	31ec <attachInterrupt+0x78>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    322c:	ldr	r0, [pc, #52]	; (3264 <attachInterrupt+0xf0>)
    322e:	b.n	31ec <attachInterrupt+0x78>
    3230:	bl	30fc <pinMode.part.2>
    3234:	b.n	319e <attachInterrupt+0x2a>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    3236:	ldr	r0, [pc, #48]	; (3268 <attachInterrupt+0xf4>)
    3238:	b.n	31ec <attachInterrupt+0x78>
    323a:	pop	{r3, r4, r5, r6, r7, pc}
    323c:	.word	0x00005fa8
    3240:	.word	0x1fff8400
    3244:	.word	0x1fff89d1
    3248:	.word	0x1fff8979
    324c:	.word	0x1fff89a5
    3250:	.word	0x1fff894d
    3254:	.word	0x1fff8921
    3258:	.word	0x1fff8bf4
    325c:	.word	0x1fff8b1c
    3260:	.word	0x1fff8b54
    3264:	.word	0x1fff8ba4
    3268:	.word	0x1fff8bd4

0000326c <detachInterrupt>:

void detachInterrupt(uint8_t pin)
{
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    326c:	ldr	r3, [pc, #104]	; (32d8 <detachInterrupt+0x6c>)
    326e:	add.w	r0, r3, r0, lsl #3
	__enable_irq();
#endif
}

void detachInterrupt(uint8_t pin)
{
    3272:	push	{r4}
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    3274:	ldr	r2, [r0, #4]

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    3276:	add.w	r3, r2, #3221225472	; 0xc0000000
    327a:	sub.w	r1, r3, #299008	; 0x49000
    327e:	cmp	r1, #124	; 0x7c
    3280:	bls.n	32ca <detachInterrupt+0x5e>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    3282:	sub.w	r1, r3, #303104	; 0x4a000
    3286:	cmp	r1, #124	; 0x7c
    3288:	bls.n	32a6 <detachInterrupt+0x3a>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    328a:	sub.w	r1, r3, #307200	; 0x4b000
    328e:	cmp	r1, #124	; 0x7c
    3290:	bls.n	32d2 <detachInterrupt+0x66>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    3292:	sub.w	r1, r3, #311296	; 0x4c000
    3296:	cmp	r1, #124	; 0x7c
    3298:	bls.n	32ce <detachInterrupt+0x62>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    329a:	sub.w	r3, r3, #315392	; 0x4d000
    329e:	cmp	r3, #124	; 0x7c
    32a0:	bhi.n	32c6 <detachInterrupt+0x5a>
    32a2:	ldr	r4, [pc, #56]	; (32dc <detachInterrupt+0x70>)
    32a4:	b.n	32a8 <detachInterrupt+0x3c>
// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    32a6:	ldr	r4, [pc, #56]	; (32e0 <detachInterrupt+0x74>)
	config = portConfigRegister(pin);
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    32a8:	cpsid	i
	*config = ((*config & ~0x000F0000) | 0x01000000);
    32aa:	ldr	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    32ac:	ldr	r0, [pc, #52]	; (32e4 <detachInterrupt+0x78>)
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    32ae:	bic.w	r3, r3, #17694720	; 0x10e0000
	isr_table[pin_index] = dummy_isr;
    32b2:	ubfx	r1, r2, #2, #5
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    32b6:	bic.w	r3, r3, #65536	; 0x10000
    32ba:	orr.w	r3, r3, #16777216	; 0x1000000
    32be:	str	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    32c0:	str.w	r0, [r4, r1, lsl #2]
	__enable_irq();
    32c4:	cpsie	i
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
	intFunc[pin] = dummy_isr;
	__enable_irq();
#endif
}
    32c6:	pop	{r4}
    32c8:	bx	lr

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    32ca:	ldr	r4, [pc, #28]	; (32e8 <detachInterrupt+0x7c>)
    32cc:	b.n	32a8 <detachInterrupt+0x3c>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    32ce:	ldr	r4, [pc, #28]	; (32ec <detachInterrupt+0x80>)
    32d0:	b.n	32a8 <detachInterrupt+0x3c>
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    32d2:	ldr	r4, [pc, #28]	; (32f0 <detachInterrupt+0x84>)
    32d4:	b.n	32a8 <detachInterrupt+0x3c>
    32d6:	nop
    32d8:	.word	0x00005fa8
    32dc:	.word	0x1fff8bf4
    32e0:	.word	0x1fff8b54
    32e4:	.word	0x000030b5
    32e8:	.word	0x1fff8b1c
    32ec:	.word	0x1fff8bd4
    32f0:	.word	0x1fff8ba4

000032f4 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    32f4:	push	{r4, r5}
	RTC_SR = 0;
    32f6:	ldr	r3, [pc, #20]	; (330c <rtc_set+0x18>)
	RTC_TPR = 0;
    32f8:	ldr	r5, [pc, #20]	; (3310 <rtc_set+0x1c>)
	RTC_TSR = t;
    32fa:	ldr	r4, [pc, #24]	; (3314 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    32fc:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    32fe:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    3300:	str	r2, [r3, #0]
	RTC_TPR = 0;
    3302:	str	r2, [r5, #0]
	RTC_TSR = t;
    3304:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    3306:	str	r1, [r3, #0]
}
    3308:	pop	{r4, r5}
    330a:	bx	lr
    330c:	.word	0x4003d014
    3310:	.word	0x4003d004
    3314:	.word	0x4003d000

00003318 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    3318:	cmp	r0, #33	; 0x21
    331a:	bhi.n	3320 <digitalWrite+0x8>
    331c:	b.w	30b8 <digitalWrite.part.1>
    3320:	bx	lr
    3322:	nop

00003324 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    3324:	cmp	r0, #33	; 0x21
    3326:	bhi.n	3336 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    3328:	ldr	r3, [pc, #16]	; (333c <digitalRead+0x18>)
    332a:	ldr.w	r3, [r3, r0, lsl #3]
    332e:	ldrb.w	r0, [r3, #512]	; 0x200
    3332:	uxtb	r0, r0
    3334:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    3336:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    3338:	bx	lr
    333a:	nop
    333c:	.word	0x00005fa8

00003340 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    3340:	cmp	r0, #33	; 0x21
    3342:	bhi.n	3348 <pinMode+0x8>
    3344:	b.w	30fc <pinMode.part.2>
    3348:	bx	lr
    334a:	nop

0000334c <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    334c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3350:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    3352:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    3354:	ldr	r7, [pc, #128]	; (33d8 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3356:	ldr	r3, [pc, #132]	; (33dc <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3358:	ldr	r2, [pc, #132]	; (33e0 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    335a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    335c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    335e:	ldr	r2, [r2, #0]
	__enable_irq();
    3360:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3362:	lsls	r2, r2, #5
    3364:	bpl.n	336c <delay+0x20>
    3366:	cmp	r3, #50	; 0x32
    3368:	it	hi
    336a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    336c:	cbz	r5, 33d4 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    336e:	rsb	r3, r3, #95744	; 0x17600
    3372:	ldr	r6, [pc, #112]	; (33e4 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3374:	ldr.w	r9, [pc, #100]	; 33dc <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3378:	ldr.w	r8, [pc, #100]	; 33e0 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    337c:	adds	r3, #255	; 0xff
    337e:	mov.w	r2, #1000	; 0x3e8
    3382:	umull	r1, r3, r6, r3
    3386:	mul.w	r4, r2, r4
    338a:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    338e:	cpsid	i
	current = SYST_CVR;
    3390:	ldr.w	r1, [r9]
	count = systick_millis_count;
    3394:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3396:	ldr.w	lr, [r8]
	__enable_irq();
    339a:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    339c:	rsb	r3, r1, #95744	; 0x17600
    33a0:	adds	r3, #255	; 0xff
    33a2:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    33a6:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    33aa:	rsb	r3, r4, r3, lsr #6
    33ae:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    33b2:	beq.n	33ba <delay+0x6e>
    33b4:	cmp	r1, #50	; 0x32
    33b6:	it	hi
    33b8:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    33ba:	mla	r3, r0, r2, r3
    33be:	cmp.w	r3, #1000	; 0x3e8
    33c2:	bcc.n	33ce <delay+0x82>
				ms--;
				if (ms == 0) return;
    33c4:	subs	r5, #1
    33c6:	beq.n	33d4 <delay+0x88>
				start += 1000;
    33c8:	add.w	r4, r4, #1000	; 0x3e8
    33cc:	b.n	338e <delay+0x42>
			}
			yield();
    33ce:	bl	451c <yield>
		}
    33d2:	b.n	338e <delay+0x42>
    33d4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    33d8:	.word	0x1fffb108
    33dc:	.word	0xe000e018
    33e0:	.word	0xe000ed04
    33e4:	.word	0xaaaaaaab

000033e8 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    33e8:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    33ea:	ldr	r3, [pc, #180]	; (34a0 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    33ec:	ldr	r1, [pc, #180]	; (34a4 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    33ee:	ldr.w	lr, [pc, #208]	; 34c0 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    33f2:	ldr.w	ip, [pc, #208]	; 34c4 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    33f6:	ldr	r6, [pc, #176]	; (34a8 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    33f8:	ldr	r5, [pc, #176]	; (34ac <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    33fa:	ldr	r4, [pc, #180]	; (34b0 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    33fc:	ldr	r2, [pc, #180]	; (34b4 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    33fe:	ldr	r7, [pc, #184]	; (34b8 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3400:	mov.w	r0, #8388608	; 0x800000
    3404:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    3406:	mov.w	r0, #16777216	; 0x1000000
    340a:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    340c:	mov.w	r0, #33554432	; 0x2000000
    3410:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    3412:	mov.w	r0, #67108864	; 0x4000000
    3416:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    3418:	mov.w	r0, #134217728	; 0x8000000
    341c:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    341e:	movs	r0, #0
    3420:	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3422:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    3424:	movw	r1, #49151	; 0xbfff
    3428:	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    342c:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    3430:	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    3432:	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    3434:	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    3436:	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    3438:	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    343a:	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    343c:	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    343e:	movs	r2, #9
    3440:	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    3444:	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    3448:	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    344c:	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    3450:	add.w	r7, r7, #522240	; 0x7f800
    3454:	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    3458:	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    345c:	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    345e:	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3462:	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    3466:	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    346a:	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    346e:	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    3470:	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3474:	ldr	r0, [pc, #68]	; (34bc <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    3476:	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    3478:	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    347c:	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    3480:	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    3482:	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3484:	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    3486:	bl	2f44 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    348a:	movs	r0, #25
    348c:	bl	334c <delay>
	usb_init();
    3490:	bl	4170 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    3494:	movw	r0, #275	; 0x113
}
    3498:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    349c:	b.w	334c <delay>
    34a0:	.word	0xe000e108
    34a4:	.word	0x40038004
    34a8:	.word	0x40038014
    34ac:	.word	0x40038024
    34b0:	.word	0x4003802c
    34b4:	.word	0x4003801c
    34b8:	.word	0x40038034
    34bc:	.word	0x400b8000
    34c0:	.word	0x4003800c
    34c4:	.word	0x40038008

000034c8 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    34c8:	cpsid	i
	avail = usb_buffer_available;
    34ca:	ldr	r0, [pc, #52]	; (3500 <usb_malloc+0x38>)
    34cc:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    34ce:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    34d2:	cmp	r3, #11
    34d4:	bgt.n	34f8 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    34d6:	mov.w	r1, #2147483648	; 0x80000000
    34da:	lsrs	r1, r3
    34dc:	bic.w	r2, r2, r1
    34e0:	str	r2, [r0, #0]
	__enable_irq();
    34e2:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    34e4:	ldr	r0, [pc, #28]	; (3504 <usb_malloc+0x3c>)
    34e6:	add.w	r3, r3, r3, lsl #3
    34ea:	lsls	r3, r3, #3
    34ec:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    34ee:	movs	r1, #0
    34f0:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    34f2:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    34f4:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    34f6:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    34f8:	cpsie	i
		return NULL;
    34fa:	movs	r0, #0
    34fc:	bx	lr
    34fe:	nop
    3500:	.word	0x1fff8bfc
    3504:	.word	0x1fff85bc

00003508 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3508:	ldr	r3, [pc, #52]	; (3540 <usb_free+0x38>)
    350a:	ldr	r2, [pc, #56]	; (3544 <usb_free+0x3c>)
    350c:	subs	r3, r0, r3
    350e:	umull	r2, r3, r2, r3
    3512:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    3514:	cmp	r3, #11
    3516:	bhi.n	3532 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3518:	ldr	r2, [pc, #44]	; (3548 <usb_free+0x40>)
    351a:	ldrb	r2, [r2, #0]
    351c:	cbnz	r2, 3534 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    351e:	cpsid	i
	usb_buffer_available |= mask;
    3520:	ldr	r0, [pc, #40]	; (354c <usb_free+0x44>)
    3522:	mov.w	r1, #2147483648	; 0x80000000
    3526:	ldr	r2, [r0, #0]
    3528:	lsr.w	r3, r1, r3
    352c:	orrs	r2, r3
    352e:	str	r2, [r0, #0]
	__enable_irq();
    3530:	cpsie	i
    3532:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3534:	ldr	r2, [pc, #24]	; (3550 <usb_free+0x48>)
    3536:	ldrb	r2, [r2, #0]
    3538:	cmp	r2, #0
    353a:	beq.n	351e <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    353c:	b.w	3554 <usb_rx_memory>
    3540:	.word	0x1fff85bc
    3544:	.word	0x38e38e39
    3548:	.word	0x1fffb1e1
    354c:	.word	0x1fff8bfc
    3550:	.word	0x1fffb1ec

00003554 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    3554:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    3556:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3558:	ldr	r2, [pc, #172]	; (3608 <usb_rx_memory+0xb4>)
    355a:	ldrb	r3, [r2, #0]
    355c:	lsls	r5, r3, #28
    355e:	bpl.n	356e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3560:	ldr	r3, [pc, #168]	; (360c <usb_rx_memory+0xb8>)
    3562:	ldr	r1, [r3, #32]
    3564:	cmp	r1, #0
    3566:	beq.n	35d6 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3568:	ldr	r1, [r3, #40]	; 0x28
    356a:	cmp	r1, #0
    356c:	beq.n	35f2 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    356e:	ldrb	r3, [r2, #1]
    3570:	lsls	r4, r3, #28
    3572:	bpl.n	3582 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3574:	ldr	r3, [pc, #148]	; (360c <usb_rx_memory+0xb8>)
    3576:	ldr	r1, [r3, #64]	; 0x40
    3578:	cmp	r1, #0
    357a:	beq.n	35fa <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    357c:	ldr	r1, [r3, #72]	; 0x48
    357e:	cmp	r1, #0
    3580:	beq.n	35f6 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3582:	ldrb	r3, [r2, #2]
    3584:	lsls	r1, r3, #28
    3586:	bpl.n	3594 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3588:	ldr	r3, [pc, #128]	; (360c <usb_rx_memory+0xb8>)
    358a:	ldr	r1, [r3, #96]	; 0x60
    358c:	cmp	r1, #0
    358e:	beq.n	35fe <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3590:	ldr	r1, [r3, #104]	; 0x68
    3592:	cbz	r1, 35b8 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3594:	ldrb	r3, [r2, #3]
    3596:	lsls	r3, r3, #28
    3598:	bpl.n	35aa <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    359a:	ldr	r3, [pc, #112]	; (360c <usb_rx_memory+0xb8>)
    359c:	ldr.w	r2, [r3, #128]	; 0x80
    35a0:	cbz	r2, 3602 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35a2:	ldr.w	r2, [r3, #136]	; 0x88
    35a6:	movs	r1, #17
    35a8:	cbz	r2, 35ba <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    35aa:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    35ac:	ldr	r3, [pc, #96]	; (3610 <usb_rx_memory+0xbc>)
    35ae:	movs	r2, #0
    35b0:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    35b2:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    35b4:	b.w	3508 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35b8:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35ba:	ldr	r4, [pc, #84]	; (3610 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    35bc:	ldr	r5, [pc, #84]	; (3614 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    35be:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    35c0:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    35c4:	add.w	r3, r3, r1, lsl #3
    35c8:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35ca:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    35cc:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    35ce:	strb	r2, [r4, #0]
				__enable_irq();
    35d0:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    35d2:	pop	{r4, r5}
    35d4:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    35d6:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35d8:	ldr	r4, [pc, #52]	; (3610 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    35da:	ldr	r5, [pc, #60]	; (3618 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    35dc:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    35de:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    35e2:	add.w	r3, r3, r2, lsl #3
    35e6:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35e8:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    35ea:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    35ec:	strb	r2, [r4, #0]
				__enable_irq();
    35ee:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    35f0:	b.n	35d2 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    35f2:	movs	r1, #5
    35f4:	b.n	35ba <usb_rx_memory+0x66>
    35f6:	movs	r1, #9
    35f8:	b.n	35ba <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    35fa:	movs	r2, #8
    35fc:	b.n	35d8 <usb_rx_memory+0x84>
    35fe:	movs	r2, #12
    3600:	b.n	35d8 <usb_rx_memory+0x84>
    3602:	movs	r2, #16
    3604:	b.n	35d8 <usb_rx_memory+0x84>
    3606:	nop
    3608:	.word	0x000060b8
    360c:	.word	0x1fff8000
    3610:	.word	0x1fffb1e1
    3614:	.word	0x004000c8
    3618:	.word	0x00400088

0000361c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    361c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    361e:	cmp	r3, #3
    3620:	bhi.n	365e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3622:	ldr	r2, [pc, #108]	; (3690 <usb_tx+0x74>)
    3624:	lsls	r0, r0, #5
    3626:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    362a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    362c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    362e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3630:	ldr	r4, [pc, #96]	; (3694 <usb_tx+0x78>)
    3632:	ldrb	r2, [r4, r3]
    3634:	cmp	r2, #3
    3636:	bhi.n	3670 <usb_tx+0x54>
    3638:	tbb	[pc, r2]
    363c:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3640:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3642:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3644:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3646:	tst.w	r0, #8
    364a:	ite	ne
    364c:	movne	r3, #200	; 0xc8
    364e:	moveq	r3, #136	; 0x88
    3650:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3654:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3656:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3658:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    365a:	cpsie	i
}
    365c:	pop	{r4, r5}
    365e:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3660:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    3662:	movs	r2, #2
		break;
    3664:	b.n	3642 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    3666:	movs	r2, #5
    3668:	b.n	3642 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    366a:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    366c:	movs	r2, #4
		break;
    366e:	b.n	3642 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3670:	ldr	r2, [pc, #36]	; (3698 <usb_tx+0x7c>)
    3672:	ldr.w	r0, [r2, r3, lsl #2]
    3676:	cbz	r0, 3688 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3678:	ldr	r2, [pc, #32]	; (369c <usb_tx+0x80>)
    367a:	ldr.w	r0, [r2, r3, lsl #2]
    367e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3680:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    3684:	cpsie	i
		return;
    3686:	b.n	365c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    3688:	str.w	r1, [r2, r3, lsl #2]
    368c:	ldr	r2, [pc, #12]	; (369c <usb_tx+0x80>)
    368e:	b.n	3680 <usb_tx+0x64>
    3690:	.word	0x1fff8000
    3694:	.word	0x1fffb1f0
    3698:	.word	0x1fffb1b8
    369c:	.word	0x1fffb1c8

000036a0 <usb_isr>:
}



void usb_isr(void)
{
    36a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    36a4:	ldr.w	fp, [pc, #780]	; 39b4 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    36a8:	ldr.w	sl, [pc, #780]	; 39b8 <usb_isr+0x318>
}



void usb_isr(void)
{
    36ac:	sub	sp, #28
    36ae:	b.n	373a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    36b0:	ldr	r7, [pc, #684]	; (3960 <usb_isr+0x2c0>)
    36b2:	mov.w	r8, r3, lsr #2
    36b6:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    36ba:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    36bc:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    36c0:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    36c4:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    36c6:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    36ca:	and.w	r4, r3, #255	; 0xff
    36ce:	cmp	r3, #0
    36d0:	bne.w	38d8 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    36d4:	ldr.w	r3, [r7, r8, lsl #3]
    36d8:	lsrs	r3, r3, #16
    36da:	uxth	r1, r3
    36dc:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    36e0:	cmp	r3, #0
    36e2:	beq.w	38c6 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    36e6:	ldr	r3, [pc, #636]	; (3964 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    36e8:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    36ec:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    36f0:	ldr.w	r2, [r3, r6, lsl #2]
    36f4:	cmp	r2, #0
    36f6:	beq.w	3c84 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    36fa:	ldr	r5, [pc, #620]	; (3968 <usb_isr+0x2c8>)
    36fc:	ldr.w	r3, [r5, r6, lsl #2]
    3700:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    3702:	ldr	r4, [pc, #616]	; (396c <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    3704:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3708:	ldrh.w	r3, [r4, r6, lsl #1]
    370c:	add	r1, r3
    370e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    3712:	bl	34c8 <usb_malloc>
					if (packet) {
    3716:	cmp	r0, #0
    3718:	beq.w	3c76 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    371c:	ldr	r2, [pc, #592]	; (3970 <usb_isr+0x2d0>)
    371e:	ldr	r3, [pc, #596]	; (3974 <usb_isr+0x2d4>)
    3720:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3724:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3728:	it	ne
    372a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    372c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    3730:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    3734:	movs	r3, #8
    3736:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    373a:	ldrb.w	r4, [fp]
    373e:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    3740:	lsls	r1, r4, #29
    3742:	bpl.n	377a <usb_isr+0xda>
		if (usb_configuration) {
    3744:	ldr	r3, [pc, #560]	; (3978 <usb_isr+0x2d8>)
    3746:	ldrb	r3, [r3, #0]
    3748:	cbz	r3, 3774 <usb_isr+0xd4>
			t = usb_reboot_timer;
    374a:	ldr	r1, [pc, #560]	; (397c <usb_isr+0x2dc>)
    374c:	ldrb	r2, [r1, #0]
			if (t) {
    374e:	and.w	r3, r2, #255	; 0xff
    3752:	cbz	r2, 375e <usb_isr+0xbe>
				usb_reboot_timer = --t;
    3754:	subs	r3, #1
    3756:	uxtb	r3, r3
    3758:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    375a:	cbnz	r3, 375e <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    375c:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    375e:	ldr	r1, [pc, #544]	; (3980 <usb_isr+0x2e0>)
    3760:	ldrb	r2, [r1, #0]
			if (t) {
    3762:	and.w	r3, r2, #255	; 0xff
    3766:	cbz	r2, 3774 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    3768:	subs	r3, #1
    376a:	uxtb	r3, r3
    376c:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    376e:	cmp	r3, #0
    3770:	beq.w	3c22 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    3774:	movs	r3, #4
    3776:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    377a:	and.w	r3, r4, #8
    377e:	and.w	r2, r3, #255	; 0xff
    3782:	cmp	r3, #0
    3784:	beq.w	3920 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    3788:	ldrb.w	r3, [sl]
    378c:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    378e:	lsrs	r6, r3, #4
    3790:	bne.n	36b0 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3792:	lsrs	r4, r3, #2
    3794:	ldr.w	r9, [pc, #456]	; 3960 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3798:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    379c:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    37a0:	ubfx	r2, r2, #2, #4
    37a4:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    37a6:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    37a8:	cmp	r2, #12
    37aa:	bhi.w	38be <usb_isr+0x21e>
    37ae:	tbb	[pc, r2]
    37b2:	.short	0x7c7c
    37b4:	.word	0x86868686
    37b8:	.word	0x86478686
    37bc:	.short	0x8686
    37be:	.byte	0x07
    37bf:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    37c0:	ldr	r0, [r1, #0]
    37c2:	ldr	r5, [pc, #448]	; (3984 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    37c4:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37c6:	ldr	r7, [pc, #448]	; (3988 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    37c8:	ldr	r6, [pc, #448]	; (398c <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    37ca:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37cc:	uxth	r1, r0
    37ce:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    37d2:	ldr	r3, [pc, #412]	; (3970 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    37d4:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    37d6:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37da:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37dc:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    37de:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    37e2:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    37e4:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    37e8:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    37ec:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    37f0:	ldr	r4, [pc, #364]	; (3960 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    37f2:	bhi.w	39bc <usb_isr+0x31c>
    37f6:	cmp.w	r1, #1664	; 0x680
    37fa:	bcs.w	3e8a <usb_isr+0x7ea>
    37fe:	cmp.w	r1, #258	; 0x102
    3802:	beq.w	3dfe <usb_isr+0x75e>
    3806:	bhi.w	3d24 <usb_isr+0x684>
    380a:	cmp	r1, #128	; 0x80
    380c:	beq.w	3efe <usb_isr+0x85e>
    3810:	cmp	r1, #130	; 0x82
    3812:	bne.w	3e0a <usb_isr+0x76a>
    3816:	ldrh	r1, [r5, #4]
    3818:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    381c:	cmp	r1, #4
    381e:	bhi.w	3e0a <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3822:	ldr	r0, [pc, #364]	; (3990 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    3824:	ldr	r4, [pc, #364]	; (3994 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    3826:	lsls	r1, r1, #2
    3828:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    382a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    382c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    382e:	ldrb	r2, [r0, #0]
    3830:	lsls	r3, r2, #30
    3832:	bpl.w	40e6 <usb_isr+0xa46>
    3836:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    383a:	mov.w	lr, #2
    383e:	b.n	3ec6 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    3840:	ldr	r7, [pc, #324]	; (3988 <usb_isr+0x2e8>)
    3842:	ldr	r2, [r7, #0]
		if (data) {
    3844:	cbz	r2, 3894 <usb_isr+0x1f4>
			size = ep0_tx_len;
    3846:	ldr	r3, [pc, #336]	; (3998 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3848:	ldr	r6, [pc, #320]	; (398c <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    384a:	ldr	r1, [pc, #336]	; (399c <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    384c:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    384e:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3850:	ldrb	r5, [r1, #0]
    3852:	cmp	r0, #64	; 0x40
    3854:	mov	lr, r0
    3856:	orr.w	r8, r5, #2
    385a:	it	cs
    385c:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3860:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    3862:	eor.w	r4, r4, #1
    3866:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3868:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    386c:	ite	eq
    386e:	moveq	r4, #136	; 0x88
    3870:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3872:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3876:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3878:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    387c:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3880:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3882:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3884:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3888:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    388a:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    388c:	cmp	r0, #0
    388e:	beq.w	3b1c <usb_isr+0x47c>
    3892:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    3894:	ldr	r3, [pc, #236]	; (3984 <usb_isr+0x2e4>)
    3896:	ldrh	r2, [r3, #0]
    3898:	cmp.w	r2, #1280	; 0x500
    389c:	bne.n	38be <usb_isr+0x21e>
			setup.bRequest = 0;
    389e:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    38a0:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    38a2:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    38a4:	ldr	r3, [pc, #248]	; (39a0 <usb_isr+0x300>)
    38a6:	strb	r2, [r3, #0]
    38a8:	b.n	38be <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    38aa:	ldr	r2, [pc, #216]	; (3984 <usb_isr+0x2e4>)
    38ac:	ldrh	r0, [r2, #0]
    38ae:	movw	r2, #8225	; 0x2021
    38b2:	cmp	r0, r2
    38b4:	beq.w	3b26 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    38b8:	ldr	r2, [pc, #180]	; (3970 <usb_isr+0x2d0>)
    38ba:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    38be:	ldr	r2, [pc, #228]	; (39a4 <usb_isr+0x304>)
    38c0:	movs	r3, #1
    38c2:	strb	r3, [r2, #0]
    38c4:	b.n	3734 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    38c6:	ldr	r2, [pc, #168]	; (3970 <usb_isr+0x2d0>)
    38c8:	ldr	r3, [pc, #168]	; (3974 <usb_isr+0x2d4>)
    38ca:	tst.w	r9, #8
    38ce:	it	ne
    38d0:	movne	r3, r2
    38d2:	str.w	r3, [r7, r8, lsl #3]
    38d6:	b.n	3734 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    38d8:	bl	3508 <usb_free>
				packet = tx_first[endpoint];
    38dc:	ldr	r2, [pc, #200]	; (39a8 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    38de:	ldr	r1, [pc, #204]	; (39ac <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    38e0:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    38e4:	cmp	r3, #0
    38e6:	beq.w	3c8c <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    38ea:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    38ec:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    38ee:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    38f2:	add.w	r2, r3, #8
    38f6:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    38fa:	cmp	r4, #3
    38fc:	bhi.n	390a <usb_isr+0x26a>
    38fe:	tbb	[pc, r4]
    3902:	.short	0x022c
    3904:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    3906:	movs	r2, #2
    3908:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    390a:	ldrh	r2, [r3, #0]
    390c:	tst.w	r9, #8
    3910:	ite	eq
    3912:	moveq	r3, #136	; 0x88
    3914:	movne	r3, #200	; 0xc8
    3916:	orr.w	r3, r3, r2, lsl #16
    391a:	str.w	r3, [r7, r8, lsl #3]
    391e:	b.n	3734 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    3920:	lsls	r0, r4, #31
    3922:	bmi.w	3c28 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    3926:	lsls	r1, r4, #24
    3928:	bmi.w	3d10 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    392c:	lsls	r2, r4, #30
    392e:	bpl.n	393e <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    3930:	ldr	r2, [pc, #124]	; (39b0 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3932:	ldr	r1, [pc, #128]	; (39b4 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3934:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    3936:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    3938:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    393a:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    393c:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    393e:	lsls	r3, r4, #27
    3940:	bpl.n	3948 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    3942:	ldr	r3, [pc, #112]	; (39b4 <usb_isr+0x314>)
    3944:	movs	r2, #16
    3946:	strb	r2, [r3, #0]
	}

}
    3948:	add	sp, #28
    394a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    394e:	movs	r2, #4
    3950:	strb	r2, [r1, r6]
						break;
    3952:	b.n	390a <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    3954:	movs	r2, #5
    3956:	strb	r2, [r1, r6]
						break;
    3958:	b.n	390a <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    395a:	movs	r2, #3
    395c:	strb	r2, [r1, r6]
						break;
    395e:	b.n	390a <usb_isr+0x26a>
    3960:	.word	0x1fff8000
    3964:	.word	0x1fffb164
    3968:	.word	0x1fffb110
    396c:	.word	0x1fffb414
    3970:	.word	0x004000c8
    3974:	.word	0x00400088
    3978:	.word	0x1fffb1ec
    397c:	.word	0x1fffb175
    3980:	.word	0x1fffb0f8
    3984:	.word	0x1fffb1d8
    3988:	.word	0x1fffb10c
    398c:	.word	0x1fffb174
    3990:	.word	0x400720c0
    3994:	.word	0x1fffb1e4
    3998:	.word	0x1fffb120
    399c:	.word	0x1fffb1e0
    39a0:	.word	0x40072098
    39a4:	.word	0x40072094
    39a8:	.word	0x1fffb1b8
    39ac:	.word	0x1fffb1f0
    39b0:	.word	0x40072088
    39b4:	.word	0x40072080
    39b8:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    39bc:	movw	r0, #8225	; 0x2021
    39c0:	cmp	r1, r0
    39c2:	beq.w	3c1a <usb_isr+0x57a>
    39c6:	bhi.w	3b7a <usb_isr+0x4da>
    39ca:	cmp.w	r1, #2176	; 0x880
    39ce:	beq.w	3ebe <usb_isr+0x81e>
    39d2:	cmp.w	r1, #2304	; 0x900
    39d6:	bne.w	3e0a <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    39da:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    39dc:	ldr	r1, [pc, #716]	; (3cac <usb_isr+0x60c>)
    39de:	ldrb	r0, [r5, #2]
    39e0:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    39e2:	lsls	r2, r2, #24
    39e4:	bmi.w	405c <usb_isr+0x9bc>
    39e8:	ldr.w	r2, [r9, #40]	; 0x28
    39ec:	ldr	r1, [pc, #704]	; (3cb0 <usb_isr+0x610>)
    39ee:	lsls	r3, r2, #24
    39f0:	bmi.w	400c <usb_isr+0x96c>
    39f4:	ldr.w	r2, [r9, #48]	; 0x30
    39f8:	ldr	r1, [pc, #692]	; (3cb0 <usb_isr+0x610>)
    39fa:	lsls	r5, r2, #24
    39fc:	bmi.w	4002 <usb_isr+0x962>
    3a00:	ldr.w	r2, [r9, #56]	; 0x38
    3a04:	ldr	r1, [pc, #680]	; (3cb0 <usb_isr+0x610>)
    3a06:	lsls	r4, r2, #24
    3a08:	bmi.w	3ff8 <usb_isr+0x958>
    3a0c:	ldr.w	r2, [r9, #64]	; 0x40
    3a10:	ldr	r1, [pc, #668]	; (3cb0 <usb_isr+0x610>)
    3a12:	lsls	r0, r2, #24
    3a14:	bmi.w	40ac <usb_isr+0xa0c>
    3a18:	ldr.w	r2, [r9, #72]	; 0x48
    3a1c:	ldr	r1, [pc, #656]	; (3cb0 <usb_isr+0x610>)
    3a1e:	lsls	r2, r2, #24
    3a20:	bmi.w	40a2 <usb_isr+0xa02>
    3a24:	ldr.w	r2, [r9, #80]	; 0x50
    3a28:	ldr	r1, [pc, #644]	; (3cb0 <usb_isr+0x610>)
    3a2a:	lsls	r3, r2, #24
    3a2c:	bmi.w	4098 <usb_isr+0x9f8>
    3a30:	ldr.w	r2, [r9, #88]	; 0x58
    3a34:	ldr	r1, [pc, #632]	; (3cb0 <usb_isr+0x610>)
    3a36:	lsls	r5, r2, #24
    3a38:	bmi.w	408e <usb_isr+0x9ee>
    3a3c:	ldr.w	r2, [r9, #96]	; 0x60
    3a40:	ldr	r1, [pc, #620]	; (3cb0 <usb_isr+0x610>)
    3a42:	lsls	r4, r2, #24
    3a44:	bmi.w	4084 <usb_isr+0x9e4>
    3a48:	ldr.w	r2, [r9, #104]	; 0x68
    3a4c:	ldr	r1, [pc, #608]	; (3cb0 <usb_isr+0x610>)
    3a4e:	lsls	r0, r2, #24
    3a50:	bmi.w	407a <usb_isr+0x9da>
    3a54:	ldr.w	r2, [r9, #112]	; 0x70
    3a58:	ldr	r1, [pc, #596]	; (3cb0 <usb_isr+0x610>)
    3a5a:	lsls	r2, r2, #24
    3a5c:	bmi.w	4070 <usb_isr+0x9d0>
    3a60:	ldr.w	r2, [r9, #120]	; 0x78
    3a64:	ldr	r1, [pc, #584]	; (3cb0 <usb_isr+0x610>)
    3a66:	lsls	r3, r2, #24
    3a68:	bmi.w	4066 <usb_isr+0x9c6>
    3a6c:	ldr.w	r2, [r9, #128]	; 0x80
    3a70:	ldr	r1, [pc, #572]	; (3cb0 <usb_isr+0x610>)
    3a72:	lsls	r5, r2, #24
    3a74:	bmi.w	40da <usb_isr+0xa3a>
    3a78:	ldr.w	r2, [r9, #136]	; 0x88
    3a7c:	ldr	r1, [pc, #560]	; (3cb0 <usb_isr+0x610>)
    3a7e:	lsls	r4, r2, #24
    3a80:	bmi.w	40ce <usb_isr+0xa2e>
    3a84:	ldr.w	r2, [r9, #144]	; 0x90
    3a88:	ldr	r1, [pc, #548]	; (3cb0 <usb_isr+0x610>)
    3a8a:	lsls	r0, r2, #24
    3a8c:	bmi.w	40c2 <usb_isr+0xa22>
    3a90:	ldr.w	r2, [r9, #152]	; 0x98
    3a94:	ldr	r1, [pc, #536]	; (3cb0 <usb_isr+0x610>)
    3a96:	lsls	r2, r2, #24
    3a98:	bmi.w	40b6 <usb_isr+0xa16>
    3a9c:	ldr	r0, [pc, #532]	; (3cb4 <usb_isr+0x614>)
    3a9e:	ldr	r2, [pc, #536]	; (3cb8 <usb_isr+0x618>)
    3aa0:	ldr	r1, [pc, #536]	; (3cbc <usb_isr+0x61c>)
    3aa2:	str	r0, [sp, #4]
    3aa4:	ldr	r0, [pc, #536]	; (3cc0 <usb_isr+0x620>)
    3aa6:	ldr	r5, [pc, #540]	; (3cc4 <usb_isr+0x624>)
    3aa8:	ldr	r4, [pc, #540]	; (3cc8 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3aaa:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    3aac:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3aae:	str	r6, [sp, #20]
    3ab0:	str	r5, [sp, #8]
    3ab2:	mov	r8, r0
    3ab4:	mov	r7, r1
    3ab6:	mov	r6, r2
    3ab8:	mov	r5, r3
    3aba:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3abc:	ldr	r0, [r6, #0]
			while (p) {
    3abe:	cbz	r0, 3acc <usb_isr+0x42c>
				n = p->next;
    3ac0:	ldr	r4, [r0, #4]
				usb_free(p);
    3ac2:	bl	3508 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3ac6:	mov	r0, r4
    3ac8:	cmp	r4, #0
    3aca:	bne.n	3ac0 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3acc:	movs	r3, #0
    3ace:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3ad0:	ldr	r3, [sp, #8]
			p = tx_first[i];
    3ad2:	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3ad4:	mov	r2, r3
    3ad6:	movs	r3, #0
    3ad8:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    3adc:	cbz	r0, 3aea <usb_isr+0x44a>
				n = p->next;
    3ade:	ldr	r4, [r0, #4]
				usb_free(p);
    3ae0:	bl	3508 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3ae4:	mov	r0, r4
    3ae6:	cmp	r4, #0
    3ae8:	bne.n	3ade <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3aea:	movs	r2, #0
    3aec:	str	r2, [r7, #0]
			tx_last[i] = NULL;
    3aee:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3af0:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3af4:	mov	r1, r2
    3af6:	movs	r2, #0
    3af8:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    3afc:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3afe:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3b00:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3b02:	mov.w	r1, #0
    3b06:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    3b0a:	cmp	r3, #3
    3b0c:	bhi.w	3d66 <usb_isr+0x6c6>
    3b10:	tbh	[pc, r3, lsl #1]
    3b14:	.word	0x01250170
    3b18:	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3b1c:	cmp.w	lr, #64	; 0x40
    3b20:	it	ne
    3b22:	movne	r2, #0
    3b24:	b.n	3892 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3b26:	ldr	r2, [pc, #420]	; (3ccc <usb_isr+0x62c>)
    3b28:	ldrb	r5, [r1, #0]
    3b2a:	ldrb	r0, [r1, #1]
    3b2c:	strb	r5, [r2, #0]
    3b2e:	strb	r0, [r2, #1]
    3b30:	ldrb	r5, [r1, #2]
    3b32:	ldrb	r0, [r1, #3]
    3b34:	strb	r5, [r2, #2]
    3b36:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3b38:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3b3a:	ldrb	r5, [r1, #4]
    3b3c:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3b3e:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3b40:	ldrb	r5, [r1, #5]
    3b42:	ldrb	r1, [r1, #6]
    3b44:	strb	r5, [r2, #5]
    3b46:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3b48:	beq.w	3e82 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b4c:	ldr	r1, [pc, #384]	; (3cd0 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b4e:	ldr	r6, [pc, #388]	; (3cd4 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b50:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b52:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3b54:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b58:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b5a:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3b5e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b60:	ite	eq
    3b62:	moveq	r1, #136	; 0x88
    3b64:	movne	r1, #200	; 0xc8
    3b66:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b6a:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3b6e:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b72:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3b74:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b76:	str	r1, [r2, #4]
    3b78:	b.n	38b8 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3b7a:	movw	r0, #8737	; 0x2221
    3b7e:	cmp	r1, r0
    3b80:	bne.w	3f1a <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3b84:	ldr	r3, [pc, #336]	; (3cd8 <usb_isr+0x638>)
    3b86:	ldr	r4, [pc, #340]	; (3cdc <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3b88:	ldr	r1, [pc, #340]	; (3ce0 <usb_isr+0x640>)
    3b8a:	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3b8c:	ldr	r5, [r3, #0]
    3b8e:	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3b90:	str.w	lr, [sp, #4]
    3b94:	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3b96:	movs	r0, #0
    3b98:	str	r0, [sp, #8]
    3b9a:	mov	r8, r0
    3b9c:	mov	ip, r0
    3b9e:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3ba0:	ldr	r1, [pc, #300]	; (3cd0 <usb_isr+0x630>)
    3ba2:	ldrb	r5, [r1, #0]
    3ba4:	orr.w	lr, r5, #2
    3ba8:	add.w	r3, r9, lr, lsl #3
    3bac:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3bae:	ldr	r3, [sp, #4]
    3bb0:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3bb2:	ldr	r3, [sp, #12]
    3bb4:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3bb6:	ite	eq
    3bb8:	moveq	r4, #136	; 0x88
    3bba:	movne	r4, #200	; 0xc8
    3bbc:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3bc0:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3bc4:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3bc8:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3bca:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3bcc:	ldr.w	lr, [pc, #224]	; 3cb0 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    3bd0:	ldr	r3, [pc, #256]	; (3cd4 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    3bd2:	ldr.w	r8, [pc, #252]	; 3cd0 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3bd6:	cmp	r0, #0
    3bd8:	bne.w	3e18 <usb_isr+0x778>
    3bdc:	cmp.w	ip, #64	; 0x40
    3be0:	bne.n	3c1a <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3be2:	orr.w	ip, r4, #2
    3be6:	add.w	r3, r9, ip, lsl #3
    3bea:	ldr	r4, [sp, #8]
    3bec:	ldr.w	lr, [pc, #192]	; 3cb0 <usb_isr+0x610>
    3bf0:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3bf2:	cmp	r2, #0
    3bf4:	bne.w	3e44 <usb_isr+0x7a4>
    3bf8:	lsls	r2, r0, #16
    3bfa:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3bfe:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3c02:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c06:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3c08:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3c0a:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3c0c:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3c0e:	cmp	r0, #64	; 0x40
    3c10:	bne.n	3c1a <usb_isr+0x57a>
    3c12:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3c14:	ldr	r2, [pc, #204]	; (3ce4 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3c16:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3c18:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3c1a:	ldr	r2, [pc, #204]	; (3ce8 <usb_isr+0x648>)
    3c1c:	movs	r3, #1
    3c1e:	strb	r3, [r2, #0]
    3c20:	b.n	38be <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3c22:	bl	2efc <usb_serial_flush_callback>
    3c26:	b.n	3774 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3c28:	ldr	r3, [pc, #132]	; (3cb0 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3c2a:	ldr	r0, [pc, #188]	; (3ce8 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    3c2c:	ldr	r1, [pc, #160]	; (3cd0 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3c2e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3c30:	mov.w	lr, #2
    3c34:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3c38:	ldr	r7, [pc, #176]	; (3cec <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3c3a:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3c3c:	ldr	r1, [pc, #176]	; (3cf0 <usb_isr+0x650>)
    3c3e:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3c40:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3c42:	ldr	r6, [pc, #176]	; (3cf4 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    3c44:	ldr	r5, [pc, #176]	; (3cf8 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3c46:	ldr	r4, [pc, #180]	; (3cfc <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3c48:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3c4a:	movs	r1, #13
    3c4c:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3c4e:	movs	r1, #255	; 0xff
    3c50:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3c52:	ldr.w	lr, [pc, #184]	; 3d0c <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3c56:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3c58:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3c5a:	ldr	r5, [pc, #164]	; (3d00 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3c5c:	ldr	r2, [pc, #164]	; (3d04 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3c5e:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3c62:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3c64:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3c66:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3c6a:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3c6c:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3c6e:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3c70:	add	sp, #28
    3c72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3c76:	ldr	r2, [pc, #144]	; (3d08 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3c78:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3c7c:	ldrb	r3, [r2, #0]
    3c7e:	adds	r3, #1
    3c80:	strb	r3, [r2, #0]
    3c82:	b.n	3734 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3c84:	str.w	r0, [r3, r6, lsl #2]
    3c88:	ldr	r5, [pc, #56]	; (3cc4 <usb_isr+0x624>)
    3c8a:	b.n	3702 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3c8c:	ldrb	r3, [r1, r6]
    3c8e:	cmp	r3, #3
    3c90:	bhi.w	3e74 <usb_isr+0x7d4>
    3c94:	add	r2, pc, #4	; (adr r2, 3c9c <usb_isr+0x5fc>)
    3c96:	ldr.w	pc, [r2, r3, lsl #2]
    3c9a:	nop
    3c9c:	.word	0x00003735
    3ca0:	.word	0x00003735
    3ca4:	.word	0x00003d59
    3ca8:	.word	0x00003d53
    3cac:	.word	0x1fffb1ec
    3cb0:	.word	0x1fff8000
    3cb4:	.word	0x1fffb1c8
    3cb8:	.word	0x1fffb164
    3cbc:	.word	0x1fffb1b8
    3cc0:	.word	0x1fffb1f0
    3cc4:	.word	0x1fffb110
    3cc8:	.word	0x1fffb414
    3ccc:	.word	0x1fffb408
    3cd0:	.word	0x1fffb1e0
    3cd4:	.word	0x1fffb174
    3cd8:	.word	0x1fffb108
    3cdc:	.word	0x1fffb410
    3ce0:	.word	0x1fffb104
    3ce4:	.word	0x1fffb120
    3ce8:	.word	0x40072094
    3cec:	.word	0x400720c0
    3cf0:	.word	0x00400088
    3cf4:	.word	0x40072088
    3cf8:	.word	0x40072080
    3cfc:	.word	0x40072098
    3d00:	.word	0x1fffb124
    3d04:	.word	0x1fffb178
    3d08:	.word	0x1fffb1e1
    3d0c:	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3d10:	ldr	r1, [pc, #772]	; (4018 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    3d12:	ldr	r3, [pc, #776]	; (401c <usb_isr+0x97c>)
    3d14:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3d16:	movs	r0, #13
    3d18:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3d1a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3d1c:	lsls	r2, r4, #30
    3d1e:	bpl.w	393e <usb_isr+0x29e>
    3d22:	b.n	3930 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3d24:	movw	r2, #770	; 0x302
    3d28:	cmp	r1, r2
    3d2a:	bne.w	3f0a <usb_isr+0x86a>
    3d2e:	ldrh	r1, [r5, #4]
    3d30:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3d34:	cmp	r1, #4
    3d36:	bhi.n	3e0a <usb_isr+0x76a>
    3d38:	ldrh	r2, [r5, #2]
    3d3a:	cmp	r2, #0
    3d3c:	bne.n	3e0a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3d3e:	ldr	r0, [pc, #728]	; (4018 <usb_isr+0x978>)
    3d40:	str.w	lr, [sp, #4]
    3d44:	lsls	r1, r1, #2
    3d46:	add	r0, r1
    3d48:	ldrb	r1, [r0, #0]
    3d4a:	orr.w	r1, r1, #2
    3d4e:	strb	r1, [r0, #0]
    3d50:	b.n	3b96 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3d52:	movs	r3, #1
    3d54:	strb	r3, [r1, r6]
						break;
    3d56:	b.n	3734 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3d58:	movs	r3, #0
    3d5a:	strb	r3, [r1, r6]
						break;
    3d5c:	b.n	3734 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3d5e:	mov.w	r3, #1
    3d62:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3d66:	adds	r5, #1
    3d68:	cmp	r5, #4
    3d6a:	add.w	r6, r6, #4
    3d6e:	add.w	r7, r7, #4
    3d72:	add.w	r8, r8, #1
    3d76:	bne.w	3abc <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d7a:	ldr	r4, [pc, #676]	; (4020 <usb_isr+0x980>)
			*reg = epconf;
    3d7c:	ldr	r3, [pc, #676]	; (4024 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d7e:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3d80:	ldr	r5, [pc, #676]	; (4028 <usb_isr+0x988>)
    3d82:	ldr	r7, [sp, #16]
    3d84:	ldr	r6, [sp, #20]
    3d86:	movs	r1, #0
    3d88:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3d8a:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d8c:	lsls	r3, r2, #28
    3d8e:	bmi.w	3f9c <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d92:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3d94:	ldr	r1, [pc, #660]	; (402c <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d96:	ldr.w	r8, [pc, #672]	; 4038 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3d9a:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d9c:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d9e:	mov.w	r1, #0
    3da2:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3da6:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3daa:	bmi.w	3f6e <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3dae:	ldr	r1, [pc, #640]	; (4030 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3db0:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3db2:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3db4:	movs	r1, #0
    3db6:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3dba:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dbe:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dc0:	ldr.w	r8, [pc, #628]	; 4038 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dc4:	bmi.w	3fca <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3dc8:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3dca:	ldr	r1, [pc, #616]	; (4034 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dcc:	ldr	r4, [pc, #616]	; (4038 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3dce:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dd0:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3dd2:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3dd4:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3dd8:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3ddc:	bmi.w	3f40 <usb_isr+0x8a0>
    3de0:	ldrb	r3, [r6, #0]
    3de2:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3de4:	movs	r1, #0
    3de6:	eor.w	r2, r3, #1
    3dea:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3dee:	str.w	r1, [r9, #152]	; 0x98
    3df2:	b.n	3b96 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3df4:	mov.w	r3, #0
    3df8:	strb.w	r3, [r8]
    3dfc:	b.n	3d66 <usb_isr+0x6c6>
    3dfe:	ldrh	r1, [r5, #4]
    3e00:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3e04:	cmp	r1, #4
    3e06:	bls.w	3f24 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3e0a:	ldr	r2, [pc, #524]	; (4018 <usb_isr+0x978>)
    3e0c:	movs	r3, #15
    3e0e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3e10:	ldr	r2, [pc, #552]	; (403c <usb_isr+0x99c>)
    3e12:	movs	r3, #1
    3e14:	strb	r3, [r2, #0]
    3e16:	b.n	38be <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3e18:	cmp	r0, #64	; 0x40
    3e1a:	bls.w	3be2 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3e1e:	orr.w	r4, r4, #2
    3e22:	add.w	r1, lr, r4, lsl #3
    3e26:	ldr	r6, [sp, #8]
    3e28:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e2a:	cbz	r2, 3e5c <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    3e2c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e30:	ldr	r2, [pc, #524]	; (4040 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    3e32:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3e34:	mov	r3, r6
    3e36:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3e38:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3e3c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e3e:	str.w	r2, [lr, r4, lsl #3]
    3e42:	b.n	3c14 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    3e44:	ldrb.w	r3, [sp, #4]
    3e48:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e4a:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3e4c:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3e4e:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e50:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3e54:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e56:	str.w	r2, [lr, ip, lsl #3]
    3e5a:	b.n	3c0e <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    3e5c:	ldrb.w	r1, [sp, #4]
    3e60:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3e62:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e64:	ldr	r2, [pc, #476]	; (4044 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3e66:	strb.w	r5, [r8]
    3e6a:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3e6c:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e6e:	str.w	r2, [lr, r4, lsl #3]
    3e72:	b.n	3c14 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3e74:	tst.w	r9, #8
    3e78:	ite	eq
    3e7a:	moveq	r3, #2
    3e7c:	movne	r3, #3
    3e7e:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3e80:	b.n	3734 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3e82:	ldr	r2, [pc, #452]	; (4048 <usb_isr+0x9a8>)
    3e84:	movs	r1, #15
    3e86:	strb	r1, [r2, #0]
    3e88:	b.n	3b4c <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3e8a:	ldr	r2, [pc, #448]	; (404c <usb_isr+0x9ac>)
    3e8c:	ldr	r4, [r2, #4]
    3e8e:	cmp	r4, #0
    3e90:	beq.n	3e0a <usb_isr+0x76a>
    3e92:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3e94:	ldrh.w	lr, [r5, #4]
    3e98:	b.n	3ea2 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3e9a:	adds	r2, #12
			if (list->addr == NULL) break;
    3e9c:	ldr	r4, [r2, #4]
    3e9e:	cmp	r4, #0
    3ea0:	beq.n	3e0a <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3ea2:	ldrh	r3, [r2, #0]
    3ea4:	cmp	r3, r0
    3ea6:	bne.n	3e9a <usb_isr+0x7fa>
    3ea8:	ldrh	r3, [r2, #2]
    3eaa:	cmp	r3, lr
    3eac:	bne.n	3e9a <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3eae:	lsrs	r0, r0, #8
    3eb0:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3eb2:	ite	eq
    3eb4:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    3eb8:	ldrhne.w	lr, [r2, #8]
    3ebc:	b.n	3ec6 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3ebe:	ldr	r2, [pc, #400]	; (4050 <usb_isr+0x9b0>)
    3ec0:	ldr	r4, [pc, #400]	; (4054 <usb_isr+0x9b4>)
    3ec2:	ldrb	r2, [r2, #0]
    3ec4:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3ec6:	ldrh	r0, [r5, #6]
    3ec8:	cmp	r0, lr
    3eca:	bcs.w	414c <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3ece:	ldr	r1, [pc, #392]	; (4058 <usb_isr+0x9b8>)
    3ed0:	ldrb	r5, [r1, #0]
    3ed2:	cmp	r0, #64	; 0x40
    3ed4:	mov	ip, r0
    3ed6:	orr.w	lr, r5, #2
    3eda:	it	cs
    3edc:	movcs.w	ip, #64	; 0x40
    3ee0:	add.w	r3, r4, ip
    3ee4:	add.w	r2, r9, lr, lsl #3
    3ee8:	str	r3, [sp, #8]
    3eea:	movs	r3, #1
    3eec:	str	r4, [r2, #4]
    3eee:	rsb	r0, ip, r0
    3ef2:	mov.w	r8, ip, lsl #16
    3ef6:	movs	r2, #0
    3ef8:	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3efa:	movs	r4, #200	; 0xc8
    3efc:	b.n	3bbc <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3efe:	ldr	r4, [pc, #340]	; (4054 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    3f00:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3f04:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3f06:	strb	r2, [r4, #1]
    3f08:	b.n	3ec6 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3f0a:	cmp.w	r1, #1280	; 0x500
    3f0e:	bne.w	3e0a <usb_isr+0x76a>
    3f12:	movs	r3, #1
    3f14:	movs	r2, #0
    3f16:	str	r3, [sp, #4]
    3f18:	b.n	3b96 <usb_isr+0x4f6>
    3f1a:	movw	r2, #8993	; 0x2321
    3f1e:	cmp	r1, r2
    3f20:	beq.n	3f12 <usb_isr+0x872>
    3f22:	b.n	3e0a <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3f24:	ldrh	r2, [r5, #2]
    3f26:	cmp	r2, #0
    3f28:	bne.w	3e0a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3f2c:	ldr	r0, [pc, #232]	; (4018 <usb_isr+0x978>)
    3f2e:	str.w	lr, [sp, #4]
    3f32:	lsls	r1, r1, #2
    3f34:	add	r0, r1
    3f36:	ldrb	r1, [r0, #0]
    3f38:	bic.w	r1, r1, #2
    3f3c:	strb	r1, [r0, #0]
    3f3e:	b.n	3b96 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f40:	bl	34c8 <usb_malloc>
				if (p) {
    3f44:	cmp	r0, #0
    3f46:	beq.w	4128 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f4a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f4c:	ldr	r2, [pc, #244]	; (4044 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f4e:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f52:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f56:	bl	34c8 <usb_malloc>
				if (p) {
    3f5a:	cmp	r0, #0
    3f5c:	beq.w	411c <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    3f60:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f62:	ldr	r2, [pc, #220]	; (4040 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f64:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f68:	str.w	r2, [r9, #136]	; 0x88
    3f6c:	b.n	3de0 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f6e:	bl	34c8 <usb_malloc>
				if (p) {
    3f72:	cmp	r0, #0
    3f74:	beq.w	40f8 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f78:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f7a:	ldr	r2, [pc, #200]	; (4044 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f7c:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f80:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f84:	bl	34c8 <usb_malloc>
				if (p) {
    3f88:	cmp	r0, #0
    3f8a:	beq.w	40ec <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    3f8e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f90:	ldr	r2, [pc, #172]	; (4040 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f92:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f96:	str.w	r2, [r9, #72]	; 0x48
    3f9a:	b.n	3dae <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f9c:	bl	34c8 <usb_malloc>
				if (p) {
    3fa0:	cmp	r0, #0
    3fa2:	beq.w	4140 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3fa6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3fa8:	ldr	r2, [pc, #152]	; (4044 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3faa:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3fae:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3fb2:	bl	34c8 <usb_malloc>
				if (p) {
    3fb6:	cmp	r0, #0
    3fb8:	beq.w	4134 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    3fbc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3fbe:	ldr	r2, [pc, #128]	; (4040 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3fc0:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3fc4:	str.w	r2, [r9, #40]	; 0x28
    3fc8:	b.n	3d92 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3fca:	bl	34c8 <usb_malloc>
				if (p) {
    3fce:	cmp	r0, #0
    3fd0:	beq.w	4110 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    3fd4:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3fd6:	ldr	r2, [pc, #108]	; (4044 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3fd8:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3fdc:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3fe0:	bl	34c8 <usb_malloc>
				if (p) {
    3fe4:	cmp	r0, #0
    3fe6:	beq.w	4104 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    3fea:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3fec:	ldr	r2, [pc, #80]	; (4040 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3fee:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3ff2:	str.w	r2, [r9, #104]	; 0x68
    3ff6:	b.n	3dc8 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3ff8:	ldr	r0, [r1, #60]	; 0x3c
    3ffa:	subs	r0, #8
    3ffc:	bl	3508 <usb_free>
    4000:	b.n	3a0c <usb_isr+0x36c>
    4002:	ldr	r0, [r1, #52]	; 0x34
    4004:	subs	r0, #8
    4006:	bl	3508 <usb_free>
    400a:	b.n	3a00 <usb_isr+0x360>
    400c:	ldr	r0, [r1, #44]	; 0x2c
    400e:	subs	r0, #8
    4010:	bl	3508 <usb_free>
    4014:	b.n	39f4 <usb_isr+0x354>
    4016:	nop
    4018:	.word	0x400720c0
    401c:	.word	0x40072080
    4020:	.word	0x000060b8
    4024:	.word	0x400720c4
    4028:	.word	0x1fffb1e1
    402c:	.word	0x400720c8
    4030:	.word	0x400720cc
    4034:	.word	0x400720d0
    4038:	.word	0x1fff8000
    403c:	.word	0x40072094
    4040:	.word	0x004000c8
    4044:	.word	0x00400088
    4048:	.word	0x1fffb175
    404c:	.word	0x000060bc
    4050:	.word	0x1fffb1ec
    4054:	.word	0x1fffb1e4
    4058:	.word	0x1fffb1e0
    405c:	ldr	r0, [r4, #36]	; 0x24
    405e:	subs	r0, #8
    4060:	bl	3508 <usb_free>
    4064:	b.n	39e8 <usb_isr+0x348>
    4066:	ldr	r0, [r1, #124]	; 0x7c
    4068:	subs	r0, #8
    406a:	bl	3508 <usb_free>
    406e:	b.n	3a6c <usb_isr+0x3cc>
    4070:	ldr	r0, [r1, #116]	; 0x74
    4072:	subs	r0, #8
    4074:	bl	3508 <usb_free>
    4078:	b.n	3a60 <usb_isr+0x3c0>
    407a:	ldr	r0, [r1, #108]	; 0x6c
    407c:	subs	r0, #8
    407e:	bl	3508 <usb_free>
    4082:	b.n	3a54 <usb_isr+0x3b4>
    4084:	ldr	r0, [r1, #100]	; 0x64
    4086:	subs	r0, #8
    4088:	bl	3508 <usb_free>
    408c:	b.n	3a48 <usb_isr+0x3a8>
    408e:	ldr	r0, [r1, #92]	; 0x5c
    4090:	subs	r0, #8
    4092:	bl	3508 <usb_free>
    4096:	b.n	3a3c <usb_isr+0x39c>
    4098:	ldr	r0, [r1, #84]	; 0x54
    409a:	subs	r0, #8
    409c:	bl	3508 <usb_free>
    40a0:	b.n	3a30 <usb_isr+0x390>
    40a2:	ldr	r0, [r1, #76]	; 0x4c
    40a4:	subs	r0, #8
    40a6:	bl	3508 <usb_free>
    40aa:	b.n	3a24 <usb_isr+0x384>
    40ac:	ldr	r0, [r1, #68]	; 0x44
    40ae:	subs	r0, #8
    40b0:	bl	3508 <usb_free>
    40b4:	b.n	3a18 <usb_isr+0x378>
    40b6:	ldr.w	r0, [r1, #156]	; 0x9c
    40ba:	subs	r0, #8
    40bc:	bl	3508 <usb_free>
    40c0:	b.n	3a9c <usb_isr+0x3fc>
    40c2:	ldr.w	r0, [r1, #148]	; 0x94
    40c6:	subs	r0, #8
    40c8:	bl	3508 <usb_free>
    40cc:	b.n	3a90 <usb_isr+0x3f0>
    40ce:	ldr.w	r0, [r1, #140]	; 0x8c
    40d2:	subs	r0, #8
    40d4:	bl	3508 <usb_free>
    40d8:	b.n	3a84 <usb_isr+0x3e4>
    40da:	ldr.w	r0, [r1, #132]	; 0x84
    40de:	subs	r0, #8
    40e0:	bl	3508 <usb_free>
    40e4:	b.n	3a78 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    40e6:	mov.w	lr, #2
    40ea:	b.n	3ec6 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    40ec:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    40ee:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    40f2:	adds	r2, #1
    40f4:	strb	r2, [r5, #0]
    40f6:	b.n	3dae <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    40f8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    40fa:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    40fe:	adds	r2, #1
    4100:	strb	r2, [r5, #0]
    4102:	b.n	3f84 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4104:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4106:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    410a:	adds	r2, #1
    410c:	strb	r2, [r5, #0]
    410e:	b.n	3dc8 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4110:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4112:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    4116:	adds	r2, #1
    4118:	strb	r2, [r5, #0]
    411a:	b.n	3fe0 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    411c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    411e:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    4122:	adds	r2, #1
    4124:	strb	r2, [r5, #0]
    4126:	b.n	3de0 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4128:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    412a:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    412e:	adds	r2, #1
    4130:	strb	r2, [r5, #0]
    4132:	b.n	3f56 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4134:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4136:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    413a:	adds	r2, #1
    413c:	strb	r2, [r5, #0]
    413e:	b.n	3d92 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4140:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4142:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    4146:	adds	r2, #1
    4148:	strb	r2, [r5, #0]
    414a:	b.n	3fb2 <usb_isr+0x912>
    414c:	cmp.w	lr, #64	; 0x40
    4150:	mov	ip, lr
    4152:	it	cs
    4154:	movcs.w	ip, #64	; 0x40
    4158:	add.w	r3, r4, ip
    415c:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    415e:	movs	r3, #1
    4160:	rsb	r0, ip, lr
    4164:	mov.w	r8, ip, lsl #16
    4168:	movs	r2, #0
    416a:	str	r3, [sp, #4]
    416c:	b.n	3ba0 <usb_isr+0x500>
    416e:	nop

00004170 <usb_init>:
}



void usb_init(void)
{
    4170:	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4172:	bl	4b6c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4176:	ldr	r3, [pc, #164]	; (421c <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4178:	ldr	r0, [pc, #164]	; (4220 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    417a:	ldr	r4, [pc, #168]	; (4224 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    417c:	ldr	r7, [pc, #168]	; (4228 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    417e:	ldr	r5, [pc, #172]	; (422c <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    4180:	ldr.w	ip, [pc, #188]	; 4240 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    4184:	ldr.w	lr, [pc, #188]	; 4244 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    4188:	ldr	r6, [pc, #164]	; (4230 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    418a:	movs	r2, #0
    418c:	str	r2, [r3, #0]
		table[i].addr = 0;
    418e:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4190:	str	r2, [r3, #8]
		table[i].addr = 0;
    4192:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4194:	str	r2, [r3, #16]
		table[i].addr = 0;
    4196:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4198:	str	r2, [r3, #24]
		table[i].addr = 0;
    419a:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    419c:	str	r2, [r3, #32]
		table[i].addr = 0;
    419e:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41a0:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    41a2:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41a4:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    41a6:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41a8:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    41aa:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41ac:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    41ae:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41b0:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    41b2:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41b4:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    41b6:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41b8:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    41ba:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41bc:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    41be:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41c0:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    41c2:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41c4:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    41c6:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41c8:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    41ca:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    41cc:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    41d0:	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    41d2:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    41d6:	orr.w	r1, r1, #262144	; 0x40000
    41da:	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    41dc:	ubfx	r1, r3, #8, #8
    41e0:	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    41e2:	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    41e6:	ldr	r1, [pc, #76]	; (4234 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    41e8:	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    41ea:	lsrs	r3, r3, #24
    41ec:	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    41ee:	movs	r3, #255	; 0xff
    41f0:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    41f4:	ldr	r5, [pc, #64]	; (4238 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    41f6:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    41fa:	ldr	r0, [pc, #64]	; (423c <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    41fc:	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    41fe:	movs	r3, #1
    4200:	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    4202:	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4206:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4208:	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    420c:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    420e:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4212:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4214:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    4216:	strb.w	r2, [r1, #248]	; 0xf8
    421a:	pop	{r3, r4, r5, r6, r7, pc}
    421c:	.word	0x1fff8000
    4220:	.word	0x40048034
    4224:	.word	0x4007209c
    4228:	.word	0x400720b0
    422c:	.word	0x400720b4
    4230:	.word	0x40072094
    4234:	.word	0x40072010
    4238:	.word	0xe000e449
    423c:	.word	0xe000e108
    4240:	.word	0x40072080
    4244:	.word	0x40072088

00004248 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    4248:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    424a:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    424c:	cbnz	r1, 4276 <DMAChannel::begin(bool)+0x2e>
    424e:	ldr	r2, [r0, #0]
    4250:	cbz	r2, 4276 <DMAChannel::begin(bool)+0x2e>
    4252:	ldrb	r3, [r0, #4]
    4254:	cmp	r3, #15
    4256:	bhi.n	4276 <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    4258:	ldr	r4, [pc, #156]	; (42f8 <DMAChannel::begin(bool)+0xb0>)
    425a:	ldrh	r1, [r4, #0]
    425c:	asr.w	r5, r1, r3
    4260:	lsls	r5, r5, #31
    4262:	bpl.n	427a <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    4264:	add.w	r3, r3, #33554432	; 0x2000000
    4268:	add.w	r3, r3, #1152	; 0x480
    426c:	cmp.w	r2, r3, lsl #5
    4270:	bne.n	427a <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    4272:	cpsie	i
		return;
    4274:	pop	{r4, r5, r6, r7, pc}
    4276:	ldr	r4, [pc, #128]	; (42f8 <DMAChannel::begin(bool)+0xb0>)
    4278:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    427a:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    427c:	asr.w	r2, r1, r3
    4280:	ands.w	r2, r2, #1
    4284:	beq.n	4296 <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    4286:	adds	r3, #1
    4288:	cmp	r3, #16
    428a:	bne.n	427c <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    428c:	cpsie	i
			TCD = (TCD_t *)0;
    428e:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    4290:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    4292:	str	r2, [r0, #0]
    4294:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    4296:	movs	r5, #1
    4298:	lsls	r5, r3
    429a:	orrs	r1, r5
    429c:	strh	r1, [r4, #0]
			__enable_irq();
    429e:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    42a0:	ldr	r6, [pc, #88]	; (42fc <DMAChannel::begin(bool)+0xb4>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    42a2:	ldr	r5, [pc, #92]	; (4300 <DMAChannel::begin(bool)+0xb8>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    42a4:	ldr	r7, [pc, #92]	; (4304 <DMAChannel::begin(bool)+0xbc>)
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    42a6:	ldr.w	lr, [pc, #100]	; 430c <DMAChannel::begin(bool)+0xc4>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    42aa:	uxtb	r1, r3
    42ac:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    42ae:	ldr	r4, [r6, #0]
    42b0:	orr.w	r4, r4, #2
    42b4:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    42b6:	ldr	r4, [r5, #0]
    42b8:	orr.w	r4, r4, #2
    42bc:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    42be:	sub.w	r6, r6, #262144	; 0x40000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    42c2:	movs	r4, #130	; 0x82
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    42c4:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    42c8:	add.w	r3, r3, #33554432	; 0x2000000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    42cc:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    42ce:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    42d2:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    42d4:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    42d6:	ldr	r4, [pc, #48]	; (4308 <DMAChannel::begin(bool)+0xc0>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    42d8:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    42dc:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    42de:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    42e0:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    42e2:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    42e4:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    42e6:	str	r2, [r3, #0]
	*p++ = 0;
    42e8:	str	r2, [r3, #4]
	*p++ = 0;
    42ea:	str	r2, [r3, #8]
	*p++ = 0;
    42ec:	str	r2, [r3, #12]
	*p++ = 0;
    42ee:	str	r2, [r3, #16]
	*p++ = 0;
    42f0:	str	r2, [r3, #20]
	*p++ = 0;
    42f2:	str	r2, [r3, #24]
	*p++ = 0;
    42f4:	str	r2, [r3, #28]
    42f6:	pop	{r4, r5, r6, r7, pc}
    42f8:	.word	0x1fffb1f4
    42fc:	.word	0x40048040
    4300:	.word	0x4004803c
    4304:	.word	0x40008000
    4308:	.word	0x4000801f
    430c:	.word	0x4000801a

00004310 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    4310:	ldrb	r3, [r0, #4]
    4312:	cmp	r3, #15
    4314:	bhi.n	433a <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    4316:	ldr	r2, [pc, #36]	; (433c <DMAChannel::release()+0x2c>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    4318:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    431a:	strb	r3, [r2, #0]
	__disable_irq();
    431c:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    431e:	ldr	r1, [pc, #32]	; (4340 <DMAChannel::release()+0x30>)
    4320:	ldrb	r4, [r0, #4]
    4322:	ldrh	r2, [r1, #0]
    4324:	movs	r3, #1
    4326:	lsls	r3, r4
    4328:	bic.w	r3, r2, r3
    432c:	strh	r3, [r1, #0]
	__enable_irq();
    432e:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    4330:	movs	r2, #16
	TCD = (TCD_t *)0;
    4332:	movs	r3, #0
}
    4334:	pop	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    4336:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    4338:	str	r3, [r0, #0]
}
    433a:	bx	lr
    433c:	.word	0x4000801a
    4340:	.word	0x1fffb1f4

00004344 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4344:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4346:	mrs	r2, PRIMASK
		__disable_irq();
    434a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    434c:	ldrb	r3, [r0, #29]
    434e:	cbnz	r3, 435e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4350:	ldrb	r1, [r0, #28]
    4352:	cmp	r1, #1
    4354:	beq.n	4366 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4356:	cmp	r1, #3
    4358:	beq.n	437a <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    435a:	movs	r3, #1
    435c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    435e:	cbnz	r2, 4362 <EventResponder::triggerEventNotImmediate()+0x1e>
    4360:	cpsie	i
	}
	enableInterrupts(irq);
}
    4362:	pop	{r4}
    4364:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4366:	ldr	r4, [pc, #72]	; (43b0 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4368:	ldr	r1, [r4, #0]
    436a:	cbz	r1, 4396 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    436c:	ldr	r1, [pc, #68]	; (43b4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    436e:	str	r3, [r0, #20]
				_prev = lastYield;
    4370:	ldr	r3, [r1, #0]
    4372:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4374:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4376:	str	r0, [r3, #20]
    4378:	b.n	435a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    437a:	ldr	r4, [pc, #60]	; (43b8 <EventResponder::triggerEventNotImmediate()+0x74>)
    437c:	ldr	r1, [r4, #0]
    437e:	cbz	r1, 43a2 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4380:	ldr	r1, [pc, #56]	; (43bc <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4382:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4384:	ldr	r3, [r1, #0]
    4386:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4388:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    438a:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    438c:	ldr	r3, [pc, #48]	; (43c0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    438e:	mov.w	r1, #268435456	; 0x10000000
    4392:	str	r1, [r3, #0]
    4394:	b.n	435a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4396:	ldr	r3, [pc, #28]	; (43b4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4398:	str	r1, [r0, #20]
				_prev = nullptr;
    439a:	str	r1, [r0, #24]
				firstYield = this;
    439c:	str	r0, [r4, #0]
				lastYield = this;
    439e:	str	r0, [r3, #0]
    43a0:	b.n	435a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    43a2:	ldr	r3, [pc, #24]	; (43bc <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    43a4:	str	r1, [r0, #20]
				_prev = nullptr;
    43a6:	str	r1, [r0, #24]
				firstInterrupt = this;
    43a8:	str	r0, [r4, #0]
				lastInterrupt = this;
    43aa:	str	r0, [r3, #0]
    43ac:	b.n	438c <EventResponder::triggerEventNotImmediate()+0x48>
    43ae:	nop
    43b0:	.word	0x1fffb208
    43b4:	.word	0x1fffb204
    43b8:	.word	0x1fffb1f8
    43bc:	.word	0x1fffb1fc
    43c0:	.word	0xe000ed04

000043c4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    43c4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    43c6:	mrs	r2, PRIMASK
		__disable_irq();
    43ca:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    43cc:	ldr	r4, [pc, #48]	; (4400 <EventResponder::runFromInterrupt()+0x3c>)
    43ce:	ldr	r0, [r4, #0]
		if (first) {
    43d0:	cbz	r0, 43f4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    43d2:	ldr	r6, [pc, #48]	; (4404 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    43d4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    43d6:	ldr	r3, [r0, #20]
    43d8:	str	r3, [r4, #0]
			if (firstInterrupt) {
    43da:	cbz	r3, 43fa <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    43dc:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    43de:	cbnz	r2, 43e2 <EventResponder::runFromInterrupt()+0x1e>
    43e0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    43e2:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    43e4:	ldr	r3, [r0, #8]
    43e6:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    43e8:	mrs	r2, PRIMASK
		__disable_irq();
    43ec:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    43ee:	ldr	r0, [r4, #0]
		if (first) {
    43f0:	cmp	r0, #0
    43f2:	bne.n	43d6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    43f4:	cbnz	r2, 43f8 <EventResponder::runFromInterrupt()+0x34>
    43f6:	cpsie	i
    43f8:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    43fa:	str	r3, [r6, #0]
    43fc:	b.n	43de <EventResponder::runFromInterrupt()+0x1a>
    43fe:	nop
    4400:	.word	0x1fffb1f8
    4404:	.word	0x1fffb1fc

00004408 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4408:	b.w	43c4 <EventResponder::runFromInterrupt()>

0000440c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    440c:	ldr	r2, [pc, #96]	; (4470 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    440e:	push	{r4, r5}
	if (listActive == nullptr) {
    4410:	ldr	r4, [r2, #0]
    4412:	cmp	r4, #0
    4414:	beq.n	4466 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4416:	ldr	r3, [r0, #0]
    4418:	ldr	r1, [r4, #0]
    441a:	cmp	r3, r1
    441c:	bcs.n	443c <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    441e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4420:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4422:	str	r4, [r0, #8]
		_prev = nullptr;
    4424:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4426:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4428:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    442a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    442c:	movs	r3, #2
    442e:	strb	r3, [r0, #20]
}
    4430:	pop	{r4, r5}
    4432:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4434:	ldr	r1, [r2, #0]
    4436:	cmp	r3, r1
    4438:	mov	r4, r2
    443a:	bcc.n	444e <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    443c:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    443e:	subs	r3, r3, r1
    4440:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4442:	cmp	r2, #0
    4444:	bne.n	4434 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4446:	str	r2, [r0, #8]
		_prev = timer;
    4448:	str	r4, [r0, #12]
		timer->_next = this;
    444a:	str	r0, [r4, #8]
    444c:	b.n	442c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    444e:	ldr	r2, [r2, #12]
    4450:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4452:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4454:	str	r0, [r4, #12]
				_prev->_next = this;
    4456:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4458:	subs	r3, r1, r3
				_state = TimerActive;
    445a:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    445c:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    445e:	str	r3, [r4, #0]
				_state = TimerActive;
    4460:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4462:	pop	{r4, r5}
    4464:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4466:	str	r4, [r0, #8]
		_prev = nullptr;
    4468:	str	r4, [r0, #12]
		listActive = this;
    446a:	str	r0, [r2, #0]
    446c:	b.n	442c <MillisTimer::addToActiveList()+0x20>
    446e:	nop
    4470:	.word	0x1fffb200

00004474 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4474:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4476:	ldr	r6, [pc, #136]	; (4500 <MillisTimer::runFromTimer()+0x8c>)
    4478:	ldr	r4, [r6, #0]
	while (timer) {
    447a:	cbz	r4, 44c8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    447c:	ldr	r3, [r4, #0]
    447e:	cmp	r3, #0
    4480:	bne.n	44f8 <MillisTimer::runFromTimer()+0x84>
    4482:	ldr	r7, [pc, #128]	; (4504 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4484:	mov	r5, r3
    4486:	b.n	4492 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4488:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    448a:	cbz	r4, 44c8 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    448c:	ldr	r3, [r4, #0]
    448e:	cmp	r3, #0
    4490:	bne.n	44f8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4492:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4494:	cbz	r3, 4498 <MillisTimer::runFromTimer()+0x24>
    4496:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4498:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    449a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    449c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    449e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    44a0:	ldr	r3, [r3, #0]
    44a2:	cmp	r3, r7
    44a4:	bne.n	44ea <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    44a6:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    44a8:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    44aa:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    44ac:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    44ae:	beq.n	44f2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    44b0:	bl	4344 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    44b4:	ldr	r3, [r4, #4]
    44b6:	cmp	r3, #0
    44b8:	beq.n	4488 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    44ba:	str	r3, [r4, #0]
				timer->addToActiveList();
    44bc:	mov	r0, r4
    44be:	bl	440c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    44c2:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    44c4:	cmp	r4, #0
    44c6:	bne.n	448c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    44c8:	mrs	r3, PRIMASK
		__disable_irq();
    44cc:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    44ce:	ldr	r2, [pc, #56]	; (4508 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    44d0:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    44d2:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    44d4:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    44d6:	cbnz	r3, 44da <MillisTimer::runFromTimer()+0x66>
    44d8:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    44da:	cbz	r0, 44e8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    44dc:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    44de:	bl	440c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    44e2:	mov	r0, r4
    44e4:	cmp	r0, #0
    44e6:	bne.n	44dc <MillisTimer::runFromTimer()+0x68>
    44e8:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    44ea:	mov	r2, r4
    44ec:	movs	r1, #0
    44ee:	blx	r3
    44f0:	b.n	44b4 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    44f2:	ldr	r3, [r0, #8]
    44f4:	blx	r3
    44f6:	b.n	44b4 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    44f8:	subs	r3, #1
    44fa:	str	r3, [r4, #0]
			break;
    44fc:	b.n	44c8 <MillisTimer::runFromTimer()+0x54>
    44fe:	nop
    4500:	.word	0x1fffb200
    4504:	.word	0x00001d59
    4508:	.word	0x1fffb210

0000450c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    450c:	ldr	r2, [pc, #8]	; (4518 <systick_isr+0xc>)
    450e:	ldr	r3, [r2, #0]
    4510:	adds	r3, #1
    4512:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4514:	b.w	4474 <MillisTimer::runFromTimer()>
    4518:	.word	0x1fffb108

0000451c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    451c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    451e:	ldr	r4, [pc, #136]	; (45a8 <yield+0x8c>)
    4520:	ldrb	r3, [r4, #0]
    4522:	cbz	r3, 4526 <yield+0xa>
    4524:	pop	{r3, r4, r5, pc}
	running = 1;
    4526:	movs	r3, #1
    4528:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    452a:	bl	2ee0 <usb_serial_available>
	if (Serial.available()) serialEvent();
    452e:	cbnz	r0, 458e <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    4530:	bl	4a40 <serial_available>
	if (Serial1.available()) serialEvent1();
    4534:	cbnz	r0, 4588 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    4536:	bl	4914 <serial2_available>
	if (Serial2.available()) serialEvent2();
    453a:	cbnz	r0, 4582 <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    453c:	bl	4c3c <serial3_available>
	if (Serial3.available()) serialEvent3();
    4540:	cbnz	r0, 457c <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    4542:	movs	r3, #0
    4544:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4546:	mrs	r3, IPSR
		if (ipsr != 0) return;
    454a:	cmp	r3, #0
    454c:	bne.n	4524 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    454e:	mrs	r1, PRIMASK
		__disable_irq();
    4552:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4554:	ldr	r3, [pc, #84]	; (45ac <yield+0x90>)
    4556:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4558:	cbz	r0, 4594 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    455a:	ldr	r4, [pc, #84]	; (45b0 <yield+0x94>)
    455c:	ldrb	r2, [r4, #0]
    455e:	cbnz	r2, 4594 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    4560:	ldr	r5, [r0, #20]
    4562:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4564:	movs	r3, #1
    4566:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    4568:	cbz	r5, 459c <yield+0x80>
			firstYield->_prev = nullptr;
    456a:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    456c:	cbnz	r1, 4570 <yield+0x54>
    456e:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4570:	movs	r5, #0
    4572:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    4574:	ldr	r3, [r0, #8]
    4576:	blx	r3
		runningFromYield = false;
    4578:	strb	r5, [r4, #0]
    457a:	b.n	4524 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    457c:	bl	4d38 <serialEvent3()>
    4580:	b.n	4542 <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    4582:	bl	45e8 <serialEvent2()>
    4586:	b.n	453c <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    4588:	bl	4d34 <serialEvent1()>
    458c:	b.n	4536 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    458e:	bl	45b8 <serialEvent()>
    4592:	b.n	4530 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4594:	cmp	r1, #0
    4596:	bne.n	4524 <yield+0x8>
    4598:	cpsie	i
    459a:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    459c:	ldr	r3, [pc, #20]	; (45b4 <yield+0x98>)
    459e:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    45a0:	cmp	r1, #0
    45a2:	bne.n	4570 <yield+0x54>
    45a4:	b.n	456e <yield+0x52>
    45a6:	nop
    45a8:	.word	0x1fffb214
    45ac:	.word	0x1fffb208
    45b0:	.word	0x1fffb20c
    45b4:	.word	0x1fffb204

000045b8 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    45b8:	bx	lr
    45ba:	nop

000045bc <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    45bc:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    45be:	mov	r6, r1
    45c0:	cbz	r1, 45e0 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    45c2:	cbz	r2, 45e4 <Print::write(unsigned char const*, unsigned int)+0x28>
    45c4:	mov	r7, r0
    45c6:	mov	r4, r2
    45c8:	movs	r5, #0
    45ca:	ldr	r3, [r7, #0]
    45cc:	ldrb.w	r1, [r6], #1
    45d0:	ldr	r3, [r3, #0]
    45d2:	mov	r0, r7
    45d4:	blx	r3
    45d6:	subs	r4, #1
    45d8:	add	r5, r0
    45da:	bne.n	45ca <Print::write(unsigned char const*, unsigned int)+0xe>
    45dc:	mov	r0, r5
    45de:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    45e0:	mov	r0, r1
    45e2:	pop	{r3, r4, r5, r6, r7, pc}
    45e4:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    45e6:	pop	{r3, r4, r5, r6, r7, pc}

000045e8 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    45e8:	bx	lr
    45ea:	nop

000045ec <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    45ec:	b.n	45ec <main>
    45ee:	nop

000045f0 <AudioStream::allocate()>:
}

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    45f0:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    45f2:	cpsid	i
	index = memory_pool_first_mask;
    45f4:	ldr	r7, [pc, #140]	; (4684 <AudioStream::allocate()+0x94>)
	p += index;
    45f6:	ldr	r6, [pc, #144]	; (4688 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    45f8:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    45fa:	add.w	r3, r6, #24

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    45fe:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    4602:	cmp	r0, r3
    4604:	bcs.n	462c <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    4606:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    460a:	cbnz	r1, 4634 <AudioStream::allocate()+0x44>
    460c:	adds	r2, r0, #4
    460e:	add.w	r5, r6, #27
    4612:	adds	r3, r4, #1
    4614:	subs	r5, r5, r2
    4616:	add.w	r5, r3, r5, lsr #2
    461a:	b.n	4624 <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    461c:	ldr.w	r1, [r2], #4
		if (avail) break;
    4620:	cbnz	r1, 4634 <AudioStream::allocate()+0x44>
    4622:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    4624:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    4626:	mov	r4, r3
		p++;
    4628:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    462a:	bne.n	461c <AudioStream::allocate()+0x2c>
			__enable_irq();
    462c:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    462e:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    4630:	pop	{r4, r5, r6, r7}
    4632:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    4634:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    4638:	mov.w	r2, #2147483648	; 0x80000000
    463c:	lsrs	r2, r3
    463e:	bic.w	r1, r1, r2
	*p = avail;
    4642:	str	r1, [r0, #0]
	if (!avail) index++;
    4644:	cbnz	r1, 4648 <AudioStream::allocate()+0x58>
    4646:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    4648:	ldr	r1, [pc, #64]	; (468c <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    464a:	strh	r4, [r7, #0]
	used = memory_used + 1;
    464c:	ldrh	r2, [r1, #0]
    464e:	adds	r2, #1
	memory_used = used;
    4650:	uxth	r4, r2
    4652:	strh	r4, [r1, #0]
	__enable_irq();
    4654:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    4656:	subs	r0, r0, r6
    4658:	asrs	r0, r0, #2
    465a:	rsb	r0, r3, r0, lsl #5
    465e:	add.w	r0, r0, r0, lsl #6
    4662:	lsls	r3, r0, #2
    4664:	ldr	r0, [pc, #40]	; (4690 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    4666:	ldr	r1, [pc, #44]	; (4694 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    4668:	ldr	r0, [r0, #0]
    466a:	add.w	r3, r3, #8032	; 0x1f60
    466e:	adds	r3, #28
	block->ref_count = 1;
    4670:	movs	r5, #1
    4672:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    4674:	ldrh	r5, [r1, #0]
    4676:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    4678:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    467a:	it	hi
    467c:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    467e:	pop	{r4, r5, r6, r7}
    4680:	bx	lr
    4682:	nop
    4684:	.word	0x1fffb242
    4688:	.word	0x1fffb228
    468c:	.word	0x1fffb244
    4690:	.word	0x1fffb220
    4694:	.word	0x1fffb21c

00004698 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    4698:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    469a:	cpsid	i
	if (block->ref_count > 1) {
    469c:	ldrb	r3, [r0, #0]
    469e:	cmp	r3, #1
    46a0:	bls.n	46aa <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    46a2:	subs	r3, #1
    46a4:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    46a6:	cpsie	i
    46a8:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    46aa:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    46ac:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    46ae:	ldr	r4, [pc, #48]	; (46e0 <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    46b0:	ldr	r5, [pc, #48]	; (46e4 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    46b2:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    46b6:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    46b8:	mvns	r2, r2
    46ba:	mov.w	r0, #2147483648	; 0x80000000
    46be:	and.w	r2, r2, #31
    46c2:	lsr.w	r2, r0, r2
    46c6:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    46c8:	ldr	r2, [pc, #28]	; (46e8 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    46ca:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    46ce:	cmp	r3, r6
    46d0:	it	cc
    46d2:	strhcc	r3, [r5, #0]
		memory_used--;
    46d4:	ldrh	r3, [r2, #0]
    46d6:	subs	r3, #1
    46d8:	strh	r3, [r2, #0]
	}
	__enable_irq();
    46da:	cpsie	i
}
    46dc:	pop	{r4, r5, r6}
    46de:	bx	lr
    46e0:	.word	0x1fffb228
    46e4:	.word	0x1fffb242
    46e8:	.word	0x1fffb244

000046ec <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    46ec:	ldr	r3, [r0, #12]
    46ee:	cbz	r3, 471e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    46f0:	push	{r4, r5}
    46f2:	b.n	46f8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    46f4:	ldr	r3, [r3, #12]
    46f6:	cbz	r3, 471c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    46f8:	ldrb	r0, [r3, #8]
    46fa:	cmp	r0, r2
    46fc:	bne.n	46f4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    46fe:	ldr	r0, [r3, #4]
    4700:	ldrb	r4, [r3, #9]
    4702:	ldr	r0, [r0, #16]
    4704:	ldr.w	r5, [r0, r4, lsl #2]
    4708:	cmp	r5, #0
    470a:	bne.n	46f4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    470c:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    4710:	ldrb	r0, [r1, #0]
    4712:	adds	r0, #1
    4714:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    4716:	ldr	r3, [r3, #12]
    4718:	cmp	r3, #0
    471a:	bne.n	46f8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    471c:	pop	{r4, r5}
    471e:	bx	lr

00004720 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    4720:	ldrb	r3, [r0, #9]
    4722:	cmp	r3, r1
    4724:	bls.n	4734 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    4726:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    4728:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    472a:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    472e:	str.w	r2, [r3, r1, lsl #2]
	return in;
    4732:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    4734:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    4736:	bx	lr

00004738 <AudioStream::receiveWritable(unsigned int)>:

// Receive block from an input.  The block will not
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
    4738:	push	{r3, r4, r5, lr}
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    473a:	ldrb	r3, [r0, #9]
    473c:	cmp	r3, r1
    473e:	bls.n	4776 <AudioStream::receiveWritable(unsigned int)+0x3e>
	in = inputQueue[index];
    4740:	ldr	r3, [r0, #16]
    4742:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    4746:	movs	r2, #0
    4748:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    474c:	cbz	r4, 4776 <AudioStream::receiveWritable(unsigned int)+0x3e>
    474e:	ldrb	r3, [r4, #0]
    4750:	cmp	r3, #1
    4752:	bls.n	4772 <AudioStream::receiveWritable(unsigned int)+0x3a>
		p = allocate();
    4754:	bl	45f0 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    4758:	mov	r5, r0
    475a:	cbz	r0, 4768 <AudioStream::receiveWritable(unsigned int)+0x30>
    475c:	mov.w	r2, #256	; 0x100
    4760:	adds	r1, r4, #4
    4762:	adds	r0, #4
    4764:	bl	2dac <memcpy>
		in->ref_count--;
    4768:	ldrb	r3, [r4, #0]
    476a:	subs	r3, #1
    476c:	strb	r3, [r4, #0]

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
    476e:	mov	r0, r5
    4770:	pop	{r3, r4, r5, pc}
    4772:	mov	r0, r4
		if (p) memcpy(p->data, in->data, sizeof(p->data));
		in->ref_count--;
		in = p;
	}
	return in;
}
    4774:	pop	{r3, r4, r5, pc}
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    4776:	movs	r0, #0
    4778:	pop	{r3, r4, r5, pc}
    477a:	nop

0000477c <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    477c:	ldrb	r3, [r0, #16]
    477e:	cbnz	r3, 47ca <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    4780:	ldr	r3, [r0, #4]
    4782:	ldrb	r2, [r0, #9]
    4784:	ldrb	r3, [r3, #9]
    4786:	cmp	r2, r3
    4788:	bhi.n	47ca <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    478a:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    478c:	cpsid	i
	p = src.destination_list;
    478e:	ldr	r4, [r0, #0]
    4790:	ldr	r3, [r4, #12]
	if (p == NULL) {
    4792:	cbz	r3, 47e0 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    4794:	ldr	r2, [r3, #12]
    4796:	cbz	r2, 47a6 <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    4798:	ldr	r1, [r3, #0]
    479a:	cmp	r4, r1
    479c:	beq.n	47cc <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    479e:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    47a0:	ldr	r2, [r3, #12]
    47a2:	cmp	r2, #0
    47a4:	bne.n	4798 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    47a6:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    47a8:	movs	r3, #0
    47aa:	str	r3, [r0, #12]
	src.numConnections++;
    47ac:	ldrb	r3, [r4, #10]
    47ae:	adds	r3, #1
    47b0:	strb	r3, [r4, #10]
	src.active = true;
    47b2:	ldr	r2, [r0, #0]

	dst.numConnections++;
    47b4:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    47b6:	movs	r3, #1
    47b8:	strb	r3, [r2, #8]

	dst.numConnections++;
    47ba:	ldrb	r2, [r1, #10]
    47bc:	add	r2, r3
    47be:	strb	r2, [r1, #10]
	dst.active = true;
    47c0:	ldr	r2, [r0, #4]
    47c2:	strb	r3, [r2, #8]

	isConnected = true;
    47c4:	strb	r3, [r0, #16]

	__enable_irq();
    47c6:	cpsie	i
}
    47c8:	pop	{r4, r5}
    47ca:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    47cc:	ldr	r5, [r3, #4]
    47ce:	ldr	r1, [r0, #4]
    47d0:	cmp	r5, r1
    47d2:	bne.n	479e <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    47d4:	ldrh	r1, [r3, #8]
    47d6:	ldrh	r3, [r0, #8]
    47d8:	cmp	r1, r3
    47da:	beq.n	47c6 <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    47dc:	mov	r3, r2
    47de:	b.n	47a0 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    47e0:	str	r0, [r4, #12]
    47e2:	b.n	47a8 <AudioConnection::connect()+0x2c>

000047e4 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    47e4:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    47e6:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    47e8:	cmp	r3, #0
    47ea:	beq.n	4852 <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    47ec:	ldr	r3, [r0, #4]
    47ee:	ldrb	r2, [r0, #9]
    47f0:	ldrb	r3, [r3, #9]
    47f2:	cmp	r2, r3
    47f4:	bhi.n	4852 <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    47f6:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    47f8:	ldr	r2, [r0, #0]
    47fa:	ldr	r3, [r2, #12]
	if (p == NULL) {
    47fc:	cbz	r3, 4850 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    47fe:	cmp	r0, r3
    4800:	bne.n	4808 <AudioConnection::disconnect()+0x24>
    4802:	b.n	4858 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    4804:	cmp	r0, r3
    4806:	beq.n	480e <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    4808:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    480a:	cmp	r3, #0
    480c:	bne.n	4804 <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    480e:	ldr	r3, [r0, #4]
    4810:	ldrb	r1, [r0, #9]
    4812:	ldr	r3, [r3, #16]
    4814:	mov	r4, r0
    4816:	ldr.w	r0, [r3, r1, lsl #2]
    481a:	cbz	r0, 4830 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    481c:	bl	4698 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    4820:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    4822:	ldr	r3, [r4, #4]
    4824:	ldrb	r2, [r4, #9]
    4826:	ldr	r3, [r3, #16]
    4828:	movs	r1, #0
    482a:	str.w	r1, [r3, r2, lsl #2]
    482e:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    4830:	ldrb	r3, [r2, #10]
    4832:	subs	r3, #1
    4834:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    4836:	ldr	r3, [r4, #0]
    4838:	ldrb	r2, [r3, #10]
    483a:	cbnz	r2, 483e <AudioConnection::disconnect()+0x5a>
		src.active = false;
    483c:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    483e:	ldr	r2, [r4, #4]
    4840:	ldrb	r3, [r2, #10]
    4842:	subs	r3, #1
    4844:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    4846:	ldr	r3, [r4, #4]
    4848:	ldrb	r2, [r3, #10]
    484a:	cbz	r2, 4854 <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    484c:	movs	r3, #0
    484e:	strb	r3, [r4, #16]

	__enable_irq();
    4850:	cpsie	i
    4852:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    4854:	strb	r2, [r3, #8]
    4856:	b.n	484c <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    4858:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    485a:	str	r3, [r2, #12]
    485c:	b.n	480e <AudioConnection::disconnect()+0x2a>
    485e:	nop

00004860 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    4860:	ldr	r3, [pc, #32]	; (4884 <AudioStream::update_setup()+0x24>)
    4862:	ldrb	r2, [r3, #0]
    4864:	cbnz	r2, 4880 <AudioStream::update_setup()+0x20>
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    4866:	push	{r4, r5}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    4868:	ldr	r0, [pc, #28]	; (4888 <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    486a:	ldr	r1, [pc, #32]	; (488c <AudioStream::update_setup()+0x2c>)
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    486c:	movs	r5, #208	; 0xd0
    486e:	strb	r5, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    4870:	mov.w	r4, #1073741824	; 0x40000000
	update_scheduled = true;
    4874:	movs	r2, #1

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    4876:	str	r4, [r1, #0]
	update_scheduled = true;
	return true;
    4878:	mov	r0, r2
bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
	update_scheduled = true;
    487a:	strb	r2, [r3, #0]
	return true;
}
    487c:	pop	{r4, r5}
    487e:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    4880:	movs	r0, #0
    4882:	bx	lr
    4884:	.word	0x1fffb224
    4888:	.word	0xe000e45e
    488c:	.word	0xe000e108

00004890 <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    4890:	ldr	r1, [pc, #104]	; (48fc <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    4892:	ldr	r2, [pc, #108]	; (4900 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4894:	ldr	r0, [pc, #108]	; (4904 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    4896:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    4898:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    489a:	ldr	r5, [pc, #108]	; (4908 <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    489c:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    489e:	orr.w	r3, r3, #16777216	; 0x1000000
    48a2:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    48a4:	ldr	r3, [r2, #0]
    48a6:	orr.w	r3, r3, #1
    48aa:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    48ac:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    48ae:	cbnz	r4, 48b6 <software_isr+0x26>
    48b0:	b.n	48de <software_isr+0x4e>
    48b2:	ldr	r4, [r4, #20]
    48b4:	cbz	r4, 48de <software_isr+0x4e>
		if (p->active) {
    48b6:	ldrb	r3, [r4, #8]
    48b8:	cmp	r3, #0
    48ba:	beq.n	48b2 <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    48bc:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    48be:	ldr	r7, [r5, #0]
			p->update();
    48c0:	ldr	r3, [r3, #0]
    48c2:	mov	r0, r4
    48c4:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    48c6:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    48c8:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    48ca:	subs	r3, r3, r7
    48cc:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    48ce:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    48d0:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    48d2:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    48d4:	it	hi
    48d6:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    48d8:	ldr	r4, [r4, #20]
    48da:	cmp	r4, #0
    48dc:	bne.n	48b6 <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    48de:	ldr	r3, [pc, #40]	; (4908 <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    48e0:	ldr	r2, [pc, #40]	; (490c <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    48e2:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    48e4:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    48e6:	ldr	r4, [pc, #40]	; (4910 <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    48e8:	subs	r3, r3, r6
    48ea:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    48ec:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    48ee:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    48f0:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    48f2:	bls.n	48f8 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    48f4:	strh	r1, [r2, #0]
    48f6:	pop	{r3, r4, r5, r6, r7, pc}
    48f8:	pop	{r3, r4, r5, r6, r7, pc}
    48fa:	nop
    48fc:	.word	0xe000edfc
    4900:	.word	0xe0001000
    4904:	.word	0x1fffb218
    4908:	.word	0xe0001004
    490c:	.word	0x1fffb240
    4910:	.word	0x1fffb246

00004914 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4914:	ldr	r2, [pc, #20]	; (492c <serial2_available+0x18>)
	tail = rx_buffer_tail;
    4916:	ldr	r3, [pc, #24]	; (4930 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4918:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    491a:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    491c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    491e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4920:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    4922:	it	cc
    4924:	addcc	r0, #64	; 0x40
    4926:	subs	r0, r0, r3
}
    4928:	bx	lr
    492a:	nop
    492c:	.word	0x1fffb2b8
    4930:	.word	0x1fffb24d

00004934 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    4934:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4936:	ldr	r3, [pc, #224]	; (4a18 <uart1_status_isr+0xe4>)
    4938:	ldrb	r2, [r3, #4]
    493a:	tst.w	r2, #48	; 0x30
    493e:	beq.n	499a <uart1_status_isr+0x66>
		__disable_irq();
    4940:	cpsid	i
		avail = UART1_RCFIFO;
    4942:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4944:	and.w	r2, r1, #255	; 0xff
    4948:	cmp	r1, #0
    494a:	beq.n	49c8 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    494c:	cpsie	i
			head = rx_buffer_head;
    494e:	ldr	r7, [pc, #204]	; (4a1c <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4950:	ldr	r1, [pc, #204]	; (4a20 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4952:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4954:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4956:	ldr	r6, [pc, #204]	; (4a24 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4958:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    495a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    495c:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    495e:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4960:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4962:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4964:	it	cs
    4966:	movcs	r3, #0
				if (newhead != tail) {
    4968:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    496a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    496e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4970:	itt	ne
    4972:	strbne	r1, [r6, r3]
    4974:	movne	r0, r3
				}
			} while (--avail > 0);
    4976:	ands.w	r2, r2, #255	; 0xff
    497a:	bne.n	495e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    497c:	ldr	r3, [pc, #168]	; (4a28 <uart1_status_isr+0xf4>)
    497e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4980:	uxtb	r2, r0
    4982:	strb	r2, [r7, #0]
			if (rts_pin) {
    4984:	cbz	r3, 499a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4986:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4988:	itet	cc
    498a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    498e:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4990:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4992:	cmp	r0, #39	; 0x27
    4994:	itt	gt
    4996:	movgt	r2, #1
    4998:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    499a:	ldr	r1, [pc, #124]	; (4a18 <uart1_status_isr+0xe4>)
    499c:	ldrb	r2, [r1, #3]
    499e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    49a0:	lsls	r5, r2, #24
    49a2:	bmi.n	49d2 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    49a4:	lsls	r2, r2, #25
    49a6:	bpl.n	49c4 <uart1_status_isr+0x90>
    49a8:	ldr	r3, [pc, #108]	; (4a18 <uart1_status_isr+0xe4>)
    49aa:	ldrb	r3, [r3, #4]
    49ac:	lsls	r3, r3, #25
    49ae:	bpl.n	49c4 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    49b0:	ldr	r3, [pc, #120]	; (4a2c <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    49b2:	ldr	r1, [pc, #124]	; (4a30 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    49b4:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    49b6:	movs	r2, #0
    49b8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    49ba:	cbz	r3, 49be <uart1_status_isr+0x8a>
    49bc:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    49be:	ldr	r3, [pc, #88]	; (4a18 <uart1_status_isr+0xe4>)
    49c0:	movs	r2, #60	; 0x3c
    49c2:	strb	r2, [r3, #3]
	}
}
    49c4:	pop	{r4, r5, r6, r7}
    49c6:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    49c8:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    49ca:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    49cc:	strb	r2, [r3, #17]
			__enable_irq();
    49ce:	cpsie	i
    49d0:	b.n	499a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    49d2:	ldrb	r3, [r1, #4]
    49d4:	lsls	r4, r3, #24
    49d6:	bpl.n	49a4 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    49d8:	ldr	r3, [pc, #88]	; (4a34 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    49da:	ldr	r6, [pc, #92]	; (4a38 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    49dc:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    49de:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    49e0:	uxtb	r4, r4
		tail = tx_buffer_tail;
    49e2:	uxtb	r3, r3
		do {
			if (tail == head) break;
    49e4:	cmp	r4, r3
    49e6:	beq.n	4a06 <uart1_status_isr+0xd2>
    49e8:	ldr	r5, [pc, #80]	; (4a3c <uart1_status_isr+0x108>)
    49ea:	b.n	49f0 <uart1_status_isr+0xbc>
    49ec:	cmp	r3, r4
    49ee:	beq.n	4a06 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    49f0:	adds	r3, #1
    49f2:	cmp	r3, #40	; 0x28
    49f4:	it	cs
    49f6:	movcs	r3, #0
			avail = UART1_S1;
    49f8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    49fa:	ldrb	r0, [r5, r3]
    49fc:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    49fe:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    4a00:	ldrb	r0, [r1, #20]
    4a02:	cmp	r0, #7
    4a04:	bls.n	49ec <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    4a06:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    4a08:	ldr	r1, [pc, #12]	; (4a18 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    4a0a:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    4a0c:	ldrb	r3, [r1, #4]
    4a0e:	lsls	r0, r3, #24
    4a10:	itt	mi
    4a12:	movmi	r3, #124	; 0x7c
    4a14:	strbmi	r3, [r1, #3]
    4a16:	b.n	49a4 <uart1_status_isr+0x70>
    4a18:	.word	0x4006b000
    4a1c:	.word	0x1fffb2b8
    4a20:	.word	0x1fffb24d
    4a24:	.word	0x1fffb278
    4a28:	.word	0x1fffb248
    4a2c:	.word	0x1fffb2bc
    4a30:	.word	0x1fffb24c
    4a34:	.word	0x1fffb2c0
    4a38:	.word	0x1fffb2b9
    4a3c:	.word	0x1fffb250

00004a40 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4a40:	ldr	r2, [pc, #20]	; (4a58 <serial_available+0x18>)
	tail = rx_buffer_tail;
    4a42:	ldr	r3, [pc, #24]	; (4a5c <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4a44:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4a46:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4a48:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4a4a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4a4c:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    4a4e:	it	cc
    4a50:	addcc	r0, #64	; 0x40
    4a52:	subs	r0, r0, r3
}
    4a54:	bx	lr
    4a56:	nop
    4a58:	.word	0x1fffb2c8
    4a5c:	.word	0x1fffb2c9

00004a60 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    4a60:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4a62:	ldr	r3, [pc, #224]	; (4b44 <uart0_status_isr+0xe4>)
    4a64:	ldrb	r2, [r3, #4]
    4a66:	tst.w	r2, #48	; 0x30
    4a6a:	beq.n	4ac6 <uart0_status_isr+0x66>
		__disable_irq();
    4a6c:	cpsid	i
		avail = UART0_RCFIFO;
    4a6e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4a70:	and.w	r2, r1, #255	; 0xff
    4a74:	cmp	r1, #0
    4a76:	beq.n	4af4 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4a78:	cpsie	i
			head = rx_buffer_head;
    4a7a:	ldr	r7, [pc, #204]	; (4b48 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4a7c:	ldr	r1, [pc, #204]	; (4b4c <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4a7e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4a80:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4a82:	ldr	r6, [pc, #204]	; (4b50 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4a84:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4a86:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4a88:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    4a8a:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4a8c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4a8e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4a90:	it	cs
    4a92:	movcs	r3, #0
				if (newhead != tail) {
    4a94:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4a96:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4a9a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4a9c:	itt	ne
    4a9e:	strbne	r1, [r6, r3]
    4aa0:	movne	r0, r3
				}
			} while (--avail > 0);
    4aa2:	ands.w	r2, r2, #255	; 0xff
    4aa6:	bne.n	4a8a <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4aa8:	ldr	r3, [pc, #168]	; (4b54 <uart0_status_isr+0xf4>)
    4aaa:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4aac:	uxtb	r2, r0
    4aae:	strb	r2, [r7, #0]
			if (rts_pin) {
    4ab0:	cbz	r3, 4ac6 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4ab2:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4ab4:	itet	cc
    4ab6:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4aba:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4abc:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4abe:	cmp	r0, #39	; 0x27
    4ac0:	itt	gt
    4ac2:	movgt	r2, #1
    4ac4:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    4ac6:	ldr	r1, [pc, #124]	; (4b44 <uart0_status_isr+0xe4>)
    4ac8:	ldrb	r2, [r1, #3]
    4aca:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4acc:	lsls	r5, r2, #24
    4ace:	bmi.n	4afe <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    4ad0:	lsls	r2, r2, #25
    4ad2:	bpl.n	4af0 <uart0_status_isr+0x90>
    4ad4:	ldr	r3, [pc, #108]	; (4b44 <uart0_status_isr+0xe4>)
    4ad6:	ldrb	r3, [r3, #4]
    4ad8:	lsls	r3, r3, #25
    4ada:	bpl.n	4af0 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4adc:	ldr	r3, [pc, #120]	; (4b58 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    4ade:	ldr	r1, [pc, #124]	; (4b5c <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4ae0:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    4ae2:	movs	r2, #0
    4ae4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4ae6:	cbz	r3, 4aea <uart0_status_isr+0x8a>
    4ae8:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    4aea:	ldr	r3, [pc, #88]	; (4b44 <uart0_status_isr+0xe4>)
    4aec:	movs	r2, #60	; 0x3c
    4aee:	strb	r2, [r3, #3]
	}
}
    4af0:	pop	{r4, r5, r6, r7}
    4af2:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4af4:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    4af6:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4af8:	strb	r2, [r3, #17]
			__enable_irq();
    4afa:	cpsie	i
    4afc:	b.n	4ac6 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4afe:	ldrb	r3, [r1, #4]
    4b00:	lsls	r4, r3, #24
    4b02:	bpl.n	4ad0 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    4b04:	ldr	r3, [pc, #88]	; (4b60 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    4b06:	ldr	r6, [pc, #92]	; (4b64 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4b08:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    4b0a:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4b0c:	uxtb	r4, r4
		tail = tx_buffer_tail;
    4b0e:	uxtb	r3, r3
		do {
			if (tail == head) break;
    4b10:	cmp	r4, r3
    4b12:	beq.n	4b32 <uart0_status_isr+0xd2>
    4b14:	ldr	r5, [pc, #80]	; (4b68 <uart0_status_isr+0x108>)
    4b16:	b.n	4b1c <uart0_status_isr+0xbc>
    4b18:	cmp	r3, r4
    4b1a:	beq.n	4b32 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    4b1c:	adds	r3, #1
    4b1e:	cmp	r3, #64	; 0x40
    4b20:	it	cs
    4b22:	movcs	r3, #0
			avail = UART0_S1;
    4b24:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    4b26:	ldrb	r0, [r5, r3]
    4b28:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    4b2a:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    4b2c:	ldrb	r0, [r1, #20]
    4b2e:	cmp	r0, #7
    4b30:	bls.n	4b18 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    4b32:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4b34:	ldr	r1, [pc, #12]	; (4b44 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    4b36:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4b38:	ldrb	r3, [r1, #4]
    4b3a:	lsls	r0, r3, #24
    4b3c:	itt	mi
    4b3e:	movmi	r3, #124	; 0x7c
    4b40:	strbmi	r3, [r1, #3]
    4b42:	b.n	4ad0 <uart0_status_isr+0x70>
    4b44:	.word	0x4006a000
    4b48:	.word	0x1fffb2c8
    4b4c:	.word	0x1fffb2c9
    4b50:	.word	0x1fffb30c
    4b54:	.word	0x1fffb2c4
    4b58:	.word	0x1fffb350
    4b5c:	.word	0x1fffb34c
    4b60:	.word	0x1fffb354
    4b64:	.word	0x1fffb34d
    4b68:	.word	0x1fffb2cc

00004b6c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4b6c:	push	{r4, r5, r6, lr}
    4b6e:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4b70:	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4b72:	ldr	r3, [pc, #100]	; (4bd8 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    4b74:	ldr	r5, [pc, #100]	; (4bdc <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    4b76:	ldr	r0, [pc, #104]	; (4be0 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4b78:	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    4b7a:	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    4b7c:	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4b7e:	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4b80:	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    4b82:	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4b84:	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    4b86:	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4b88:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4b8a:	ldrb	r3, [r2, #0]
    4b8c:	lsls	r3, r3, #24
    4b8e:	bpl.n	4b8a <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    4b90:	ldr	r3, [pc, #80]	; (4be4 <usb_init_serialnumber+0x78>)
    4b92:	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    4b94:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4b96:	ldr	r3, [pc, #80]	; (4be8 <usb_init_serialnumber+0x7c>)
    4b98:	ldr	r4, [pc, #80]	; (4bec <usb_init_serialnumber+0x80>)
    4b9a:	cmp	r0, r3
    4b9c:	it	ls
    4b9e:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    4ba2:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4ba4:	it	ls
    4ba6:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    4ba8:	movs	r2, #10
    4baa:	bl	4bf0 <ultoa>
    4bae:	add	r1, sp, #4
    4bb0:	mov	r0, r4
	for (i=0; i<10; i++) {
    4bb2:	movs	r3, #0
		char c = buf[i];
    4bb4:	ldrb.w	r2, [r1], #1
    4bb8:	adds	r3, #1
		if (!c) break;
    4bba:	cbz	r2, 4bcc <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4bbc:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4bbe:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4bc2:	bne.n	4bb4 <usb_init_serialnumber+0x48>
    4bc4:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4bc6:	strb	r3, [r4, #0]
}
    4bc8:	add	sp, #16
    4bca:	pop	{r4, r5, r6, pc}
    4bcc:	lsls	r3, r3, #1
    4bce:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4bd0:	strb	r3, [r4, #0]
}
    4bd2:	add	sp, #16
    4bd4:	pop	{r4, r5, r6, pc}
    4bd6:	nop
    4bd8:	.word	0x40020000
    4bdc:	.word	0x40020007
    4be0:	.word	0x40020006
    4be4:	.word	0x40020008
    4be8:	.word	0x0098967f
    4bec:	.word	0x1fff8c8c

00004bf0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4bf0:	push	{r4, r5, r6, r7}
    4bf2:	subs	r5, r1, #1
    4bf4:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    4bf6:	movs	r4, #0
    4bf8:	b.n	4bfc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4bfa:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4bfc:	udiv	r3, r0, r2
    4c00:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4c04:	cmp	r0, #9
    4c06:	add.w	r7, r0, #48	; 0x30
    4c0a:	itet	hi
    4c0c:	addhi	r0, #55	; 0x37
    4c0e:	uxtbls	r0, r7
    4c10:	uxtbhi	r0, r0
    4c12:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    4c16:	mov	r0, r3
    4c18:	cmp	r3, #0
    4c1a:	bne.n	4bfa <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4c1c:	adds	r2, r1, r4
    4c1e:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4c20:	cbz	r4, 4c36 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4c22:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4c24:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    4c28:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4c2a:	adds	r3, #1
    4c2c:	subs	r0, r4, r3
    4c2e:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4c30:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4c34:	blt.n	4c22 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4c36:	mov	r0, r1
    4c38:	pop	{r4, r5, r6, r7}
    4c3a:	bx	lr

00004c3c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4c3c:	ldr	r2, [pc, #20]	; (4c54 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    4c3e:	ldr	r3, [pc, #24]	; (4c58 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4c40:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4c42:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4c44:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4c46:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4c48:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    4c4a:	it	cc
    4c4c:	addcc	r0, #64	; 0x40
    4c4e:	subs	r0, r0, r3
}
    4c50:	bx	lr
    4c52:	nop
    4c54:	.word	0x1fffb35c
    4c58:	.word	0x1fffb35d

00004c5c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4c5c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    4c5e:	ldr	r3, [pc, #172]	; (4d0c <uart2_status_isr+0xb0>)
    4c60:	ldrb	r2, [r3, #4]
    4c62:	lsls	r4, r2, #26
    4c64:	bpl.n	4ca6 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4c66:	ldr	r0, [pc, #168]	; (4d10 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4c68:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4c6a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4c6c:	ldr	r1, [pc, #164]	; (4d14 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4c6e:	adds	r3, #1
    4c70:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4c72:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4c74:	it	gt
    4c76:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4c78:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4c7a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4c7c:	beq.n	4c86 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    4c7e:	ldr	r4, [pc, #152]	; (4d18 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    4c80:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4c82:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4c84:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4c86:	ldr	r2, [pc, #148]	; (4d1c <uart2_status_isr+0xc0>)
    4c88:	ldr	r1, [r2, #0]
    4c8a:	cbz	r1, 4ca6 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4c8c:	ldr	r2, [pc, #144]	; (4d20 <uart2_status_isr+0xc4>)
    4c8e:	ldrb	r2, [r2, #0]
    4c90:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4c92:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4c94:	itet	cc
    4c96:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4c9a:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4c9c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4c9e:	cmp	r3, #39	; 0x27
    4ca0:	itt	gt
    4ca2:	movgt	r3, #1
    4ca4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4ca6:	ldr	r2, [pc, #100]	; (4d0c <uart2_status_isr+0xb0>)
    4ca8:	ldrb	r3, [r2, #3]
    4caa:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4cac:	lsls	r0, r3, #24
    4cae:	bmi.n	4cd4 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4cb0:	lsls	r2, r3, #25
    4cb2:	bpl.n	4cd0 <uart2_status_isr+0x74>
    4cb4:	ldr	r3, [pc, #84]	; (4d0c <uart2_status_isr+0xb0>)
    4cb6:	ldrb	r3, [r3, #4]
    4cb8:	lsls	r3, r3, #25
    4cba:	bpl.n	4cd0 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4cbc:	ldr	r3, [pc, #100]	; (4d24 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4cbe:	ldr	r1, [pc, #104]	; (4d28 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4cc0:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4cc2:	movs	r2, #0
    4cc4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4cc6:	cbz	r3, 4cca <uart2_status_isr+0x6e>
    4cc8:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    4cca:	ldr	r3, [pc, #64]	; (4d0c <uart2_status_isr+0xb0>)
    4ccc:	movs	r2, #44	; 0x2c
    4cce:	strb	r2, [r3, #3]
	}
}
    4cd0:	pop	{r4, r5}
    4cd2:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4cd4:	ldrb	r1, [r2, #4]
    4cd6:	lsls	r1, r1, #24
    4cd8:	bpl.n	4cb0 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    4cda:	ldr	r1, [pc, #80]	; (4d2c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4cdc:	ldr	r0, [pc, #64]	; (4d20 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4cde:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4ce0:	ldrb	r1, [r0, #0]
    4ce2:	uxtb	r1, r1
		if (head == tail) {
    4ce4:	cmp	r4, r1
    4ce6:	beq.n	4d04 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4ce8:	adds	r2, r1, #1
    4cea:	cmp	r2, #39	; 0x27
    4cec:	itt	hi
    4cee:	movhi	r1, #0
    4cf0:	movhi	r2, r1
			n = tx_buffer[tail];
    4cf2:	ldr	r5, [pc, #60]	; (4d30 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4cf4:	ldr	r4, [pc, #20]	; (4d0c <uart2_status_isr+0xb0>)
    4cf6:	it	ls
    4cf8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4cfa:	ldrb	r2, [r5, r2]
    4cfc:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4cfe:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4d00:	strb	r1, [r0, #0]
    4d02:	b.n	4cb0 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4d04:	movs	r1, #108	; 0x6c
    4d06:	strb	r1, [r2, #3]
    4d08:	b.n	4cb0 <uart2_status_isr+0x54>
    4d0a:	nop
    4d0c:	.word	0x4006c000
    4d10:	.word	0x1fffb35c
    4d14:	.word	0x1fffb35d
    4d18:	.word	0x1fffb388
    4d1c:	.word	0x1fffb358
    4d20:	.word	0x1fffb3c9
    4d24:	.word	0x1fffb3cc
    4d28:	.word	0x1fffb3c8
    4d2c:	.word	0x1fffb3d0
    4d30:	.word	0x1fffb360

00004d34 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4d34:	bx	lr
    4d36:	nop

00004d38 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4d38:	bx	lr
    4d3a:	nop

00004d3c <__aeabi_frsub>:
    4d3c:	eor.w	r0, r0, #2147483648	; 0x80000000
    4d40:	b.n	4d48 <__addsf3>
    4d42:	nop

00004d44 <__aeabi_fsub>:
    4d44:	eor.w	r1, r1, #2147483648	; 0x80000000

00004d48 <__addsf3>:
    4d48:	lsls	r2, r0, #1
    4d4a:	itttt	ne
    4d4c:	movsne.w	r3, r1, lsl #1
    4d50:	teqne	r2, r3
    4d54:	mvnsne.w	ip, r2, asr #24
    4d58:	mvnsne.w	ip, r3, asr #24
    4d5c:	beq.n	4e34 <__addsf3+0xec>
    4d5e:	mov.w	r2, r2, lsr #24
    4d62:	rsbs	r3, r2, r3, lsr #24
    4d66:	itttt	gt
    4d68:	addgt	r2, r2, r3
    4d6a:	eorgt	r1, r0
    4d6c:	eorgt	r0, r1
    4d6e:	eorgt	r1, r0
    4d70:	it	lt
    4d72:	neglt	r3, r3
    4d74:	cmp	r3, #25
    4d76:	it	hi
    4d78:	bxhi	lr
    4d7a:	tst.w	r0, #2147483648	; 0x80000000
    4d7e:	orr.w	r0, r0, #8388608	; 0x800000
    4d82:	bic.w	r0, r0, #4278190080	; 0xff000000
    4d86:	it	ne
    4d88:	negne	r0, r0
    4d8a:	tst.w	r1, #2147483648	; 0x80000000
    4d8e:	orr.w	r1, r1, #8388608	; 0x800000
    4d92:	bic.w	r1, r1, #4278190080	; 0xff000000
    4d96:	it	ne
    4d98:	negne	r1, r1
    4d9a:	teq	r2, r3
    4d9e:	beq.n	4e20 <__addsf3+0xd8>
    4da0:	sub.w	r2, r2, #1
    4da4:	asr.w	ip, r1, r3
    4da8:	adds.w	r0, r0, ip
    4dac:	rsb	r3, r3, #32
    4db0:	lsl.w	r1, r1, r3
    4db4:	and.w	r3, r0, #2147483648	; 0x80000000
    4db8:	bpl.n	4dc0 <__addsf3+0x78>
    4dba:	negs	r1, r1
    4dbc:	sbc.w	r0, r0, r0, lsl #1
    4dc0:	cmp.w	r0, #8388608	; 0x800000
    4dc4:	bcc.n	4dee <__addsf3+0xa6>
    4dc6:	cmp.w	r0, #16777216	; 0x1000000
    4dca:	bcc.n	4dda <__addsf3+0x92>
    4dcc:	lsrs	r0, r0, #1
    4dce:	mov.w	r1, r1, rrx
    4dd2:	add.w	r2, r2, #1
    4dd6:	cmp	r2, #254	; 0xfe
    4dd8:	bcs.n	4e7e <__addsf3+0x136>
    4dda:	cmp.w	r1, #2147483648	; 0x80000000
    4dde:	adc.w	r0, r0, r2, lsl #23
    4de2:	it	eq
    4de4:	biceq.w	r0, r0, #1
    4de8:	orr.w	r0, r0, r3
    4dec:	bx	lr
    4dee:	lsls	r1, r1, #1
    4df0:	adc.w	r0, r0, r0
    4df4:	tst.w	r0, #8388608	; 0x800000
    4df8:	sub.w	r2, r2, #1
    4dfc:	bne.n	4dda <__addsf3+0x92>
    4dfe:	clz	ip, r0
    4e02:	sub.w	ip, ip, #8
    4e06:	subs.w	r2, r2, ip
    4e0a:	lsl.w	r0, r0, ip
    4e0e:	itet	ge
    4e10:	addge.w	r0, r0, r2, lsl #23
    4e14:	neglt	r2, r2
    4e16:	orrge	r0, r3
    4e18:	itt	lt
    4e1a:	lsrlt	r0, r2
    4e1c:	orrlt	r0, r3
    4e1e:	bx	lr
    4e20:	teq	r2, #0
    4e24:	eor.w	r1, r1, #8388608	; 0x800000
    4e28:	itte	eq
    4e2a:	eoreq.w	r0, r0, #8388608	; 0x800000
    4e2e:	addeq	r2, #1
    4e30:	subne	r3, #1
    4e32:	b.n	4da0 <__addsf3+0x58>
    4e34:	mov.w	r3, r1, lsl #1
    4e38:	mvns.w	ip, r2, asr #24
    4e3c:	it	ne
    4e3e:	mvnsne.w	ip, r3, asr #24
    4e42:	beq.n	4e88 <__addsf3+0x140>
    4e44:	teq	r2, r3
    4e48:	beq.n	4e54 <__addsf3+0x10c>
    4e4a:	teq	r2, #0
    4e4e:	it	eq
    4e50:	moveq	r0, r1
    4e52:	bx	lr
    4e54:	teq	r0, r1
    4e58:	itt	ne
    4e5a:	movne	r0, #0
    4e5c:	bxne	lr
    4e5e:	tst.w	r2, #4278190080	; 0xff000000
    4e62:	bne.n	4e6e <__addsf3+0x126>
    4e64:	lsls	r0, r0, #1
    4e66:	it	cs
    4e68:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4e6c:	bx	lr
    4e6e:	adds.w	r2, r2, #33554432	; 0x2000000
    4e72:	itt	cc
    4e74:	addcc.w	r0, r0, #8388608	; 0x800000
    4e78:	bxcc	lr
    4e7a:	and.w	r3, r0, #2147483648	; 0x80000000
    4e7e:	orr.w	r0, r3, #2130706432	; 0x7f000000
    4e82:	orr.w	r0, r0, #8388608	; 0x800000
    4e86:	bx	lr
    4e88:	mvns.w	r2, r2, asr #24
    4e8c:	itet	ne
    4e8e:	movne	r0, r1
    4e90:	mvnseq.w	r3, r3, asr #24
    4e94:	movne	r1, r0
    4e96:	lsls	r2, r0, #9
    4e98:	itte	eq
    4e9a:	movseq.w	r3, r1, lsl #9
    4e9e:	teqeq	r0, r1
    4ea2:	orrne.w	r0, r0, #4194304	; 0x400000
    4ea6:	bx	lr

00004ea8 <__aeabi_ui2f>:
    4ea8:	mov.w	r3, #0
    4eac:	b.n	4eb8 <__aeabi_i2f+0x8>
    4eae:	nop

00004eb0 <__aeabi_i2f>:
    4eb0:	ands.w	r3, r0, #2147483648	; 0x80000000
    4eb4:	it	mi
    4eb6:	negmi	r0, r0
    4eb8:	movs.w	ip, r0
    4ebc:	it	eq
    4ebe:	bxeq	lr
    4ec0:	orr.w	r3, r3, #1258291200	; 0x4b000000
    4ec4:	mov	r1, r0
    4ec6:	mov.w	r0, #0
    4eca:	b.n	4f06 <__aeabi_l2f+0x2a>

00004ecc <__aeabi_ul2f>:
    4ecc:	orrs.w	r2, r0, r1
    4ed0:	it	eq
    4ed2:	bxeq	lr
    4ed4:	mov.w	r3, #0
    4ed8:	b.n	4ef0 <__aeabi_l2f+0x14>
    4eda:	nop

00004edc <__aeabi_l2f>:
    4edc:	orrs.w	r2, r0, r1
    4ee0:	it	eq
    4ee2:	bxeq	lr
    4ee4:	ands.w	r3, r1, #2147483648	; 0x80000000
    4ee8:	bpl.n	4ef0 <__aeabi_l2f+0x14>
    4eea:	negs	r0, r0
    4eec:	sbc.w	r1, r1, r1, lsl #1
    4ef0:	movs.w	ip, r1
    4ef4:	ittt	eq
    4ef6:	moveq	ip, r0
    4ef8:	moveq	r1, r0
    4efa:	moveq	r0, #0
    4efc:	orr.w	r3, r3, #1526726656	; 0x5b000000
    4f00:	it	eq
    4f02:	subeq.w	r3, r3, #268435456	; 0x10000000
    4f06:	sub.w	r3, r3, #8388608	; 0x800000
    4f0a:	clz	r2, ip
    4f0e:	subs	r2, #8
    4f10:	sub.w	r3, r3, r2, lsl #23
    4f14:	blt.n	4f38 <__aeabi_l2f+0x5c>
    4f16:	lsl.w	ip, r1, r2
    4f1a:	add	r3, ip
    4f1c:	lsl.w	ip, r0, r2
    4f20:	rsb	r2, r2, #32
    4f24:	cmp.w	ip, #2147483648	; 0x80000000
    4f28:	lsr.w	r2, r0, r2
    4f2c:	adc.w	r0, r3, r2
    4f30:	it	eq
    4f32:	biceq.w	r0, r0, #1
    4f36:	bx	lr
    4f38:	add.w	r2, r2, #32
    4f3c:	lsl.w	ip, r1, r2
    4f40:	rsb	r2, r2, #32
    4f44:	orrs.w	r0, r0, ip, lsl #1
    4f48:	lsr.w	r2, r1, r2
    4f4c:	adc.w	r0, r3, r2
    4f50:	it	eq
    4f52:	biceq.w	r0, r0, ip, lsr #31
    4f56:	bx	lr

00004f58 <__aeabi_fmul>:
    4f58:	mov.w	ip, #255	; 0xff
    4f5c:	ands.w	r2, ip, r0, lsr #23
    4f60:	ittt	ne
    4f62:	andsne.w	r3, ip, r1, lsr #23
    4f66:	teqne	r2, ip
    4f6a:	teqne	r3, ip
    4f6e:	beq.n	5050 <__aeabi_fmul+0xf8>
    4f70:	add	r2, r3
    4f72:	eor.w	ip, r0, r1
    4f76:	lsls	r0, r0, #9
    4f78:	it	ne
    4f7a:	movsne.w	r1, r1, lsl #9
    4f7e:	beq.n	4fbe <__aeabi_fmul+0x66>
    4f80:	mov.w	r3, #134217728	; 0x8000000
    4f84:	orr.w	r0, r3, r0, lsr #5
    4f88:	orr.w	r1, r3, r1, lsr #5
    4f8c:	umull	r3, r1, r0, r1
    4f90:	and.w	r0, ip, #2147483648	; 0x80000000
    4f94:	cmp.w	r1, #8388608	; 0x800000
    4f98:	ittt	cc
    4f9a:	lslcc	r1, r1, #1
    4f9c:	orrcc.w	r1, r1, r3, lsr #31
    4fa0:	lslcc	r3, r3, #1
    4fa2:	orr.w	r0, r0, r1
    4fa6:	sbc.w	r2, r2, #127	; 0x7f
    4faa:	cmp	r2, #253	; 0xfd
    4fac:	bhi.n	4fea <__aeabi_fmul+0x92>
    4fae:	cmp.w	r3, #2147483648	; 0x80000000
    4fb2:	adc.w	r0, r0, r2, lsl #23
    4fb6:	it	eq
    4fb8:	biceq.w	r0, r0, #1
    4fbc:	bx	lr
    4fbe:	teq	r0, #0
    4fc2:	and.w	ip, ip, #2147483648	; 0x80000000
    4fc6:	it	eq
    4fc8:	lsleq	r1, r1, #9
    4fca:	orr.w	r0, ip, r0, lsr #9
    4fce:	orr.w	r0, r0, r1, lsr #9
    4fd2:	subs	r2, #127	; 0x7f
    4fd4:	ittt	gt
    4fd6:	rsbsgt	r3, r2, #255	; 0xff
    4fda:	orrgt.w	r0, r0, r2, lsl #23
    4fde:	bxgt	lr
    4fe0:	orr.w	r0, r0, #8388608	; 0x800000
    4fe4:	mov.w	r3, #0
    4fe8:	subs	r2, #1
    4fea:	bgt.n	50a8 <__aeabi_fmul+0x150>
    4fec:	cmn.w	r2, #25
    4ff0:	itt	le
    4ff2:	andle.w	r0, r0, #2147483648	; 0x80000000
    4ff6:	bxle	lr
    4ff8:	rsb	r2, r2, #0
    4ffc:	lsls	r1, r0, #1
    4ffe:	lsr.w	r1, r1, r2
    5002:	rsb	r2, r2, #32
    5006:	lsl.w	ip, r0, r2
    500a:	movs.w	r0, r1, rrx
    500e:	adc.w	r0, r0, #0
    5012:	orrs.w	r3, r3, ip, lsl #1
    5016:	it	eq
    5018:	biceq.w	r0, r0, ip, lsr #31
    501c:	bx	lr
    501e:	teq	r2, #0
    5022:	and.w	ip, r0, #2147483648	; 0x80000000
    5026:	ittt	eq
    5028:	lsleq	r0, r0, #1
    502a:	tsteq.w	r0, #8388608	; 0x800000
    502e:	subeq	r2, #1
    5030:	beq.n	5026 <__aeabi_fmul+0xce>
    5032:	orr.w	r0, r0, ip
    5036:	teq	r3, #0
    503a:	and.w	ip, r1, #2147483648	; 0x80000000
    503e:	ittt	eq
    5040:	lsleq	r1, r1, #1
    5042:	tsteq.w	r1, #8388608	; 0x800000
    5046:	subeq	r3, #1
    5048:	beq.n	503e <__aeabi_fmul+0xe6>
    504a:	orr.w	r1, r1, ip
    504e:	b.n	4f70 <__aeabi_fmul+0x18>
    5050:	and.w	r3, ip, r1, lsr #23
    5054:	teq	r2, ip
    5058:	it	ne
    505a:	teqne	r3, ip
    505e:	beq.n	5076 <__aeabi_fmul+0x11e>
    5060:	bics.w	ip, r0, #2147483648	; 0x80000000
    5064:	it	ne
    5066:	bicsne.w	ip, r1, #2147483648	; 0x80000000
    506a:	bne.n	501e <__aeabi_fmul+0xc6>
    506c:	eor.w	r0, r0, r1
    5070:	and.w	r0, r0, #2147483648	; 0x80000000
    5074:	bx	lr
    5076:	teq	r0, #0
    507a:	itett	ne
    507c:	teqne	r0, #2147483648	; 0x80000000
    5080:	moveq	r0, r1
    5082:	teqne	r1, #0
    5086:	teqne	r1, #2147483648	; 0x80000000
    508a:	beq.n	50b6 <__aeabi_fmul+0x15e>
    508c:	teq	r2, ip
    5090:	bne.n	5096 <__aeabi_fmul+0x13e>
    5092:	lsls	r2, r0, #9
    5094:	bne.n	50b6 <__aeabi_fmul+0x15e>
    5096:	teq	r3, ip
    509a:	bne.n	50a4 <__aeabi_fmul+0x14c>
    509c:	lsls	r3, r1, #9
    509e:	it	ne
    50a0:	movne	r0, r1
    50a2:	bne.n	50b6 <__aeabi_fmul+0x15e>
    50a4:	eor.w	r0, r0, r1
    50a8:	and.w	r0, r0, #2147483648	; 0x80000000
    50ac:	orr.w	r0, r0, #2130706432	; 0x7f000000
    50b0:	orr.w	r0, r0, #8388608	; 0x800000
    50b4:	bx	lr
    50b6:	orr.w	r0, r0, #2130706432	; 0x7f000000
    50ba:	orr.w	r0, r0, #12582912	; 0xc00000
    50be:	bx	lr

000050c0 <__aeabi_fdiv>:
    50c0:	mov.w	ip, #255	; 0xff
    50c4:	ands.w	r2, ip, r0, lsr #23
    50c8:	ittt	ne
    50ca:	andsne.w	r3, ip, r1, lsr #23
    50ce:	teqne	r2, ip
    50d2:	teqne	r3, ip
    50d6:	beq.n	51ac <__aeabi_fdiv+0xec>
    50d8:	sub.w	r2, r2, r3
    50dc:	eor.w	ip, r0, r1
    50e0:	lsls	r1, r1, #9
    50e2:	mov.w	r0, r0, lsl #9
    50e6:	beq.n	5158 <__aeabi_fdiv+0x98>
    50e8:	mov.w	r3, #268435456	; 0x10000000
    50ec:	orr.w	r1, r3, r1, lsr #4
    50f0:	orr.w	r3, r3, r0, lsr #4
    50f4:	and.w	r0, ip, #2147483648	; 0x80000000
    50f8:	cmp	r3, r1
    50fa:	it	cc
    50fc:	lslcc	r3, r3, #1
    50fe:	adc.w	r2, r2, #125	; 0x7d
    5102:	mov.w	ip, #8388608	; 0x800000
    5106:	cmp	r3, r1
    5108:	itt	cs
    510a:	subcs	r3, r3, r1
    510c:	orrcs.w	r0, r0, ip
    5110:	cmp.w	r3, r1, lsr #1
    5114:	itt	cs
    5116:	subcs.w	r3, r3, r1, lsr #1
    511a:	orrcs.w	r0, r0, ip, lsr #1
    511e:	cmp.w	r3, r1, lsr #2
    5122:	itt	cs
    5124:	subcs.w	r3, r3, r1, lsr #2
    5128:	orrcs.w	r0, r0, ip, lsr #2
    512c:	cmp.w	r3, r1, lsr #3
    5130:	itt	cs
    5132:	subcs.w	r3, r3, r1, lsr #3
    5136:	orrcs.w	r0, r0, ip, lsr #3
    513a:	lsls	r3, r3, #4
    513c:	it	ne
    513e:	movsne.w	ip, ip, lsr #4
    5142:	bne.n	5106 <__aeabi_fdiv+0x46>
    5144:	cmp	r2, #253	; 0xfd
    5146:	bhi.w	4fea <__aeabi_fmul+0x92>
    514a:	cmp	r3, r1
    514c:	adc.w	r0, r0, r2, lsl #23
    5150:	it	eq
    5152:	biceq.w	r0, r0, #1
    5156:	bx	lr
    5158:	and.w	ip, ip, #2147483648	; 0x80000000
    515c:	orr.w	r0, ip, r0, lsr #9
    5160:	adds	r2, #127	; 0x7f
    5162:	ittt	gt
    5164:	rsbsgt	r3, r2, #255	; 0xff
    5168:	orrgt.w	r0, r0, r2, lsl #23
    516c:	bxgt	lr
    516e:	orr.w	r0, r0, #8388608	; 0x800000
    5172:	mov.w	r3, #0
    5176:	subs	r2, #1
    5178:	b.n	4fea <__aeabi_fmul+0x92>
    517a:	teq	r2, #0
    517e:	and.w	ip, r0, #2147483648	; 0x80000000
    5182:	ittt	eq
    5184:	lsleq	r0, r0, #1
    5186:	tsteq.w	r0, #8388608	; 0x800000
    518a:	subeq	r2, #1
    518c:	beq.n	5182 <__aeabi_fdiv+0xc2>
    518e:	orr.w	r0, r0, ip
    5192:	teq	r3, #0
    5196:	and.w	ip, r1, #2147483648	; 0x80000000
    519a:	ittt	eq
    519c:	lsleq	r1, r1, #1
    519e:	tsteq.w	r1, #8388608	; 0x800000
    51a2:	subeq	r3, #1
    51a4:	beq.n	519a <__aeabi_fdiv+0xda>
    51a6:	orr.w	r1, r1, ip
    51aa:	b.n	50d8 <__aeabi_fdiv+0x18>
    51ac:	and.w	r3, ip, r1, lsr #23
    51b0:	teq	r2, ip
    51b4:	bne.n	51c8 <__aeabi_fdiv+0x108>
    51b6:	lsls	r2, r0, #9
    51b8:	bne.w	50b6 <__aeabi_fmul+0x15e>
    51bc:	teq	r3, ip
    51c0:	bne.w	50a4 <__aeabi_fmul+0x14c>
    51c4:	mov	r0, r1
    51c6:	b.n	50b6 <__aeabi_fmul+0x15e>
    51c8:	teq	r3, ip
    51cc:	bne.n	51d8 <__aeabi_fdiv+0x118>
    51ce:	lsls	r3, r1, #9
    51d0:	beq.w	506c <__aeabi_fmul+0x114>
    51d4:	mov	r0, r1
    51d6:	b.n	50b6 <__aeabi_fmul+0x15e>
    51d8:	bics.w	ip, r0, #2147483648	; 0x80000000
    51dc:	it	ne
    51de:	bicsne.w	ip, r1, #2147483648	; 0x80000000
    51e2:	bne.n	517a <__aeabi_fdiv+0xba>
    51e4:	bics.w	r2, r0, #2147483648	; 0x80000000
    51e8:	bne.w	50a4 <__aeabi_fmul+0x14c>
    51ec:	bics.w	r3, r1, #2147483648	; 0x80000000
    51f0:	bne.w	506c <__aeabi_fmul+0x114>
    51f4:	b.n	50b6 <__aeabi_fmul+0x15e>
    51f6:	nop

000051f8 <__aeabi_f2uiz>:
    51f8:	lsls	r2, r0, #1
    51fa:	bcs.n	521a <__aeabi_f2uiz+0x22>
    51fc:	cmp.w	r2, #2130706432	; 0x7f000000
    5200:	bcc.n	521a <__aeabi_f2uiz+0x22>
    5202:	mov.w	r3, #158	; 0x9e
    5206:	subs.w	r2, r3, r2, lsr #24
    520a:	bmi.n	5220 <__aeabi_f2uiz+0x28>
    520c:	mov.w	r3, r0, lsl #8
    5210:	orr.w	r3, r3, #2147483648	; 0x80000000
    5214:	lsr.w	r0, r3, r2
    5218:	bx	lr
    521a:	mov.w	r0, #0
    521e:	bx	lr
    5220:	cmn.w	r2, #97	; 0x61
    5224:	bne.n	522a <__aeabi_f2uiz+0x32>
    5226:	lsls	r2, r0, #9
    5228:	bne.n	5230 <__aeabi_f2uiz+0x38>
    522a:	mov.w	r0, #4294967295
    522e:	bx	lr
    5230:	mov.w	r0, #0
    5234:	bx	lr
    5236:	nop

00005238 <__aeabi_atexit>:
    5238:	mov	r3, r1
    523a:	mov	r1, r0
    523c:	mov	r0, r3
    523e:	b.w	5244 <__cxa_atexit>
    5242:	nop

00005244 <__cxa_atexit>:
    5244:	mov	r3, r2
    5246:	mov	r2, r1
    5248:	mov	r1, r0
    524a:	movs	r0, #2
    524c:	b.w	5904 <__register_exitproc>

00005250 <__errno>:
    5250:	ldr	r3, [pc, #4]	; (5258 <__errno+0x8>)
    5252:	ldr	r0, [r3, #0]
    5254:	bx	lr
    5256:	nop
    5258:	.word	0x1fff90d0

0000525c <__libc_init_array>:
    525c:	push	{r4, r5, r6, lr}
    525e:	ldr	r6, [pc, #60]	; (529c <__libc_init_array+0x40>)
    5260:	ldr	r5, [pc, #60]	; (52a0 <__libc_init_array+0x44>)
    5262:	subs	r6, r6, r5
    5264:	asrs	r6, r6, #2
    5266:	it	ne
    5268:	movne	r4, #0
    526a:	beq.n	5278 <__libc_init_array+0x1c>
    526c:	adds	r4, #1
    526e:	ldr.w	r3, [r5], #4
    5272:	blx	r3
    5274:	cmp	r6, r4
    5276:	bne.n	526c <__libc_init_array+0x10>
    5278:	ldr	r6, [pc, #40]	; (52a4 <__libc_init_array+0x48>)
    527a:	ldr	r5, [pc, #44]	; (52a8 <__libc_init_array+0x4c>)
    527c:	subs	r6, r6, r5
    527e:	bl	6114 <_init>
    5282:	asrs	r6, r6, #2
    5284:	it	ne
    5286:	movne	r4, #0
    5288:	beq.n	5298 <__libc_init_array+0x3c>
    528a:	adds	r4, #1
    528c:	ldr.w	r3, [r5], #4
    5290:	blx	r3
    5292:	cmp	r6, r4
    5294:	bne.n	528a <__libc_init_array+0x2e>
    5296:	pop	{r4, r5, r6, pc}
    5298:	pop	{r4, r5, r6, pc}
    529a:	nop
    529c:	.word	0x00006120
    52a0:	.word	0x00006120
    52a4:	.word	0x00006170
    52a8:	.word	0x00006120

000052ac <malloc>:
    52ac:	ldr	r3, [pc, #8]	; (52b8 <malloc+0xc>)
    52ae:	mov	r1, r0
    52b0:	ldr	r0, [r3, #0]
    52b2:	b.w	52cc <_malloc_r>
    52b6:	nop
    52b8:	.word	0x1fff90d0

000052bc <free>:
    52bc:	ldr	r3, [pc, #8]	; (52c8 <free+0xc>)
    52be:	mov	r1, r0
    52c0:	ldr	r0, [r3, #0]
    52c2:	b.w	5a80 <_free_r>
    52c6:	nop
    52c8:	.word	0x1fff90d0

000052cc <_malloc_r>:
    52cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52d0:	add.w	r5, r1, #11
    52d4:	cmp	r5, #22
    52d6:	sub	sp, #12
    52d8:	mov	r6, r0
    52da:	bls.w	541c <_malloc_r+0x150>
    52de:	bics.w	r5, r5, #7
    52e2:	bmi.w	5464 <_malloc_r+0x198>
    52e6:	cmp	r1, r5
    52e8:	bhi.w	5464 <_malloc_r+0x198>
    52ec:	bl	58d8 <__malloc_lock>
    52f0:	cmp.w	r5, #504	; 0x1f8
    52f4:	bcc.w	5830 <_malloc_r+0x564>
    52f8:	lsrs	r3, r5, #9
    52fa:	beq.w	5472 <_malloc_r+0x1a6>
    52fe:	cmp	r3, #4
    5300:	bhi.w	560a <_malloc_r+0x33e>
    5304:	lsrs	r0, r5, #6
    5306:	add.w	lr, r0, #57	; 0x39
    530a:	mov.w	r3, lr, lsl #1
    530e:	adds	r0, #56	; 0x38
    5310:	ldr	r7, [pc, #784]	; (5624 <_malloc_r+0x358>)
    5312:	add.w	r3, r7, r3, lsl #2
    5316:	sub.w	r1, r3, #8
    531a:	ldr	r4, [r3, #4]
    531c:	cmp	r1, r4
    531e:	bne.n	5330 <_malloc_r+0x64>
    5320:	b.n	547c <_malloc_r+0x1b0>
    5322:	cmp	r2, #0
    5324:	bge.w	5480 <_malloc_r+0x1b4>
    5328:	ldr	r4, [r4, #12]
    532a:	cmp	r1, r4
    532c:	beq.w	547c <_malloc_r+0x1b0>
    5330:	ldr	r3, [r4, #4]
    5332:	bic.w	r3, r3, #3
    5336:	subs	r2, r3, r5
    5338:	cmp	r2, #15
    533a:	ble.n	5322 <_malloc_r+0x56>
    533c:	ldr	r1, [pc, #740]	; (5624 <_malloc_r+0x358>)
    533e:	ldr	r4, [r7, #16]
    5340:	add.w	lr, r1, #8
    5344:	cmp	r4, lr
    5346:	beq.w	56b0 <_malloc_r+0x3e4>
    534a:	ldr	r3, [r4, #4]
    534c:	bic.w	r3, r3, #3
    5350:	subs	r2, r3, r5
    5352:	cmp	r2, #15
    5354:	bgt.w	568a <_malloc_r+0x3be>
    5358:	cmp	r2, #0
    535a:	str.w	lr, [r1, #20]
    535e:	str.w	lr, [r1, #16]
    5362:	bge.w	54a2 <_malloc_r+0x1d6>
    5366:	cmp.w	r3, #512	; 0x200
    536a:	bcs.w	563c <_malloc_r+0x370>
    536e:	lsrs	r3, r3, #3
    5370:	add.w	ip, r3, #1
    5374:	movs	r2, #1
    5376:	asrs	r3, r3, #2
    5378:	lsl.w	r3, r2, r3
    537c:	ldr	r2, [r1, #4]
    537e:	ldr.w	r8, [r1, ip, lsl #3]
    5382:	str.w	r8, [r4, #8]
    5386:	add.w	r9, r1, ip, lsl #3
    538a:	orrs	r2, r3
    538c:	sub.w	r3, r9, #8
    5390:	str	r3, [r4, #12]
    5392:	str	r2, [r1, #4]
    5394:	str.w	r4, [r1, ip, lsl #3]
    5398:	str.w	r4, [r8, #12]
    539c:	asrs	r3, r0, #2
    539e:	movs	r4, #1
    53a0:	lsls	r4, r3
    53a2:	cmp	r4, r2
    53a4:	bhi.w	54bc <_malloc_r+0x1f0>
    53a8:	tst	r4, r2
    53aa:	bne.n	53ba <_malloc_r+0xee>
    53ac:	bic.w	r0, r0, #3
    53b0:	lsls	r4, r4, #1
    53b2:	tst	r4, r2
    53b4:	add.w	r0, r0, #4
    53b8:	beq.n	53b0 <_malloc_r+0xe4>
    53ba:	add.w	r9, r7, r0, lsl #3
    53be:	mov	ip, r9
    53c0:	mov	r8, r0
    53c2:	ldr.w	r1, [ip, #12]
    53c6:	cmp	ip, r1
    53c8:	bne.n	53da <_malloc_r+0x10e>
    53ca:	b.n	56b4 <_malloc_r+0x3e8>
    53cc:	cmp	r2, #0
    53ce:	bge.w	56d4 <_malloc_r+0x408>
    53d2:	ldr	r1, [r1, #12]
    53d4:	cmp	ip, r1
    53d6:	beq.w	56b4 <_malloc_r+0x3e8>
    53da:	ldr	r3, [r1, #4]
    53dc:	bic.w	r3, r3, #3
    53e0:	subs	r2, r3, r5
    53e2:	cmp	r2, #15
    53e4:	ble.n	53cc <_malloc_r+0x100>
    53e6:	mov	r4, r1
    53e8:	ldr.w	ip, [r1, #12]
    53ec:	ldr.w	r8, [r4, #8]!
    53f0:	adds	r3, r1, r5
    53f2:	orr.w	r5, r5, #1
    53f6:	str	r5, [r1, #4]
    53f8:	orr.w	r1, r2, #1
    53fc:	str.w	ip, [r8, #12]
    5400:	mov	r0, r6
    5402:	str.w	r8, [ip, #8]
    5406:	str	r3, [r7, #20]
    5408:	str	r3, [r7, #16]
    540a:	str.w	lr, [r3, #12]
    540e:	str.w	lr, [r3, #8]
    5412:	str	r1, [r3, #4]
    5414:	str	r2, [r3, r2]
    5416:	bl	58dc <__malloc_unlock>
    541a:	b.n	545c <_malloc_r+0x190>
    541c:	cmp	r1, #16
    541e:	bhi.n	5464 <_malloc_r+0x198>
    5420:	bl	58d8 <__malloc_lock>
    5424:	movs	r5, #16
    5426:	movs	r3, #6
    5428:	movs	r0, #2
    542a:	ldr	r7, [pc, #504]	; (5624 <_malloc_r+0x358>)
    542c:	add.w	r3, r7, r3, lsl #2
    5430:	sub.w	r2, r3, #8
    5434:	ldr	r4, [r3, #4]
    5436:	cmp	r4, r2
    5438:	beq.w	56c6 <_malloc_r+0x3fa>
    543c:	ldr	r3, [r4, #4]
    543e:	ldr	r1, [r4, #12]
    5440:	ldr	r5, [r4, #8]
    5442:	bic.w	r3, r3, #3
    5446:	add	r3, r4
    5448:	mov	r0, r6
    544a:	ldr	r2, [r3, #4]
    544c:	str	r1, [r5, #12]
    544e:	orr.w	r2, r2, #1
    5452:	str	r5, [r1, #8]
    5454:	str	r2, [r3, #4]
    5456:	bl	58dc <__malloc_unlock>
    545a:	adds	r4, #8
    545c:	mov	r0, r4
    545e:	add	sp, #12
    5460:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5464:	movs	r4, #0
    5466:	movs	r3, #12
    5468:	mov	r0, r4
    546a:	str	r3, [r6, #0]
    546c:	add	sp, #12
    546e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5472:	movs	r3, #128	; 0x80
    5474:	mov.w	lr, #64	; 0x40
    5478:	movs	r0, #63	; 0x3f
    547a:	b.n	5310 <_malloc_r+0x44>
    547c:	mov	r0, lr
    547e:	b.n	533c <_malloc_r+0x70>
    5480:	add	r3, r4
    5482:	ldr	r1, [r4, #12]
    5484:	ldr	r2, [r3, #4]
    5486:	ldr	r5, [r4, #8]
    5488:	orr.w	r2, r2, #1
    548c:	str	r1, [r5, #12]
    548e:	mov	r0, r6
    5490:	str	r5, [r1, #8]
    5492:	str	r2, [r3, #4]
    5494:	bl	58dc <__malloc_unlock>
    5498:	adds	r4, #8
    549a:	mov	r0, r4
    549c:	add	sp, #12
    549e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54a2:	add	r3, r4
    54a4:	mov	r0, r6
    54a6:	ldr	r2, [r3, #4]
    54a8:	orr.w	r2, r2, #1
    54ac:	str	r2, [r3, #4]
    54ae:	bl	58dc <__malloc_unlock>
    54b2:	adds	r4, #8
    54b4:	mov	r0, r4
    54b6:	add	sp, #12
    54b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54bc:	ldr	r4, [r7, #8]
    54be:	ldr	r3, [r4, #4]
    54c0:	bic.w	r8, r3, #3
    54c4:	cmp	r8, r5
    54c6:	bcc.n	54d2 <_malloc_r+0x206>
    54c8:	rsb	r3, r5, r8
    54cc:	cmp	r3, #15
    54ce:	bgt.w	55ea <_malloc_r+0x31e>
    54d2:	ldr	r3, [pc, #340]	; (5628 <_malloc_r+0x35c>)
    54d4:	ldr.w	r9, [pc, #352]	; 5638 <_malloc_r+0x36c>
    54d8:	ldr	r2, [r3, #0]
    54da:	ldr.w	r3, [r9]
    54de:	adds	r3, #1
    54e0:	add	r2, r5
    54e2:	add.w	sl, r4, r8
    54e6:	beq.w	57aa <_malloc_r+0x4de>
    54ea:	add.w	r2, r2, #4096	; 0x1000
    54ee:	adds	r2, #15
    54f0:	bic.w	r2, r2, #4080	; 0xff0
    54f4:	bic.w	r2, r2, #15
    54f8:	mov	r1, r2
    54fa:	mov	r0, r6
    54fc:	str	r2, [sp, #4]
    54fe:	bl	58e0 <_sbrk_r>
    5502:	cmp.w	r0, #4294967295
    5506:	mov	fp, r0
    5508:	ldr	r2, [sp, #4]
    550a:	beq.w	57be <_malloc_r+0x4f2>
    550e:	cmp	sl, r0
    5510:	bhi.w	570c <_malloc_r+0x440>
    5514:	ldr	r3, [pc, #276]	; (562c <_malloc_r+0x360>)
    5516:	ldr	r1, [r3, #0]
    5518:	cmp	sl, fp
    551a:	add	r1, r2
    551c:	str	r1, [r3, #0]
    551e:	beq.w	57c8 <_malloc_r+0x4fc>
    5522:	ldr.w	r0, [r9]
    5526:	ldr.w	lr, [pc, #272]	; 5638 <_malloc_r+0x36c>
    552a:	adds	r0, #1
    552c:	ittet	ne
    552e:	rsbne	sl, sl, fp
    5532:	addne	r1, sl
    5534:	streq.w	fp, [lr]
    5538:	strne	r1, [r3, #0]
    553a:	ands.w	r1, fp, #7
    553e:	beq.w	5770 <_malloc_r+0x4a4>
    5542:	rsb	r0, r1, #8
    5546:	rsb	r1, r1, #4096	; 0x1000
    554a:	add	fp, r0
    554c:	adds	r1, #8
    554e:	add	r2, fp
    5550:	ubfx	r2, r2, #0, #12
    5554:	rsb	r9, r2, r1
    5558:	mov	r1, r9
    555a:	mov	r0, r6
    555c:	str	r3, [sp, #4]
    555e:	bl	58e0 <_sbrk_r>
    5562:	adds	r3, r0, #1
    5564:	ldr	r3, [sp, #4]
    5566:	beq.w	57e8 <_malloc_r+0x51c>
    556a:	rsb	r2, fp, r0
    556e:	add	r2, r9
    5570:	orr.w	r2, r2, #1
    5574:	ldr	r1, [r3, #0]
    5576:	str.w	fp, [r7, #8]
    557a:	add	r1, r9
    557c:	cmp	r4, r7
    557e:	str.w	r2, [fp, #4]
    5582:	str	r1, [r3, #0]
    5584:	ldr.w	r9, [pc, #164]	; 562c <_malloc_r+0x360>
    5588:	beq.n	55b8 <_malloc_r+0x2ec>
    558a:	cmp.w	r8, #15
    558e:	bls.w	578c <_malloc_r+0x4c0>
    5592:	ldr	r2, [r4, #4]
    5594:	sub.w	r3, r8, #12
    5598:	bic.w	r3, r3, #7
    559c:	adds	r0, r4, r3
    559e:	and.w	r2, r2, #1
    55a2:	mov.w	lr, #5
    55a6:	orrs	r2, r3
    55a8:	cmp	r3, #15
    55aa:	str	r2, [r4, #4]
    55ac:	str.w	lr, [r0, #4]
    55b0:	str.w	lr, [r0, #8]
    55b4:	bhi.w	57f0 <_malloc_r+0x524>
    55b8:	ldr	r3, [pc, #116]	; (5630 <_malloc_r+0x364>)
    55ba:	ldr	r4, [r7, #8]
    55bc:	ldr	r2, [r3, #0]
    55be:	cmp	r1, r2
    55c0:	it	hi
    55c2:	strhi	r1, [r3, #0]
    55c4:	ldr	r3, [pc, #108]	; (5634 <_malloc_r+0x368>)
    55c6:	ldr	r2, [r3, #0]
    55c8:	cmp	r1, r2
    55ca:	ldr	r2, [r4, #4]
    55cc:	it	hi
    55ce:	strhi	r1, [r3, #0]
    55d0:	bic.w	r2, r2, #3
    55d4:	cmp	r5, r2
    55d6:	sub.w	r3, r2, r5
    55da:	bhi.n	55e0 <_malloc_r+0x314>
    55dc:	cmp	r3, #15
    55de:	bgt.n	55ea <_malloc_r+0x31e>
    55e0:	mov	r0, r6
    55e2:	bl	58dc <__malloc_unlock>
    55e6:	movs	r4, #0
    55e8:	b.n	545c <_malloc_r+0x190>
    55ea:	adds	r2, r4, r5
    55ec:	orr.w	r3, r3, #1
    55f0:	orr.w	r5, r5, #1
    55f4:	str	r5, [r4, #4]
    55f6:	mov	r0, r6
    55f8:	str	r2, [r7, #8]
    55fa:	str	r3, [r2, #4]
    55fc:	bl	58dc <__malloc_unlock>
    5600:	adds	r4, #8
    5602:	mov	r0, r4
    5604:	add	sp, #12
    5606:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    560a:	cmp	r3, #20
    560c:	bls.n	56f2 <_malloc_r+0x426>
    560e:	cmp	r3, #84	; 0x54
    5610:	bhi.w	575c <_malloc_r+0x490>
    5614:	lsrs	r0, r5, #12
    5616:	add.w	lr, r0, #111	; 0x6f
    561a:	mov.w	r3, lr, lsl #1
    561e:	adds	r0, #110	; 0x6e
    5620:	b.n	5310 <_malloc_r+0x44>
    5622:	nop
    5624:	.word	0x1fff90d4
    5628:	.word	0x1fffb3dc
    562c:	.word	0x1fffb3e0
    5630:	.word	0x1fffb3d8
    5634:	.word	0x1fffb3d4
    5638:	.word	0x1fff94e0
    563c:	lsrs	r2, r3, #9
    563e:	cmp	r2, #4
    5640:	bls.n	5700 <_malloc_r+0x434>
    5642:	cmp	r2, #20
    5644:	bhi.w	57ae <_malloc_r+0x4e2>
    5648:	add.w	r1, r2, #92	; 0x5c
    564c:	lsls	r1, r1, #1
    564e:	adds	r2, #91	; 0x5b
    5650:	add.w	ip, r7, r1, lsl #2
    5654:	ldr.w	r1, [r7, r1, lsl #2]
    5658:	ldr.w	r8, [pc, #476]	; 5838 <_malloc_r+0x56c>
    565c:	sub.w	ip, ip, #8
    5660:	cmp	ip, r1
    5662:	beq.w	5776 <_malloc_r+0x4aa>
    5666:	ldr	r2, [r1, #4]
    5668:	bic.w	r2, r2, #3
    566c:	cmp	r3, r2
    566e:	bcs.n	5676 <_malloc_r+0x3aa>
    5670:	ldr	r1, [r1, #8]
    5672:	cmp	ip, r1
    5674:	bne.n	5666 <_malloc_r+0x39a>
    5676:	ldr.w	ip, [r1, #12]
    567a:	ldr	r2, [r7, #4]
    567c:	str.w	ip, [r4, #12]
    5680:	str	r1, [r4, #8]
    5682:	str.w	r4, [ip, #8]
    5686:	str	r4, [r1, #12]
    5688:	b.n	539c <_malloc_r+0xd0>
    568a:	adds	r3, r4, r5
    568c:	orr.w	r7, r2, #1
    5690:	orr.w	r5, r5, #1
    5694:	str	r5, [r4, #4]
    5696:	mov	r0, r6
    5698:	str	r3, [r1, #20]
    569a:	str	r3, [r1, #16]
    569c:	str.w	lr, [r3, #12]
    56a0:	str.w	lr, [r3, #8]
    56a4:	str	r7, [r3, #4]
    56a6:	str	r2, [r3, r2]
    56a8:	adds	r4, #8
    56aa:	bl	58dc <__malloc_unlock>
    56ae:	b.n	545c <_malloc_r+0x190>
    56b0:	ldr	r2, [r1, #4]
    56b2:	b.n	539c <_malloc_r+0xd0>
    56b4:	add.w	r8, r8, #1
    56b8:	tst.w	r8, #3
    56bc:	add.w	ip, ip, #8
    56c0:	bne.w	53c2 <_malloc_r+0xf6>
    56c4:	b.n	5728 <_malloc_r+0x45c>
    56c6:	ldr	r4, [r3, #12]
    56c8:	cmp	r3, r4
    56ca:	it	eq
    56cc:	addeq	r0, #2
    56ce:	beq.w	533c <_malloc_r+0x70>
    56d2:	b.n	543c <_malloc_r+0x170>
    56d4:	add	r3, r1
    56d6:	mov	r4, r1
    56d8:	ldr	r2, [r3, #4]
    56da:	ldr	r1, [r1, #12]
    56dc:	ldr.w	r5, [r4, #8]!
    56e0:	orr.w	r2, r2, #1
    56e4:	str	r2, [r3, #4]
    56e6:	mov	r0, r6
    56e8:	str	r1, [r5, #12]
    56ea:	str	r5, [r1, #8]
    56ec:	bl	58dc <__malloc_unlock>
    56f0:	b.n	545c <_malloc_r+0x190>
    56f2:	add.w	lr, r3, #92	; 0x5c
    56f6:	add.w	r0, r3, #91	; 0x5b
    56fa:	mov.w	r3, lr, lsl #1
    56fe:	b.n	5310 <_malloc_r+0x44>
    5700:	lsrs	r2, r3, #6
    5702:	add.w	r1, r2, #57	; 0x39
    5706:	lsls	r1, r1, #1
    5708:	adds	r2, #56	; 0x38
    570a:	b.n	5650 <_malloc_r+0x384>
    570c:	cmp	r4, r7
    570e:	ldr	r3, [pc, #296]	; (5838 <_malloc_r+0x56c>)
    5710:	beq.w	5514 <_malloc_r+0x248>
    5714:	ldr	r4, [r3, #8]
    5716:	ldr	r2, [r4, #4]
    5718:	bic.w	r2, r2, #3
    571c:	b.n	55d4 <_malloc_r+0x308>
    571e:	ldr.w	r3, [r9], #-8
    5722:	cmp	r9, r3
    5724:	bne.w	582c <_malloc_r+0x560>
    5728:	tst.w	r0, #3
    572c:	add.w	r0, r0, #4294967295
    5730:	bne.n	571e <_malloc_r+0x452>
    5732:	ldr	r3, [r7, #4]
    5734:	bic.w	r3, r3, r4
    5738:	str	r3, [r7, #4]
    573a:	lsls	r4, r4, #1
    573c:	cmp	r4, r3
    573e:	bhi.w	54bc <_malloc_r+0x1f0>
    5742:	cmp	r4, #0
    5744:	beq.w	54bc <_malloc_r+0x1f0>
    5748:	tst	r4, r3
    574a:	mov	r0, r8
    574c:	bne.w	53ba <_malloc_r+0xee>
    5750:	lsls	r4, r4, #1
    5752:	tst	r4, r3
    5754:	add.w	r0, r0, #4
    5758:	beq.n	5750 <_malloc_r+0x484>
    575a:	b.n	53ba <_malloc_r+0xee>
    575c:	cmp.w	r3, #340	; 0x154
    5760:	bhi.n	5794 <_malloc_r+0x4c8>
    5762:	lsrs	r0, r5, #15
    5764:	add.w	lr, r0, #120	; 0x78
    5768:	mov.w	r3, lr, lsl #1
    576c:	adds	r0, #119	; 0x77
    576e:	b.n	5310 <_malloc_r+0x44>
    5770:	mov.w	r1, #4096	; 0x1000
    5774:	b.n	554e <_malloc_r+0x282>
    5776:	movs	r1, #1
    5778:	ldr.w	r3, [r8, #4]
    577c:	asrs	r2, r2, #2
    577e:	lsl.w	r2, r1, r2
    5782:	orrs	r2, r3
    5784:	str.w	r2, [r8, #4]
    5788:	mov	r1, ip
    578a:	b.n	567c <_malloc_r+0x3b0>
    578c:	movs	r3, #1
    578e:	str.w	r3, [fp, #4]
    5792:	b.n	55e0 <_malloc_r+0x314>
    5794:	movw	r2, #1364	; 0x554
    5798:	cmp	r3, r2
    579a:	bhi.n	57de <_malloc_r+0x512>
    579c:	lsrs	r0, r5, #18
    579e:	add.w	lr, r0, #125	; 0x7d
    57a2:	mov.w	r3, lr, lsl #1
    57a6:	adds	r0, #124	; 0x7c
    57a8:	b.n	5310 <_malloc_r+0x44>
    57aa:	adds	r2, #16
    57ac:	b.n	54f8 <_malloc_r+0x22c>
    57ae:	cmp	r2, #84	; 0x54
    57b0:	bhi.n	5800 <_malloc_r+0x534>
    57b2:	lsrs	r2, r3, #12
    57b4:	add.w	r1, r2, #111	; 0x6f
    57b8:	lsls	r1, r1, #1
    57ba:	adds	r2, #110	; 0x6e
    57bc:	b.n	5650 <_malloc_r+0x384>
    57be:	ldr	r4, [r7, #8]
    57c0:	ldr	r2, [r4, #4]
    57c2:	bic.w	r2, r2, #3
    57c6:	b.n	55d4 <_malloc_r+0x308>
    57c8:	ubfx	r0, sl, #0, #12
    57cc:	cmp	r0, #0
    57ce:	bne.w	5522 <_malloc_r+0x256>
    57d2:	add	r2, r8
    57d4:	ldr	r3, [r7, #8]
    57d6:	orr.w	r2, r2, #1
    57da:	str	r2, [r3, #4]
    57dc:	b.n	55b8 <_malloc_r+0x2ec>
    57de:	movs	r3, #254	; 0xfe
    57e0:	mov.w	lr, #127	; 0x7f
    57e4:	movs	r0, #126	; 0x7e
    57e6:	b.n	5310 <_malloc_r+0x44>
    57e8:	movs	r2, #1
    57ea:	mov.w	r9, #0
    57ee:	b.n	5574 <_malloc_r+0x2a8>
    57f0:	add.w	r1, r4, #8
    57f4:	mov	r0, r6
    57f6:	bl	5a80 <_free_r>
    57fa:	ldr.w	r1, [r9]
    57fe:	b.n	55b8 <_malloc_r+0x2ec>
    5800:	cmp.w	r2, #340	; 0x154
    5804:	bhi.n	5812 <_malloc_r+0x546>
    5806:	lsrs	r2, r3, #15
    5808:	add.w	r1, r2, #120	; 0x78
    580c:	lsls	r1, r1, #1
    580e:	adds	r2, #119	; 0x77
    5810:	b.n	5650 <_malloc_r+0x384>
    5812:	movw	r1, #1364	; 0x554
    5816:	cmp	r2, r1
    5818:	bhi.n	5826 <_malloc_r+0x55a>
    581a:	lsrs	r2, r3, #18
    581c:	add.w	r1, r2, #125	; 0x7d
    5820:	lsls	r1, r1, #1
    5822:	adds	r2, #124	; 0x7c
    5824:	b.n	5650 <_malloc_r+0x384>
    5826:	movs	r1, #254	; 0xfe
    5828:	movs	r2, #126	; 0x7e
    582a:	b.n	5650 <_malloc_r+0x384>
    582c:	ldr	r3, [r7, #4]
    582e:	b.n	573a <_malloc_r+0x46e>
    5830:	lsrs	r0, r5, #3
    5832:	adds	r3, r0, #1
    5834:	lsls	r3, r3, #1
    5836:	b.n	542a <_malloc_r+0x15e>
    5838:	.word	0x1fff90d4

0000583c <memset>:
    583c:	push	{r4, r5, r6}
    583e:	lsls	r4, r0, #30
    5840:	beq.n	58d0 <memset+0x94>
    5842:	subs	r4, r2, #1
    5844:	cmp	r2, #0
    5846:	beq.n	58cc <memset+0x90>
    5848:	uxtb	r5, r1
    584a:	mov	r3, r0
    584c:	b.n	5854 <memset+0x18>
    584e:	subs	r2, r4, #1
    5850:	cbz	r4, 58cc <memset+0x90>
    5852:	mov	r4, r2
    5854:	strb.w	r5, [r3], #1
    5858:	lsls	r2, r3, #30
    585a:	bne.n	584e <memset+0x12>
    585c:	cmp	r4, #3
    585e:	bls.n	58be <memset+0x82>
    5860:	uxtb	r5, r1
    5862:	orr.w	r5, r5, r5, lsl #8
    5866:	cmp	r4, #15
    5868:	orr.w	r5, r5, r5, lsl #16
    586c:	bls.n	58a2 <memset+0x66>
    586e:	add.w	r2, r3, #16
    5872:	mov	r6, r4
    5874:	subs	r6, #16
    5876:	cmp	r6, #15
    5878:	str.w	r5, [r2, #-16]
    587c:	str.w	r5, [r2, #-12]
    5880:	str.w	r5, [r2, #-8]
    5884:	str.w	r5, [r2, #-4]
    5888:	add.w	r2, r2, #16
    588c:	bhi.n	5874 <memset+0x38>
    588e:	sub.w	r2, r4, #16
    5892:	bic.w	r2, r2, #15
    5896:	and.w	r4, r4, #15
    589a:	adds	r2, #16
    589c:	cmp	r4, #3
    589e:	add	r3, r2
    58a0:	bls.n	58be <memset+0x82>
    58a2:	mov	r6, r3
    58a4:	mov	r2, r4
    58a6:	subs	r2, #4
    58a8:	cmp	r2, #3
    58aa:	str.w	r5, [r6], #4
    58ae:	bhi.n	58a6 <memset+0x6a>
    58b0:	subs	r2, r4, #4
    58b2:	bic.w	r2, r2, #3
    58b6:	adds	r2, #4
    58b8:	add	r3, r2
    58ba:	and.w	r4, r4, #3
    58be:	cbz	r4, 58cc <memset+0x90>
    58c0:	uxtb	r1, r1
    58c2:	add	r4, r3
    58c4:	strb.w	r1, [r3], #1
    58c8:	cmp	r3, r4
    58ca:	bne.n	58c4 <memset+0x88>
    58cc:	pop	{r4, r5, r6}
    58ce:	bx	lr
    58d0:	mov	r4, r2
    58d2:	mov	r3, r0
    58d4:	b.n	585c <memset+0x20>
    58d6:	nop

000058d8 <__malloc_lock>:
    58d8:	bx	lr
    58da:	nop

000058dc <__malloc_unlock>:
    58dc:	bx	lr
    58de:	nop

000058e0 <_sbrk_r>:
    58e0:	push	{r3, r4, r5, lr}
    58e2:	ldr	r4, [pc, #28]	; (5900 <_sbrk_r+0x20>)
    58e4:	movs	r3, #0
    58e6:	mov	r5, r0
    58e8:	mov	r0, r1
    58ea:	str	r3, [r4, #0]
    58ec:	bl	3084 <_sbrk>
    58f0:	adds	r3, r0, #1
    58f2:	beq.n	58f6 <_sbrk_r+0x16>
    58f4:	pop	{r3, r4, r5, pc}
    58f6:	ldr	r3, [r4, #0]
    58f8:	cmp	r3, #0
    58fa:	beq.n	58f4 <_sbrk_r+0x14>
    58fc:	str	r3, [r5, #0]
    58fe:	pop	{r3, r4, r5, pc}
    5900:	.word	0x1fffb41c

00005904 <__register_exitproc>:
    5904:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5908:	ldr	r4, [pc, #148]	; (59a0 <__register_exitproc+0x9c>)
    590a:	ldr	r5, [r4, #0]
    590c:	ldr.w	r4, [r5, #328]	; 0x148
    5910:	mov	r6, r0
    5912:	mov	r8, r1
    5914:	mov	sl, r2
    5916:	mov	r9, r3
    5918:	cbz	r4, 598c <__register_exitproc+0x88>
    591a:	ldr	r0, [r4, #4]
    591c:	cmp	r0, #31
    591e:	bgt.n	5950 <__register_exitproc+0x4c>
    5920:	adds	r3, r0, #1
    5922:	cbz	r6, 5942 <__register_exitproc+0x3e>
    5924:	add.w	r5, r4, r0, lsl #2
    5928:	movs	r2, #1
    592a:	str.w	sl, [r5, #136]	; 0x88
    592e:	ldr.w	r1, [r4, #392]	; 0x188
    5932:	lsls	r2, r0
    5934:	orrs	r1, r2
    5936:	cmp	r6, #2
    5938:	str.w	r1, [r4, #392]	; 0x188
    593c:	str.w	r9, [r5, #264]	; 0x108
    5940:	beq.n	5980 <__register_exitproc+0x7c>
    5942:	adds	r0, #2
    5944:	str	r3, [r4, #4]
    5946:	str.w	r8, [r4, r0, lsl #2]
    594a:	movs	r0, #0
    594c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5950:	ldr	r3, [pc, #80]	; (59a4 <__register_exitproc+0xa0>)
    5952:	cbz	r3, 5996 <__register_exitproc+0x92>
    5954:	mov.w	r0, #400	; 0x190
    5958:	bl	52ac <malloc>
    595c:	mov	r4, r0
    595e:	cbz	r0, 5996 <__register_exitproc+0x92>
    5960:	ldr.w	r3, [r5, #328]	; 0x148
    5964:	movs	r7, #0
    5966:	stmia.w	r0, {r3, r7}
    596a:	str.w	r4, [r5, #328]	; 0x148
    596e:	mov	r0, r7
    5970:	movs	r3, #1
    5972:	str.w	r7, [r4, #392]	; 0x188
    5976:	str.w	r7, [r4, #396]	; 0x18c
    597a:	cmp	r6, #0
    597c:	beq.n	5942 <__register_exitproc+0x3e>
    597e:	b.n	5924 <__register_exitproc+0x20>
    5980:	ldr.w	r1, [r4, #396]	; 0x18c
    5984:	orrs	r2, r1
    5986:	str.w	r2, [r4, #396]	; 0x18c
    598a:	b.n	5942 <__register_exitproc+0x3e>
    598c:	add.w	r4, r5, #332	; 0x14c
    5990:	str.w	r4, [r5, #328]	; 0x148
    5994:	b.n	591a <__register_exitproc+0x16>
    5996:	mov.w	r0, #4294967295
    599a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    599e:	nop
    59a0:	.word	0x00006110
    59a4:	.word	0x000052ad

000059a8 <register_fini>:
    59a8:	ldr	r3, [pc, #8]	; (59b4 <register_fini+0xc>)
    59aa:	cbz	r3, 59b2 <register_fini+0xa>
    59ac:	ldr	r0, [pc, #8]	; (59b8 <register_fini+0x10>)
    59ae:	b.w	a4c <atexit>
    59b2:	bx	lr
    59b4:	.word	0x00000000
    59b8:	.word	0x000059bd

000059bc <__libc_fini_array>:
    59bc:	push	{r3, r4, r5, lr}
    59be:	ldr	r5, [pc, #28]	; (59dc <__libc_fini_array+0x20>)
    59c0:	ldr	r4, [pc, #28]	; (59e0 <__libc_fini_array+0x24>)
    59c2:	subs	r4, r5, r4
    59c4:	asrs	r4, r4, #2
    59c6:	beq.n	59d4 <__libc_fini_array+0x18>
    59c8:	subs	r4, #1
    59ca:	ldr.w	r3, [r5, #-4]!
    59ce:	blx	r3
    59d0:	cmp	r4, #0
    59d2:	bne.n	59c8 <__libc_fini_array+0xc>
    59d4:	ldmia.w	sp!, {r3, r4, r5, lr}
    59d8:	b.w	6170 <__init_array_end>
	...

000059e4 <_malloc_trim_r>:
    59e4:	push	{r3, r4, r5, r6, r7, lr}
    59e6:	ldr	r7, [pc, #140]	; (5a74 <_malloc_trim_r+0x90>)
    59e8:	mov	r4, r1
    59ea:	mov	r6, r0
    59ec:	bl	58d8 <__malloc_lock>
    59f0:	ldr	r3, [r7, #8]
    59f2:	ldr	r5, [r3, #4]
    59f4:	bic.w	r5, r5, #3
    59f8:	subs	r1, r5, r4
    59fa:	addw	r1, r1, #4079	; 0xfef
    59fe:	bic.w	r1, r1, #4080	; 0xff0
    5a02:	bic.w	r1, r1, #15
    5a06:	sub.w	r4, r1, #4096	; 0x1000
    5a0a:	cmp.w	r4, #4096	; 0x1000
    5a0e:	blt.n	5a20 <_malloc_trim_r+0x3c>
    5a10:	movs	r1, #0
    5a12:	mov	r0, r6
    5a14:	bl	58e0 <_sbrk_r>
    5a18:	ldr	r3, [r7, #8]
    5a1a:	add	r3, r5
    5a1c:	cmp	r0, r3
    5a1e:	beq.n	5a2a <_malloc_trim_r+0x46>
    5a20:	mov	r0, r6
    5a22:	bl	58dc <__malloc_unlock>
    5a26:	movs	r0, #0
    5a28:	pop	{r3, r4, r5, r6, r7, pc}
    5a2a:	negs	r1, r4
    5a2c:	mov	r0, r6
    5a2e:	bl	58e0 <_sbrk_r>
    5a32:	adds	r0, #1
    5a34:	beq.n	5a52 <_malloc_trim_r+0x6e>
    5a36:	ldr	r3, [pc, #64]	; (5a78 <_malloc_trim_r+0x94>)
    5a38:	ldr	r2, [r7, #8]
    5a3a:	ldr	r1, [r3, #0]
    5a3c:	subs	r5, r5, r4
    5a3e:	orr.w	r5, r5, #1
    5a42:	mov	r0, r6
    5a44:	subs	r1, r1, r4
    5a46:	str	r5, [r2, #4]
    5a48:	str	r1, [r3, #0]
    5a4a:	bl	58dc <__malloc_unlock>
    5a4e:	movs	r0, #1
    5a50:	pop	{r3, r4, r5, r6, r7, pc}
    5a52:	movs	r1, #0
    5a54:	mov	r0, r6
    5a56:	bl	58e0 <_sbrk_r>
    5a5a:	ldr	r2, [r7, #8]
    5a5c:	subs	r3, r0, r2
    5a5e:	cmp	r3, #15
    5a60:	ble.n	5a20 <_malloc_trim_r+0x3c>
    5a62:	ldr	r4, [pc, #24]	; (5a7c <_malloc_trim_r+0x98>)
    5a64:	ldr	r1, [pc, #16]	; (5a78 <_malloc_trim_r+0x94>)
    5a66:	ldr	r4, [r4, #0]
    5a68:	orr.w	r3, r3, #1
    5a6c:	subs	r0, r0, r4
    5a6e:	str	r3, [r2, #4]
    5a70:	str	r0, [r1, #0]
    5a72:	b.n	5a20 <_malloc_trim_r+0x3c>
    5a74:	.word	0x1fff90d4
    5a78:	.word	0x1fffb3e0
    5a7c:	.word	0x1fff94e0

00005a80 <_free_r>:
    5a80:	cmp	r1, #0
    5a82:	beq.n	5b10 <_free_r+0x90>
    5a84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a88:	mov	r5, r1
    5a8a:	mov	r8, r0
    5a8c:	bl	58d8 <__malloc_lock>
    5a90:	ldr.w	r7, [r5, #-4]
    5a94:	ldr	r1, [pc, #424]	; (5c40 <_free_r+0x1c0>)
    5a96:	bic.w	r3, r7, #1
    5a9a:	sub.w	r4, r5, #8
    5a9e:	adds	r2, r4, r3
    5aa0:	ldr	r6, [r1, #8]
    5aa2:	ldr	r0, [r2, #4]
    5aa4:	cmp	r2, r6
    5aa6:	bic.w	r0, r0, #3
    5aaa:	beq.n	5b72 <_free_r+0xf2>
    5aac:	lsls	r6, r7, #31
    5aae:	str	r0, [r2, #4]
    5ab0:	bmi.n	5aca <_free_r+0x4a>
    5ab2:	ldr.w	r7, [r5, #-8]
    5ab6:	subs	r4, r4, r7
    5ab8:	add.w	lr, r1, #8
    5abc:	ldr	r5, [r4, #8]
    5abe:	cmp	r5, lr
    5ac0:	add	r3, r7
    5ac2:	beq.n	5ba4 <_free_r+0x124>
    5ac4:	ldr	r7, [r4, #12]
    5ac6:	str	r7, [r5, #12]
    5ac8:	str	r5, [r7, #8]
    5aca:	adds	r5, r2, r0
    5acc:	ldr	r5, [r5, #4]
    5ace:	lsls	r5, r5, #31
    5ad0:	bpl.n	5b58 <_free_r+0xd8>
    5ad2:	orr.w	r2, r3, #1
    5ad6:	str	r2, [r4, #4]
    5ad8:	str	r3, [r4, r3]
    5ada:	cmp.w	r3, #512	; 0x200
    5ade:	bcs.n	5b12 <_free_r+0x92>
    5ae0:	lsrs	r3, r3, #3
    5ae2:	adds	r2, r3, #1
    5ae4:	ldr	r5, [r1, #4]
    5ae6:	ldr.w	r7, [r1, r2, lsl #3]
    5aea:	str	r7, [r4, #8]
    5aec:	movs	r0, #1
    5aee:	asrs	r3, r3, #2
    5af0:	lsl.w	r3, r0, r3
    5af4:	add.w	r0, r1, r2, lsl #3
    5af8:	orrs	r5, r3
    5afa:	subs	r0, #8
    5afc:	str	r0, [r4, #12]
    5afe:	str	r5, [r1, #4]
    5b00:	str.w	r4, [r1, r2, lsl #3]
    5b04:	str	r4, [r7, #12]
    5b06:	mov	r0, r8
    5b08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b0c:	b.w	58dc <__malloc_unlock>
    5b10:	bx	lr
    5b12:	lsrs	r2, r3, #9
    5b14:	cmp	r2, #4
    5b16:	bhi.n	5bc0 <_free_r+0x140>
    5b18:	lsrs	r2, r3, #6
    5b1a:	add.w	r7, r2, #57	; 0x39
    5b1e:	lsls	r7, r7, #1
    5b20:	add.w	r5, r2, #56	; 0x38
    5b24:	add.w	r0, r1, r7, lsl #2
    5b28:	ldr.w	r2, [r1, r7, lsl #2]
    5b2c:	ldr	r1, [pc, #272]	; (5c40 <_free_r+0x1c0>)
    5b2e:	subs	r0, #8
    5b30:	cmp	r0, r2
    5b32:	beq.n	5bd0 <_free_r+0x150>
    5b34:	ldr	r1, [r2, #4]
    5b36:	bic.w	r1, r1, #3
    5b3a:	cmp	r3, r1
    5b3c:	bcs.n	5b44 <_free_r+0xc4>
    5b3e:	ldr	r2, [r2, #8]
    5b40:	cmp	r0, r2
    5b42:	bne.n	5b34 <_free_r+0xb4>
    5b44:	ldr	r0, [r2, #12]
    5b46:	str	r0, [r4, #12]
    5b48:	str	r2, [r4, #8]
    5b4a:	str	r4, [r0, #8]
    5b4c:	str	r4, [r2, #12]
    5b4e:	mov	r0, r8
    5b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b54:	b.w	58dc <__malloc_unlock>
    5b58:	ldr	r5, [r2, #8]
    5b5a:	ldr	r7, [pc, #232]	; (5c44 <_free_r+0x1c4>)
    5b5c:	cmp	r5, r7
    5b5e:	add	r3, r0
    5b60:	beq.n	5be2 <_free_r+0x162>
    5b62:	ldr	r0, [r2, #12]
    5b64:	str	r0, [r5, #12]
    5b66:	orr.w	r2, r3, #1
    5b6a:	str	r5, [r0, #8]
    5b6c:	str	r2, [r4, #4]
    5b6e:	str	r3, [r4, r3]
    5b70:	b.n	5ada <_free_r+0x5a>
    5b72:	lsls	r7, r7, #31
    5b74:	add	r3, r0
    5b76:	bmi.n	5b88 <_free_r+0x108>
    5b78:	ldr.w	r2, [r5, #-8]
    5b7c:	subs	r4, r4, r2
    5b7e:	add	r3, r2
    5b80:	ldr	r0, [r4, #8]
    5b82:	ldr	r2, [r4, #12]
    5b84:	str	r2, [r0, #12]
    5b86:	str	r0, [r2, #8]
    5b88:	ldr	r2, [pc, #188]	; (5c48 <_free_r+0x1c8>)
    5b8a:	ldr	r2, [r2, #0]
    5b8c:	orr.w	r0, r3, #1
    5b90:	cmp	r3, r2
    5b92:	str	r0, [r4, #4]
    5b94:	str	r4, [r1, #8]
    5b96:	bcc.n	5b06 <_free_r+0x86>
    5b98:	ldr	r3, [pc, #176]	; (5c4c <_free_r+0x1cc>)
    5b9a:	mov	r0, r8
    5b9c:	ldr	r1, [r3, #0]
    5b9e:	bl	59e4 <_malloc_trim_r>
    5ba2:	b.n	5b06 <_free_r+0x86>
    5ba4:	adds	r1, r2, r0
    5ba6:	ldr	r1, [r1, #4]
    5ba8:	lsls	r1, r1, #31
    5baa:	bmi.n	5c36 <_free_r+0x1b6>
    5bac:	ldr	r1, [r2, #8]
    5bae:	ldr	r2, [r2, #12]
    5bb0:	str	r2, [r1, #12]
    5bb2:	add	r3, r0
    5bb4:	orr.w	r0, r3, #1
    5bb8:	str	r1, [r2, #8]
    5bba:	str	r0, [r4, #4]
    5bbc:	str	r3, [r4, r3]
    5bbe:	b.n	5b06 <_free_r+0x86>
    5bc0:	cmp	r2, #20
    5bc2:	bhi.n	5bf4 <_free_r+0x174>
    5bc4:	add.w	r7, r2, #92	; 0x5c
    5bc8:	lsls	r7, r7, #1
    5bca:	add.w	r5, r2, #91	; 0x5b
    5bce:	b.n	5b24 <_free_r+0xa4>
    5bd0:	asrs	r2, r5, #2
    5bd2:	ldr	r3, [r1, #4]
    5bd4:	movs	r5, #1
    5bd6:	lsl.w	r2, r5, r2
    5bda:	orrs	r3, r2
    5bdc:	str	r3, [r1, #4]
    5bde:	mov	r2, r0
    5be0:	b.n	5b46 <_free_r+0xc6>
    5be2:	orr.w	r2, r3, #1
    5be6:	str	r4, [r1, #20]
    5be8:	str	r4, [r1, #16]
    5bea:	str	r5, [r4, #12]
    5bec:	str	r5, [r4, #8]
    5bee:	str	r2, [r4, #4]
    5bf0:	str	r3, [r4, r3]
    5bf2:	b.n	5b06 <_free_r+0x86>
    5bf4:	cmp	r2, #84	; 0x54
    5bf6:	bhi.n	5c06 <_free_r+0x186>
    5bf8:	lsrs	r2, r3, #12
    5bfa:	add.w	r7, r2, #111	; 0x6f
    5bfe:	lsls	r7, r7, #1
    5c00:	add.w	r5, r2, #110	; 0x6e
    5c04:	b.n	5b24 <_free_r+0xa4>
    5c06:	cmp.w	r2, #340	; 0x154
    5c0a:	bhi.n	5c1a <_free_r+0x19a>
    5c0c:	lsrs	r2, r3, #15
    5c0e:	add.w	r7, r2, #120	; 0x78
    5c12:	lsls	r7, r7, #1
    5c14:	add.w	r5, r2, #119	; 0x77
    5c18:	b.n	5b24 <_free_r+0xa4>
    5c1a:	movw	r0, #1364	; 0x554
    5c1e:	cmp	r2, r0
    5c20:	bhi.n	5c30 <_free_r+0x1b0>
    5c22:	lsrs	r2, r3, #18
    5c24:	add.w	r7, r2, #125	; 0x7d
    5c28:	lsls	r7, r7, #1
    5c2a:	add.w	r5, r2, #124	; 0x7c
    5c2e:	b.n	5b24 <_free_r+0xa4>
    5c30:	movs	r7, #254	; 0xfe
    5c32:	movs	r5, #126	; 0x7e
    5c34:	b.n	5b24 <_free_r+0xa4>
    5c36:	orr.w	r2, r3, #1
    5c3a:	str	r2, [r4, #4]
    5c3c:	str	r3, [r4, r3]
    5c3e:	b.n	5b06 <_free_r+0x86>
    5c40:	.word	0x1fff90d4
    5c44:	.word	0x1fff90dc
    5c48:	.word	0x1fff94dc
    5c4c:	.word	0x1fffb3dc

00005c50 <vtable for AudioStream>:
	...
    5c58:	.0..

00005c5c <vtable for ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>>:
	...
    5c64:	m...Unable to ac
    5c74:	cess the SD card
    5c84:	....Port Opened.
    5c94:	....Initializing
    5ca4:	....Successfully
    5cb4:	 Initialized....
    5cc4:	RAIN.WAV....Inte
    5cd4:	nsity +.Intensit
    5ce4:	y -.Start Thunde
    5cf4:	r...Repeat..""\\
    5d04:	b.f.n.r.t...meth
    5d14:	od..null....fade
    5d24:	ToRGB...R...true
    5d34:	....G...Delay...
    5d44:	fadeToHSV...H...
    5d54:	S...setToRGB....
    5d64:	set to RGB value
    5d74:	....setToHSV....
    5d84:	set to HSV value
    5d94:	....rainbow.Rain
    5da4:	bow.flash...grou
    5db4:	pFlash..Group...
    5dc4:	Direction...rdmG
    5dd4:	roupFlash...rain
    5de4:	....thunder.ca n
    5df4:	e marche pas ^^.
    5e04:	THUNDER.WAV.....
    5e14:	................
    5e24:	................
    5e34:	................
    5e44:	............

00005e50 <vtable for AudioControlSGTL5000>:
	...
    5e58:	................
    5e68:	....

00005e6c <vtable for AudioMixer4>:
	...
    5e74:	....

00005e78 <vtable for AudioPlaySdWav>:
	...
    5e80:	....

00005e84 <vtable for AudioOutputI2S>:
	...
    5e8c:	....

00005e90 <TwoWire::i2c0_hardware>:
    5e90:	4..@@...........
    5ea0:	................

00005eb0 <TwoWire::i2c1_hardware>:
    5eb0:	4..@............
    5ec0:	................

00005ed0 <vtable for TwoWire>:
	...
    5ed8:	........].......
    5ee8:	a...m.......

00005ef4 <SPIClass::spi0_hardware>:
    5ef4:	<..@............
    5f04:	....q...........
    5f14:	........@.......
    5f24:	....@...........
    5f34:	................
    5f44:	................
    5f54:	................
    5f64:	........

00005f6c <vtable for File>:
	...
    5f74:	........].......
    5f84:	....-...Y...

00005f90 <vtable for SdFile>:
	...
    5f98:	.&...E..].......

00005fa8 <digital_pin_to_info_PGM>:
    5fa8:	@..C@..@D..CD..@
    5fb8:	...C...@0..C0..@
    5fc8:	4..C4..@...C...@
    5fd8:	...C...@...C...@
    5fe8:	...C...@...C...@
    5ff8:	...C...@...C...@
    6008:	...C...@...C...@
    6018:	...C...@...C...@
    6028:	...C...@...C...@
    6038:	...C...@...C...@
    6048:	...C...@...C...@
    6058:	...C...@...C...@
    6068:	...C...@L..CL..@
    6078:	. .C...@$..C$..@
    6088:	 ..C ..@(..C(..@
    6098:	,..C,..@. .C...@
    60a8:	H..CH..@...C...@

000060b8 <usb_endpoint_config_table>:
    60b8:	....

000060bc <usb_descriptor_list>:
    60bc:	................
    60cc:	,...C...........
    60dc:	................
    60ec:	....p...........
    60fc:	................
    610c:	....

00006110 <_global_impure_ptr>:
    6110:	....

00006114 <_init>:
    6114:	push	{r3, r4, r5, r6, r7, lr}
    6116:	nop
    6118:	pop	{r3, r4, r5, r6, r7}
    611a:	pop	{r3}
    611c:	mov	lr, r3
    611e:	bx	lr

00006120 <__init_array_start>:
    6120:	.word	0x000059a9

00006124 <__frame_dummy_init_array_entry>:
    6124:	5.......Q...u...
    6134:	................
    6144:	....A...I...a...
    6154:	y...........-...
    6164:	E.......A+..

Disassembly of section .fini:

00006170 <_fini>:
    6170:	push	{r3, r4, r5, r6, r7, lr}
    6172:	nop

Disassembly of section .data:

1fff8920 <port_E_isr>:
#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
PORT_ISR_FUNCTION_CLZ(E)
1fff8920:	push	{r3, r4, r5, lr}
1fff8922:	ldr	r3, [pc, #32]	; (1fff8944 <port_E_isr+0x24>)
1fff8924:	ldr	r4, [r3, #0]
1fff8926:	str	r4, [r3, #0]
1fff8928:	cbz	r4, 1fff8940 <port_E_isr+0x20>
1fff892a:	ldr	r5, [pc, #28]	; (1fff8948 <port_E_isr+0x28>)
1fff892c:	rbit	r3, r4
1fff8930:	clz	r3, r3
1fff8934:	ldr.w	r3, [r5, r3, lsl #2]
1fff8938:	blx	r3
1fff893a:	subs	r3, r4, #1
1fff893c:	ands	r4, r3
1fff893e:	bne.n	1fff892c <port_E_isr+0xc>
1fff8940:	pop	{r3, r4, r5, pc}
1fff8942:	nop
1fff8944:	.word	0x4004d0a0
1fff8948:	.word	0x1fff8bf4

1fff894c <port_D_isr>:

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
1fff894c:	push	{r3, r4, r5, lr}
1fff894e:	ldr	r3, [pc, #32]	; (1fff8970 <port_D_isr+0x24>)
1fff8950:	ldr	r4, [r3, #0]
1fff8952:	str	r4, [r3, #0]
1fff8954:	cbz	r4, 1fff896c <port_D_isr+0x20>
1fff8956:	ldr	r5, [pc, #28]	; (1fff8974 <port_D_isr+0x28>)
1fff8958:	rbit	r3, r4
1fff895c:	clz	r3, r3
1fff8960:	ldr.w	r3, [r5, r3, lsl #2]
1fff8964:	blx	r3
1fff8966:	subs	r3, r4, #1
1fff8968:	ands	r4, r3
1fff896a:	bne.n	1fff8958 <port_D_isr+0xc>
1fff896c:	pop	{r3, r4, r5, pc}
1fff896e:	nop
1fff8970:	.word	0x4004c0a0
1fff8974:	.word	0x1fff8bd4

1fff8978 <port_C_isr>:
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
1fff8978:	push	{r3, r4, r5, lr}
1fff897a:	ldr	r3, [pc, #32]	; (1fff899c <port_C_isr+0x24>)
1fff897c:	ldr	r4, [r3, #0]
1fff897e:	str	r4, [r3, #0]
1fff8980:	cbz	r4, 1fff8998 <port_C_isr+0x20>
1fff8982:	ldr	r5, [pc, #28]	; (1fff89a0 <port_C_isr+0x28>)
1fff8984:	rbit	r3, r4
1fff8988:	clz	r3, r3
1fff898c:	ldr.w	r3, [r5, r3, lsl #2]
1fff8990:	blx	r3
1fff8992:	subs	r3, r4, #1
1fff8994:	ands	r4, r3
1fff8996:	bne.n	1fff8984 <port_C_isr+0xc>
1fff8998:	pop	{r3, r4, r5, pc}
1fff899a:	nop
1fff899c:	.word	0x4004b0a0
1fff89a0:	.word	0x1fff8ba4

1fff89a4 <port_B_isr>:
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
1fff89a4:	push	{r3, r4, r5, lr}
1fff89a6:	ldr	r3, [pc, #32]	; (1fff89c8 <port_B_isr+0x24>)
1fff89a8:	ldr	r4, [r3, #0]
1fff89aa:	str	r4, [r3, #0]
1fff89ac:	cbz	r4, 1fff89c4 <port_B_isr+0x20>
1fff89ae:	ldr	r5, [pc, #28]	; (1fff89cc <port_B_isr+0x28>)
1fff89b0:	rbit	r3, r4
1fff89b4:	clz	r3, r3
1fff89b8:	ldr.w	r3, [r5, r3, lsl #2]
1fff89bc:	blx	r3
1fff89be:	subs	r3, r4, #1
1fff89c0:	ands	r4, r3
1fff89c2:	bne.n	1fff89b0 <port_B_isr+0xc>
1fff89c4:	pop	{r3, r4, r5, pc}
1fff89c6:	nop
1fff89c8:	.word	0x4004a0a0
1fff89cc:	.word	0x1fff8b54

1fff89d0 <port_A_isr>:
		}                                                     \
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
1fff89d0:	push	{r3, r4, r5, lr}
1fff89d2:	ldr	r3, [pc, #32]	; (1fff89f4 <port_A_isr+0x24>)
1fff89d4:	ldr	r4, [r3, #0]
1fff89d6:	str	r4, [r3, #0]
1fff89d8:	cbz	r4, 1fff89f0 <port_A_isr+0x20>
1fff89da:	ldr	r5, [pc, #28]	; (1fff89f8 <port_A_isr+0x28>)
1fff89dc:	rbit	r3, r4
1fff89e0:	clz	r3, r3
1fff89e4:	ldr.w	r3, [r5, r3, lsl #2]
1fff89e8:	blx	r3
1fff89ea:	subs	r3, r4, #1
1fff89ec:	ands	r4, r3
1fff89ee:	bne.n	1fff89dc <port_A_isr+0xc>
1fff89f0:	pop	{r3, r4, r5, pc}
1fff89f2:	nop
1fff89f4:	.word	0x400490a0
1fff89f8:	.word	0x1fff8b1c

1fff89fc <__dso_handle>:
1fff89fc:	....

1fff8a00 <Wire>:
1fff8a00:	.^..............
1fff8a10:	.`.@.^..........
	...

1fff8a6c <Wire1>:
1fff8a6c:	.^..............
1fff8a7c:	.p.@.^..........
	...

1fff8ad8 <SPI>:
1fff8ad8:	...@.^..........
	...

1fff8b10 <SdVolume::cacheBlockNumber_>:
1fff8b10:	....

1fff8b14 <analog_config_bits>:
1fff8b14:	.

1fff8b15 <analog_num_average>:
1fff8b15:	...

1fff8b18 <__brkval>:
1fff8b18:	 ...

1fff8b1c <isr_table_portA>:
1fff8b1c:	.0...0...0...0..
1fff8b2c:	.0...0...0...0..
1fff8b3c:	.0...0...0...0..
1fff8b4c:	.0...0..

1fff8b54 <isr_table_portB>:
1fff8b54:	.0...0...0...0..
1fff8b64:	.0...0...0...0..
1fff8b74:	.0...0...0...0..
1fff8b84:	.0...0...0...0..
1fff8b94:	.0...0...0...0..

1fff8ba4 <isr_table_portC>:
1fff8ba4:	.0...0...0...0..
1fff8bb4:	.0...0...0...0..
1fff8bc4:	.0...0...0...0..

1fff8bd4 <isr_table_portD>:
1fff8bd4:	.0...0...0...0..
1fff8be4:	.0...0...0...0..

1fff8bf4 <isr_table_portE>:
1fff8bf4:	.0...0..

1fff8bfc <usb_buffer_available>:
1fff8bfc:	....

1fff8c00 <device_descriptor>:
1fff8c00:	.......@....u...
1fff8c10:	....

1fff8c14 <usb_string_manufacturer_name_default>:
1fff8c14:	..T.e.e.n.s.y.d.
1fff8c24:	u.i.n.o.

1fff8c2c <config_descriptor>:
1fff8c2c:	..C.....2.......
1fff8c3c:	...$....$....$..
1fff8c4c:	.$.........@....
1fff8c5c:	.........@......
1fff8c6c:	@...

1fff8c70 <usb_string_product_name_default>:
1fff8c70:	..U.S.B. .S.e.r.
1fff8c80:	i.a.l...

1fff8c88 <string0>:
1fff8c88:	....

1fff8c8c <usb_string_serial_number_default>:
1fff8c8c:	................
	...

1fff8ca8 <impure_data>:
1fff8ca8:	............d...
	...
1fff8d50:	.........3..4.m.
1fff8d60:	................
	...

1fff90d0 <_impure_ptr>:
1fff90d0:	....

1fff90d4 <__malloc_av_>:
	...
1fff90dc:	................
1fff90ec:	................
1fff90fc:	................
1fff910c:	................
1fff911c:	................
1fff912c:	$...$...,...,...
1fff913c:	4...4...<...<...
1fff914c:	D...D...L...L...
1fff915c:	T...T...\...\...
1fff916c:	d...d...l...l...
1fff917c:	t...t...|...|...
1fff918c:	................
1fff919c:	................
1fff91ac:	................
1fff91bc:	................
1fff91cc:	................
1fff91dc:	................
1fff91ec:	................
1fff91fc:	................
1fff920c:	................
1fff921c:	................
1fff922c:	$...$...,...,...
1fff923c:	4...4...<...<...
1fff924c:	D...D...L...L...
1fff925c:	T...T...\...\...
1fff926c:	d...d...l...l...
1fff927c:	t...t...|...|...
1fff928c:	................
1fff929c:	................
1fff92ac:	................
1fff92bc:	................
1fff92cc:	................
1fff92dc:	................
1fff92ec:	................
1fff92fc:	................
1fff930c:	................
1fff931c:	................
1fff932c:	$...$...,...,...
1fff933c:	4...4...<...<...
1fff934c:	D...D...L...L...
1fff935c:	T...T...\...\...
1fff936c:	d...d...l...l...
1fff937c:	t...t...|...|...
1fff938c:	................
1fff939c:	................
1fff93ac:	................
1fff93bc:	................
1fff93cc:	................
1fff93dc:	................
1fff93ec:	................
1fff93fc:	................
1fff940c:	................
1fff941c:	................
1fff942c:	$...$...,...,...
1fff943c:	4...4...<...<...
1fff944c:	D...D...L...L...
1fff945c:	T...T...\...\...
1fff946c:	d...d...l...l...
1fff947c:	t...t...|...|...
1fff948c:	................
1fff949c:	................
1fff94ac:	................
1fff94bc:	................
1fff94cc:	................

1fff94dc <__malloc_trim_threshold>:
1fff94dc:	....

1fff94e0 <__malloc_sbrk_base>:
1fff94e0:	....
