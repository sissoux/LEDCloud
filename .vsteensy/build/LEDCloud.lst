
.vsteensy/build/LEDCloud.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0000cd64 l    d  .fini	00000000 .fini
1fff8000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff8200 l    d  .dmabuffers	00000000 .dmabuffers
1fff8fbc l    d  .usbbuffers	00000000 .usbbuffers
1fff9320 l    d  .data	00000000 .data
1fff9f4c l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00009124 l     F .text	0000000c startup_default_early_hook
00009130 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff9f4c l       .bss	00000000 completed.8603
00000434 l     F .text	00000000 frame_dummy
1fff9f50 l       .bss	00000000 object.8608
0000cd18 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000ad0 l       .text	00000000 L_2601_delayMicroseconds
00001030 l       .text	00000000 L_4650_delayMicroseconds
00001590 l       .text	00000000 L_6699_delayMicroseconds
00001af0 l       .text	00000000 L_8748_delayMicroseconds
00002df4 l     F .text	000009bc serialParse() [clone .part.25]
00003844 l     F .text	000003ac _GLOBAL__sub_I_IRcmdCommands
1fff8200 l     O .dmabuffers	00000820 init_Player()::data
00000000 l    df *ABS*	00000000 Thunder.cpp
00000000 l    df *ABS*	00000000 StripCommand.cpp
00000000 l    df *ABS*	00000000 StripLED.cpp
00000000 l    df *ABS*	00000000 output_pwm.cpp
000046e0 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
000046f8 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 control_sgtl5000.cpp
00000000 l    df *ABS*	00000000 mixer.cpp
00000000 l    df *ABS*	00000000 output_adat.cpp
00004a34 l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_adc.cpp
00004a4c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 output_dac.cpp
00004a64 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00004a7c l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00004aac l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 play_sd_wav.cpp
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
000051e8 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00005200 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00005218 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 input_pdm.cpp
00005230 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_tdm.cpp
00005248 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 output_i2s.cpp
000055cc l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
1fff8a20 l     O .dmabuffers	00000200 i2s_tx_buffer
00000000 l    df *ABS*	00000000 output_spdif.cpp
000055e4 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 FastLED.cpp
00005768 l     F .text	00000018 _GLOBAL__sub_I_pSmartMatrix
1fffb89c l     O .bss	00000004 CFastLED::countFPS(int)::br
1fffb8a0 l     O .bss	00000004 lastshow
1fffb8a4 l     O .bss	00000004 CFastLED::countFPS(int)::lastframe
00000000 l    df *ABS*	00000000 colorutils.cpp
00000000 l    df *ABS*	00000000 hsv2rgb.cpp
00000000 l    df *ABS*	00000000 ir_Aiwa.cpp
00000000 l    df *ABS*	00000000 ir_JVC.cpp
00000000 l    df *ABS*	00000000 ir_Mitsubishi.cpp
00000000 l    df *ABS*	00000000 ir_Denon.cpp
00000000 l    df *ABS*	00000000 ir_RC5_RC6.cpp
00000000 l    df *ABS*	00000000 ir_NEC.cpp
00000000 l    df *ABS*	00000000 ir_Panasonic.cpp
00000000 l    df *ABS*	00000000 ir_Sanyo.cpp
00000000 l    df *ABS*	00000000 irRecv.cpp
00000000 l    df *ABS*	00000000 ir_Whynter.cpp
00000000 l    df *ABS*	00000000 IRremote.cpp
00000000 l    df *ABS*	00000000 ir_LG.cpp
00000000 l    df *ABS*	00000000 ir_Sony.cpp
00000000 l    df *ABS*	00000000 ir_Samsung.cpp
00000000 l    df *ABS*	00000000 File.cpp
00000000 l    df *ABS*	00000000 SD.cpp
00006e70 l     F .text	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 SdVolume.cpp
00006f30 l     F .text	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 SdFile.cpp
0000732c l     F .text	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00007804 l     F .text	0000012c SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]
00000000 l    df *ABS*	00000000 Sd2Card.cpp
00007b34 l     F .text	00000074 spiInit(unsigned char)
000082a8 l     F .text	00000010 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
1fffbcb4 l     O .bss	00000004 settings
1fffbcb8 l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 WireKinetis.cpp
00008952 l       .text	00000000 L_1480_delayMicroseconds
00008960 l       .text	00000000 L_1494_delayMicroseconds
000089a6 l       .text	00000000 L_1545_delayMicroseconds
1fffbcb9 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 .vsteensy/build/lib/Audio//memcpy_audio.o
00008afc l       .text	00000000 .loopLR
00008b40 l       .text	00000000 .loopL
00008b80 l       .text	00000000 .loopR
00008bbc l       .text	00000000 .loopQuad
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fffbcbb l     O .bss	00000001 tx_noautoflush
1fffbcbc l     O .bss	00000004 tx_packet
1fffbcc0 l     O .bss	00000001 transmit_previous_timeout
1fffbcc4 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
1fffbcc9 l     O .bss	00000001 calibrating
1fff9570 l     O .data	00000001 analog_config_bits
1fffbcca l     O .bss	00000001 analog_reference_internal
1fff9571 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00009178 l     F .text	00000002 dummy_isr
1fff9320 l     F .data	0000002c port_E_isr
1fff934c l     F .data	0000002c port_D_isr
1fff9378 l     F .data	0000002c port_C_isr
1fff93a4 l     F .data	0000002c port_B_isr
1fff93d0 l     F .data	0000002c port_A_isr
0000917c l     F .text	00000044 digitalWrite.part.1
000091c0 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff9658 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fffbcd0 l     O .bss	00000004 ep0_tx_ptr
1fffbcd4 l     O .bss	00000010 rx_last
1fffbce4 l     O .bss	00000002 ep0_tx_len
1fffbce8 l     O .bss	00000040 ep0_rx0_buf
1fffbd28 l     O .bss	00000010 rx_first
1fffbd38 l     O .bss	00000001 ep0_tx_data_toggle
1fffbd3c l     O .bss	00000040 ep0_rx1_buf
1fffbd7c l     O .bss	00000010 tx_first
1fff8000 l     O .usbdescriptortable	000000a0 table
1fffbd8c l     O .bss	00000010 tx_last
1fffbd9c l     O .bss	00000008 setup
1fffbda4 l     O .bss	00000001 ep0_tx_bdt_bank
1fffbda8 l     O .bss	00000008 reply_buffer
1fffbdb4 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 yield.cpp
1fffbdd9 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 WMath.cpp
0000a844 l     F .text	00000070 random(unsigned long) [clone .part.0]
1fffbddc l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 serial2.c
1fffbe10 l     O .bss	00000004 rts_pin
1fffbe14 l     O .bss	00000001 transmitting
1fffbe15 l     O .bss	00000001 rx_buffer_tail
1fffbe18 l     O .bss	00000028 tx_buffer
1fffbe40 l     O .bss	00000040 rx_buffer
1fffbe80 l     O .bss	00000001 rx_buffer_head
1fffbe81 l     O .bss	00000001 tx_buffer_tail
1fffbe84 l     O .bss	00000004 transmit_pin
1fffbe88 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fffbe8c l     O .bss	00000004 rts_pin
1fffbe90 l     O .bss	00000001 rx_buffer_head
1fffbe91 l     O .bss	00000001 rx_buffer_tail
1fffbe94 l     O .bss	00000040 tx_buffer
1fffbed4 l     O .bss	00000040 rx_buffer
1fffbf14 l     O .bss	00000001 transmitting
1fffbf15 l     O .bss	00000001 tx_buffer_tail
1fffbf18 l     O .bss	00000004 transmit_pin
1fffbf1c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff966c l     O .data	00000012 device_descriptor
1fff9698 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fffbf20 l     O .bss	00000004 rts_pin
1fffbf24 l     O .bss	00000001 rx_buffer_head
1fffbf25 l     O .bss	00000001 rx_buffer_tail
1fffbf28 l     O .bss	00000028 tx_buffer
1fffbf50 l     O .bss	00000040 rx_buffer
1fffbf90 l     O .bss	00000001 transmitting
1fffbf91 l     O .bss	00000001 tx_buffer_tail
1fffbf94 l     O .bss	00000004 transmit_pin
1fffbf98 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_muldivsf3.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 _arm_fixsfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunssfsi.o
00000000 l    df *ABS*	00000000 aeabi_atexit.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000c3a8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1fff9710 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/arduino-1.8.9/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/crti.o
00000000 l    df *ABS*	00000000 c:/arduino-1.8.9/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/crtn.o
00000000 l    df *ABS*	00000000 spi_interrupt.cpp
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff9f4c l       .bss	00000000 __bss_start__
00000000 l       *UND*	00000000 XY(unsigned char, unsigned char)
1fffbfe8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000911c  w    F .text	00000006 adc0_isr
00008d98 g     F .text	0000001c usb_serial_available
1fffa334 g     O .bss	00000090 T2
1fffa01c  w    O .bss	00000008 ArduinoJson::JsonArray::invalid()::instance
1fffbde8 g     O .bss	00000004 AudioStream::memory_pool
0000a68c  w    F .text	0000009c yield
1fff9fe4  w    O .bss	00000004 guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)2>(CRGB*, int, int)::c
00006a04 g     F .text	000000c4 IRrecv::decodeSAMSUNG(decode_results*)
00007398 g     F .text	0000002a SdFile::addCluster()
1fff9f6c  w    O .bss	00000004 guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)5>(CRGB*, int, int)::c
1fff9680 g     O .data	00000018 usb_string_manufacturer_name_default
0000ad78 g     F .text	00000020 serial_available
1fff9504 g     O .data	0000006c Wire1
000090d4  w    F .text	00000048 hard_fault_isr
0000911c  w    F .text	00000006 dma_ch6_isr
0000432c g     F .text	00000036 StripCommand::fadeToRGB(unsigned char, unsigned char, unsigned char, unsigned short)
1fffbdec g     O .bss	00000001 AudioStream::update_scheduled
0000ca38 g     O .text	0000000c vtable for AudioOutputI2S
00000504  w    F .text	00000054 ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)
0000059c  w    F .text	000000fc CLEDController::clearLeds(int)
0000a780 g     F .text	00000020 Print::println()
0000873c g     F .text	0000012c TwoWire::isr()
0000ac4c g     F .text	00000020 serial2_available
1fffbe0c g     O .bss	00000002 AudioStream::memory_used
0000911c  w    F .text	00000006 uart0_lon_isr
00001df0  w    F .text	00000058 AudioPlaySdWav::AudioPlaySdWav()
000096c4 g     F .text	000000c8 usb_rx_memory
00006b98 g     F .text	0000005c File::File(SdFile, char const*)
00006b8c g     F .text	0000000a File::flush()
0000a8b4 g     F .text	00000014 random(long, long)
0000911c  w    F .text	00000006 dma_ch8_isr
0000438c g     F .text	00000030 StripCommand::rainbow()
0000bdb0 g     F .text	00000002 __malloc_unlock
1fff9578 g     O .data	00000038 isr_table_portA
00007ba8 g     F .text	00000058 Sd2Card::chipSelectHigh()
00008ff4 g     F .text	000000e0 analog_init
0000978c g     F .text	00000084 usb_tx
0000b3f8 g     F .text	00000136 .hidden __divsf3
0000911c  w    F .text	00000006 portcd_isr
0000856c g     F .text	00000090 SPIClass::setSCK(unsigned char)
000054f4 g     F .text	000000d8 AudioOutputI2S::begin()
00007410 g     F .text	0000001e SdFile::close()
00007b1c g     F .text	00000018 SdFile::write(unsigned char)
0000c6d4  w    O .text	00000024 vtable for NEOPIXEL<(unsigned char)5>
0000a5e4 g     F .text	00000098 MillisTimer::runFromTimer()
0000911c  w    F .text	00000006 can1_rx_warn_isr
0000cd68 g       .fini	00000000 __exidx_end
0000b61c g     F .text	0000004c .hidden __fixsfsi
0000911c  w    F .text	00000006 dma_error_isr
1fffb874 g     O .bss	00000004 AudioOutputI2S::block_right_2nd
1fffbdd0 g     O .bss	00000001 EventResponder::runningFromYield
00003e70 g     F .text	00000026 StripCommand::begin()
00008adc g     F .text	0000000c i2c0_isr
00003fcc g     F .text	00000024 StripCommand::groupFlash()
00002308  w    F .text	0000007e void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)
0000a754 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b6c0 g     F .text	0000000c __errno
00006b00 g     F .text	00000022 File::write(unsigned char const*, unsigned int)
0000911c  w    F .text	00000006 portd_isr
0000911c  w    F .text	00000006 enet_error_isr
00006c10 g     F .text	00000002 File::~File()
1fffbdbc g     O .bss	00000004 EventResponder::firstInterrupt
1fffaeb8 g     O .bss	00000014 patchCord2
000088d0 g     F .text	0000000c sda_rising_isr1()
0000911c  w    F .text	00000006 tpm1_isr
0000a740  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0000cb70 g     O .text	00000110 digital_pin_to_info_PGM
1fffbfe4 g     O .bss	00000004 errno
0000cd68 g       .fini	00000000 _etext
000082d0 g     F .text	00000134 _spi_dma_rxISR0()
1fff9f4c g       .bss	00000000 _sbss
00007944 g     F .text	000001d8 SdFile::write(void const*, unsigned int)
0000046c  w    F .text	00000004 CLEDController::size()
1fffbaac g     O .bss	00000200 SdVolume::cacheBuffer_
0000b080 g     F .text	00000160 .hidden __aeabi_fadd
0000b07c g     F .text	00000164 .hidden __subsf3
1fffb454 g     O .bss	0000000c sgtl5000_1
000093e8 g     F .text	0000001c digitalRead
1fffa00c  w    O .bss	00000004 guard variable for ArduinoJson::JsonObject::invalid()::instance
0000911c  w    F .text	00000006 porte_isr
0000aa58 g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
00003840 g     F .text	00000004 loop
0000911c  w    F .text	00000006 portb_isr
00006028 g     F .text	00000108 IRrecv::decodeRC6(decode_results*)
00005060 g     F .text	00000188 AudioPlaySdWav::update()
0000911c  w    F .text	00000006 spi1_isr
0000911c  w    F .text	00000006 uart3_status_isr
0000b06c  w    F .text	00000002 serialEvent1()
0000911c  w    F .text	00000006 mcm_isr
1fffaecc g     O .bss	00000014 patchCord3
0000a57c g     F .text	00000068 MillisTimer::addToActiveList()
00004710  w    F .text	00000004 AudioControlSGTL5000::disable()
1fff9fbc  w    O .bss	00000004 guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)3>(CRGB*, int, int)::c
000070bc g     F .text	000000f0 SdVolume::allocContiguous(unsigned long, unsigned long*)
00006bf4 g     F .text	0000001c File::File()
000089c8 g     F .text	00000114 TwoWire::endTransmission(unsigned char)
1fffbdc0 g     O .bss	00000004 EventResponder::lastInterrupt
0000ac6c g     F .text	0000010c uart1_status_isr
00008bec g     F .text	00000134 memcpy
0000911c  w    F .text	00000006 randnum_isr
0000ca20 g     O .text	0000000c vtable for AudioMixer4
00006ae8 g     F .text	00000016 File::available()
000056a0 g     F .text	000000c4 CFastLED::show(unsigned char)
000044f4 g     F .text	00000038 StripLED::StripLED()
0000b608 g     F .text	00000012 .hidden __aeabi_fcmpgt
1fffbcb0 g     O .bss	00000004 SdFile::dateTime_
1fff9600 g     O .data	00000030 isr_table_portC
1fffbccc g     O .bss	00000004 systick_millis_count
1fffbaa4 g     O .bss	00000004 SdVolume::cacheMirrorBlock_
000090d4  w    F .text	00000048 bus_fault_isr
000088dc g     F .text	000000ec TwoWire::wait_idle()
0000911c  w    F .text	00000006 watchdog_isr
1fffb8ac g     O .bss	000001a4 irparams
00008ae8 g     F .text	0000000c i2c1_isr
1fffbdb0 g     O .bss	00000001 usb_configuration
0000911c  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00006ee8 g     F .text	00000048 SdVolume::cacheRawBlock(unsigned long, unsigned char)
000004b0  w    F .text	0000001c ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::init()
1fffbdd8 g     O .bss	00000001 SPCRemulation::pinout
1fffa3f8 g     O .bss	00000aa8 StripCommander
0000a830  w    F .text	00000002 serialEvent2()
0000911c  w    F .text	00000006 i2c2_isr
1fffbdf0 g     O .bss	00000018 AudioStream::memory_pool_available_mask
1fffb810 g     O .bss	00000008 AudioOutputAnalog::dma
1fff9680  w    O .data	00000018 usb_string_manufacturer_name
1fffbfdc g     O .bss	00000008 usb_rx_byte_count_data
1fffa3e4 g     O .bss	00000014 patchCord9
0000911c  w    F .text	00000006 pit1_isr
0000b71c g     F .text	00000010 malloc
0000911c  w    F .text	00000006 dma_ch4_isr
0000cb2c g     O .text	00000020 TwoWire::i2c1_hardware
0000abc8 g     F .text	00000084 software_isr
000004e8  w    F .text	0000001c ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::init()
0000911c  w    F .text	00000006 dma_ch7_isr
00008608  w    F .text	0000001e TwoWire::read()
000082b8  w    F .text	00000018 EventResponder::triggerEvent(int, void*)
0000b1e8 g     F .text	0000001c .hidden __aeabi_i2f
0000a2e0 g     F .text	000000d8 usb_init
1fffbe0a g     O .bss	00000002 AudioStream::memory_pool_first_mask
1fffb1a0 g     O .bss	00000014 patchCord10
0000b538 g     F .text	00000066 .hidden __lesf2
0000911c  w    F .text	00000006 lptmr_isr
1fffbfa4 g     O .bss	00000004 __malloc_top_pad
1fffb478 g     O .bss	00000064 input
000093b8 g     F .text	00000024 rtc_set
1fffb1b4 g     O .bss	00000280 Rain
1fff93fc g     O .data	00000000 .hidden __dso_handle
00001da0  w    F .text	00000050 AudioStream::AudioStream(unsigned char, audio_block_struct**)
0000075c  w    F .text	000000c4 CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)
1fff9320 g       .data	00000000 _sdata
0000cb0c g     O .text	00000020 TwoWire::i2c0_hardware
00006c3c g     F .text	0000000e File::operator bool()
0000bdb4 g     F .text	00000024 _sbrk_r
00006940 g     F .text	000000c4 IRrecv::decodeSony(decode_results*)
000001bc g     F .text	000001d8 ResetHandler
00008d20 g     F .text	00000048 usb_serial_getchar
0000911c  w    F .text	00000006 can1_bus_off_isr
00008af4 g     F .text	00000000 memcpy_tointerleaveLR
0000911c  w    F .text	00000006 ftm2_isr
1fffbfd0 g     O .bss	00000008 usb_cdc_line_coding
000093dc g     F .text	0000000a digitalWrite
1fffbdc8 g     O .bss	00000004 EventResponder::lastYield
0000911c  w    F .text	00000006 uart5_status_isr
0000911c  w    F .text	00000006 lpuart0_status_isr
0000ccac g     O .text	00000004 usb_endpoint_config_table
0000911c  w    F .text	00000006 dma_ch9_isr
1fffb86c g     O .bss	00000002 AudioOutputI2S::block_right_offset
0000911c  w    F .text	00000006 pit2_isr
0000af74 g     F .text	00000020 serial3_available
00006400 g     F .text	00000010 IRrecv::resume()
1fffbfa0 g     O .bss	00000004 __malloc_max_sbrked_mem
00007c00 g     F .text	0000009c Sd2Card::chipSelectLow()
00009404 g     F .text	0000000a pinMode
00003edc g     F .text	00000036 StripCommand::flash(unsigned short)
00009610 g     F .text	0000004c usb_free
0000911c  w    F .text	00000006 i2c3_isr
00003c28 g     F .text	000000e8 Thunder::Update()
1fffb888 g     O .bss	00000010 FastLED
0000b540 g     F .text	0000005e .hidden __nesf2
1fffbaa8 g     O .bss	00000004 SdVolume::sdCard_
00006b50 g     F .text	0000003a File::peek()
00006d88 g     F .text	000000e8 SDClass::open(char const*, unsigned char)
0000452c g     F .text	00000006 StripLED::init(unsigned short, unsigned char)
1fffb8a8 g     O .bss	00000004 CLEDController::m_pTail
0000cd68 g       .fini	00000000 __exidx_start
000046d4  w    F .text	0000000c DMAChannel::~DMAChannel()
0000911c  w    F .text	00000006 pit0_isr
1fffbdcc g     O .bss	00000004 EventResponder::firstYield
00007664 g     F .text	00000064 SdFile::seekSet(unsigned long)
0000cd04 g     O .text	00000004 _global_impure_ptr
1fffb85c g     O .bss	00000002 AudioOutputI2S::block_left_offset
0000911c  w    F .text	00000006 can1_error_isr
0000821c g     F .text	0000008c Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
000061f4 g     F .text	00000096 IRrecv::decodePanasonic(decode_results*)
1fff9f70  w    O .bss	00000024 CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)5>(CRGB*, int, int)::c
0000b6cc g     F .text	00000050 __libc_init_array
1fffbfe8 g       .bss	00000000 __bss_end
000085fc  w    F .text	0000000c TwoWire::available()
0000911c  w    F .text	00000006 can0_wakeup_isr
000004cc  w    F .text	0000001c ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::init()
0000911c  w    F .text	00000006 flash_cmd_isr
0000a728  w    F .text	00000004 usb_serial_class::clear()
0000af94 g     F .text	000000d8 uart2_status_isr
00009134 g     F .text	0000002c _sbrk
1fffbdd4 g     O .bss	00000004 MillisTimer::listWaiting
00009238 g     F .text	000000f8 attachInterrupt
1fffb854 g     O .bss	00000008 AudioOutputTDM::dma
1fff9574 g     O .data	00000004 __brkval
1fffbcc8 g     O .bss	00000001 usb_cdc_line_rtsdtr
00001ea0 g     F .text	00000064 init_Player()
00008fac g     F .text	00000048 usb_serial_flush_callback
00006c14 g     F .text	0000000a File::read(void*, unsigned short)
00006360 g     F .text	00000010 IRrecv::IRrecv(int)
0000cd08 g     F .text	00000000 _init
1fffb538 g     O .bss	00000038 mixer2
1fffa018  w    O .bss	00000004 guard variable for ArduinoJson::JsonArray::invalid()::instance
0000911c  w    F .text	00000006 svcall_isr
0000a8c8 g     F .text	00000060 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
0000911c  w    F .text	00000006 dma_ch15_isr
1fff9fc0  w    O .bss	00000024 CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)3>(CRGB*, int, int)::c
000071cc g     F .text	0000005c SdVolume::freeChain(unsigned long)
0000b07c g     F .text	00000164 .hidden __aeabi_fsub
0000cb4c g     O .text	00000024 vtable for TwoWire
0000911c  w    F .text	00000006 uart1_error_isr
0000c3bc g     F .text	00000028 __libc_fini_array
0000911c  w    F .text	00000006 usbhs_phy_isr
1fffb818 g     O .bss	00000008 AudioInputAnalogStereo::dma0
1fffbfe8 g       .bss	00000000 _ebss
00003d44 g     F .text	00000094 Thunder::addEvent(unsigned long, FX)
00000820  w    F .text	00000560 ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)
1fffb800 g     O .bss	00000008 AudioOutputADAT::dma
00000698  w    F .text	000000c4 CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)
0000047c  w    F .text	00000006 ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::getMaxRefreshRate() const
1fffb868 g     O .bss	00000004 AudioOutputI2S::block_right_1st
00007228 g     F .text	00000104 SdVolume::init(Sd2Card*, unsigned char)
1fffb878 g     O .bss	00000001 AudioOutputI2S::update_responsibility
00006fb4 g     F .text	00000038 SdVolume::cacheZeroBlock(unsigned long)
1fff9f68  w    O .bss	00000001 PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()::R
00000564  w    F .text	00000018 AudioPlaySdWav::~AudioPlaySdWav()
0000b5f4 g     F .text	00000012 .hidden __aeabi_fcmpge
00006c4c g     F .text	00000044 SDClass::begin(unsigned char)
0000911c g     F .text	00000006 unused_isr
1fffb434 g     O .bss	0000001c RawIRCmd
0000911c  w    F .text	00000006 spi0_isr
0000b214 g     F .text	0000007c .hidden __floatdisf
0000911c  w    F .text	00000006 dma_ch3_isr
00008bb2 g     F .text	00000000 memcpy_tointerleaveQuad
000084ac g     F .text	0000002e SPIClass::notUsingInterrupt(IRQ_NUMBER_t)
000046d4  w    F .text	0000000c DMAChannel::~DMAChannel()
00007784 g     F .text	00000080 SdFile::openCachedEntry(unsigned char, unsigned char)
000066f4 g     F .text	00000054 MATCH_SPACE(int, int)
00006c10 g     F .text	00000002 File::~File()
000042fc g     F .text	00000030 StripCommand::setToHSV(unsigned short, unsigned short, unsigned short)
0000b530 g     F .text	0000006e .hidden __gtsf2
0000911c  w    F .text	00000006 flash_error_isr
00006360 g     F .text	00000010 IRrecv::IRrecv(int)
00004534 g     F .text	000001a0 StripLED::update()
00007430 g     F .text	00000080 SdFile::make83Name(char const*, unsigned char*)
1fffb160 g     O .bss	00000001 Brightness
0000b5e0 g     F .text	00000012 .hidden __aeabi_fcmple
0000911c  w    F .text	00000006 uart5_error_isr
0000911c  w    F .text	00000006 rtc_seconds_isr
0000ca94 g     O .text	00000078 SPIClass::spi0_hardware
0000911c  w    F .text	00000006 pdb_isr
000090d4  w    F .text	00000048 usage_fault_isr
0000911c  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001bc _VectorsFlash
0000628c g     F .text	000000d4 IRrecv::decodeSanyo(decode_results*)
0000911c  w    F .text	00000006 dma_ch14_isr
00009330 g     F .text	00000088 detachInterrupt
00000000  w      *UND*	00000000 __deregister_frame_info
1fffbfd8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00002ad4  w    F .text	00000268 ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)
1fff9459 g     O .data	00000001 LastFrameShowed
1fffb18c g     O .bss	00000014 patchCord8
0000a67c g     F .text	00000010 systick_isr
00002d3c  w    F .text	0000005c unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)
0000911c  w    F .text	00000006 rtc_alarm_isr
1fffb838 g     O .bss	00000002 AudioUsingSPICount
1fffb87c g     O .bss	00000004 AudioOutputI2S::block_left_2nd
1fffbde0 g     O .bss	00000004 AudioStream::first_update
0000911c  w    F .text	00000006 dma_ch2_isr
1fff965c g     O .data	00000010 Serial
1fffbde4 g     O .bss	00000002 AudioStream::memory_used_max
00007930 g     F .text	00000012 SdFile::open(SdFile*, char const*, unsigned char)
0000911c  w    F .text	00000006 ftm1_isr
00000558  w    F .text	0000000c AudioConnection::~AudioConnection()
0000ca04 g     O .text	0000001c vtable for AudioControlSGTL5000
0000402c g     F .text	000002d0 StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)
0000a748  w    F .text	00000006 usb_serial_class::write(unsigned char)
00009124  w    F .text	0000000c startup_early_hook
0000911c  w    F .text	00000006 dma_ch13_isr
0000ca44 g     O .text	00000024 vtable for File
00004714  w    F .text	00000004 AudioControlSGTL5000::inputLevel(float)
00006b98 g     F .text	0000005c File::File(SdFile, char const*)
0000911c  w    F .text	00000006 uart2_error_isr
1fffa024 g     O .bss	00000280 ThunderRight
00008d68 g     F .text	00000030 usb_serial_peekchar
1fffb870 g     O .bss	00000004 AudioOutputI2S::block_left_1st
000073c4 g     F .text	0000004c SdFile::addDirCluster()
1fff9f98  w    O .bss	00000024 CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)4>(CRGB*, int, int)::c
1fff96f8 g     O .data	00000016 usb_string_serial_number_default
000090d4 g     F .text	00000048 fault_isr
0000c480 g     F .text	000001d0 _free_r
0000911c  w    F .text	00000006 usb_charge_isr
0000a738  w    F .text	00000004 usb_serial_class::flush()
00004b50 g     F .text	000000c4 AudioPlaySdWav::play(char const*)
00006748 g     F .text	00000154 cmt_isr
0000911c  w    F .text	00000006 usbhs_isr
1fff9f48 g     O .data	00000004 __malloc_sbrk_base
0000a730  w    F .text	00000004 usb_serial_class::read()
0000911c  w    F .text	00000006 ftm3_isr
1fffb4f0 g     O .bss	00000010 jsonBuffer
0000911c  w    F .text	00000006 tsi0_isr
00009160  w    F .text	00000002 __cxa_pure_virtual
000071ac g     F .text	0000001e SdVolume::fatPut(unsigned long, unsigned long)
0000911c  w    F .text	00000006 spi2_isr
1fffb820 g     O .bss	00000008 AudioInputAnalogStereo::dma1
1fffb570 g     O .bss	00000280 ThunderLeft
0000b1e8 g     F .text	0000001c .hidden __floatsisf
0000a750  w    F .text	00000002 serialEvent()
00004850  w    F .text	0000005c AudioControlSGTL5000::inputSelect(int)
1fffbd39 g     O .bss	00000001 usb_reboot_timer
1fffb7f0 g     O .bss	00000008 AudioOutputPWM::dma
0000c304 g     F .text	000000a4 __register_exitproc
0000aa70 g     F .text	00000042 AudioStream::receiveWritable(unsigned int)
00003e98 g     F .text	00000042 StripCommand::flash()
00001da0  w    F .text	00000050 AudioStream::AudioStream(unsigned char, audio_block_struct**)
00008db4 g     F .text	00000038 usb_serial_flush_input
1fff9650 g     O .data	00000008 isr_table_portE
00008ef4 g     F .text	00000018 usb_serial_putchar
00000021 g       *ABS*	00000000 _teensy_model_identifier
000055fc g     F .text	00000058 CFastLED::addLeds(CLEDController*, CRGB*, int, int)
0000b61c g     F .text	0000004c .hidden __aeabi_f2iz
0000c29c g     F .text	00000066 strncpy
1fffbfa8 g     O .bss	00000028 __malloc_current_mallinfo
00004914  w    F .text	0000002c AudioControlSGTL5000::volume(float)
0000b540 g     F .text	0000005e .hidden __eqsf2
0000594c g     F .text	000002c0 rgb2hsv_approximate(CRGB const&)
0000911c  w    F .text	00000006 can0_bus_off_isr
00005da8 g     F .text	000000a8 IRrecv::decodeMitsubishi(decode_results*)
00004c84 g     F .text	000003cc AudioPlaySdWav::consume(unsigned long)
1fffbda5 g     O .bss	00000001 usb_rx_memory_needed
00009810 g     F .text	00000ace usb_isr
0000b6b4 g     F .text	0000000c __cxa_atexit
0000ab98 g     F .text	00000030 AudioStream::update_setup()
00002d98  w    F .text	0000005a unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)
0000b3f8 g     F .text	00000136 .hidden __aeabi_fdiv
1fffa010  w    O .bss	00000008 ArduinoJson::JsonObject::invalid()::instance
1fff9460 g     O .data	00000038 SPI
0000bcac g     F .text	00000062 memcmp
0000cc80  w    O .text	00000028 vtable for usb_serial_class
0000911c  w    F .text	00000006 uart3_error_isr
00005364 g     F .text	00000098 AudioOutputI2S::update()
0000b204 g     F .text	0000008c .hidden __floatundisf
1fffbdc4 g     O .bss	00000004 MillisTimer::listActive
0000911c  w    F .text	00000006 porta_isr
1fff8fbc g     O .usbbuffers	00000360 usb_buffer_memory
1fffb460 g     O .bss	00000014 patchCord5
0000911c  w    F .text	00000006 low_voltage_isr
1fff9b3c g     O .data	00000408 __malloc_av_
0000b1e0 g     F .text	00000024 .hidden __aeabi_ui2f
0000911c  w    F .text	00000006 can0_error_isr
000094f0 g     F .text	000000e0 _init_Teensyduino_internal_
00008868 g     F .text	0000005c TwoWire::sda_rising_isr()
00003ff0 g     F .text	0000003a StripCommand::flashAll()
00008f54 g     F .text	00000058 usb_serial_flush_output
0000911c  w    F .text	00000006 dma_ch12_isr
1fffb844 g     O .bss	00000008 AudioInputI2S::dma
0000bdac g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
0000911c  w    F .text	00000006 can1_wakeup_isr
1fff8e00 g     O .dmabuffers	000001bc _VectorsRam
000057a0 g     F .text	0000003e fill_rainbow(CRGB*, int, unsigned char, unsigned char)
0000911c  w    F .text	00000006 pit3_isr
00008404 g     F .text	0000007c SPIClass::begin()
0000b540 g     F .text	0000005e .hidden __cmpsf2
0000911c  w    F .text	00000006 enet_rx_isr
0000911c  w    F .text	00000006 portc_isr
00008b32 g     F .text	00000000 memcpy_tointerleaveL
1fffb828 g     O .bss	00000008 AudioInputI2SQuad::dma
0000bd10 g     F .text	0000009a memset
00007624 g     F .text	00000040 SdFile::readDirCache()
000048ac g     F .text	00000066 AudioControlSGTL5000::volumeInteger(unsigned int)
0000a834 g     F .text	00000010 main
00006fec g     F .text	00000070 SdVolume::fatGet(unsigned long, unsigned long*) const
1fffb860 g     O .bss	00000008 AudioOutputI2S::dma
1fffbf9c g     O .bss	00000004 __malloc_max_total_mem
1fffa2a4 g     O .bss	00000090 T1
0000b214 g     F .text	0000007c .hidden __aeabi_l2f
000066a0 g     F .text	00000054 MATCH_MARK(int, int)
0000664c g     F .text	00000054 MATCH(int, int)
0000b538 g     F .text	00000066 .hidden __ltsf2
000090d4  w    F .text	00000048 memmanage_fault_isr
00006c20 g     F .text	0000001c File::close()
0000057c  w    F .text	00000020 ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()
00004718 g     F .text	00000058 AudioControlSGTL5000::write(unsigned int, unsigned int)
0000aea4 g     F .text	00000084 usb_init_serialnumber
00007500 g     F .text	00000124 SdFile::read(void*, unsigned int)
0000cd64 g       .text	00000000 __init_array_end
00000484  w    F .text	00000006 ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::getMaxRefreshRate() const
0000b73c g     F .text	00000570 _malloc_r
00006130 g     F .text	000000c4 IRrecv::decodeNEC(decode_results*)
0000911c  w    F .text	00000006 debugmonitor_isr
00004364 g     F .text	00000026 StripCommand::setToRGB(unsigned char, unsigned char, unsigned char)
1fff9630 g     O .data	00000020 isr_table_portD
00000470  w    F .text	00000004 CLEDController::getMaxRefreshRate() const
0000a4b4 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
00004770 g     F .text	000000e0 AudioControlSGTL5000::enable()
00009410 g     F .text	00000044 micros
00002178 g     F .text	00000028 toggleRain()
00000000  w      *UND*	00000000 __libc_fini
000088c4 g     F .text	0000000c sda_rising_isr0()
0000b204 g     F .text	0000008c .hidden __aeabi_ul2f
0000911c  w    F .text	00000006 cmp1_isr
00004940 g     F .text	000000f4 AudioMixer4::update()
000076c8 g     F .text	0000000c SdFile::sync()
00002388  w    F .text	0000074c ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()
0000911c  w    F .text	00000006 ftm0_isr
0000b5a8 g     F .text	00000010 .hidden __aeabi_cfcmple
00004c14 g     F .text	00000070 AudioPlaySdWav::parse_format()
0000c3e4 g     F .text	0000009c _malloc_trim_r
1fffaee0 g     O .bss	00000280 ThunderCenter
1fff96f4 g     O .data	00000004 string0
00008dec g     F .text	00000108 usb_serial_write
0000b290 g     F .text	00000168 .hidden __mulsf3
00009130  w    F .text	00000002 startup_late_hook
0000a734  w    F .text	00000004 usb_serial_class::available()
0000bec8 g     F .text	000002dc strcmp
00003dd8 g     F .text	00000098 StripCommand::StripCommand()
00005f64 g     F .text	000000c4 IRrecv::decodeRC5(decode_results*)
00005c0c g     F .text	000000b8 IRrecv::decodeAiwaRCT501(decode_results*)
1fff96dc  w    O .data	00000016 usb_string_product_name
00006410 g     F .text	000000a0 IRrecv::decodeHash(decode_results*)
00009454 g     F .text	0000009c delay
0000911c  w    F .text	00000006 tpm0_isr
1fffbdb8 g     O .bss	00000002 dma_channel_allocated_mask
0000cd64 g     F .fini	00000000 _fini
1fff945c g     O .data	00000004 SdVolume::cacheBlockNumber_
00008680 g     F .text	00000026 TwoWire::write(unsigned char)
1fffb7f8 g     O .bss	00000008 AudioOutputPT8211::dma
00005edc g     F .text	00000088 IRrecv::getRClevel(decode_results*, int*, int*, int)
00006370 g     F .text	00000090 IRrecv::enableIRIn()
0000911c  w    F .text	00000006 i2s0_rx_isr
0000911c  w    F .text	00000006 uart4_error_isr
0000a820 g     F .text	00000010 Print::print(long)
00001df0  w    F .text	00000058 AudioPlaySdWav::AudioPlaySdWav()
00005764 g     F .text	00000004 atexit
00009170  w    F .text	00000006 __cxa_guard_release
0000b530 g     F .text	0000006e .hidden __gesf2
00006ad0 g     F .text	00000018 File::write(unsigned char)
00005e50 g     F .text	0000008c IRrecv::decodeDenon(decode_results*)
1fffba50 g     O .bss	00000054 SD
0000b074 g     F .text	0000016c .hidden __aeabi_frsub
0000a9d0 g     F .text	00000054 AudioStream::release(audio_block_struct*)
0000911c  w    F .text	00000006 can0_message_isr
000084dc g     F .text	00000090 SPIClass::setMOSI(unsigned char)
1fff9b38 g     O .data	00000004 _impure_ptr
0000b5b8 g     F .text	00000012 .hidden __aeabi_fcmpeq
0000911c  w    F .text	00000006 can1_message_isr
1fffb880 g     O .bss	00000008 AudioOutputSPDIF::dma
0000911c  w    F .text	00000006 nmi_isr
1fff9498 g     O .data	0000006c Wire
0000aa24 g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
0000b290 g     F .text	00000168 .hidden __aeabi_fmul
00003dd8 g     F .text	00000098 StripCommand::StripCommand()
00004af0 g     F .text	00000060 AudioPlaySdWav::stop()
0000cd14 g       .text	00000000 __preinit_array_end
1fffb83c g     O .bss	00000008 AudioInputTDM::dma
0000b5a0 g     F .text	00000018 .hidden __aeabi_cfrcmple
0000911c  w    F .text	00000006 sdhc_isr
1fffb474 g     O .bss	00000004 IRRepeatTimeout
0000a928 g     F .text	000000a8 AudioStream::allocate()
00008628  w    F .text	00000016 TwoWire::peek()
0000048c  w    F .text	00000006 ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::getMaxRefreshRate() const
00008640  w    F .text	00000002 TwoWire::flush()
00001f04 g     F .text	00000274 setup
0000ccb0 g     O .text	00000054 usb_descriptor_list
0000965c g     F .text	0000003c usb_rx
000021a0 g     F .text	00000168 IR_Management()
00007c9c g     F .text	00000054 Sd2Card::waitNotBusy(unsigned int)
00007da8 g     F .text	00000288 Sd2Card::SD_init(unsigned char, unsigned char)
0000911c  w    F .text	00000006 dma_ch10_isr
00006588 g     F .text	000000c4 IRrecv::decodeWhynter(decode_results*)
00006acc  w    F .text	00000002 Print::flush()
000064b0 g     F .text	000000d8 IRrecv::decode(decode_results*)
1fffaea4 g     O .bss	00000014 patchCord1
0000911c  w    F .text	00000006 uart0_error_isr
1fff9f94  w    O .bss	00000004 guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)4>(CRGB*, int, int)::c
1fffb4dc g     O .bss	00000014 patchCord4
000043bc g     F .text	00000138 StripCommand::dynamicStateUpdate()
000095d0 g     F .text	00000040 usb_malloc
1fff9400 g     O .data	00000058 IRcmdCommands
0000b5cc g     F .text	00000012 .hidden __aeabi_fcmplt
0000911c  w    F .text	00000006 i2s0_isr
20008000 g       .bss	00000000 _estack
0000a480 g     F .text	00000034 DMAChannel::release()
00006b24 g     F .text	0000002a File::read()
00000494  w    F .text	0000001c ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::init()
00008f0c g     F .text	00000048 usb_serial_write_buffer_free
0000911c  w    F .text	00000006 enet_timer_isr
0000aab4 g     F .text	00000068 AudioConnection::connect()
00008030 g     F .text	00000060 Sd2Card::waitStartBlock()
1fffb84c g     O .bss	00000008 AudioInputPDM::dma
00008644 g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
00006c90 g     F .text	000000f8 SDClass::getParentDir(char const*, int*)
1fff9f4c g       .data	00000000 _edata
1fffb178 g     O .bss	00000014 patchCord7
0000911c  w    F .text	00000006 i2s0_tx_isr
0000911c  w    F .text	00000006 adc1_isr
1fffa3c4 g     O .bss	00000020 i2s1
00005050 g     F .text	0000000e AudioPlaySdWav::isPlaying()
0000a73c  w    F .text	00000004 usb_serial_class::availableForWrite()
0000911c  w    F .text	00000006 cmp0_isr
1fff9fe8  w    O .bss	00000024 CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)2>(CRGB*, int, int)::c
0000af28 g     F .text	0000004c ultoa
0000ca6c g     O .text	00000018 vtable for SdFile
0000b668 g     F .text	0000003e .hidden __aeabi_f2uiz
0000057c  w    F .text	00000020 ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()
00006bf4 g     F .text	0000001c File::File()
000074b0 g     F .text	00000050 SdFile::openRoot(SdVolume*)
000086a8 g     F .text	00000094 TwoWire::begin()
00004ac4 g     F .text	0000002a AudioPlaySdWav::begin()
0000a534 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff9f44 g     O .data	00000004 __malloc_trim_threshold
0000a72c  w    F .text	00000004 usb_serial_class::peek()
0000ab1c g     F .text	0000007a AudioConnection::disconnect()
00008150 g     F .text	000000cc Sd2Card::writeData(unsigned char, unsigned char const*)
0000b1e0 g     F .text	00000024 .hidden __floatunsisf
1fffbcba g     O .bss	00000001 usb_cdc_transmit_flush_timer
0000c68c  w    O .text	00000024 vtable for NEOPIXEL<(unsigned char)3>
000044f4 g     F .text	00000038 StripLED::StripLED()
0000b5a8 g     F .text	00000010 .hidden __aeabi_cfcmpeq
1fff9458 g     O .data	00000001 LastIRCmd
1fffbe0e g     O .bss	00000002 AudioStream::cpu_cycles_total
0000911c  w    F .text	00000006 pit_isr
00000564  w    F .text	00000018 AudioPlaySdWav::~AudioPlaySdWav()
00007cf0 g     F .text	000000b8 Sd2Card::cardCommand(unsigned char, unsigned long)
00006e94 g     F .text	00000054 SdVolume::cacheFlush()
0000c65c  w    O .text	0000000c vtable for ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>
0000911c  w    F .text	00000006 dac0_isr
0000cd14 g       .text	00000000 __init_array_start
0000911c  w    F .text	00000006 can1_tx_warn_isr
1fffb898 g     O .bss	00000004 CLEDController::m_pHead
000076d4 g     F .text	000000b0 SdFile::truncate(unsigned long)
0000b668 g     F .text	0000003e .hidden __fixunssfsi
00008090 g     F .text	000000c0 Sd2Card::SD_readBlock(unsigned long, unsigned char*)
0000ad98 g     F .text	0000010c uart0_status_isr
00005260 g     F .text	00000104 AudioOutputI2S::isr()
0000911c  w    F .text	00000006 mcg_isr
00008480 g     F .text	0000002a SPIClass::usingInterrupt(IRQ_NUMBER_t)
000053fc g     F .text	000000f8 AudioOutputI2S::config_i2s()
00005cc4 g     F .text	000000e4 IRrecv::decodeJVC(decode_results*)
00003d10 g     F .text	00000034 Thunder::trig(AudioPlaySdWav*)
00000400 g     O .text	00000010 flashconfigbytes
00003bf0 g     F .text	00000038 Thunder::Thunder(char const*, StripCommand*)
00000d80  w    F .text	00000560 ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)
00003f14 g     F .text	000000b8 StripCommand::groupFlash(unsigned char, unsigned char)
00005780 g     F .text	0000001e fill_solid(CRGB*, int, CRGB const&)
0000a3b8 g     F .text	000000c8 DMAChannel::begin(bool)
00005654 g     F .text	0000004c CFastLED::countFPS(int)
0000c1c0 g     F .text	000000dc strlen
000012e0  w    F .text	00000560 ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)
1fff96dc g     O .data	00000016 usb_string_product_name_default
1fffb830 g     O .bss	00000008 AudioOutputI2SQuad::dma
0000689c g     F .text	000000a4 IRrecv::decodeLG(decode_results*)
0000911c  w    F .text	00000006 dma_ch1_isr
1fffb164 g     O .bss	00000014 patchCord6
00001e48 g     F .text	00000058 getIRCmd()
000037b0 g     F .text	00000090 taskManager()
00009698 g     F .text	0000002c usb_tx_packet_count
0000bdd8 g     F .text	000000ce strchr
00008b72 g     F .text	00000000 memcpy_tointerleaveR
0000911c  w    F .text	00000006 dma_ch5_isr
0000911c  w    F .text	00000006 can0_rx_warn_isr
0000911c  w    F .text	00000006 can0_tx_warn_isr
0000911c  w    F .text	00000006 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
1fffb808 g     O .bss	00000008 AudioInputAnalog::dma
1fffbe08 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
0000cd14 g       .text	00000000 __preinit_array_start
0000c650  w    O .text	0000000c vtable for AudioStream
0000b070  w    F .text	00000002 serialEvent3()
0000b6a8 g     F .text	0000000a __aeabi_atexit
00009164  w    F .text	0000000a __cxa_guard_acquire
00000000  w      *UND*	00000000 __register_frame_info
0000705c g     F .text	00000060 SdVolume::chainSize(unsigned long, unsigned long*) const
0000ca2c g     O .text	0000000c vtable for AudioPlaySdWav
0000c6b0  w    O .text	00000024 vtable for NEOPIXEL<(unsigned char)4>
0000911c  w    F .text	00000006 cmp2_isr
0000b080 g     F .text	00000160 .hidden __addsf3
1fffb500 g     O .bss	00000038 mixer1
0000a578 g     F .text	00000004 pendablesrvreq_isr
00001840  w    F .text	00000560 ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)
00006ac8  w    F .text	00000004 Print::availableForWrite()
00000558  w    F .text	0000000c AudioConnection::~AudioConnection()
0000c668  w    O .text	00000024 vtable for NEOPIXEL<(unsigned char)2>
1fff95b0 g     O .data	00000050 isr_table_portB
0000911c  w    F .text	00000006 wakeup_isr
00003bf0 g     F .text	00000038 Thunder::Thunder(char const*, StripCommand*)
1fffaea0 g     O .bss	00000004 RefreshOutputTimer
00000474  w    F .text	00000006 ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::getMaxRefreshRate() const
0000911c  w    F .text	00000006 cmp3_isr
0000a7a0 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000b72c g     F .text	00000010 free
1fffbcac g     O .bss	00000001 SdVolume::cacheDirty_
0000911c  w    F .text	00000006 tpm2_isr
000057e0 g     F .text	0000016c hsv2rgb_rainbow(CHSV const&, CRGB&)
0000911c  w    F .text	00000006 dma_ch0_isr
1fff96f8  w    O .data	00000016 usb_string_serial_number
0000911c  w    F .text	00000006 enet_tx_isr
1fffb450 g     O .bss	00000001 IR



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ............
      10:	................
      20:	................
      30:	........y...}...
      40:	................
      50:	................
      60:	................
      70:	................
      80:	................
      90:	................
      a0:	................
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	............m...
     100:	................
     110:	................
     120:	................
     130:	................
     140:	....Ig..........
     150:	................
     160:	................
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	movw	r2, #55592	; 0xd928
     1ca:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	nop
	__asm__ volatile ("nop");
     1ce:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	bl	9124 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	mov.w	r2, #150994944	; 0x9000000
     1da:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	ldr	r3, [r2, #0]
     1e8:	ands.w	r3, r3, #256	; 0x100
     1ec:	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	mov.w	r3, #5376	; 0x1500
     1f6:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	ldrb	r2, [r3, #0]
     1fc:	lsls	r1, r2, #28
     1fe:	bpl.n	208 <ResetHandler+0x4c>
     200:	ldrb	r2, [r3, #0]
     202:	orr.w	r2, r2, #8
     206:	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	movs	r2, #42	; 0x2a
     20e:	strb	r2, [r3, #0]
     210:	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	cmp	r3, r1
     216:	bcs.n	222 <ResetHandler+0x66>
     218:	ldr.w	r0, [r2, #4]!
     21c:	str.w	r0, [r3], #4
     220:	b.n	214 <ResetHandler+0x58>
     222:	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	movs	r2, #0
     228:	cmp	r3, r1
     22a:	bcs.n	232 <ResetHandler+0x76>
     22c:	str.w	r2, [r3], #4
     230:	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	movs	r3, #0
     238:	ldr.w	r0, [r2, r3, lsl #2]
     23c:	str.w	r0, [r1, r3, lsl #2]
     240:	adds	r3, #1
     242:	cmp	r3, #111	; 0x6f
     244:	bne.n	238 <ResetHandler+0x7c>
     246:	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	movs	r1, #128	; 0x80
     24c:	strb.w	r1, [r3], #1
     250:	cmp	r3, r2
     252:	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	movs	r2, #138	; 0x8a
     25e:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	sub.w	r3, r3, #4096	; 0x1000
     264:	movs	r2, #36	; 0x24
     266:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	movs	r2, #160	; 0xa0
     26a:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	ldrb	r2, [r3, #6]
     26e:	lsls	r2, r2, #30
     270:	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	ldrb	r2, [r3, #6]
     274:	lsls	r4, r2, #27
     276:	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	ldrb	r3, [r2, #6]
     27c:	and.w	r3, r3, #12
     280:	cmp	r3, #8
     282:	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	movs	r2, #3
     288:	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	movs	r2, #64	; 0x40
     28c:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r0, r2, #26
     292:	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	ldrb	r1, [r2, #6]
     298:	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	lsls	r1, r1, #25
     29c:	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	movs	r1, #2
     2a6:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	movs	r2, #32
     2aa:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	ldrb	r2, [r3, #6]
     2ae:	and.w	r2, r2, #12
     2b2:	cmp	r2, #12
     2b4:	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	movs	r2, #0
     2c4:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	movs	r2, #7
     2c8:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	bl	94f0 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	ldr	r3, [r3, #0]
     2dc:	lsls	r2, r3, #31
     2de:	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	bl	93b8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	ldrb	r3, [r3, #0]
     2f0:	lsls	r3, r3, #25
     2f2:	bpl.n	308 <ResetHandler+0x14c>
     2f4:	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	ldr	r2, [r4, #0]
     2fa:	cmp	r2, r3
     2fc:	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	bl	93b8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	movs	r3, #0
     306:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	bl	b6cc <__libc_init_array>

	startup_late_hook();
     30c:	bl	9130 <startup_late_hook>
	main();
     310:	bl	a834 <main>
     314:	b.n	314 <ResetHandler+0x158>
     316:	nop
     318:	.word	0x4005200e
     31c:	.word	0x40048030
     320:	.word	0x00043f82
     324:	.word	0x2b000001
     328:	.word	0x4003d010
     32c:	.word	0x4003d014
     330:	.word	0x4007d002
     334:	.word	0x4007e000
     338:	.word	0x1fff9f4c
     33c:	.word	0x0000cd64
     340:	.word	0x1fff9320
     344:	.word	0x1fff9f4c
     348:	.word	0x1fffbfe8
     34c:	.word	0x1fff8e00
     350:	.word	0x00000000
     354:	.word	0xe000e400
     358:	.word	0xe000e45f
     35c:	.word	0xe000ed08
     360:	.word	0x40065000
     364:	.word	0x40064000
     368:	.word	0x40048044
     36c:	.word	0x01030000
     370:	.word	0x40048004
     374:	.word	0x000510c0
     378:	.word	0xe000e014
     37c:	.word	0x000176ff
     380:	.word	0x20200000
     384:	.word	0x00000031
     388:	.word	0x4003e01c
     38c:	.word	0x5a94c3a5
     390:	.word	0x4007f000
     394:	.word	0xffffffff
     398:	.word	0xffffffff
     39c:	.word	0xffffffff
     3a0:	.word	0xffffffff
     3a4:	.word	0xffffffff
     3a8:	.word	0xffffffff
     3ac:	.word	0xffffffff
     3b0:	.word	0xffffffff
     3b4:	.word	0xffffffff
     3b8:	.word	0xffffffff
     3bc:	.word	0xffffffff
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff9f4c
     42c:	.word	0x00000000
     430:	.word	0x0000cd68

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff9f50
     460:	.word	0x0000cd68
     464:	.word	0x1fff9f4c
     468:	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	ldr	r0, [r0, #20]
     46e:	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	movs	r0, #0
     472:	bx	lr

00000474 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::getMaxRefreshRate() const>:
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
		mPort = FastPin<DATA_PIN>::port();
	}

	virtual uint16_t getMaxRefreshRate() const { return 400; }
     474:	mov.w	r0, #400	; 0x190
     478:	bx	lr
     47a:	nop

0000047c <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::getMaxRefreshRate() const>:
     47c:	mov.w	r0, #400	; 0x190
     480:	bx	lr
     482:	nop

00000484 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::getMaxRefreshRate() const>:
     484:	mov.w	r0, #400	; 0x190
     488:	bx	lr
     48a:	nop

0000048c <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::getMaxRefreshRate() const>:
     48c:	mov.w	r0, #400	; 0x190
     490:	bx	lr
     492:	nop

00000494 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::init()>:

	data_t mPinMask;
	data_ptr_t mPort;
	CMinWait<WAIT_TIME> mWait;
public:
	virtual void init() {
     494:	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     496:	movs	r1, #1
     498:	mov	r4, r0
     49a:	movs	r0, #5
     49c:	bl	9404 <pinMode>
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
     4a0:	movs	r2, #128	; 0x80
		mPort = FastPin<DATA_PIN>::port();
     4a2:	ldr	r3, [pc, #8]	; (4ac <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::init()+0x18>)
	data_ptr_t mPort;
	CMinWait<WAIT_TIME> mWait;
public:
	virtual void init() {
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
     4a4:	str	r2, [r4, #24]
		mPort = FastPin<DATA_PIN>::port();
     4a6:	str	r3, [r4, #28]
     4a8:	pop	{r4, pc}
     4aa:	nop
     4ac:	.word	0x400ff0c0

000004b0 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::init()>:

	data_t mPinMask;
	data_ptr_t mPort;
	CMinWait<WAIT_TIME> mWait;
public:
	virtual void init() {
     4b0:	push	{r4, lr}
     4b2:	movs	r1, #1
     4b4:	mov	r4, r0
     4b6:	movs	r0, #4
     4b8:	bl	9404 <pinMode>
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
     4bc:	mov.w	r2, #8192	; 0x2000
		mPort = FastPin<DATA_PIN>::port();
     4c0:	ldr	r3, [pc, #4]	; (4c8 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::init()+0x18>)
	data_ptr_t mPort;
	CMinWait<WAIT_TIME> mWait;
public:
	virtual void init() {
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
     4c2:	str	r2, [r4, #24]
		mPort = FastPin<DATA_PIN>::port();
     4c4:	str	r3, [r4, #28]
     4c6:	pop	{r4, pc}
     4c8:	.word	0x400ff000

000004cc <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::init()>:

	data_t mPinMask;
	data_ptr_t mPort;
	CMinWait<WAIT_TIME> mWait;
public:
	virtual void init() {
     4cc:	push	{r4, lr}
     4ce:	movs	r1, #1
     4d0:	mov	r4, r0
     4d2:	movs	r0, #3
     4d4:	bl	9404 <pinMode>
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
     4d8:	mov.w	r2, #4096	; 0x1000
		mPort = FastPin<DATA_PIN>::port();
     4dc:	ldr	r3, [pc, #4]	; (4e4 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::init()+0x18>)
	data_ptr_t mPort;
	CMinWait<WAIT_TIME> mWait;
public:
	virtual void init() {
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
     4de:	str	r2, [r4, #24]
		mPort = FastPin<DATA_PIN>::port();
     4e0:	str	r3, [r4, #28]
     4e2:	pop	{r4, pc}
     4e4:	.word	0x400ff000

000004e8 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::init()>:

	data_t mPinMask;
	data_ptr_t mPort;
	CMinWait<WAIT_TIME> mWait;
public:
	virtual void init() {
     4e8:	push	{r4, lr}
     4ea:	movs	r1, #1
     4ec:	mov	r4, r0
     4ee:	movs	r0, #2
     4f0:	bl	9404 <pinMode>
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
     4f4:	movs	r2, #1
		mPort = FastPin<DATA_PIN>::port();
     4f6:	ldr	r3, [pc, #8]	; (500 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::init()+0x18>)
	data_ptr_t mPort;
	CMinWait<WAIT_TIME> mWait;
public:
	virtual void init() {
		FastPin<DATA_PIN>::setOutput();
		mPinMask = FastPin<DATA_PIN>::mask();
     4f8:	str	r2, [r4, #24]
		mPort = FastPin<DATA_PIN>::port();
     4fa:	str	r3, [r4, #28]
     4fc:	pop	{r4, pc}
     4fe:	nop
     500:	.word	0x400ff0c0

00000504 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)>:
    size_t total = 0;
    for (const Block* b = _head; b; b = b->next) total += b->size;
    return total;
  }

  virtual void* alloc(size_t bytes) {
     504:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     508:	ldr	r4, [r0, #8]
    return String(this);
  }

 private:
  void alignNextAlloc() {
    if (_head) _head->size = this->round_size_up(_head->size);
     50a:	cbz	r4, 52a <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)+0x26>
 protected:
  // Preserve aligment if necessary
  static FORCE_INLINE size_t round_size_up(size_t bytes) {
#if ARDUINOJSON_ENABLE_ALIGNMENT
    const size_t x = sizeof(void *) - 1;
    return (bytes + x) & ~x;
     50c:	ldr	r3, [r4, #8]
  }

  bool canAllocInHead(size_t bytes) const {
    return _head != NULL && _head->size + bytes <= _head->capacity;
     50e:	ldr	r5, [r4, #4]
     510:	adds	r3, #3
     512:	bic.w	r3, r3, #3
     516:	adds	r2, r1, r3
     518:	cmp	r2, r5
    return String(this);
  }

 private:
  void alignNextAlloc() {
    if (_head) _head->size = this->round_size_up(_head->size);
     51a:	str	r3, [r4, #8]
  }

  bool canAllocInHead(size_t bytes) const {
    return _head != NULL && _head->size + bytes <= _head->capacity;
     51c:	bhi.n	52a <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)+0x26>
  }

  void* allocInHead(size_t bytes) {
    void* p = _head->data + _head->size;
     51e:	add.w	r0, r4, #12
    _head->size += bytes;
     522:	str	r2, [r4, #8]
    return total;
  }

  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    return canAllocInHead(bytes) ? allocInHead(bytes) : allocInNewBlock(bytes);
     524:	add	r0, r3
     526:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _head->size += bytes;
    return p;
  }

  void* allocInNewBlock(size_t bytes) {
    size_t capacity = _nextBlockCapacity;
     52a:	ldr	r7, [r0, #12]
     52c:	cmp	r1, r7
     52e:	mov	r8, r1
     530:	it	cc
     532:	movcc	r8, r7
     534:	mov	r5, r0

namespace ArduinoJson {
class DefaultAllocator {
 public:
  void* allocate(size_t size) {
    return malloc(size);
     536:	add.w	r0, r8, #12
     53a:	mov	r6, r1
     53c:	bl	b71c <malloc>
  }

  bool addNewBlock(size_t capacity) {
    size_t bytes = sizeof(EmptyBlock) + capacity;
    Block* block = static_cast<Block*>(_allocator.allocate(bytes));
    if (block == NULL) return false;
     540:	cbz	r0, 554 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)+0x50>

  void* allocInNewBlock(size_t bytes) {
    size_t capacity = _nextBlockCapacity;
    if (bytes > capacity) capacity = bytes;
    if (!addNewBlock(capacity)) return NULL;
    _nextBlockCapacity *= 2;
     542:	lsls	r7, r7, #1
    size_t bytes = sizeof(EmptyBlock) + capacity;
    Block* block = static_cast<Block*>(_allocator.allocate(bytes));
    if (block == NULL) return false;
    block->capacity = capacity;
    block->size = 0;
    block->next = _head;
     544:	stmia.w	r0, {r4, r8}
    _head = block;
     548:	str	r0, [r5, #8]
    return _head != NULL && _head->size + bytes <= _head->capacity;
  }

  void* allocInHead(size_t bytes) {
    void* p = _head->data + _head->size;
    _head->size += bytes;
     54a:	str	r6, [r0, #8]

  void* allocInNewBlock(size_t bytes) {
    size_t capacity = _nextBlockCapacity;
    if (bytes > capacity) capacity = bytes;
    if (!addNewBlock(capacity)) return NULL;
    _nextBlockCapacity *= 2;
     54c:	str	r7, [r5, #12]
    return allocInHead(bytes);
     54e:	adds	r0, #12
     550:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    return canAllocInHead(bytes) ? allocInHead(bytes) : allocInNewBlock(bytes);
  }
     554:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000558 <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
     558:	push	{r4, lr}
     55a:	mov	r4, r0
		disconnect();
     55c:	bl	ab1c <AudioConnection::disconnect()>
	}
     560:	mov	r0, r4
     562:	pop	{r4, pc}

00000564 <AudioPlaySdWav::~AudioPlaySdWav()>:

#include "Arduino.h"
#include "AudioStream.h"
#include "SD.h"

class AudioPlaySdWav : public AudioStream
     564:	push	{r4, lr}
     566:	ldr	r3, [pc, #16]	; (578 <AudioPlaySdWav::~AudioPlaySdWav()+0x14>)
     568:	mov	r4, r0
     56a:	str.w	r3, [r0], #24
     56e:	bl	6c10 <File::~File()>
     572:	mov	r0, r4
     574:	pop	{r4, pc}
     576:	nop
     578:	.word	0x0000ca34

0000057c <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()>:

 public:
  DynamicJsonBufferBase(size_t initialSize = 256)
      : _head(NULL), _nextBlockCapacity(initialSize) {}

  ~DynamicJsonBufferBase() {
     57c:	push	{r3, r4, r5, lr}
     57e:	mov	r5, r0
    Block* currentBlock = _head;
     580:	ldr	r0, [r0, #8]
    while (currentBlock != NULL) {
      Block* nextBlock = currentBlock->next;
      _allocator.deallocate(currentBlock);
      currentBlock = nextBlock;
    }
  }
     582:	ldr	r3, [pc, #20]	; (598 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()+0x1c>)
     584:	str	r3, [r5, #0]
      : _head(NULL), _nextBlockCapacity(initialSize) {}

  ~DynamicJsonBufferBase() {
    Block* currentBlock = _head;

    while (currentBlock != NULL) {
     586:	cbz	r0, 594 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()+0x18>
      Block* nextBlock = currentBlock->next;
     588:	ldr	r4, [r0, #0]
 public:
  void* allocate(size_t size) {
    return malloc(size);
  }
  void deallocate(void* pointer) {
    free(pointer);
     58a:	bl	b72c <free>
      : _head(NULL), _nextBlockCapacity(initialSize) {}

  ~DynamicJsonBufferBase() {
    Block* currentBlock = _head;

    while (currentBlock != NULL) {
     58e:	mov	r0, r4
     590:	cmp	r4, #0
     592:	bne.n	588 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()+0xc>
      Block* nextBlock = currentBlock->next;
      _allocator.deallocate(currentBlock);
      currentBlock = nextBlock;
    }
  }
     594:	mov	r0, r5
     596:	pop	{r3, r4, r5, pc}
     598:	.word	0x0000c664

0000059c <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     59c:	push	{r4, r5, r6, r7, lr}
     59e:	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     5a0:	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5a2:	ldr	r5, [r0, #0]
     5a4:	strb.w	r3, [sp, #4]
     5a8:	strb.w	r3, [sp, #5]
     5ac:	strb.w	r3, [sp, #6]
     5b0:	ldr	r6, [r5, #0]
     5b2:	ldr	r2, [pc, #220]	; (690 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     5b4:	strb.w	r3, [sp, #8]
     5b8:	cmp	r6, r2
     5ba:	strb.w	r3, [sp, #9]
     5be:	strb.w	r3, [sp, #10]
     5c2:	bne.n	684 <CLEDController::clearLeds(int)+0xe8>
     5c4:	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     5c6:	str	r1, [sp, #16]
     5c8:	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5ca:	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     5cc:	add	r0, sp, #4
     5ce:	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5d0:	strb.w	r3, [sp, #30]
        g = rhs.g;
     5d4:	strb.w	r3, [sp, #31]
        b = rhs.b;
     5d8:	strb.w	r3, [sp, #32]
     5dc:	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5de:	beq.n	60c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     5e0:	strb.w	r3, [sp, #29]
     5e4:	strb.w	r3, [sp, #28]
     5e8:	strb.w	r3, [sp, #27]
     5ec:	strb.w	r3, [sp, #26]
     5f0:	strb.w	r3, [sp, #25]
     5f4:	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     5f8:	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     5fa:	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     5fc:	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     600:	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     602:	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     604:	add	r1, sp, #12
     606:	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     608:	add	sp, #44	; 0x2c
     60a:	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     60c:	ldr	r2, [pc, #132]	; (694 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     60e:	ldrb	r3, [r2, #0]
     610:	adds	r3, #1
     612:	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     616:	tst.w	r3, #1
     61a:	ite	ne
     61c:	movne	r1, #128	; 0x80
     61e:	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     620:	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     622:	lsls	r2, r3, #30
     624:	itt	mi
     626:	orrmi.w	r1, r1, #64	; 0x40
     62a:	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     62c:	lsls	r3, r3, #29
     62e:	it	mi
     630:	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     634:	adds	r1, #16
     636:	movs	r2, #0
     638:	uxtb	r1, r1
     63a:	add.w	r3, sp, #27
     63e:	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     642:	mov.w	lr, #256	; 0x100
     646:	cbz	r2, 674 <CLEDController::clearLeds(int)+0xd8>
     648:	sdiv	r2, lr, r2
     64c:	uxtb	r2, r2
     64e:	adds	r0, r2, #1
     650:	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     652:	mla	r5, r0, r1, r1
     656:	asrs	r5, r5, #8
     658:	strb	r0, [r3, #0]
     65a:	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     65c:	cbz	r5, 660 <CLEDController::clearLeds(int)+0xc4>
     65e:	subs	r6, #1
     660:	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     664:	cbz	r0, 668 <CLEDController::clearLeds(int)+0xcc>
     666:	strb	r2, [r3, #0]
     668:	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     66a:	cmp	r7, r3
     66c:	beq.n	680 <CLEDController::clearLeds(int)+0xe4>
     66e:	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     670:	cmp	r2, #0
     672:	bne.n	648 <CLEDController::clearLeds(int)+0xac>
     674:	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     676:	strb.w	r2, [r3, #-3]
     67a:	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     67c:	cmp	r7, r3
     67e:	bne.n	66e <CLEDController::clearLeds(int)+0xd2>
     680:	ldr	r5, [r4, #0]
     682:	b.n	5f8 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     684:	mov	r2, r1
     686:	add	r3, sp, #8
     688:	add	r1, sp, #4
     68a:	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     68c:	add	sp, #44	; 0x2c
     68e:	pop	{r4, r5, r6, r7, pc}
     690:	.word	0x00000699
     694:	.word	0x1fff9f68

00000698 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     698:	push	{r4, r5, r6, r7, lr}
     69a:	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     69c:	ldrb	r4, [r3, #0]
        g = rhs.g;
     69e:	ldrb	r6, [r3, #1]
        b = rhs.b;
     6a0:	ldrb	r3, [r3, #2]
     6a2:	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6a4:	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     6a6:	str	r1, [sp, #4]
     6a8:	str	r2, [sp, #8]
     6aa:	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6ac:	strb.w	r4, [sp, #22]
        g = rhs.g;
     6b0:	strb.w	r6, [sp, #23]
        b = rhs.b;
     6b4:	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6b8:	beq.n	6e8 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     6ba:	movs	r3, #0
     6bc:	strb.w	r3, [sp, #21]
     6c0:	strb.w	r3, [sp, #20]
     6c4:	strb.w	r3, [sp, #19]
     6c8:	strb.w	r3, [sp, #18]
     6cc:	strb.w	r3, [sp, #17]
     6d0:	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d4:	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     6d6:	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d8:	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     6da:	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6de:	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6e0:	add	r1, sp, #4
     6e2:	blx	r2
  }
     6e4:	add	sp, #36	; 0x24
     6e6:	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6e8:	ldr	r2, [pc, #108]	; (758 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ea:	ldrb	r3, [r2, #0]
     6ec:	adds	r3, #1
     6ee:	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6f2:	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6f6:	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6f8:	ite	ne
     6fa:	movne	r2, #128	; 0x80
     6fc:	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6fe:	lsls	r1, r3, #30
     700:	itt	mi
     702:	orrmi.w	r2, r2, #64	; 0x40
     706:	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     708:	lsls	r3, r3, #29
     70a:	it	mi
     70c:	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     710:	adds	r2, #16
     712:	uxtb	r2, r2
     714:	add.w	r3, sp, #19
     718:	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     71c:	mov.w	lr, #256	; 0x100
     720:	cbz	r4, 74e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     722:	sdiv	r4, lr, r4
     726:	uxtb	r4, r4
     728:	adds	r1, r4, #1
     72a:	uxtb	r1, r1
     72c:	mla	r5, r1, r2, r2
     730:	asrs	r5, r5, #8
     732:	strb	r1, [r3, #0]
     734:	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     736:	cbz	r5, 73a <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     738:	subs	r6, #1
     73a:	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     73e:	cbz	r1, 742 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     740:	strb	r4, [r3, #0]
     742:	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     744:	cmp	r3, r7
     746:	beq.n	6d4 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     748:	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     74a:	cmp	r4, #0
     74c:	bne.n	722 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     74e:	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     750:	strb.w	r4, [r3, #-3]
     754:	b.n	742 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     756:	nop
     758:	.word	0x1fff9f68

0000075c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     75c:	push	{r4, r5, r6, r7, lr}
     75e:	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     760:	ldrb	r4, [r3, #0]
        g = rhs.g;
     762:	ldrb	r6, [r3, #1]
        b = rhs.b;
     764:	ldrb	r3, [r3, #2]
     766:	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     768:	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     76a:	str	r1, [sp, #4]
     76c:	str	r2, [sp, #8]
     76e:	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     770:	strb.w	r4, [sp, #22]
        g = rhs.g;
     774:	strb.w	r6, [sp, #23]
        b = rhs.b;
     778:	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     77c:	beq.n	7ae <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     77e:	movs	r3, #0
     780:	strb.w	r3, [sp, #21]
     784:	strb.w	r3, [sp, #20]
     788:	strb.w	r3, [sp, #19]
     78c:	strb.w	r3, [sp, #18]
     790:	strb.w	r3, [sp, #17]
     794:	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     798:	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     79a:	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     79c:	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     79e:	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     7a0:	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     7a4:	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7a6:	add	r1, sp, #4
     7a8:	blx	r3
  }
     7aa:	add	sp, #36	; 0x24
     7ac:	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     7ae:	ldr	r2, [pc, #108]	; (81c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     7b0:	ldrb	r3, [r2, #0]
     7b2:	adds	r3, #1
     7b4:	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     7b8:	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     7bc:	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     7be:	ite	ne
     7c0:	movne	r2, #128	; 0x80
     7c2:	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     7c4:	lsls	r1, r3, #30
     7c6:	itt	mi
     7c8:	orrmi.w	r2, r2, #64	; 0x40
     7cc:	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     7ce:	lsls	r3, r3, #29
     7d0:	it	mi
     7d2:	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     7d6:	adds	r2, #16
     7d8:	uxtb	r2, r2
     7da:	add.w	r3, sp, #19
     7de:	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7e2:	mov.w	lr, #256	; 0x100
     7e6:	cbz	r4, 814 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     7e8:	sdiv	r4, lr, r4
     7ec:	uxtb	r4, r4
     7ee:	adds	r1, r4, #1
     7f0:	uxtb	r1, r1
     7f2:	mla	r5, r1, r2, r2
     7f6:	asrs	r5, r5, #8
     7f8:	strb	r1, [r3, #0]
     7fa:	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     7fc:	cbz	r5, 800 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     7fe:	subs	r6, #1
     800:	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     804:	cbz	r1, 808 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     806:	strb	r4, [r3, #0]
     808:	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     80a:	cmp	r3, r7
     80c:	beq.n	798 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     80e:	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     810:	cmp	r4, #0
     812:	bne.n	7e8 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     814:	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     816:	strb.w	r4, [r3, #-3]
     81a:	b.n	808 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     81c:	.word	0x1fff9f68

00000820 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:

	virtual uint16_t getMaxRefreshRate() const { return 400; }

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     820:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     824:	sub	sp, #44	; 0x2c
     826:	mov	r4, r0
     828:	str	r0, [sp, #36]	; 0x24
     82a:	str	r1, [sp, #32]
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
     82c:	bl	9410 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
     830:	ldrh	r3, [r4, #32]
     832:	subs	r0, r0, r3
     834:	uxth	r3, r0
     836:	cmp	r3, #49	; 0x31
     838:	bls.n	82c <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
     83a:	ldr	r4, [sp, #32]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
     83c:	ldr	r2, [pc, #632]	; (ab8 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x298>)
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
     83e:	ldrb	r0, [r4, #15]
     840:	ldr	r3, [r2, #0]
     842:	str	r0, [sp, #8]
            e[1] = other.e[1];
     844:	ldrb	r0, [r4, #16]
            e[2] = other.e[2];
     846:	ldrb	r5, [r4, #17]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
     848:	str	r0, [sp, #4]
            e[2] = other.e[2];
     84a:	mov	r0, r4
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
     84c:	ldrb	r6, [r4, #13]
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
     84e:	ldr.w	r8, [r4]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
     852:	ldrb.w	r9, [r4, #12]
            d[1] = other.d[1];
            d[2] = other.d[2];
     856:	ldrb.w	sl, [r4, #14]
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
     85a:	str	r5, [sp, #12]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     85c:	ldrb	r7, [r4, #18]
        g = rhs.g;
     85e:	ldrb	r5, [r4, #19]
        b = rhs.b;
     860:	ldrb.w	lr, [r4, #20]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
     864:	ldr	r1, [pc, #596]	; (abc <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x29c>)
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
     866:	ldrsb.w	r4, [r4, #21]
     86a:	str	r4, [sp, #16]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
     86c:	orr.w	r3, r3, #16777216	; 0x1000000
            mLenRemaining = mLen = other.mLen;
     870:	ldr.w	fp, [r0, #4]
     874:	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
     876:	ldr	r2, [r1, #0]
		ARM_DWT_CYCCNT = 0;
     878:	ldr	r0, [pc, #580]	; (ac0 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
     87a:	ldr	r3, [pc, #584]	; (ac4 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a4>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
     87c:	orr.w	r2, r2, #1
     880:	str	r2, [r1, #0]
		ARM_DWT_CYCCNT = 0;
     882:	movs	r2, #0
     884:	str	r2, [r0, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
     886:	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
     888:	ldr	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     88a:	ldr	r0, [sp, #4]
     88c:	bic.w	r2, r2, #4096	; 0x1000
		*port = lo;
     890:	str	r2, [r3, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     892:	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     896:	subs	r6, r0, r6
     898:	uxtb.w	ip, r6
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     89c:	cmp	r4, #0
     89e:	bne.w	d50 <L_2601_delayMicroseconds+0x280>
     8a2:	adds	r3, r5, #1
     8a4:	str	r3, [sp, #20]

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
     8a6:	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     8a8:	ldr	r3, [pc, #532]	; (ac0 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)
     8aa:	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
     8ac:	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     8b0:	add.w	r1, r1, #120	; 0x78

		while(pixels.has(1)) {
     8b4:	ble.w	a2e <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x20e>
     8b8:	adds	r2, r7, #1
     8ba:	str	r2, [sp, #24]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
     8bc:	ldr	r0, [pc, #516]	; (ac4 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a4>)
     8be:	add.w	r2, lr, #1
     8c2:	str	r2, [sp, #28]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     8c4:	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     8c6:	ldr	r2, [sp, #8]
     8c8:	rsb	r9, r9, r2
                d[1] = e[1] - d[1];
     8cc:	ldr	r2, [sp, #4]
     8ce:	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
     8d2:	ldr	r2, [sp, #12]
     8d4:	rsb	sl, sl, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     8d8:	uxtb.w	r9, r9
                d[1] = e[1] - d[1];
     8dc:	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
     8e0:	uxtb.w	sl, sl
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
     8e4:	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     8e6:	ldr	r2, [r3, #0]
     8e8:	cmp	r2, r1
     8ea:	bls.n	8f8 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xd8>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
     8ec:	ldr	r2, [r3, #0]
     8ee:	subs	r2, r2, r1
     8f0:	cmp.w	r2, #4704	; 0x1260
     8f4:	bhi.w	ac8 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a8>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
     8f8:	ldr	r5, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
     8fa:	ldr	r6, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
     8fc:	orr.w	r5, r5, #4096	; 0x1000
			lo = *port & ~FastPin<DATA_PIN>::mask();
     900:	bic.w	r6, r6, #4096	; 0x1000
     904:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     908:	ldr	r2, [r3, #0]
     90a:	cmp	r2, r1
     90c:	bcc.n	908 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xe8>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     90e:	ldr	r1, [r7, #0]

	inline static void toggle() __attribute__ ((always_inline)) { _PTOR::r() = _MASK; }

	inline static void hi(register port_ptr_t port) __attribute__ ((always_inline)) { hi(); }
	inline static void lo(register port_ptr_t port) __attribute__ ((always_inline)) { lo(); }
	inline static void fastset(register port_ptr_t port, register port_t val) __attribute__ ((always_inline)) { *port = val; }
     910:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     912:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     914:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     918:	bmi.w	a46 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x226>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     91c:	ldr	r2, [r3, #0]
     91e:	subs	r2, r1, r2
     920:	cmp	r2, #104	; 0x68
     922:	bhi.n	91c <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xfc>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     924:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     926:	subs.w	lr, lr, #1
     92a:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     92c:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     92e:	bne.n	908 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xe8>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
     930:	ldr	r2, [r3, #0]
     932:	cmp	r1, r2
     934:	bhi.n	930 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x110>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     936:	ldr	r1, [r7, #0]
     938:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     93a:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     93c:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     940:	bmi.w	a5a <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x23a>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     944:	ldr	r2, [r3, #0]
     946:	subs	r2, r1, r2
     948:	cmp	r2, #104	; 0x68
     94a:	bhi.n	944 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x124>
     94c:	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     94e:	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     952:	cbz	r4, 964 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x144>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     954:	uqadd8	r4, r4, r9
     958:	ldr	r2, [sp, #24]
     95a:	uxtb	r4, r4
     95c:	mul.w	r4, r4, r2
     960:	ubfx	r4, r4, #8, #8
     964:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     968:	ldr	r2, [r3, #0]
     96a:	cmp	r1, r2
     96c:	bhi.n	968 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x148>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     96e:	ldr	r1, [r7, #0]
     970:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     972:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     974:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     978:	bmi.n	a6e <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x24e>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     97a:	ldr	r2, [r3, #0]
     97c:	subs	r2, r1, r2
     97e:	cmp	r2, #104	; 0x68
     980:	bhi.n	97a <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x15a>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     982:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     984:	subs.w	lr, lr, #1
     988:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     98a:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     98c:	bne.n	968 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x148>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
     98e:	ldr	r2, [r3, #0]
     990:	cmp	r1, r2
     992:	bhi.n	98e <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x16e>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     994:	ldr	r1, [r7, #0]
     996:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     998:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     99a:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     99e:	bmi.n	a80 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x260>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     9a0:	ldr	r2, [r3, #0]
     9a2:	subs	r2, r1, r2
     9a4:	cmp	r2, #104	; 0x68
     9a6:	bhi.n	9a0 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x180>
     9a8:	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     9aa:	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     9ae:	cbz	r4, 9c0 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a0>
     9b0:	uqadd8	r4, r4, sl
     9b4:	ldr	r2, [sp, #28]
     9b6:	uxtb	r4, r4
     9b8:	mul.w	r4, r4, r2
     9bc:	ubfx	r4, r4, #8, #8
     9c0:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     9c4:	ldr	r2, [r3, #0]
     9c6:	cmp	r2, r1
     9c8:	bcc.n	9c4 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a4>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     9ca:	ldr	r1, [r7, #0]
     9cc:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     9ce:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     9d0:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     9d4:	bmi.n	a92 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x272>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     9d6:	ldr	r2, [r3, #0]
     9d8:	subs	r2, r1, r2
     9da:	cmp	r2, #104	; 0x68
     9dc:	bhi.n	9d6 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1b6>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     9de:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     9e0:	subs.w	lr, lr, #1
     9e4:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     9e6:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     9e8:	bne.n	9c4 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a4>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
     9ea:	ldr	r2, [r3, #0]
     9ec:	cmp	r1, r2
     9ee:	bhi.n	9ea <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1ca>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     9f0:	ldr	r1, [r7, #0]
     9f2:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     9f4:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     9f6:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     9fa:	bmi.n	aa4 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x284>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     9fc:	ldr	r2, [r3, #0]
     9fe:	subs	r2, r1, r2
     a00:	cmp	r2, #104	; 0x68
     a02:	bhi.n	9fc <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1dc>
     a04:	ldr	r2, [sp, #16]
     a06:	str	r6, [r0, #0]
     a08:	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     a0a:	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     a0e:	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     a12:	cbz	r4, a24 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x204>
     a14:	uqadd8	r4, r4, ip
     a18:	ldr	r2, [sp, #20]
     a1a:	uxtb	r4, r4
     a1c:	mul.w	r4, r2, r4
     a20:	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
     a24:	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
     a26:	cmp.w	fp, #0
     a2a:	bne.w	8c6 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xa6>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
     a2e:	cpsie	i
		return ARM_DWT_CYCCNT;
     a30:	ldr	r3, [pc, #140]	; (ac0 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)
     a32:	ldr	r3, [r3, #0]

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
     a34:	cmp	r3, #0
     a36:	beq.n	aca <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2aa>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
     a38:	bl	9410 <micros>
     a3c:	ldr	r3, [sp, #36]	; 0x24
     a3e:	strh	r0, [r3, #32]
      sei(); delayMicroseconds(WAIT_TIME); cli();
      showRGBInternal(pixels);
    }
    mWait.mark();
  }
     a40:	add	sp, #44	; 0x2c
     a42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     a46:	ldr	r2, [r3, #0]
     a48:	subs	r2, r1, r2
     a4a:	cmp	r2, #44	; 0x2c
     a4c:	bls.w	924 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x104>
     a50:	ldr	r2, [r3, #0]
     a52:	subs	r2, r1, r2
     a54:	cmp	r2, #44	; 0x2c
     a56:	bhi.n	a46 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x226>
     a58:	b.n	924 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x104>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     a5a:	ldr	r2, [r3, #0]
     a5c:	subs	r2, r1, r2
     a5e:	cmp	r2, #44	; 0x2c
     a60:	bls.w	94c <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x12c>
     a64:	ldr	r2, [r3, #0]
     a66:	subs	r2, r1, r2
     a68:	cmp	r2, #44	; 0x2c
     a6a:	bhi.n	a5a <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x23a>
     a6c:	b.n	94c <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x12c>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     a6e:	ldr	r2, [r3, #0]
     a70:	subs	r2, r1, r2
     a72:	cmp	r2, #44	; 0x2c
     a74:	bls.n	982 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x162>
     a76:	ldr	r2, [r3, #0]
     a78:	subs	r2, r1, r2
     a7a:	cmp	r2, #44	; 0x2c
     a7c:	bhi.n	a6e <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x24e>
     a7e:	b.n	982 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x162>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     a80:	ldr	r2, [r3, #0]
     a82:	subs	r2, r1, r2
     a84:	cmp	r2, #44	; 0x2c
     a86:	bls.n	9a8 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x188>
     a88:	ldr	r2, [r3, #0]
     a8a:	subs	r2, r1, r2
     a8c:	cmp	r2, #44	; 0x2c
     a8e:	bhi.n	a80 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x260>
     a90:	b.n	9a8 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x188>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     a92:	ldr	r2, [r3, #0]
     a94:	subs	r2, r1, r2
     a96:	cmp	r2, #44	; 0x2c
     a98:	bls.n	9de <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1be>
     a9a:	ldr	r2, [r3, #0]
     a9c:	subs	r2, r1, r2
     a9e:	cmp	r2, #44	; 0x2c
     aa0:	bhi.n	a92 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x272>
     aa2:	b.n	9de <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1be>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     aa4:	ldr	r2, [r3, #0]
     aa6:	subs	r2, r1, r2
     aa8:	cmp	r2, #44	; 0x2c
     aaa:	bls.n	a04 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1e4>
     aac:	ldr	r2, [r3, #0]
     aae:	subs	r2, r1, r2
     ab0:	cmp	r2, #44	; 0x2c
     ab2:	bhi.n	aa4 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x284>
     ab4:	b.n	a04 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1e4>
     ab6:	nop
     ab8:	.word	0xe000edfc
     abc:	.word	0xe0001000
     ac0:	.word	0xe0001004
     ac4:	.word	0x400ff000
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
     ac8:	cpsie	i
protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
      sei(); delayMicroseconds(WAIT_TIME); cli();
     aca:	cpsie	i
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
     acc:	mov.w	r3, #1600	; 0x640

00000ad0 <L_2601_delayMicroseconds>:
     ad0:	subs	r3, #1
     ad2:	bne.n	ad0 <L_2601_delayMicroseconds>
     ad4:	cpsid	i
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
     ad6:	ldr	r7, [sp, #32]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
     ad8:	ldr	r2, [pc, #660]	; (d70 <L_2601_delayMicroseconds+0x2a0>)
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
     ada:	ldrb	r1, [r7, #15]
     adc:	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
     ade:	ldrb	r6, [r7, #17]

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
     ae0:	str	r1, [sp, #8]
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
     ae2:	mov	r4, r7
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
     ae4:	ldrb	r1, [r7, #16]
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
     ae6:	ldrsb.w	lr, [r4, #21]
            mLenRemaining = mLen = other.mLen;
     aea:	ldr	r4, [sp, #32]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
     aec:	ldr	r0, [pc, #644]	; (d74 <L_2601_delayMicroseconds+0x2a4>)
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
     aee:	ldrb	r5, [r7, #13]
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
     af0:	str	r1, [sp, #4]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
     af2:	orr.w	r3, r3, #16777216	; 0x1000000
            e[2] = other.e[2];
            mData = other.mData;
     af6:	ldr.w	r8, [r7]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
     afa:	ldrb.w	sl, [r7, #12]
            d[1] = other.d[1];
            d[2] = other.d[2];
     afe:	ldrb.w	r9, [r7, #14]
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
     b02:	str	r6, [sp, #12]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     b04:	ldrb	r1, [r7, #19]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b06:	ldrb	r6, [r7, #18]
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
     b08:	str.w	lr, [sp, #16]
        g = rhs.g;
        b = rhs.b;
     b0c:	ldrb	r7, [r7, #20]
            mLenRemaining = mLen = other.mLen;
     b0e:	ldr.w	fp, [r4, #4]
     b12:	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
     b14:	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
     b16:	ldr	r4, [pc, #608]	; (d78 <L_2601_delayMicroseconds+0x2a8>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
     b18:	ldr	r3, [pc, #608]	; (d7c <L_2601_delayMicroseconds+0x2ac>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
     b1a:	orr.w	r2, r2, #1
     b1e:	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
     b20:	movs	r2, #0
     b22:	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
     b24:	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
     b26:	ldr	r2, [r3, #0]
     b28:	bic.w	r2, r2, #4096	; 0x1000
		*port = lo;
     b2c:	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     b2e:	ldr	r3, [sp, #4]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     b30:	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     b34:	subs	r5, r3, r5
     b36:	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     b3a:	cmp	r4, #0
     b3c:	beq.w	d64 <L_2601_delayMicroseconds+0x294>
     b40:	uqadd8	r4, r4, ip
     b44:	uxtb	r3, r4
     b46:	adds	r2, r1, #1
     b48:	mul.w	r3, r2, r3
     b4c:	str	r2, [sp, #20]
     b4e:	ubfx	r4, r3, #8, #8

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
     b52:	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     b54:	ldr	r3, [pc, #544]	; (d78 <L_2601_delayMicroseconds+0x2a8>)
     b56:	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
     b58:	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     b5c:	add.w	r1, r1, #120	; 0x78

		while(pixels.has(1)) {
     b60:	ble.w	cd8 <L_2601_delayMicroseconds+0x208>
     b64:	adds	r2, r6, #1
     b66:	str	r2, [sp, #24]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
     b68:	ldr	r0, [pc, #528]	; (d7c <L_2601_delayMicroseconds+0x2ac>)
     b6a:	adds	r2, r7, #1
     b6c:	str	r2, [sp, #28]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     b6e:	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     b70:	ldr	r2, [sp, #8]
     b72:	rsb	sl, sl, r2
                d[1] = e[1] - d[1];
     b76:	ldr	r2, [sp, #4]
     b78:	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
     b7c:	ldr	r2, [sp, #12]
     b7e:	rsb	r9, r9, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     b82:	uxtb.w	sl, sl
                d[1] = e[1] - d[1];
     b86:	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
     b8a:	uxtb.w	r9, r9
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
     b8e:	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     b90:	ldr	r2, [r3, #0]
     b92:	cmp	r2, r1
     b94:	bls.n	ba2 <L_2601_delayMicroseconds+0xd2>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
     b96:	ldr	r2, [r3, #0]
     b98:	subs	r2, r2, r1
     b9a:	cmp.w	r2, #4704	; 0x1260
     b9e:	bhi.w	d6a <L_2601_delayMicroseconds+0x29a>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
     ba2:	ldr	r6, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
     ba4:	ldr	r5, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
     ba6:	orr.w	r6, r6, #4096	; 0x1000
			lo = *port & ~FastPin<DATA_PIN>::mask();
     baa:	bic.w	r5, r5, #4096	; 0x1000
     bae:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     bb2:	ldr	r2, [r3, #0]
     bb4:	cmp	r2, r1
     bb6:	bcc.n	bb2 <L_2601_delayMicroseconds+0xe2>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     bb8:	ldr	r1, [r7, #0]
     bba:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     bbc:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     bbe:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     bc2:	bmi.w	ce0 <L_2601_delayMicroseconds+0x210>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     bc6:	ldr	r2, [r3, #0]
     bc8:	subs	r2, r1, r2
     bca:	cmp	r2, #104	; 0x68
     bcc:	bhi.n	bc6 <L_2601_delayMicroseconds+0xf6>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     bce:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     bd0:	subs.w	lr, lr, #1
     bd4:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     bd6:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     bd8:	bne.n	bb2 <L_2601_delayMicroseconds+0xe2>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
     bda:	ldr	r2, [r3, #0]
     bdc:	cmp	r1, r2
     bde:	bhi.n	bda <L_2601_delayMicroseconds+0x10a>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     be0:	ldr	r1, [r7, #0]
     be2:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     be4:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     be6:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     bea:	bmi.w	cf4 <L_2601_delayMicroseconds+0x224>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     bee:	ldr	r2, [r3, #0]
     bf0:	subs	r2, r1, r2
     bf2:	cmp	r2, #104	; 0x68
     bf4:	bhi.n	bee <L_2601_delayMicroseconds+0x11e>
     bf6:	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     bf8:	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     bfc:	cbz	r4, c0e <L_2601_delayMicroseconds+0x13e>
     bfe:	uqadd8	r4, r4, sl
     c02:	ldr	r2, [sp, #24]
     c04:	uxtb	r4, r4
     c06:	mul.w	r4, r4, r2
     c0a:	ubfx	r4, r4, #8, #8
     c0e:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     c12:	ldr	r2, [r3, #0]
     c14:	cmp	r2, r1
     c16:	bcc.n	c12 <L_2601_delayMicroseconds+0x142>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     c18:	ldr	r1, [r7, #0]
     c1a:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     c1c:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     c1e:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     c22:	bmi.n	d08 <L_2601_delayMicroseconds+0x238>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     c24:	ldr	r2, [r3, #0]
     c26:	subs	r2, r1, r2
     c28:	cmp	r2, #104	; 0x68
     c2a:	bhi.n	c24 <L_2601_delayMicroseconds+0x154>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     c2c:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     c2e:	subs.w	lr, lr, #1
     c32:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     c34:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     c36:	bne.n	c12 <L_2601_delayMicroseconds+0x142>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
     c38:	ldr	r2, [r3, #0]
     c3a:	cmp	r1, r2
     c3c:	bhi.n	c38 <L_2601_delayMicroseconds+0x168>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     c3e:	ldr	r1, [r7, #0]
     c40:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     c42:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     c44:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     c48:	bmi.n	d1a <L_2601_delayMicroseconds+0x24a>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     c4a:	ldr	r2, [r3, #0]
     c4c:	subs	r2, r1, r2
     c4e:	cmp	r2, #104	; 0x68
     c50:	bhi.n	c4a <L_2601_delayMicroseconds+0x17a>
     c52:	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     c54:	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     c58:	cbz	r4, c6a <L_2601_delayMicroseconds+0x19a>
     c5a:	uqadd8	r4, r4, r9
     c5e:	ldr	r2, [sp, #28]
     c60:	uxtb	r4, r4
     c62:	mul.w	r4, r4, r2
     c66:	ubfx	r4, r4, #8, #8
     c6a:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     c6e:	ldr	r2, [r3, #0]
     c70:	cmp	r2, r1
     c72:	bcc.n	c6e <L_2601_delayMicroseconds+0x19e>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     c74:	ldr	r1, [r7, #0]
     c76:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     c78:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     c7a:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     c7e:	bmi.n	d2c <L_2601_delayMicroseconds+0x25c>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     c80:	ldr	r2, [r3, #0]
     c82:	subs	r2, r1, r2
     c84:	cmp	r2, #104	; 0x68
     c86:	bhi.n	c80 <L_2601_delayMicroseconds+0x1b0>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     c88:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     c8a:	subs.w	lr, lr, #1
     c8e:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     c90:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     c92:	bne.n	c6e <L_2601_delayMicroseconds+0x19e>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
     c94:	ldr	r2, [r3, #0]
     c96:	cmp	r1, r2
     c98:	bhi.n	c94 <L_2601_delayMicroseconds+0x1c4>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     c9a:	ldr	r1, [r7, #0]
     c9c:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     c9e:	lsls	r2, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     ca0:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     ca4:	bmi.n	d3e <L_2601_delayMicroseconds+0x26e>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     ca6:	ldr	r2, [r3, #0]
     ca8:	subs	r2, r1, r2
     caa:	cmp	r2, #104	; 0x68
     cac:	bhi.n	ca6 <L_2601_delayMicroseconds+0x1d6>
     cae:	ldr	r2, [sp, #16]
     cb0:	str	r5, [r0, #0]
     cb2:	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     cb4:	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     cb8:	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     cbc:	cbz	r4, cce <L_2601_delayMicroseconds+0x1fe>
     cbe:	uqadd8	r4, r4, ip
     cc2:	ldr	r2, [sp, #20]
     cc4:	uxtb	r4, r4
     cc6:	mul.w	r4, r2, r4
     cca:	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
     cce:	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
     cd0:	cmp.w	fp, #0
     cd4:	bne.w	b70 <L_2601_delayMicroseconds+0xa0>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
     cd8:	cpsie	i
		return ARM_DWT_CYCCNT;
     cda:	ldr	r3, [pc, #156]	; (d78 <L_2601_delayMicroseconds+0x2a8>)
     cdc:	ldr	r3, [r3, #0]
     cde:	b.n	a38 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x218>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     ce0:	ldr	r2, [r3, #0]
     ce2:	subs	r2, r1, r2
     ce4:	cmp	r2, #44	; 0x2c
     ce6:	bls.w	bce <L_2601_delayMicroseconds+0xfe>
     cea:	ldr	r2, [r3, #0]
     cec:	subs	r2, r1, r2
     cee:	cmp	r2, #44	; 0x2c
     cf0:	bhi.n	ce0 <L_2601_delayMicroseconds+0x210>
     cf2:	b.n	bce <L_2601_delayMicroseconds+0xfe>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     cf4:	ldr	r2, [r3, #0]
     cf6:	subs	r2, r1, r2
     cf8:	cmp	r2, #44	; 0x2c
     cfa:	bls.w	bf6 <L_2601_delayMicroseconds+0x126>
     cfe:	ldr	r2, [r3, #0]
     d00:	subs	r2, r1, r2
     d02:	cmp	r2, #44	; 0x2c
     d04:	bhi.n	cf4 <L_2601_delayMicroseconds+0x224>
     d06:	b.n	bf6 <L_2601_delayMicroseconds+0x126>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     d08:	ldr	r2, [r3, #0]
     d0a:	subs	r2, r1, r2
     d0c:	cmp	r2, #44	; 0x2c
     d0e:	bls.n	c2c <L_2601_delayMicroseconds+0x15c>
     d10:	ldr	r2, [r3, #0]
     d12:	subs	r2, r1, r2
     d14:	cmp	r2, #44	; 0x2c
     d16:	bhi.n	d08 <L_2601_delayMicroseconds+0x238>
     d18:	b.n	c2c <L_2601_delayMicroseconds+0x15c>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     d1a:	ldr	r2, [r3, #0]
     d1c:	subs	r2, r1, r2
     d1e:	cmp	r2, #44	; 0x2c
     d20:	bls.n	c52 <L_2601_delayMicroseconds+0x182>
     d22:	ldr	r2, [r3, #0]
     d24:	subs	r2, r1, r2
     d26:	cmp	r2, #44	; 0x2c
     d28:	bhi.n	d1a <L_2601_delayMicroseconds+0x24a>
     d2a:	b.n	c52 <L_2601_delayMicroseconds+0x182>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     d2c:	ldr	r2, [r3, #0]
     d2e:	subs	r2, r1, r2
     d30:	cmp	r2, #44	; 0x2c
     d32:	bls.n	c88 <L_2601_delayMicroseconds+0x1b8>
     d34:	ldr	r2, [r3, #0]
     d36:	subs	r2, r1, r2
     d38:	cmp	r2, #44	; 0x2c
     d3a:	bhi.n	d2c <L_2601_delayMicroseconds+0x25c>
     d3c:	b.n	c88 <L_2601_delayMicroseconds+0x1b8>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     d3e:	ldr	r2, [r3, #0]
     d40:	subs	r2, r1, r2
     d42:	cmp	r2, #44	; 0x2c
     d44:	bls.n	cae <L_2601_delayMicroseconds+0x1de>
     d46:	ldr	r2, [r3, #0]
     d48:	subs	r2, r1, r2
     d4a:	cmp	r2, #44	; 0x2c
     d4c:	bhi.n	d3e <L_2601_delayMicroseconds+0x26e>
     d4e:	b.n	cae <L_2601_delayMicroseconds+0x1de>
     d50:	uqadd8	r4, r4, ip
     d54:	uxtb	r3, r4
     d56:	adds	r2, r5, #1
     d58:	mul.w	r3, r2, r3
     d5c:	str	r2, [sp, #20]
     d5e:	ubfx	r4, r3, #8, #8
     d62:	b.n	8a6 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x86>
     d64:	adds	r3, r1, #1
     d66:	str	r3, [sp, #20]
     d68:	b.n	b52 <L_2601_delayMicroseconds+0x82>
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
     d6a:	cpsie	i
     d6c:	b.n	a38 <ClocklessController<3, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x218>
     d6e:	nop
     d70:	.word	0xe000edfc
     d74:	.word	0xe0001000
     d78:	.word	0xe0001004
     d7c:	.word	0x400ff000

00000d80 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:

	virtual uint16_t getMaxRefreshRate() const { return 400; }

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     d80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d84:	sub	sp, #44	; 0x2c
     d86:	mov	r4, r0
     d88:	str	r0, [sp, #36]	; 0x24
     d8a:	str	r1, [sp, #32]
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
     d8c:	bl	9410 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
     d90:	ldrh	r3, [r4, #32]
     d92:	subs	r0, r0, r3
     d94:	uxth	r3, r0
     d96:	cmp	r3, #49	; 0x31
     d98:	bls.n	d8c <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
     d9a:	ldr	r4, [sp, #32]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
     d9c:	ldr	r2, [pc, #632]	; (1018 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x298>)
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
     d9e:	ldrb	r0, [r4, #15]
     da0:	ldr	r3, [r2, #0]
     da2:	str	r0, [sp, #8]
            e[1] = other.e[1];
     da4:	ldrb	r0, [r4, #16]
            e[2] = other.e[2];
     da6:	ldrb	r5, [r4, #17]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
     da8:	str	r0, [sp, #4]
            e[2] = other.e[2];
     daa:	mov	r0, r4
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
     dac:	ldrb	r6, [r4, #13]
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
     dae:	ldr.w	r8, [r4]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
     db2:	ldrb.w	r9, [r4, #12]
            d[1] = other.d[1];
            d[2] = other.d[2];
     db6:	ldrb.w	sl, [r4, #14]
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
     dba:	str	r5, [sp, #12]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dbc:	ldrb	r7, [r4, #18]
        g = rhs.g;
     dbe:	ldrb	r5, [r4, #19]
        b = rhs.b;
     dc0:	ldrb.w	lr, [r4, #20]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
     dc4:	ldr	r1, [pc, #596]	; (101c <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x29c>)
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
     dc6:	ldrsb.w	r4, [r4, #21]
     dca:	str	r4, [sp, #16]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
     dcc:	orr.w	r3, r3, #16777216	; 0x1000000
            mLenRemaining = mLen = other.mLen;
     dd0:	ldr.w	fp, [r0, #4]
     dd4:	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
     dd6:	ldr	r2, [r1, #0]
		ARM_DWT_CYCCNT = 0;
     dd8:	ldr	r0, [pc, #580]	; (1020 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
     dda:	ldr	r3, [pc, #584]	; (1024 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a4>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
     ddc:	orr.w	r2, r2, #1
     de0:	str	r2, [r1, #0]
		ARM_DWT_CYCCNT = 0;
     de2:	movs	r2, #0
     de4:	str	r2, [r0, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
     de6:	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
     de8:	ldr	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     dea:	ldr	r0, [sp, #4]
     dec:	bic.w	r2, r2, #128	; 0x80
		*port = lo;
     df0:	str	r2, [r3, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     df2:	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
     df6:	subs	r6, r0, r6
     df8:	uxtb.w	ip, r6
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     dfc:	cmp	r4, #0
     dfe:	bne.w	12b0 <L_4650_delayMicroseconds+0x280>
     e02:	adds	r3, r5, #1
     e04:	str	r3, [sp, #20]

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
     e06:	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     e08:	ldr	r3, [pc, #532]	; (1020 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)
     e0a:	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
     e0c:	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     e10:	add.w	r1, r1, #120	; 0x78

		while(pixels.has(1)) {
     e14:	ble.w	f8e <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x20e>
     e18:	adds	r2, r7, #1
     e1a:	str	r2, [sp, #24]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
     e1c:	ldr	r0, [pc, #516]	; (1024 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a4>)
     e1e:	add.w	r2, lr, #1
     e22:	str	r2, [sp, #28]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     e24:	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     e26:	ldr	r2, [sp, #8]
     e28:	rsb	r9, r9, r2
                d[1] = e[1] - d[1];
     e2c:	ldr	r2, [sp, #4]
     e2e:	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
     e32:	ldr	r2, [sp, #12]
     e34:	rsb	sl, sl, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     e38:	uxtb.w	r9, r9
                d[1] = e[1] - d[1];
     e3c:	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
     e40:	uxtb.w	sl, sl
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
     e44:	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
     e46:	ldr	r2, [r3, #0]
     e48:	cmp	r2, r1
     e4a:	bls.n	e58 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xd8>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
     e4c:	ldr	r2, [r3, #0]
     e4e:	subs	r2, r2, r1
     e50:	cmp.w	r2, #4704	; 0x1260
     e54:	bhi.w	1028 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a8>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
     e58:	ldr	r5, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
     e5a:	ldr	r6, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
     e5c:	orr.w	r5, r5, #128	; 0x80
			lo = *port & ~FastPin<DATA_PIN>::mask();
     e60:	bic.w	r6, r6, #128	; 0x80
     e64:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     e68:	ldr	r2, [r3, #0]
     e6a:	cmp	r2, r1
     e6c:	bcc.n	e68 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xe8>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     e6e:	ldr	r1, [r7, #0]
     e70:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     e72:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     e74:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     e78:	bmi.w	fa6 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x226>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     e7c:	ldr	r2, [r3, #0]
     e7e:	subs	r2, r1, r2
     e80:	cmp	r2, #104	; 0x68
     e82:	bhi.n	e7c <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xfc>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     e84:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     e86:	subs.w	lr, lr, #1
     e8a:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     e8c:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     e8e:	bne.n	e68 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xe8>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
     e90:	ldr	r2, [r3, #0]
     e92:	cmp	r1, r2
     e94:	bhi.n	e90 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x110>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     e96:	ldr	r1, [r7, #0]
     e98:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     e9a:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     e9c:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     ea0:	bmi.w	fba <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x23a>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     ea4:	ldr	r2, [r3, #0]
     ea6:	subs	r2, r1, r2
     ea8:	cmp	r2, #104	; 0x68
     eaa:	bhi.n	ea4 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x124>
     eac:	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     eae:	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     eb2:	cbz	r4, ec4 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x144>
     eb4:	uqadd8	r4, r4, r9
     eb8:	ldr	r2, [sp, #24]
     eba:	uxtb	r4, r4
     ebc:	mul.w	r4, r4, r2
     ec0:	ubfx	r4, r4, #8, #8
     ec4:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     ec8:	ldr	r2, [r3, #0]
     eca:	cmp	r1, r2
     ecc:	bhi.n	ec8 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x148>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     ece:	ldr	r1, [r7, #0]
     ed0:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     ed2:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     ed4:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     ed8:	bmi.n	fce <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x24e>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     eda:	ldr	r2, [r3, #0]
     edc:	subs	r2, r1, r2
     ede:	cmp	r2, #104	; 0x68
     ee0:	bhi.n	eda <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x15a>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     ee2:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     ee4:	subs.w	lr, lr, #1
     ee8:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     eea:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     eec:	bne.n	ec8 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x148>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
     eee:	ldr	r2, [r3, #0]
     ef0:	cmp	r1, r2
     ef2:	bhi.n	eee <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x16e>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     ef4:	ldr	r1, [r7, #0]
     ef6:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     ef8:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     efa:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     efe:	bmi.n	fe0 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x260>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     f00:	ldr	r2, [r3, #0]
     f02:	subs	r2, r1, r2
     f04:	cmp	r2, #104	; 0x68
     f06:	bhi.n	f00 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x180>
     f08:	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     f0a:	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     f0e:	cbz	r4, f20 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a0>
     f10:	uqadd8	r4, r4, sl
     f14:	ldr	r2, [sp, #28]
     f16:	uxtb	r4, r4
     f18:	mul.w	r4, r4, r2
     f1c:	ubfx	r4, r4, #8, #8
     f20:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
     f24:	ldr	r2, [r3, #0]
     f26:	cmp	r2, r1
     f28:	bcc.n	f24 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a4>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     f2a:	ldr	r1, [r7, #0]
     f2c:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     f2e:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     f30:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
     f34:	bmi.n	ff2 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x272>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     f36:	ldr	r2, [r3, #0]
     f38:	subs	r2, r1, r2
     f3a:	cmp	r2, #104	; 0x68
     f3c:	bhi.n	f36 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1b6>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     f3e:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     f40:	subs.w	lr, lr, #1
     f44:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
     f46:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
     f48:	bne.n	f24 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a4>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
     f4a:	ldr	r2, [r3, #0]
     f4c:	cmp	r1, r2
     f4e:	bhi.n	f4a <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1ca>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     f50:	ldr	r1, [r7, #0]
     f52:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     f54:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
     f56:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
     f5a:	bmi.n	1004 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x284>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
     f5c:	ldr	r2, [r3, #0]
     f5e:	subs	r2, r1, r2
     f60:	cmp	r2, #104	; 0x68
     f62:	bhi.n	f5c <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1dc>
     f64:	ldr	r2, [sp, #16]
     f66:	str	r6, [r0, #0]
     f68:	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     f6a:	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     f6e:	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     f72:	cbz	r4, f84 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x204>
     f74:	uqadd8	r4, r4, ip
     f78:	ldr	r2, [sp, #20]
     f7a:	uxtb	r4, r4
     f7c:	mul.w	r4, r2, r4
     f80:	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
     f84:	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
     f86:	cmp.w	fp, #0
     f8a:	bne.w	e26 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xa6>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
     f8e:	cpsie	i
		return ARM_DWT_CYCCNT;
     f90:	ldr	r3, [pc, #140]	; (1020 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)
     f92:	ldr	r3, [r3, #0]

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
     f94:	cmp	r3, #0
     f96:	beq.n	102a <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2aa>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
     f98:	bl	9410 <micros>
     f9c:	ldr	r3, [sp, #36]	; 0x24
     f9e:	strh	r0, [r3, #32]
      sei(); delayMicroseconds(WAIT_TIME); cli();
      showRGBInternal(pixels);
    }
    mWait.mark();
  }
     fa0:	add	sp, #44	; 0x2c
     fa2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     fa6:	ldr	r2, [r3, #0]
     fa8:	subs	r2, r1, r2
     faa:	cmp	r2, #44	; 0x2c
     fac:	bls.w	e84 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x104>
     fb0:	ldr	r2, [r3, #0]
     fb2:	subs	r2, r1, r2
     fb4:	cmp	r2, #44	; 0x2c
     fb6:	bhi.n	fa6 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x226>
     fb8:	b.n	e84 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x104>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     fba:	ldr	r2, [r3, #0]
     fbc:	subs	r2, r1, r2
     fbe:	cmp	r2, #44	; 0x2c
     fc0:	bls.w	eac <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x12c>
     fc4:	ldr	r2, [r3, #0]
     fc6:	subs	r2, r1, r2
     fc8:	cmp	r2, #44	; 0x2c
     fca:	bhi.n	fba <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x23a>
     fcc:	b.n	eac <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x12c>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     fce:	ldr	r2, [r3, #0]
     fd0:	subs	r2, r1, r2
     fd2:	cmp	r2, #44	; 0x2c
     fd4:	bls.n	ee2 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x162>
     fd6:	ldr	r2, [r3, #0]
     fd8:	subs	r2, r1, r2
     fda:	cmp	r2, #44	; 0x2c
     fdc:	bhi.n	fce <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x24e>
     fde:	b.n	ee2 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x162>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     fe0:	ldr	r2, [r3, #0]
     fe2:	subs	r2, r1, r2
     fe4:	cmp	r2, #44	; 0x2c
     fe6:	bls.n	f08 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x188>
     fe8:	ldr	r2, [r3, #0]
     fea:	subs	r2, r1, r2
     fec:	cmp	r2, #44	; 0x2c
     fee:	bhi.n	fe0 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x260>
     ff0:	b.n	f08 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x188>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
     ff2:	ldr	r2, [r3, #0]
     ff4:	subs	r2, r1, r2
     ff6:	cmp	r2, #44	; 0x2c
     ff8:	bls.n	f3e <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1be>
     ffa:	ldr	r2, [r3, #0]
     ffc:	subs	r2, r1, r2
     ffe:	cmp	r2, #44	; 0x2c
    1000:	bhi.n	ff2 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x272>
    1002:	b.n	f3e <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1be>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1004:	ldr	r2, [r3, #0]
    1006:	subs	r2, r1, r2
    1008:	cmp	r2, #44	; 0x2c
    100a:	bls.n	f64 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1e4>
    100c:	ldr	r2, [r3, #0]
    100e:	subs	r2, r1, r2
    1010:	cmp	r2, #44	; 0x2c
    1012:	bhi.n	1004 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x284>
    1014:	b.n	f64 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1e4>
    1016:	nop
    1018:	.word	0xe000edfc
    101c:	.word	0xe0001000
    1020:	.word	0xe0001004
    1024:	.word	0x400ff0c0
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    1028:	cpsie	i
protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
      sei(); delayMicroseconds(WAIT_TIME); cli();
    102a:	cpsie	i
    102c:	mov.w	r3, #1600	; 0x640

00001030 <L_4650_delayMicroseconds>:
    1030:	subs	r3, #1
    1032:	bne.n	1030 <L_4650_delayMicroseconds>
    1034:	cpsid	i
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    1036:	ldr	r7, [sp, #32]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    1038:	ldr	r2, [pc, #660]	; (12d0 <L_4650_delayMicroseconds+0x2a0>)
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    103a:	ldrb	r1, [r7, #15]
    103c:	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
    103e:	ldrb	r6, [r7, #17]

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    1040:	str	r1, [sp, #8]
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    1042:	mov	r4, r7
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    1044:	ldrb	r1, [r7, #16]
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    1046:	ldrsb.w	lr, [r4, #21]
            mLenRemaining = mLen = other.mLen;
    104a:	ldr	r4, [sp, #32]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    104c:	ldr	r0, [pc, #644]	; (12d4 <L_4650_delayMicroseconds+0x2a4>)
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    104e:	ldrb	r5, [r7, #13]
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    1050:	str	r1, [sp, #4]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    1052:	orr.w	r3, r3, #16777216	; 0x1000000
            e[2] = other.e[2];
            mData = other.mData;
    1056:	ldr.w	r8, [r7]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    105a:	ldrb.w	sl, [r7, #12]
            d[1] = other.d[1];
            d[2] = other.d[2];
    105e:	ldrb.w	r9, [r7, #14]
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
    1062:	str	r6, [sp, #12]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1064:	ldrb	r1, [r7, #19]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1066:	ldrb	r6, [r7, #18]
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    1068:	str.w	lr, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    106c:	ldrb	r7, [r7, #20]
            mLenRemaining = mLen = other.mLen;
    106e:	ldr.w	fp, [r4, #4]
    1072:	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1074:	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    1076:	ldr	r4, [pc, #608]	; (12d8 <L_4650_delayMicroseconds+0x2a8>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    1078:	ldr	r3, [pc, #608]	; (12dc <L_4650_delayMicroseconds+0x2ac>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    107a:	orr.w	r2, r2, #1
    107e:	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    1080:	movs	r2, #0
    1082:	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    1084:	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    1086:	ldr	r2, [r3, #0]
    1088:	bic.w	r2, r2, #128	; 0x80
		*port = lo;
    108c:	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    108e:	ldr	r3, [sp, #4]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1090:	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    1094:	subs	r5, r3, r5
    1096:	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    109a:	cmp	r4, #0
    109c:	beq.w	12c4 <L_4650_delayMicroseconds+0x294>
    10a0:	uqadd8	r4, r4, ip
    10a4:	uxtb	r3, r4
    10a6:	adds	r2, r1, #1
    10a8:	mul.w	r3, r2, r3
    10ac:	str	r2, [sp, #20]
    10ae:	ubfx	r4, r3, #8, #8

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    10b2:	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    10b4:	ldr	r3, [pc, #544]	; (12d8 <L_4650_delayMicroseconds+0x2a8>)
    10b6:	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    10b8:	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    10bc:	add.w	r1, r1, #120	; 0x78

		while(pixels.has(1)) {
    10c0:	ble.w	1238 <L_4650_delayMicroseconds+0x208>
    10c4:	adds	r2, r6, #1
    10c6:	str	r2, [sp, #24]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    10c8:	ldr	r0, [pc, #528]	; (12dc <L_4650_delayMicroseconds+0x2ac>)
    10ca:	adds	r2, r7, #1
    10cc:	str	r2, [sp, #28]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    10ce:	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    10d0:	ldr	r2, [sp, #8]
    10d2:	rsb	sl, sl, r2
                d[1] = e[1] - d[1];
    10d6:	ldr	r2, [sp, #4]
    10d8:	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    10dc:	ldr	r2, [sp, #12]
    10de:	rsb	r9, r9, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    10e2:	uxtb.w	sl, sl
                d[1] = e[1] - d[1];
    10e6:	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    10ea:	uxtb.w	r9, r9
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    10ee:	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    10f0:	ldr	r2, [r3, #0]
    10f2:	cmp	r2, r1
    10f4:	bls.n	1102 <L_4650_delayMicroseconds+0xd2>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    10f6:	ldr	r2, [r3, #0]
    10f8:	subs	r2, r2, r1
    10fa:	cmp.w	r2, #4704	; 0x1260
    10fe:	bhi.w	12ca <L_4650_delayMicroseconds+0x29a>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    1102:	ldr	r6, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    1104:	ldr	r5, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    1106:	orr.w	r6, r6, #128	; 0x80
			lo = *port & ~FastPin<DATA_PIN>::mask();
    110a:	bic.w	r5, r5, #128	; 0x80
    110e:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1112:	ldr	r2, [r3, #0]
    1114:	cmp	r2, r1
    1116:	bcc.n	1112 <L_4650_delayMicroseconds+0xe2>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1118:	ldr	r1, [r7, #0]
    111a:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    111c:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    111e:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1122:	bmi.w	1240 <L_4650_delayMicroseconds+0x210>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1126:	ldr	r2, [r3, #0]
    1128:	subs	r2, r1, r2
    112a:	cmp	r2, #104	; 0x68
    112c:	bhi.n	1126 <L_4650_delayMicroseconds+0xf6>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    112e:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1130:	subs.w	lr, lr, #1
    1134:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1136:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1138:	bne.n	1112 <L_4650_delayMicroseconds+0xe2>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    113a:	ldr	r2, [r3, #0]
    113c:	cmp	r1, r2
    113e:	bhi.n	113a <L_4650_delayMicroseconds+0x10a>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1140:	ldr	r1, [r7, #0]
    1142:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1144:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1146:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    114a:	bmi.w	1254 <L_4650_delayMicroseconds+0x224>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    114e:	ldr	r2, [r3, #0]
    1150:	subs	r2, r1, r2
    1152:	cmp	r2, #104	; 0x68
    1154:	bhi.n	114e <L_4650_delayMicroseconds+0x11e>
    1156:	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1158:	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    115c:	cbz	r4, 116e <L_4650_delayMicroseconds+0x13e>
    115e:	uqadd8	r4, r4, sl
    1162:	ldr	r2, [sp, #24]
    1164:	uxtb	r4, r4
    1166:	mul.w	r4, r4, r2
    116a:	ubfx	r4, r4, #8, #8
    116e:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1172:	ldr	r2, [r3, #0]
    1174:	cmp	r2, r1
    1176:	bcc.n	1172 <L_4650_delayMicroseconds+0x142>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1178:	ldr	r1, [r7, #0]
    117a:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    117c:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    117e:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1182:	bmi.n	1268 <L_4650_delayMicroseconds+0x238>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1184:	ldr	r2, [r3, #0]
    1186:	subs	r2, r1, r2
    1188:	cmp	r2, #104	; 0x68
    118a:	bhi.n	1184 <L_4650_delayMicroseconds+0x154>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    118c:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    118e:	subs.w	lr, lr, #1
    1192:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1194:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1196:	bne.n	1172 <L_4650_delayMicroseconds+0x142>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    1198:	ldr	r2, [r3, #0]
    119a:	cmp	r1, r2
    119c:	bhi.n	1198 <L_4650_delayMicroseconds+0x168>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    119e:	ldr	r1, [r7, #0]
    11a0:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    11a2:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    11a4:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    11a8:	bmi.n	127a <L_4650_delayMicroseconds+0x24a>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    11aa:	ldr	r2, [r3, #0]
    11ac:	subs	r2, r1, r2
    11ae:	cmp	r2, #104	; 0x68
    11b0:	bhi.n	11aa <L_4650_delayMicroseconds+0x17a>
    11b2:	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    11b4:	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    11b8:	cbz	r4, 11ca <L_4650_delayMicroseconds+0x19a>
    11ba:	uqadd8	r4, r4, r9
    11be:	ldr	r2, [sp, #28]
    11c0:	uxtb	r4, r4
    11c2:	mul.w	r4, r4, r2
    11c6:	ubfx	r4, r4, #8, #8
    11ca:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    11ce:	ldr	r2, [r3, #0]
    11d0:	cmp	r2, r1
    11d2:	bcc.n	11ce <L_4650_delayMicroseconds+0x19e>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    11d4:	ldr	r1, [r7, #0]
    11d6:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    11d8:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    11da:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    11de:	bmi.n	128c <L_4650_delayMicroseconds+0x25c>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    11e0:	ldr	r2, [r3, #0]
    11e2:	subs	r2, r1, r2
    11e4:	cmp	r2, #104	; 0x68
    11e6:	bhi.n	11e0 <L_4650_delayMicroseconds+0x1b0>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    11e8:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    11ea:	subs.w	lr, lr, #1
    11ee:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    11f0:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    11f2:	bne.n	11ce <L_4650_delayMicroseconds+0x19e>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    11f4:	ldr	r2, [r3, #0]
    11f6:	cmp	r1, r2
    11f8:	bhi.n	11f4 <L_4650_delayMicroseconds+0x1c4>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    11fa:	ldr	r1, [r7, #0]
    11fc:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    11fe:	lsls	r2, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1200:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1204:	bmi.n	129e <L_4650_delayMicroseconds+0x26e>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1206:	ldr	r2, [r3, #0]
    1208:	subs	r2, r1, r2
    120a:	cmp	r2, #104	; 0x68
    120c:	bhi.n	1206 <L_4650_delayMicroseconds+0x1d6>
    120e:	ldr	r2, [sp, #16]
    1210:	str	r5, [r0, #0]
    1212:	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1214:	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1218:	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    121c:	cbz	r4, 122e <L_4650_delayMicroseconds+0x1fe>
    121e:	uqadd8	r4, r4, ip
    1222:	ldr	r2, [sp, #20]
    1224:	uxtb	r4, r4
    1226:	mul.w	r4, r2, r4
    122a:	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    122e:	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    1230:	cmp.w	fp, #0
    1234:	bne.w	10d0 <L_4650_delayMicroseconds+0xa0>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    1238:	cpsie	i
		return ARM_DWT_CYCCNT;
    123a:	ldr	r3, [pc, #156]	; (12d8 <L_4650_delayMicroseconds+0x2a8>)
    123c:	ldr	r3, [r3, #0]
    123e:	b.n	f98 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x218>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1240:	ldr	r2, [r3, #0]
    1242:	subs	r2, r1, r2
    1244:	cmp	r2, #44	; 0x2c
    1246:	bls.w	112e <L_4650_delayMicroseconds+0xfe>
    124a:	ldr	r2, [r3, #0]
    124c:	subs	r2, r1, r2
    124e:	cmp	r2, #44	; 0x2c
    1250:	bhi.n	1240 <L_4650_delayMicroseconds+0x210>
    1252:	b.n	112e <L_4650_delayMicroseconds+0xfe>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1254:	ldr	r2, [r3, #0]
    1256:	subs	r2, r1, r2
    1258:	cmp	r2, #44	; 0x2c
    125a:	bls.w	1156 <L_4650_delayMicroseconds+0x126>
    125e:	ldr	r2, [r3, #0]
    1260:	subs	r2, r1, r2
    1262:	cmp	r2, #44	; 0x2c
    1264:	bhi.n	1254 <L_4650_delayMicroseconds+0x224>
    1266:	b.n	1156 <L_4650_delayMicroseconds+0x126>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1268:	ldr	r2, [r3, #0]
    126a:	subs	r2, r1, r2
    126c:	cmp	r2, #44	; 0x2c
    126e:	bls.n	118c <L_4650_delayMicroseconds+0x15c>
    1270:	ldr	r2, [r3, #0]
    1272:	subs	r2, r1, r2
    1274:	cmp	r2, #44	; 0x2c
    1276:	bhi.n	1268 <L_4650_delayMicroseconds+0x238>
    1278:	b.n	118c <L_4650_delayMicroseconds+0x15c>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    127a:	ldr	r2, [r3, #0]
    127c:	subs	r2, r1, r2
    127e:	cmp	r2, #44	; 0x2c
    1280:	bls.n	11b2 <L_4650_delayMicroseconds+0x182>
    1282:	ldr	r2, [r3, #0]
    1284:	subs	r2, r1, r2
    1286:	cmp	r2, #44	; 0x2c
    1288:	bhi.n	127a <L_4650_delayMicroseconds+0x24a>
    128a:	b.n	11b2 <L_4650_delayMicroseconds+0x182>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    128c:	ldr	r2, [r3, #0]
    128e:	subs	r2, r1, r2
    1290:	cmp	r2, #44	; 0x2c
    1292:	bls.n	11e8 <L_4650_delayMicroseconds+0x1b8>
    1294:	ldr	r2, [r3, #0]
    1296:	subs	r2, r1, r2
    1298:	cmp	r2, #44	; 0x2c
    129a:	bhi.n	128c <L_4650_delayMicroseconds+0x25c>
    129c:	b.n	11e8 <L_4650_delayMicroseconds+0x1b8>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    129e:	ldr	r2, [r3, #0]
    12a0:	subs	r2, r1, r2
    12a2:	cmp	r2, #44	; 0x2c
    12a4:	bls.n	120e <L_4650_delayMicroseconds+0x1de>
    12a6:	ldr	r2, [r3, #0]
    12a8:	subs	r2, r1, r2
    12aa:	cmp	r2, #44	; 0x2c
    12ac:	bhi.n	129e <L_4650_delayMicroseconds+0x26e>
    12ae:	b.n	120e <L_4650_delayMicroseconds+0x1de>
    12b0:	uqadd8	r4, r4, ip
    12b4:	uxtb	r3, r4
    12b6:	adds	r2, r5, #1
    12b8:	mul.w	r3, r2, r3
    12bc:	str	r2, [sp, #20]
    12be:	ubfx	r4, r3, #8, #8
    12c2:	b.n	e06 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x86>
    12c4:	adds	r3, r1, #1
    12c6:	str	r3, [sp, #20]
    12c8:	b.n	10b2 <L_4650_delayMicroseconds+0x82>
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    12ca:	cpsie	i
    12cc:	b.n	f98 <ClocklessController<5, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x218>
    12ce:	nop
    12d0:	.word	0xe000edfc
    12d4:	.word	0xe0001000
    12d8:	.word	0xe0001004
    12dc:	.word	0x400ff0c0

000012e0 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:

	virtual uint16_t getMaxRefreshRate() const { return 400; }

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    12e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12e4:	sub	sp, #44	; 0x2c
    12e6:	mov	r4, r0
    12e8:	str	r0, [sp, #36]	; 0x24
    12ea:	str	r1, [sp, #32]
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    12ec:	bl	9410 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    12f0:	ldrh	r3, [r4, #32]
    12f2:	subs	r0, r0, r3
    12f4:	uxth	r3, r0
    12f6:	cmp	r3, #49	; 0x31
    12f8:	bls.n	12ec <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    12fa:	ldr	r4, [sp, #32]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    12fc:	ldr	r2, [pc, #632]	; (1578 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x298>)
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    12fe:	ldrb	r0, [r4, #15]
    1300:	ldr	r3, [r2, #0]
    1302:	str	r0, [sp, #8]
            e[1] = other.e[1];
    1304:	ldrb	r0, [r4, #16]
            e[2] = other.e[2];
    1306:	ldrb	r5, [r4, #17]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    1308:	str	r0, [sp, #4]
            e[2] = other.e[2];
    130a:	mov	r0, r4
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    130c:	ldrb	r6, [r4, #13]
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    130e:	ldr.w	r8, [r4]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    1312:	ldrb.w	r9, [r4, #12]
            d[1] = other.d[1];
            d[2] = other.d[2];
    1316:	ldrb.w	sl, [r4, #14]
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
    131a:	str	r5, [sp, #12]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    131c:	ldrb	r7, [r4, #18]
        g = rhs.g;
    131e:	ldrb	r5, [r4, #19]
        b = rhs.b;
    1320:	ldrb.w	lr, [r4, #20]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1324:	ldr	r1, [pc, #596]	; (157c <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x29c>)
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    1326:	ldrsb.w	r4, [r4, #21]
    132a:	str	r4, [sp, #16]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    132c:	orr.w	r3, r3, #16777216	; 0x1000000
            mLenRemaining = mLen = other.mLen;
    1330:	ldr.w	fp, [r0, #4]
    1334:	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1336:	ldr	r2, [r1, #0]
		ARM_DWT_CYCCNT = 0;
    1338:	ldr	r0, [pc, #580]	; (1580 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    133a:	ldr	r3, [pc, #584]	; (1584 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a4>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    133c:	orr.w	r2, r2, #1
    1340:	str	r2, [r1, #0]
		ARM_DWT_CYCCNT = 0;
    1342:	movs	r2, #0
    1344:	str	r2, [r0, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    1346:	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    1348:	ldr	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    134a:	ldr	r0, [sp, #4]
    134c:	bic.w	r2, r2, #8192	; 0x2000
		*port = lo;
    1350:	str	r2, [r3, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1352:	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    1356:	subs	r6, r0, r6
    1358:	uxtb.w	ip, r6
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    135c:	cmp	r4, #0
    135e:	bne.w	1810 <L_6699_delayMicroseconds+0x280>
    1362:	adds	r3, r5, #1
    1364:	str	r3, [sp, #20]

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    1366:	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1368:	ldr	r3, [pc, #532]	; (1580 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)
    136a:	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    136c:	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1370:	add.w	r1, r1, #120	; 0x78

		while(pixels.has(1)) {
    1374:	ble.w	14ee <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x20e>
    1378:	adds	r2, r7, #1
    137a:	str	r2, [sp, #24]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    137c:	ldr	r0, [pc, #516]	; (1584 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a4>)
    137e:	add.w	r2, lr, #1
    1382:	str	r2, [sp, #28]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1384:	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1386:	ldr	r2, [sp, #8]
    1388:	rsb	r9, r9, r2
                d[1] = e[1] - d[1];
    138c:	ldr	r2, [sp, #4]
    138e:	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    1392:	ldr	r2, [sp, #12]
    1394:	rsb	sl, sl, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1398:	uxtb.w	r9, r9
                d[1] = e[1] - d[1];
    139c:	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    13a0:	uxtb.w	sl, sl
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    13a4:	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    13a6:	ldr	r2, [r3, #0]
    13a8:	cmp	r2, r1
    13aa:	bls.n	13b8 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xd8>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    13ac:	ldr	r2, [r3, #0]
    13ae:	subs	r2, r2, r1
    13b0:	cmp.w	r2, #4704	; 0x1260
    13b4:	bhi.w	1588 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a8>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    13b8:	ldr	r5, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    13ba:	ldr	r6, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    13bc:	orr.w	r5, r5, #8192	; 0x2000
			lo = *port & ~FastPin<DATA_PIN>::mask();
    13c0:	bic.w	r6, r6, #8192	; 0x2000
    13c4:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    13c8:	ldr	r2, [r3, #0]
    13ca:	cmp	r2, r1
    13cc:	bcc.n	13c8 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xe8>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    13ce:	ldr	r1, [r7, #0]
    13d0:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    13d2:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    13d4:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    13d8:	bmi.w	1506 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x226>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    13dc:	ldr	r2, [r3, #0]
    13de:	subs	r2, r1, r2
    13e0:	cmp	r2, #104	; 0x68
    13e2:	bhi.n	13dc <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xfc>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    13e4:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    13e6:	subs.w	lr, lr, #1
    13ea:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    13ec:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    13ee:	bne.n	13c8 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xe8>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    13f0:	ldr	r2, [r3, #0]
    13f2:	cmp	r1, r2
    13f4:	bhi.n	13f0 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x110>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    13f6:	ldr	r1, [r7, #0]
    13f8:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    13fa:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    13fc:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1400:	bmi.w	151a <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x23a>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1404:	ldr	r2, [r3, #0]
    1406:	subs	r2, r1, r2
    1408:	cmp	r2, #104	; 0x68
    140a:	bhi.n	1404 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x124>
    140c:	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    140e:	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1412:	cbz	r4, 1424 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x144>
    1414:	uqadd8	r4, r4, r9
    1418:	ldr	r2, [sp, #24]
    141a:	uxtb	r4, r4
    141c:	mul.w	r4, r4, r2
    1420:	ubfx	r4, r4, #8, #8
    1424:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1428:	ldr	r2, [r3, #0]
    142a:	cmp	r1, r2
    142c:	bhi.n	1428 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x148>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    142e:	ldr	r1, [r7, #0]
    1430:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1432:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1434:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1438:	bmi.n	152e <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x24e>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    143a:	ldr	r2, [r3, #0]
    143c:	subs	r2, r1, r2
    143e:	cmp	r2, #104	; 0x68
    1440:	bhi.n	143a <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x15a>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1442:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1444:	subs.w	lr, lr, #1
    1448:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    144a:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    144c:	bne.n	1428 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x148>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    144e:	ldr	r2, [r3, #0]
    1450:	cmp	r1, r2
    1452:	bhi.n	144e <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x16e>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1454:	ldr	r1, [r7, #0]
    1456:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1458:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    145a:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    145e:	bmi.n	1540 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x260>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1460:	ldr	r2, [r3, #0]
    1462:	subs	r2, r1, r2
    1464:	cmp	r2, #104	; 0x68
    1466:	bhi.n	1460 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x180>
    1468:	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    146a:	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    146e:	cbz	r4, 1480 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a0>
    1470:	uqadd8	r4, r4, sl
    1474:	ldr	r2, [sp, #28]
    1476:	uxtb	r4, r4
    1478:	mul.w	r4, r4, r2
    147c:	ubfx	r4, r4, #8, #8
    1480:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1484:	ldr	r2, [r3, #0]
    1486:	cmp	r2, r1
    1488:	bcc.n	1484 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a4>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    148a:	ldr	r1, [r7, #0]
    148c:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    148e:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1490:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1494:	bmi.n	1552 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x272>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1496:	ldr	r2, [r3, #0]
    1498:	subs	r2, r1, r2
    149a:	cmp	r2, #104	; 0x68
    149c:	bhi.n	1496 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1b6>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    149e:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    14a0:	subs.w	lr, lr, #1
    14a4:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    14a6:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    14a8:	bne.n	1484 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a4>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    14aa:	ldr	r2, [r3, #0]
    14ac:	cmp	r1, r2
    14ae:	bhi.n	14aa <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1ca>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    14b0:	ldr	r1, [r7, #0]
    14b2:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    14b4:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    14b6:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    14ba:	bmi.n	1564 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x284>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    14bc:	ldr	r2, [r3, #0]
    14be:	subs	r2, r1, r2
    14c0:	cmp	r2, #104	; 0x68
    14c2:	bhi.n	14bc <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1dc>
    14c4:	ldr	r2, [sp, #16]
    14c6:	str	r6, [r0, #0]
    14c8:	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    14ca:	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    14ce:	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    14d2:	cbz	r4, 14e4 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x204>
    14d4:	uqadd8	r4, r4, ip
    14d8:	ldr	r2, [sp, #20]
    14da:	uxtb	r4, r4
    14dc:	mul.w	r4, r2, r4
    14e0:	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    14e4:	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    14e6:	cmp.w	fp, #0
    14ea:	bne.w	1386 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xa6>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    14ee:	cpsie	i
		return ARM_DWT_CYCCNT;
    14f0:	ldr	r3, [pc, #140]	; (1580 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)
    14f2:	ldr	r3, [r3, #0]

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
    14f4:	cmp	r3, #0
    14f6:	beq.n	158a <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2aa>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    14f8:	bl	9410 <micros>
    14fc:	ldr	r3, [sp, #36]	; 0x24
    14fe:	strh	r0, [r3, #32]
      sei(); delayMicroseconds(WAIT_TIME); cli();
      showRGBInternal(pixels);
    }
    mWait.mark();
  }
    1500:	add	sp, #44	; 0x2c
    1502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1506:	ldr	r2, [r3, #0]
    1508:	subs	r2, r1, r2
    150a:	cmp	r2, #44	; 0x2c
    150c:	bls.w	13e4 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x104>
    1510:	ldr	r2, [r3, #0]
    1512:	subs	r2, r1, r2
    1514:	cmp	r2, #44	; 0x2c
    1516:	bhi.n	1506 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x226>
    1518:	b.n	13e4 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x104>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    151a:	ldr	r2, [r3, #0]
    151c:	subs	r2, r1, r2
    151e:	cmp	r2, #44	; 0x2c
    1520:	bls.w	140c <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x12c>
    1524:	ldr	r2, [r3, #0]
    1526:	subs	r2, r1, r2
    1528:	cmp	r2, #44	; 0x2c
    152a:	bhi.n	151a <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x23a>
    152c:	b.n	140c <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x12c>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    152e:	ldr	r2, [r3, #0]
    1530:	subs	r2, r1, r2
    1532:	cmp	r2, #44	; 0x2c
    1534:	bls.n	1442 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x162>
    1536:	ldr	r2, [r3, #0]
    1538:	subs	r2, r1, r2
    153a:	cmp	r2, #44	; 0x2c
    153c:	bhi.n	152e <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x24e>
    153e:	b.n	1442 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x162>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1540:	ldr	r2, [r3, #0]
    1542:	subs	r2, r1, r2
    1544:	cmp	r2, #44	; 0x2c
    1546:	bls.n	1468 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x188>
    1548:	ldr	r2, [r3, #0]
    154a:	subs	r2, r1, r2
    154c:	cmp	r2, #44	; 0x2c
    154e:	bhi.n	1540 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x260>
    1550:	b.n	1468 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x188>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1552:	ldr	r2, [r3, #0]
    1554:	subs	r2, r1, r2
    1556:	cmp	r2, #44	; 0x2c
    1558:	bls.n	149e <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1be>
    155a:	ldr	r2, [r3, #0]
    155c:	subs	r2, r1, r2
    155e:	cmp	r2, #44	; 0x2c
    1560:	bhi.n	1552 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x272>
    1562:	b.n	149e <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1be>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1564:	ldr	r2, [r3, #0]
    1566:	subs	r2, r1, r2
    1568:	cmp	r2, #44	; 0x2c
    156a:	bls.n	14c4 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1e4>
    156c:	ldr	r2, [r3, #0]
    156e:	subs	r2, r1, r2
    1570:	cmp	r2, #44	; 0x2c
    1572:	bhi.n	1564 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x284>
    1574:	b.n	14c4 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1e4>
    1576:	nop
    1578:	.word	0xe000edfc
    157c:	.word	0xe0001000
    1580:	.word	0xe0001004
    1584:	.word	0x400ff000
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    1588:	cpsie	i
protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
      sei(); delayMicroseconds(WAIT_TIME); cli();
    158a:	cpsie	i
    158c:	mov.w	r3, #1600	; 0x640

00001590 <L_6699_delayMicroseconds>:
    1590:	subs	r3, #1
    1592:	bne.n	1590 <L_6699_delayMicroseconds>
    1594:	cpsid	i
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    1596:	ldr	r7, [sp, #32]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    1598:	ldr	r2, [pc, #660]	; (1830 <L_6699_delayMicroseconds+0x2a0>)
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    159a:	ldrb	r1, [r7, #15]
    159c:	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
    159e:	ldrb	r6, [r7, #17]

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    15a0:	str	r1, [sp, #8]
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    15a2:	mov	r4, r7
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    15a4:	ldrb	r1, [r7, #16]
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    15a6:	ldrsb.w	lr, [r4, #21]
            mLenRemaining = mLen = other.mLen;
    15aa:	ldr	r4, [sp, #32]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    15ac:	ldr	r0, [pc, #644]	; (1834 <L_6699_delayMicroseconds+0x2a4>)
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    15ae:	ldrb	r5, [r7, #13]
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    15b0:	str	r1, [sp, #4]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    15b2:	orr.w	r3, r3, #16777216	; 0x1000000
            e[2] = other.e[2];
            mData = other.mData;
    15b6:	ldr.w	r8, [r7]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    15ba:	ldrb.w	sl, [r7, #12]
            d[1] = other.d[1];
            d[2] = other.d[2];
    15be:	ldrb.w	r9, [r7, #14]
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
    15c2:	str	r6, [sp, #12]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    15c4:	ldrb	r1, [r7, #19]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15c6:	ldrb	r6, [r7, #18]
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    15c8:	str.w	lr, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    15cc:	ldrb	r7, [r7, #20]
            mLenRemaining = mLen = other.mLen;
    15ce:	ldr.w	fp, [r4, #4]
    15d2:	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    15d4:	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    15d6:	ldr	r4, [pc, #608]	; (1838 <L_6699_delayMicroseconds+0x2a8>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    15d8:	ldr	r3, [pc, #608]	; (183c <L_6699_delayMicroseconds+0x2ac>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    15da:	orr.w	r2, r2, #1
    15de:	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    15e0:	movs	r2, #0
    15e2:	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    15e4:	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    15e6:	ldr	r2, [r3, #0]
    15e8:	bic.w	r2, r2, #8192	; 0x2000
		*port = lo;
    15ec:	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    15ee:	ldr	r3, [sp, #4]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    15f0:	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    15f4:	subs	r5, r3, r5
    15f6:	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    15fa:	cmp	r4, #0
    15fc:	beq.w	1824 <L_6699_delayMicroseconds+0x294>
    1600:	uqadd8	r4, r4, ip
    1604:	uxtb	r3, r4
    1606:	adds	r2, r1, #1
    1608:	mul.w	r3, r2, r3
    160c:	str	r2, [sp, #20]
    160e:	ubfx	r4, r3, #8, #8

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    1612:	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1614:	ldr	r3, [pc, #544]	; (1838 <L_6699_delayMicroseconds+0x2a8>)
    1616:	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    1618:	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    161c:	add.w	r1, r1, #120	; 0x78

		while(pixels.has(1)) {
    1620:	ble.w	1798 <L_6699_delayMicroseconds+0x208>
    1624:	adds	r2, r6, #1
    1626:	str	r2, [sp, #24]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    1628:	ldr	r0, [pc, #528]	; (183c <L_6699_delayMicroseconds+0x2ac>)
    162a:	adds	r2, r7, #1
    162c:	str	r2, [sp, #28]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    162e:	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1630:	ldr	r2, [sp, #8]
    1632:	rsb	sl, sl, r2
                d[1] = e[1] - d[1];
    1636:	ldr	r2, [sp, #4]
    1638:	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    163c:	ldr	r2, [sp, #12]
    163e:	rsb	r9, r9, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1642:	uxtb.w	sl, sl
                d[1] = e[1] - d[1];
    1646:	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    164a:	uxtb.w	r9, r9
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    164e:	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    1650:	ldr	r2, [r3, #0]
    1652:	cmp	r2, r1
    1654:	bls.n	1662 <L_6699_delayMicroseconds+0xd2>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    1656:	ldr	r2, [r3, #0]
    1658:	subs	r2, r2, r1
    165a:	cmp.w	r2, #4704	; 0x1260
    165e:	bhi.w	182a <L_6699_delayMicroseconds+0x29a>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    1662:	ldr	r6, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    1664:	ldr	r5, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    1666:	orr.w	r6, r6, #8192	; 0x2000
			lo = *port & ~FastPin<DATA_PIN>::mask();
    166a:	bic.w	r5, r5, #8192	; 0x2000
    166e:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1672:	ldr	r2, [r3, #0]
    1674:	cmp	r2, r1
    1676:	bcc.n	1672 <L_6699_delayMicroseconds+0xe2>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1678:	ldr	r1, [r7, #0]
    167a:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    167c:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    167e:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1682:	bmi.w	17a0 <L_6699_delayMicroseconds+0x210>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1686:	ldr	r2, [r3, #0]
    1688:	subs	r2, r1, r2
    168a:	cmp	r2, #104	; 0x68
    168c:	bhi.n	1686 <L_6699_delayMicroseconds+0xf6>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    168e:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1690:	subs.w	lr, lr, #1
    1694:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1696:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1698:	bne.n	1672 <L_6699_delayMicroseconds+0xe2>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    169a:	ldr	r2, [r3, #0]
    169c:	cmp	r1, r2
    169e:	bhi.n	169a <L_6699_delayMicroseconds+0x10a>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    16a0:	ldr	r1, [r7, #0]
    16a2:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    16a4:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    16a6:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    16aa:	bmi.w	17b4 <L_6699_delayMicroseconds+0x224>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    16ae:	ldr	r2, [r3, #0]
    16b0:	subs	r2, r1, r2
    16b2:	cmp	r2, #104	; 0x68
    16b4:	bhi.n	16ae <L_6699_delayMicroseconds+0x11e>
    16b6:	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    16b8:	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    16bc:	cbz	r4, 16ce <L_6699_delayMicroseconds+0x13e>
    16be:	uqadd8	r4, r4, sl
    16c2:	ldr	r2, [sp, #24]
    16c4:	uxtb	r4, r4
    16c6:	mul.w	r4, r4, r2
    16ca:	ubfx	r4, r4, #8, #8
    16ce:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    16d2:	ldr	r2, [r3, #0]
    16d4:	cmp	r2, r1
    16d6:	bcc.n	16d2 <L_6699_delayMicroseconds+0x142>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    16d8:	ldr	r1, [r7, #0]
    16da:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    16dc:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    16de:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    16e2:	bmi.n	17c8 <L_6699_delayMicroseconds+0x238>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    16e4:	ldr	r2, [r3, #0]
    16e6:	subs	r2, r1, r2
    16e8:	cmp	r2, #104	; 0x68
    16ea:	bhi.n	16e4 <L_6699_delayMicroseconds+0x154>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    16ec:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    16ee:	subs.w	lr, lr, #1
    16f2:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    16f4:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    16f6:	bne.n	16d2 <L_6699_delayMicroseconds+0x142>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    16f8:	ldr	r2, [r3, #0]
    16fa:	cmp	r1, r2
    16fc:	bhi.n	16f8 <L_6699_delayMicroseconds+0x168>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    16fe:	ldr	r1, [r7, #0]
    1700:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1702:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1704:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1708:	bmi.n	17da <L_6699_delayMicroseconds+0x24a>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    170a:	ldr	r2, [r3, #0]
    170c:	subs	r2, r1, r2
    170e:	cmp	r2, #104	; 0x68
    1710:	bhi.n	170a <L_6699_delayMicroseconds+0x17a>
    1712:	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1714:	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1718:	cbz	r4, 172a <L_6699_delayMicroseconds+0x19a>
    171a:	uqadd8	r4, r4, r9
    171e:	ldr	r2, [sp, #28]
    1720:	uxtb	r4, r4
    1722:	mul.w	r4, r4, r2
    1726:	ubfx	r4, r4, #8, #8
    172a:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    172e:	ldr	r2, [r3, #0]
    1730:	cmp	r2, r1
    1732:	bcc.n	172e <L_6699_delayMicroseconds+0x19e>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1734:	ldr	r1, [r7, #0]
    1736:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1738:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    173a:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    173e:	bmi.n	17ec <L_6699_delayMicroseconds+0x25c>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1740:	ldr	r2, [r3, #0]
    1742:	subs	r2, r1, r2
    1744:	cmp	r2, #104	; 0x68
    1746:	bhi.n	1740 <L_6699_delayMicroseconds+0x1b0>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1748:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    174a:	subs.w	lr, lr, #1
    174e:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1750:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1752:	bne.n	172e <L_6699_delayMicroseconds+0x19e>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    1754:	ldr	r2, [r3, #0]
    1756:	cmp	r1, r2
    1758:	bhi.n	1754 <L_6699_delayMicroseconds+0x1c4>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    175a:	ldr	r1, [r7, #0]
    175c:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    175e:	lsls	r2, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1760:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1764:	bmi.n	17fe <L_6699_delayMicroseconds+0x26e>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1766:	ldr	r2, [r3, #0]
    1768:	subs	r2, r1, r2
    176a:	cmp	r2, #104	; 0x68
    176c:	bhi.n	1766 <L_6699_delayMicroseconds+0x1d6>
    176e:	ldr	r2, [sp, #16]
    1770:	str	r5, [r0, #0]
    1772:	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1774:	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1778:	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    177c:	cbz	r4, 178e <L_6699_delayMicroseconds+0x1fe>
    177e:	uqadd8	r4, r4, ip
    1782:	ldr	r2, [sp, #20]
    1784:	uxtb	r4, r4
    1786:	mul.w	r4, r2, r4
    178a:	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    178e:	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    1790:	cmp.w	fp, #0
    1794:	bne.w	1630 <L_6699_delayMicroseconds+0xa0>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    1798:	cpsie	i
		return ARM_DWT_CYCCNT;
    179a:	ldr	r3, [pc, #156]	; (1838 <L_6699_delayMicroseconds+0x2a8>)
    179c:	ldr	r3, [r3, #0]
    179e:	b.n	14f8 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x218>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    17a0:	ldr	r2, [r3, #0]
    17a2:	subs	r2, r1, r2
    17a4:	cmp	r2, #44	; 0x2c
    17a6:	bls.w	168e <L_6699_delayMicroseconds+0xfe>
    17aa:	ldr	r2, [r3, #0]
    17ac:	subs	r2, r1, r2
    17ae:	cmp	r2, #44	; 0x2c
    17b0:	bhi.n	17a0 <L_6699_delayMicroseconds+0x210>
    17b2:	b.n	168e <L_6699_delayMicroseconds+0xfe>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    17b4:	ldr	r2, [r3, #0]
    17b6:	subs	r2, r1, r2
    17b8:	cmp	r2, #44	; 0x2c
    17ba:	bls.w	16b6 <L_6699_delayMicroseconds+0x126>
    17be:	ldr	r2, [r3, #0]
    17c0:	subs	r2, r1, r2
    17c2:	cmp	r2, #44	; 0x2c
    17c4:	bhi.n	17b4 <L_6699_delayMicroseconds+0x224>
    17c6:	b.n	16b6 <L_6699_delayMicroseconds+0x126>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    17c8:	ldr	r2, [r3, #0]
    17ca:	subs	r2, r1, r2
    17cc:	cmp	r2, #44	; 0x2c
    17ce:	bls.n	16ec <L_6699_delayMicroseconds+0x15c>
    17d0:	ldr	r2, [r3, #0]
    17d2:	subs	r2, r1, r2
    17d4:	cmp	r2, #44	; 0x2c
    17d6:	bhi.n	17c8 <L_6699_delayMicroseconds+0x238>
    17d8:	b.n	16ec <L_6699_delayMicroseconds+0x15c>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    17da:	ldr	r2, [r3, #0]
    17dc:	subs	r2, r1, r2
    17de:	cmp	r2, #44	; 0x2c
    17e0:	bls.n	1712 <L_6699_delayMicroseconds+0x182>
    17e2:	ldr	r2, [r3, #0]
    17e4:	subs	r2, r1, r2
    17e6:	cmp	r2, #44	; 0x2c
    17e8:	bhi.n	17da <L_6699_delayMicroseconds+0x24a>
    17ea:	b.n	1712 <L_6699_delayMicroseconds+0x182>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    17ec:	ldr	r2, [r3, #0]
    17ee:	subs	r2, r1, r2
    17f0:	cmp	r2, #44	; 0x2c
    17f2:	bls.n	1748 <L_6699_delayMicroseconds+0x1b8>
    17f4:	ldr	r2, [r3, #0]
    17f6:	subs	r2, r1, r2
    17f8:	cmp	r2, #44	; 0x2c
    17fa:	bhi.n	17ec <L_6699_delayMicroseconds+0x25c>
    17fc:	b.n	1748 <L_6699_delayMicroseconds+0x1b8>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    17fe:	ldr	r2, [r3, #0]
    1800:	subs	r2, r1, r2
    1802:	cmp	r2, #44	; 0x2c
    1804:	bls.n	176e <L_6699_delayMicroseconds+0x1de>
    1806:	ldr	r2, [r3, #0]
    1808:	subs	r2, r1, r2
    180a:	cmp	r2, #44	; 0x2c
    180c:	bhi.n	17fe <L_6699_delayMicroseconds+0x26e>
    180e:	b.n	176e <L_6699_delayMicroseconds+0x1de>
    1810:	uqadd8	r4, r4, ip
    1814:	uxtb	r3, r4
    1816:	adds	r2, r5, #1
    1818:	mul.w	r3, r2, r3
    181c:	str	r2, [sp, #20]
    181e:	ubfx	r4, r3, #8, #8
    1822:	b.n	1366 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x86>
    1824:	adds	r3, r1, #1
    1826:	str	r3, [sp, #20]
    1828:	b.n	1612 <L_6699_delayMicroseconds+0x82>
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    182a:	cpsie	i
    182c:	b.n	14f8 <ClocklessController<4, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x218>
    182e:	nop
    1830:	.word	0xe000edfc
    1834:	.word	0xe0001000
    1838:	.word	0xe0001004
    183c:	.word	0x400ff000

00001840 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:

	virtual uint16_t getMaxRefreshRate() const { return 400; }

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    1840:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1844:	sub	sp, #44	; 0x2c
    1846:	mov	r4, r0
    1848:	str	r0, [sp, #36]	; 0x24
    184a:	str	r1, [sp, #32]
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
			diff = (micros() & 0xFFFF) - mLastMicros;
    184c:	bl	9410 <micros>
public:
	CMinWait() { mLastMicros = 0; }

	void wait() {
		uint16_t diff;
		do {
    1850:	ldrh	r3, [r4, #32]
    1852:	subs	r0, r0, r3
    1854:	uxth	r3, r0
    1856:	cmp	r3, #49	; 0x31
    1858:	bls.n	184c <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    185a:	ldr	r4, [sp, #32]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    185c:	ldr	r2, [pc, #632]	; (1ad8 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x298>)
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    185e:	ldrb	r0, [r4, #15]
    1860:	ldr	r3, [r2, #0]
    1862:	str	r0, [sp, #8]
            e[1] = other.e[1];
    1864:	ldrb	r0, [r4, #16]
            e[2] = other.e[2];
    1866:	ldrb	r5, [r4, #17]
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    1868:	str	r0, [sp, #4]
            e[2] = other.e[2];
    186a:	mov	r0, r4
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    186c:	ldrb	r6, [r4, #13]
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    186e:	ldr.w	r8, [r4]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    1872:	ldrb.w	r9, [r4, #12]
            d[1] = other.d[1];
            d[2] = other.d[2];
    1876:	ldrb.w	sl, [r4, #14]
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
    187a:	str	r5, [sp, #12]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    187c:	ldrb	r7, [r4, #18]
        g = rhs.g;
    187e:	ldrb	r5, [r4, #19]
        b = rhs.b;
    1880:	ldrb.w	lr, [r4, #20]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1884:	ldr	r1, [pc, #596]	; (1adc <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x29c>)
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    1886:	ldrsb.w	r4, [r4, #21]
    188a:	str	r4, [sp, #16]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    188c:	orr.w	r3, r3, #16777216	; 0x1000000
            mLenRemaining = mLen = other.mLen;
    1890:	ldr.w	fp, [r0, #4]
    1894:	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1896:	ldr	r2, [r1, #0]
		ARM_DWT_CYCCNT = 0;
    1898:	ldr	r0, [pc, #580]	; (1ae0 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    189a:	ldr	r3, [pc, #584]	; (1ae4 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a4>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    189c:	orr.w	r2, r2, #1
    18a0:	str	r2, [r1, #0]
		ARM_DWT_CYCCNT = 0;
    18a2:	movs	r2, #0
    18a4:	str	r2, [r0, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    18a6:	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    18a8:	ldr	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    18aa:	ldr	r0, [sp, #4]
    18ac:	bic.w	r2, r2, #1
		*port = lo;
    18b0:	str	r2, [r3, #0]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    18b2:	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    18b6:	subs	r6, r0, r6
    18b8:	uxtb.w	ip, r6
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    18bc:	cmp	r4, #0
    18be:	bne.w	1d70 <L_8748_delayMicroseconds+0x280>
    18c2:	adds	r3, r5, #1
    18c4:	str	r3, [sp, #20]

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    18c6:	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    18c8:	ldr	r3, [pc, #532]	; (1ae0 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)
    18ca:	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    18cc:	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    18d0:	add.w	r1, r1, #120	; 0x78

		while(pixels.has(1)) {
    18d4:	ble.w	1a4e <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x20e>
    18d8:	adds	r2, r7, #1
    18da:	str	r2, [sp, #24]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    18dc:	ldr	r0, [pc, #516]	; (1ae4 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a4>)
    18de:	add.w	r2, lr, #1
    18e2:	str	r2, [sp, #28]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    18e4:	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    18e6:	ldr	r2, [sp, #8]
    18e8:	rsb	r9, r9, r2
                d[1] = e[1] - d[1];
    18ec:	ldr	r2, [sp, #4]
    18ee:	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    18f2:	ldr	r2, [sp, #12]
    18f4:	rsb	sl, sl, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    18f8:	uxtb.w	r9, r9
                d[1] = e[1] - d[1];
    18fc:	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    1900:	uxtb.w	sl, sl
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    1904:	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    1906:	ldr	r2, [r3, #0]
    1908:	cmp	r2, r1
    190a:	bls.n	1918 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xd8>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    190c:	ldr	r2, [r3, #0]
    190e:	subs	r2, r2, r1
    1910:	cmp.w	r2, #4704	; 0x1260
    1914:	bhi.w	1ae8 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a8>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    1918:	ldr	r5, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    191a:	ldr	r6, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    191c:	orr.w	r5, r5, #1
			lo = *port & ~FastPin<DATA_PIN>::mask();
    1920:	bic.w	r6, r6, #1
    1924:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1928:	ldr	r2, [r3, #0]
    192a:	cmp	r2, r1
    192c:	bcc.n	1928 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xe8>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    192e:	ldr	r1, [r7, #0]
    1930:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1932:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1934:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1938:	bmi.w	1a66 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x226>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    193c:	ldr	r2, [r3, #0]
    193e:	subs	r2, r1, r2
    1940:	cmp	r2, #104	; 0x68
    1942:	bhi.n	193c <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xfc>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1944:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1946:	subs.w	lr, lr, #1
    194a:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    194c:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    194e:	bne.n	1928 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xe8>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    1950:	ldr	r2, [r3, #0]
    1952:	cmp	r1, r2
    1954:	bhi.n	1950 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x110>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1956:	ldr	r1, [r7, #0]
    1958:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    195a:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    195c:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1960:	bmi.w	1a7a <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x23a>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1964:	ldr	r2, [r3, #0]
    1966:	subs	r2, r1, r2
    1968:	cmp	r2, #104	; 0x68
    196a:	bhi.n	1964 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x124>
    196c:	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    196e:	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1972:	cbz	r4, 1984 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x144>
    1974:	uqadd8	r4, r4, r9
    1978:	ldr	r2, [sp, #24]
    197a:	uxtb	r4, r4
    197c:	mul.w	r4, r4, r2
    1980:	ubfx	r4, r4, #8, #8
    1984:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1988:	ldr	r2, [r3, #0]
    198a:	cmp	r1, r2
    198c:	bhi.n	1988 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x148>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    198e:	ldr	r1, [r7, #0]
    1990:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1992:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1994:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1998:	bmi.n	1a8e <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x24e>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    199a:	ldr	r2, [r3, #0]
    199c:	subs	r2, r1, r2
    199e:	cmp	r2, #104	; 0x68
    19a0:	bhi.n	199a <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x15a>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    19a2:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    19a4:	subs.w	lr, lr, #1
    19a8:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    19aa:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    19ac:	bne.n	1988 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x148>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    19ae:	ldr	r2, [r3, #0]
    19b0:	cmp	r1, r2
    19b2:	bhi.n	19ae <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x16e>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    19b4:	ldr	r1, [r7, #0]
    19b6:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    19b8:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    19ba:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    19be:	bmi.n	1aa0 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x260>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    19c0:	ldr	r2, [r3, #0]
    19c2:	subs	r2, r1, r2
    19c4:	cmp	r2, #104	; 0x68
    19c6:	bhi.n	19c0 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x180>
    19c8:	str	r6, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    19ca:	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    19ce:	cbz	r4, 19e0 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a0>
    19d0:	uqadd8	r4, r4, sl
    19d4:	ldr	r2, [sp, #28]
    19d6:	uxtb	r4, r4
    19d8:	mul.w	r4, r4, r2
    19dc:	ubfx	r4, r4, #8, #8
    19e0:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    19e4:	ldr	r2, [r3, #0]
    19e6:	cmp	r2, r1
    19e8:	bcc.n	19e4 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a4>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    19ea:	ldr	r1, [r7, #0]
    19ec:	str	r5, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    19ee:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    19f0:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    19f4:	bmi.n	1ab2 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x272>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    19f6:	ldr	r2, [r3, #0]
    19f8:	subs	r2, r1, r2
    19fa:	cmp	r2, #104	; 0x68
    19fc:	bhi.n	19f6 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1b6>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    19fe:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1a00:	subs.w	lr, lr, #1
    1a04:	str	r6, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1a06:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1a08:	bne.n	19e4 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1a4>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    1a0a:	ldr	r2, [r3, #0]
    1a0c:	cmp	r1, r2
    1a0e:	bhi.n	1a0a <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1ca>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1a10:	ldr	r1, [r7, #0]
    1a12:	str	r5, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1a14:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1a16:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1a1a:	bmi.n	1ac4 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x284>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1a1c:	ldr	r2, [r3, #0]
    1a1e:	subs	r2, r1, r2
    1a20:	cmp	r2, #104	; 0x68
    1a22:	bhi.n	1a1c <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1dc>
    1a24:	ldr	r2, [sp, #16]
    1a26:	str	r6, [r0, #0]
    1a28:	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1a2a:	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1a2e:	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1a32:	cbz	r4, 1a44 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x204>
    1a34:	uqadd8	r4, r4, ip
    1a38:	ldr	r2, [sp, #20]
    1a3a:	uxtb	r4, r4
    1a3c:	mul.w	r4, r2, r4
    1a40:	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    1a44:	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    1a46:	cmp.w	fp, #0
    1a4a:	bne.w	18e6 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xa6>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    1a4e:	cpsie	i
		return ARM_DWT_CYCCNT;
    1a50:	ldr	r3, [pc, #140]	; (1ae0 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2a0>)
    1a52:	ldr	r3, [r3, #0]

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
    1a54:	cmp	r3, #0
    1a56:	beq.n	1aea <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x2aa>
			diff = (micros() & 0xFFFF) - mLastMicros;
		} while(diff < WAIT);
	}

	void mark() { mLastMicros = micros() & 0xFFFF; }
    1a58:	bl	9410 <micros>
    1a5c:	ldr	r3, [sp, #36]	; 0x24
    1a5e:	strh	r0, [r3, #32]
      sei(); delayMicroseconds(WAIT_TIME); cli();
      showRGBInternal(pixels);
    }
    mWait.mark();
  }
    1a60:	add	sp, #44	; 0x2c
    1a62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1a66:	ldr	r2, [r3, #0]
    1a68:	subs	r2, r1, r2
    1a6a:	cmp	r2, #44	; 0x2c
    1a6c:	bls.w	1944 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x104>
    1a70:	ldr	r2, [r3, #0]
    1a72:	subs	r2, r1, r2
    1a74:	cmp	r2, #44	; 0x2c
    1a76:	bhi.n	1a66 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x226>
    1a78:	b.n	1944 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x104>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1a7a:	ldr	r2, [r3, #0]
    1a7c:	subs	r2, r1, r2
    1a7e:	cmp	r2, #44	; 0x2c
    1a80:	bls.w	196c <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x12c>
    1a84:	ldr	r2, [r3, #0]
    1a86:	subs	r2, r1, r2
    1a88:	cmp	r2, #44	; 0x2c
    1a8a:	bhi.n	1a7a <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x23a>
    1a8c:	b.n	196c <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x12c>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1a8e:	ldr	r2, [r3, #0]
    1a90:	subs	r2, r1, r2
    1a92:	cmp	r2, #44	; 0x2c
    1a94:	bls.n	19a2 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x162>
    1a96:	ldr	r2, [r3, #0]
    1a98:	subs	r2, r1, r2
    1a9a:	cmp	r2, #44	; 0x2c
    1a9c:	bhi.n	1a8e <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x24e>
    1a9e:	b.n	19a2 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x162>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1aa0:	ldr	r2, [r3, #0]
    1aa2:	subs	r2, r1, r2
    1aa4:	cmp	r2, #44	; 0x2c
    1aa6:	bls.n	19c8 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x188>
    1aa8:	ldr	r2, [r3, #0]
    1aaa:	subs	r2, r1, r2
    1aac:	cmp	r2, #44	; 0x2c
    1aae:	bhi.n	1aa0 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x260>
    1ab0:	b.n	19c8 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x188>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1ab2:	ldr	r2, [r3, #0]
    1ab4:	subs	r2, r1, r2
    1ab6:	cmp	r2, #44	; 0x2c
    1ab8:	bls.n	19fe <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1be>
    1aba:	ldr	r2, [r3, #0]
    1abc:	subs	r2, r1, r2
    1abe:	cmp	r2, #44	; 0x2c
    1ac0:	bhi.n	1ab2 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x272>
    1ac2:	b.n	19fe <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1be>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1ac4:	ldr	r2, [r3, #0]
    1ac6:	subs	r2, r1, r2
    1ac8:	cmp	r2, #44	; 0x2c
    1aca:	bls.n	1a24 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1e4>
    1acc:	ldr	r2, [r3, #0]
    1ace:	subs	r2, r1, r2
    1ad0:	cmp	r2, #44	; 0x2c
    1ad2:	bhi.n	1ac4 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x284>
    1ad4:	b.n	1a24 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x1e4>
    1ad6:	nop
    1ad8:	.word	0xe000edfc
    1adc:	.word	0xe0001000
    1ae0:	.word	0xe0001004
    1ae4:	.word	0x400ff0c0
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    1ae8:	cpsie	i
protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    mWait.wait();
		if(!showRGBInternal(pixels)) {
      sei(); delayMicroseconds(WAIT_TIME); cli();
    1aea:	cpsie	i
    1aec:	mov.w	r3, #1600	; 0x640

00001af0 <L_8748_delayMicroseconds>:
    1af0:	subs	r3, #1
    1af2:	bne.n	1af0 <L_8748_delayMicroseconds>
    1af4:	cpsid	i
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    1af6:	ldr	r7, [sp, #32]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    1af8:	ldr	r2, [pc, #660]	; (1d90 <L_8748_delayMicroseconds+0x2a0>)
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    1afa:	ldrb	r1, [r7, #15]
    1afc:	ldr	r3, [r2, #0]
            e[1] = other.e[1];
            e[2] = other.e[2];
    1afe:	ldrb	r6, [r7, #17]

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
    1b00:	str	r1, [sp, #8]
            e[1] = other.e[1];
            e[2] = other.e[2];
            mData = other.mData;
    1b02:	mov	r4, r7
        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    1b04:	ldrb	r1, [r7, #16]
            e[2] = other.e[2];
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    1b06:	ldrsb.w	lr, [r4, #21]
            mLenRemaining = mLen = other.mLen;
    1b0a:	ldr	r4, [sp, #32]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1b0c:	ldr	r0, [pc, #644]	; (1d94 <L_8748_delayMicroseconds+0x2a4>)
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
            d[1] = other.d[1];
    1b0e:	ldrb	r5, [r7, #13]
            d[2] = other.d[2];
            e[0] = other.e[0];
            e[1] = other.e[1];
    1b10:	str	r1, [sp, #4]

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
    1b12:	orr.w	r3, r3, #16777216	; 0x1000000
            e[2] = other.e[2];
            mData = other.mData;
    1b16:	ldr.w	r8, [r7]
        CRGB mScale;
        int8_t mAdvance;
        int mOffsets[LANES];

        PixelController(const PixelController & other) {
            d[0] = other.d[0];
    1b1a:	ldrb.w	sl, [r7, #12]
            d[1] = other.d[1];
            d[2] = other.d[2];
    1b1e:	ldrb.w	r9, [r7, #14]
            e[0] = other.e[0];
            e[1] = other.e[1];
            e[2] = other.e[2];
    1b22:	str	r6, [sp, #12]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1b24:	ldrb	r1, [r7, #19]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b26:	ldrb	r6, [r7, #18]
            mData = other.mData;
            mScale = other.mScale;
            mAdvance = other.mAdvance;
    1b28:	str.w	lr, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    1b2c:	ldrb	r7, [r7, #20]
            mLenRemaining = mLen = other.mLen;
    1b2e:	ldr.w	fp, [r4, #4]
    1b32:	str	r3, [r2, #0]
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1b34:	ldr	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    1b36:	ldr	r4, [pc, #608]	; (1d98 <L_8748_delayMicroseconds+0x2a8>)

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    1b38:	ldr	r3, [pc, #608]	; (1d9c <L_8748_delayMicroseconds+0x2ac>)
	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static uint32_t showRGBInternal(PixelController<RGB_ORDER> pixels) {
	    // Get access to the clock
		ARM_DEMCR    |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1b3a:	orr.w	r2, r2, #1
    1b3e:	str	r2, [r0, #0]
		ARM_DWT_CYCCNT = 0;
    1b40:	movs	r2, #0
    1b42:	str	r2, [r4, #0]

		register data_ptr_t port = FastPin<DATA_PIN>::port();
		register data_t hi = *port | FastPin<DATA_PIN>::mask();;
    1b44:	ldr	r2, [r3, #0]
		register data_t lo = *port & ~FastPin<DATA_PIN>::mask();;
    1b46:	ldr	r2, [r3, #0]
    1b48:	bic.w	r2, r2, #1
		*port = lo;
    1b4c:	str	r2, [r3, #0]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    1b4e:	ldr	r3, [sp, #4]
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1b50:	ldrb.w	r4, [r8, #1]
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    1b54:	subs	r5, r3, r5
    1b56:	uxtb.w	ip, r5
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1b5a:	cmp	r4, #0
    1b5c:	beq.w	1d84 <L_8748_delayMicroseconds+0x294>
    1b60:	uqadd8	r4, r4, ip
    1b64:	uxtb	r3, r4
    1b66:	adds	r2, r1, #1
    1b68:	mul.w	r3, r2, r3
    1b6c:	str	r2, [sp, #20]
    1b6e:	ubfx	r4, r3, #8, #8

		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
    1b72:	cpsid	i
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1b74:	ldr	r3, [pc, #544]	; (1d98 <L_8748_delayMicroseconds+0x2a8>)
    1b76:	ldr	r1, [r3, #0]

		while(pixels.has(1)) {
    1b78:	cmp.w	fp, #0
		// Setup the pixel controller and load/scale the first byte
		pixels.preStepFirstByteDithering();
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1b7c:	add.w	r1, r1, #120	; 0x78

		while(pixels.has(1)) {
    1b80:	ble.w	1cf8 <L_8748_delayMicroseconds+0x208>
    1b84:	adds	r2, r6, #1
    1b86:	str	r2, [sp, #24]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    1b88:	ldr	r0, [pc, #528]	; (1d9c <L_8748_delayMicroseconds+0x2ac>)
    1b8a:	adds	r2, r7, #1
    1b8c:	str	r2, [sp, #28]
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1b8e:	mov	r7, r3

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1b90:	ldr	r2, [sp, #8]
    1b92:	rsb	sl, sl, r2
                d[1] = e[1] - d[1];
    1b96:	ldr	r2, [sp, #4]
    1b98:	rsb	ip, ip, r2
                d[2] = e[2] - d[2];
    1b9c:	ldr	r2, [sp, #12]
    1b9e:	rsb	r9, r9, r2

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1ba2:	uxtb.w	sl, sl
                d[1] = e[1] - d[1];
    1ba6:	uxtb.w	ip, ip
                d[2] = e[2] - d[2];
    1baa:	uxtb.w	r9, r9
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
    1bae:	cpsid	i
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
    1bb0:	ldr	r2, [r3, #0]
    1bb2:	cmp	r2, r1
    1bb4:	bls.n	1bc2 <L_8748_delayMicroseconds+0xd2>
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    1bb6:	ldr	r2, [r3, #0]
    1bb8:	subs	r2, r2, r1
    1bba:	cmp.w	r2, #4704	; 0x1260
    1bbe:	bhi.w	1d8a <L_8748_delayMicroseconds+0x29a>
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    1bc2:	ldr	r6, [r0, #0]
			lo = *port & ~FastPin<DATA_PIN>::mask();
    1bc4:	ldr	r5, [r0, #0]
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
			}

			hi = *port | FastPin<DATA_PIN>::mask();
    1bc6:	orr.w	r6, r6, #1
			lo = *port & ~FastPin<DATA_PIN>::mask();
    1bca:	bic.w	r5, r5, #1
    1bce:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1bd2:	ldr	r2, [r3, #0]
    1bd4:	cmp	r2, r1
    1bd6:	bcc.n	1bd2 <L_8748_delayMicroseconds+0xe2>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1bd8:	ldr	r1, [r7, #0]
    1bda:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1bdc:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1bde:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1be2:	bmi.w	1d00 <L_8748_delayMicroseconds+0x210>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1be6:	ldr	r2, [r3, #0]
    1be8:	subs	r2, r1, r2
    1bea:	cmp	r2, #104	; 0x68
    1bec:	bhi.n	1be6 <L_8748_delayMicroseconds+0xf6>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1bee:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1bf0:	subs.w	lr, lr, #1
    1bf4:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1bf6:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1bf8:	bne.n	1bd2 <L_8748_delayMicroseconds+0xe2>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    1bfa:	ldr	r2, [r3, #0]
    1bfc:	cmp	r1, r2
    1bfe:	bhi.n	1bfa <L_8748_delayMicroseconds+0x10a>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1c00:	ldr	r1, [r7, #0]
    1c02:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1c04:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1c06:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1c0a:	bmi.w	1d14 <L_8748_delayMicroseconds+0x224>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1c0e:	ldr	r2, [r3, #0]
    1c10:	subs	r2, r1, r2
    1c12:	cmp	r2, #104	; 0x68
    1c14:	bhi.n	1c0e <L_8748_delayMicroseconds+0x11e>
    1c16:	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1c18:	ldrb.w	r4, [r8]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1c1c:	cbz	r4, 1c2e <L_8748_delayMicroseconds+0x13e>
    1c1e:	uqadd8	r4, r4, sl
    1c22:	ldr	r2, [sp, #24]
    1c24:	uxtb	r4, r4
    1c26:	mul.w	r4, r4, r2
    1c2a:	ubfx	r4, r4, #8, #8
    1c2e:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1c32:	ldr	r2, [r3, #0]
    1c34:	cmp	r2, r1
    1c36:	bcc.n	1c32 <L_8748_delayMicroseconds+0x142>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1c38:	ldr	r1, [r7, #0]
    1c3a:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1c3c:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1c3e:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1c42:	bmi.n	1d28 <L_8748_delayMicroseconds+0x238>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1c44:	ldr	r2, [r3, #0]
    1c46:	subs	r2, r1, r2
    1c48:	cmp	r2, #104	; 0x68
    1c4a:	bhi.n	1c44 <L_8748_delayMicroseconds+0x154>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1c4c:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1c4e:	subs.w	lr, lr, #1
    1c52:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1c54:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1c56:	bne.n	1c32 <L_8748_delayMicroseconds+0x142>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    1c58:	ldr	r2, [r3, #0]
    1c5a:	cmp	r1, r2
    1c5c:	bhi.n	1c58 <L_8748_delayMicroseconds+0x168>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1c5e:	ldr	r1, [r7, #0]
    1c60:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1c62:	lsls	r4, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1c64:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1c68:	bmi.n	1d3a <L_8748_delayMicroseconds+0x24a>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1c6a:	ldr	r2, [r3, #0]
    1c6c:	subs	r2, r1, r2
    1c6e:	cmp	r2, #104	; 0x68
    1c70:	bhi.n	1c6a <L_8748_delayMicroseconds+0x17a>
    1c72:	str	r5, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1c74:	ldrb.w	r4, [r8, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1c78:	cbz	r4, 1c8a <L_8748_delayMicroseconds+0x19a>
    1c7a:	uqadd8	r4, r4, r9
    1c7e:	ldr	r2, [sp, #28]
    1c80:	uxtb	r4, r4
    1c82:	mul.w	r4, r4, r2
    1c86:	ubfx	r4, r4, #8, #8
    1c8a:	mov.w	lr, #7
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
    1c8e:	ldr	r2, [r3, #0]
    1c90:	cmp	r2, r1
    1c92:	bcc.n	1c8e <L_8748_delayMicroseconds+0x19e>
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1c94:	ldr	r1, [r7, #0]
    1c96:	str	r6, [r0, #0]
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1c98:	lsls	r2, r4, #24
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1c9a:	add.w	r1, r1, #120	; 0x78
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
    1c9e:	bmi.n	1d4c <L_8748_delayMicroseconds+0x25c>
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1ca0:	ldr	r2, [r3, #0]
    1ca2:	subs	r2, r1, r2
    1ca4:	cmp	r2, #104	; 0x68
    1ca6:	bhi.n	1ca0 <L_8748_delayMicroseconds+0x1b0>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1ca8:	lsls	r4, r4, #1
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1caa:	subs.w	lr, lr, #1
    1cae:	str	r5, [r0, #0]
				FastPin<DATA_PIN>::fastset(port, lo);
			} else {
				while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
    1cb0:	uxtb	r4, r4
    }
    mWait.mark();
  }

	template<int BITS> __attribute__ ((always_inline)) inline static void writeBits(register uint32_t & next_mark, register data_ptr_t port, register data_t hi, register data_t lo, register uint8_t & b)  {
		for(register uint32_t i = BITS-1; i > 0; i--) {
    1cb2:	bne.n	1c8e <L_8748_delayMicroseconds+0x19e>
				FastPin<DATA_PIN>::fastset(port, lo);
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
    1cb4:	ldr	r2, [r3, #0]
    1cb6:	cmp	r1, r2
    1cb8:	bhi.n	1cb4 <L_8748_delayMicroseconds+0x1c4>
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1cba:	ldr	r1, [r7, #0]
    1cbc:	str	r6, [r0, #0]
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1cbe:	lsls	r2, r4, #24
			}
			b <<= 1;
		}

		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
    1cc0:	add.w	r1, r1, #120	; 0x78
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
    1cc4:	bmi.n	1d5e <L_8748_delayMicroseconds+0x26e>
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
			FastPin<DATA_PIN>::fastset(port, lo);
		} else {
			while((next_mark - ARM_DWT_CYCCNT) > (T2+T3+(2*(F_CPU/24000000))));
    1cc6:	ldr	r2, [r3, #0]
    1cc8:	subs	r2, r1, r2
    1cca:	cmp	r2, #104	; 0x68
    1ccc:	bhi.n	1cc6 <L_8748_delayMicroseconds+0x1d6>
    1cce:	ldr	r2, [sp, #16]
    1cd0:	str	r5, [r0, #0]
    1cd2:	add	r8, r2

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1cd4:	add.w	fp, fp, #4294967295
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    1cd8:	ldrb.w	r4, [r8, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1cdc:	cbz	r4, 1cee <L_8748_delayMicroseconds+0x1fe>
    1cde:	uqadd8	r4, r4, ip
    1ce2:	ldr	r2, [sp, #20]
    1ce4:	uxtb	r4, r4
    1ce6:	mul.w	r4, r2, r4
    1cea:	ubfx	r4, r4, #8, #8

			// Write third byte, read 1st byte of next pixel
			writeBits<8+XTRA0>(next_mark, port, hi, lo, b);
			b = pixels.advanceAndLoadAndScale0();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
    1cee:	cpsie	i
		register uint8_t b = pixels.loadAndScale0();

		cli();
		uint32_t next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);

		while(pixels.has(1)) {
    1cf0:	cmp.w	fp, #0
    1cf4:	bne.w	1b90 <L_8748_delayMicroseconds+0xa0>
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			sei();
			#endif
		};

		sei();
    1cf8:	cpsie	i
		return ARM_DWT_CYCCNT;
    1cfa:	ldr	r3, [pc, #156]	; (1d98 <L_8748_delayMicroseconds+0x2a8>)
    1cfc:	ldr	r3, [r3, #0]
    1cfe:	b.n	1a58 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x218>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1d00:	ldr	r2, [r3, #0]
    1d02:	subs	r2, r1, r2
    1d04:	cmp	r2, #44	; 0x2c
    1d06:	bls.w	1bee <L_8748_delayMicroseconds+0xfe>
    1d0a:	ldr	r2, [r3, #0]
    1d0c:	subs	r2, r1, r2
    1d0e:	cmp	r2, #44	; 0x2c
    1d10:	bhi.n	1d00 <L_8748_delayMicroseconds+0x210>
    1d12:	b.n	1bee <L_8748_delayMicroseconds+0xfe>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1d14:	ldr	r2, [r3, #0]
    1d16:	subs	r2, r1, r2
    1d18:	cmp	r2, #44	; 0x2c
    1d1a:	bls.w	1c16 <L_8748_delayMicroseconds+0x126>
    1d1e:	ldr	r2, [r3, #0]
    1d20:	subs	r2, r1, r2
    1d22:	cmp	r2, #44	; 0x2c
    1d24:	bhi.n	1d14 <L_8748_delayMicroseconds+0x224>
    1d26:	b.n	1c16 <L_8748_delayMicroseconds+0x126>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1d28:	ldr	r2, [r3, #0]
    1d2a:	subs	r2, r1, r2
    1d2c:	cmp	r2, #44	; 0x2c
    1d2e:	bls.n	1c4c <L_8748_delayMicroseconds+0x15c>
    1d30:	ldr	r2, [r3, #0]
    1d32:	subs	r2, r1, r2
    1d34:	cmp	r2, #44	; 0x2c
    1d36:	bhi.n	1d28 <L_8748_delayMicroseconds+0x238>
    1d38:	b.n	1c4c <L_8748_delayMicroseconds+0x15c>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1d3a:	ldr	r2, [r3, #0]
    1d3c:	subs	r2, r1, r2
    1d3e:	cmp	r2, #44	; 0x2c
    1d40:	bls.n	1c72 <L_8748_delayMicroseconds+0x182>
    1d42:	ldr	r2, [r3, #0]
    1d44:	subs	r2, r1, r2
    1d46:	cmp	r2, #44	; 0x2c
    1d48:	bhi.n	1d3a <L_8748_delayMicroseconds+0x24a>
    1d4a:	b.n	1c72 <L_8748_delayMicroseconds+0x182>
		for(register uint32_t i = BITS-1; i > 0; i--) {
			while(ARM_DWT_CYCCNT < next_mark);
			next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
			FastPin<DATA_PIN>::fastset(port, hi);
			if(b&0x80) {
				while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1d4c:	ldr	r2, [r3, #0]
    1d4e:	subs	r2, r1, r2
    1d50:	cmp	r2, #44	; 0x2c
    1d52:	bls.n	1ca8 <L_8748_delayMicroseconds+0x1b8>
    1d54:	ldr	r2, [r3, #0]
    1d56:	subs	r2, r1, r2
    1d58:	cmp	r2, #44	; 0x2c
    1d5a:	bhi.n	1d4c <L_8748_delayMicroseconds+0x25c>
    1d5c:	b.n	1ca8 <L_8748_delayMicroseconds+0x1b8>
		while(ARM_DWT_CYCCNT < next_mark);
		next_mark = ARM_DWT_CYCCNT + (T1+T2+T3);
		FastPin<DATA_PIN>::fastset(port, hi);

		if(b&0x80) {
			while((next_mark - ARM_DWT_CYCCNT) > (T3+(2*(F_CPU/24000000))));
    1d5e:	ldr	r2, [r3, #0]
    1d60:	subs	r2, r1, r2
    1d62:	cmp	r2, #44	; 0x2c
    1d64:	bls.n	1cce <L_8748_delayMicroseconds+0x1de>
    1d66:	ldr	r2, [r3, #0]
    1d68:	subs	r2, r1, r2
    1d6a:	cmp	r2, #44	; 0x2c
    1d6c:	bhi.n	1d5e <L_8748_delayMicroseconds+0x26e>
    1d6e:	b.n	1cce <L_8748_delayMicroseconds+0x1de>
    1d70:	uqadd8	r4, r4, ip
    1d74:	uxtb	r3, r4
    1d76:	adds	r2, r5, #1
    1d78:	mul.w	r3, r2, r3
    1d7c:	str	r2, [sp, #20]
    1d7e:	ubfx	r4, r3, #8, #8
    1d82:	b.n	18c6 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x86>
    1d84:	adds	r3, r1, #1
    1d86:	str	r3, [sp, #20]
    1d88:	b.n	1b72 <L_8748_delayMicroseconds+0x82>
			pixels.stepDithering();
			#if (FASTLED_ALLOW_INTERRUPTS == 1)
			cli();
			// if interrupts took longer than 45µs, punt on the current frame
			if(ARM_DWT_CYCCNT > next_mark) {
				if((ARM_DWT_CYCCNT-next_mark) > ((WAIT_TIME-INTERRUPT_THRESHOLD)*CLKS_PER_US)) { sei(); return 0; }
    1d8a:	cpsie	i
    1d8c:	b.n	1a58 <ClocklessController<2, 24, 60, 36, (EOrder)66, 0, false, 50>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x218>
    1d8e:	nop
    1d90:	.word	0xe000edfc
    1d94:	.word	0xe0001000
    1d98:	.word	0xe0001004
    1d9c:	.word	0x400ff0c0

00001da0 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
    1da0:	movs	r3, #0
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
    1da2:	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
    1da4:	ldr	r4, [pc, #64]	; (1de8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x48>)
    1da6:	strb	r1, [r0, #9]
    1da8:	str	r2, [r0, #16]
    1daa:	str	r4, [r0, #0]
			active = false;
    1dac:	strb	r3, [r0, #8]
			destination_list = NULL;
    1dae:	str	r3, [r0, #12]
			for (int i=0; i < num_inputs; i++) {
    1db0:	cbz	r1, 1dc4 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
				inputQueue[i] = NULL;
    1db2:	mov	r1, r3
    1db4:	b.n	1db8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
    1db6:	ldr	r2, [r0, #16]
    1db8:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    1dbc:	ldrb	r2, [r0, #9]
    1dbe:	adds	r3, #1
    1dc0:	cmp	r2, r3
    1dc2:	bgt.n	1db6 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x16>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    1dc4:	ldr	r3, [pc, #36]	; (1dec <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4c>)
    1dc6:	ldr	r2, [r3, #0]
    1dc8:	cbnz	r2, 1dce <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
    1dca:	b.n	1de4 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x44>
    1dcc:	mov	r2, r3
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    1dce:	ldr	r3, [r2, #20]
    1dd0:	cmp	r3, #0
    1dd2:	bne.n	1dcc <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2c>
				p->next_update = this;
    1dd4:	str	r0, [r2, #20]
			}
			next_update = NULL;
    1dd6:	movs	r3, #0
    1dd8:	str	r3, [r0, #20]
			cpu_cycles = 0;
    1dda:	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
    1ddc:	strh	r3, [r0, #6]
			numConnections = 0;
    1dde:	strb	r3, [r0, #10]
		}
    1de0:	pop	{r4}
    1de2:	bx	lr
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    1de4:	str	r0, [r3, #0]
    1de6:	b.n	1dd6 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x36>
    1de8:	.word	0x0000c658
    1dec:	.word	0x1fffbde0

00001df0 <AudioPlaySdWav::AudioPlaySdWav()>:
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    1df0:	ldr	r1, [pc, #72]	; (1e3c <AudioPlaySdWav::AudioPlaySdWav()+0x4c>)
    1df2:	ldr	r2, [r1, #0]
{
public:
	AudioPlaySdWav(void) : AudioStream(0, NULL), block_left(NULL), block_right(NULL) { begin(); }
    1df4:	push	{r3, r4, r5, lr}

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    1df6:	movs	r3, #0
    1df8:	ldr	r5, [pc, #68]	; (1e40 <AudioPlaySdWav::AudioPlaySdWav()+0x50>)
    1dfa:	str	r5, [r0, #0]
    1dfc:	mov	r4, r0
    1dfe:	strb	r3, [r0, #9]
    1e00:	str	r3, [r0, #16]
			active = false;
    1e02:	strb	r3, [r0, #8]
			destination_list = NULL;
    1e04:	str	r3, [r0, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    1e06:	cbnz	r2, 1e0c <AudioPlaySdWav::AudioPlaySdWav()+0x1c>
    1e08:	b.n	1e38 <AudioPlaySdWav::AudioPlaySdWav()+0x48>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    1e0a:	mov	r2, r3
    1e0c:	ldr	r3, [r2, #20]
    1e0e:	cmp	r3, #0
    1e10:	bne.n	1e0a <AudioPlaySdWav::AudioPlaySdWav()+0x1a>
				p->next_update = this;
    1e12:	str	r4, [r2, #20]
    1e14:	mov	r0, r4
			}
			next_update = NULL;
    1e16:	movs	r5, #0
    1e18:	ldr	r3, [pc, #40]	; (1e44 <AudioPlaySdWav::AudioPlaySdWav()+0x54>)
    1e1a:	str	r5, [r4, #20]
			cpu_cycles = 0;
    1e1c:	strh	r5, [r4, #4]
			cpu_cycles_max = 0;
    1e1e:	strh	r5, [r4, #6]
			numConnections = 0;
    1e20:	strb	r5, [r4, #10]
    1e22:	str.w	r3, [r0], #24
    1e26:	bl	6bf4 <File::File()>
    1e2a:	mov	r0, r4
    1e2c:	str	r5, [r4, #108]	; 0x6c
    1e2e:	str	r5, [r4, #112]	; 0x70
    1e30:	bl	4ac4 <AudioPlaySdWav::begin()>
    1e34:	mov	r0, r4
    1e36:	pop	{r3, r4, r5, pc}
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    1e38:	str	r0, [r1, #0]
    1e3a:	b.n	1e14 <AudioPlaySdWav::AudioPlaySdWav()+0x24>
    1e3c:	.word	0x1fffbde0
    1e40:	.word	0x0000c658
    1e44:	.word	0x0000ca34

00001e48 <getIRCmd()>:
    default: break;
  }
}

ircmd getIRCmd()
{
    1e48:	push	{r4, lr}
  if ( IR.decode(&RawIRCmd))
    1e4a:	ldr	r4, [pc, #72]	; (1e94 <getIRCmd()+0x4c>)
    1e4c:	ldr	r0, [pc, #72]	; (1e98 <getIRCmd()+0x50>)
    1e4e:	mov	r1, r4
    1e50:	bl	64b0 <IRrecv::decode(decode_results*)>
    1e54:	cbnz	r0, 1e5a <getIRCmd()+0x12>
        }
      }
      IR.resume();
    }
  }
  return NO_CMD;
    1e56:	movs	r0, #44	; 0x2c
}
    1e58:	pop	{r4, pc}

ircmd getIRCmd()
{
  if ( IR.decode(&RawIRCmd))
  {
    if ((RawIRCmd.value == 0xFFFFFFFF))
    1e5a:	ldr	r1, [r4, #8]
    1e5c:	adds	r3, r1, #1
    1e5e:	beq.n	1e8a <getIRCmd()+0x42>
    1e60:	ldr	r3, [pc, #56]	; (1e9c <getIRCmd()+0x54>)
    1e62:	uxth	r1, r1
    1e64:	movs	r4, #0
    1e66:	b.n	1e6e <getIRCmd()+0x26>
      IR.resume();
      return RPT;
    }
    else
    {
      for (int i = 0 ; i < NB_IR_CMD ; i++)
    1e68:	adds	r4, #1
    1e6a:	cmp	r4, #44	; 0x2c
    1e6c:	beq.n	1e80 <getIRCmd()+0x38>
      {
        //Serial.println(RawIRCmd.value & 0x00FFFF, HEX);
        if ((RawIRCmd.value & 0x00FFFF) == IRcmdCommands[i])
    1e6e:	ldrh.w	r2, [r3, #2]!
    1e72:	cmp	r1, r2
    1e74:	bne.n	1e68 <getIRCmd()+0x20>
        {
          IR.resume();
    1e76:	ldr	r0, [pc, #32]	; (1e98 <getIRCmd()+0x50>)
    1e78:	bl	6400 <IRrecv::resume()>
          return (ircmd)i;
    1e7c:	uxtb	r0, r4
    1e7e:	pop	{r4, pc}
        }
      }
      IR.resume();
    1e80:	ldr	r0, [pc, #20]	; (1e98 <getIRCmd()+0x50>)
    1e82:	bl	6400 <IRrecv::resume()>
    }
  }
  return NO_CMD;
    1e86:	mov	r0, r4
    1e88:	pop	{r4, pc}
{
  if ( IR.decode(&RawIRCmd))
  {
    if ((RawIRCmd.value == 0xFFFFFFFF))
    {
      IR.resume();
    1e8a:	ldr	r0, [pc, #12]	; (1e98 <getIRCmd()+0x50>)
    1e8c:	bl	6400 <IRrecv::resume()>
      return RPT;
    1e90:	movs	r0, #45	; 0x2d
    1e92:	pop	{r4, pc}
    1e94:	.word	0x1fffb434
    1e98:	.word	0x1fffb450
    1e9c:	.word	0x1fff93fe

00001ea0 <init_Player()>:
  return NO_CMD;
}


void init_Player()
{
    1ea0:	push	{r3, lr}
  // Audio connections require memory to work.  For more
  // detailed information, see the MemoryAndCpuUsage example
  AudioMemory(8);
    1ea2:	movs	r1, #8
    1ea4:	ldr	r0, [pc, #68]	; (1eec <init_Player()+0x4c>)
    1ea6:	bl	a8c8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>
  sgtl5000_1.enable();
    1eaa:	ldr	r0, [pc, #68]	; (1ef0 <init_Player()+0x50>)
    1eac:	bl	4770 <AudioControlSGTL5000::enable()>
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
    1eb0:	movs	r1, #64	; 0x40
    1eb2:	ldr	r0, [pc, #60]	; (1ef0 <init_Player()+0x50>)
    1eb4:	bl	48ac <AudioControlSGTL5000::volumeInteger(unsigned int)>
  sgtl5000_1.volume(0.5);

  SPI.setMOSI(SDCARD_MOSI_PIN);
    1eb8:	movs	r1, #7
    1eba:	ldr	r0, [pc, #56]	; (1ef4 <init_Player()+0x54>)
    1ebc:	bl	84dc <SPIClass::setMOSI(unsigned char)>
  SPI.setSCK(SDCARD_SCK_PIN);
    1ec0:	movs	r1, #14
    1ec2:	ldr	r0, [pc, #48]	; (1ef4 <init_Player()+0x54>)
    1ec4:	bl	856c <SPIClass::setSCK(unsigned char)>
  if (!(SD.begin(SDCARD_CS_PIN))) {
    1ec8:	movs	r1, #10
    1eca:	ldr	r0, [pc, #44]	; (1ef8 <init_Player()+0x58>)
    1ecc:	bl	6c4c <SDClass::begin(unsigned char)>
    1ed0:	cbnz	r0, 1eea <init_Player()+0x4a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1ed2:	movs	r1, #28
    1ed4:	ldr	r0, [pc, #36]	; (1efc <init_Player()+0x5c>)
    1ed6:	bl	8dec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1eda:	ldr	r0, [pc, #36]	; (1f00 <init_Player()+0x60>)
    1edc:	bl	a780 <Print::println()>
    // stop here, but print a message repetitively
    while (1) {
      Serial.println("Unable to access the SD card");
      delay(500);
    1ee0:	mov.w	r0, #500	; 0x1f4
    1ee4:	bl	9454 <delay>
    1ee8:	b.n	1ed2 <init_Player()+0x32>
    1eea:	pop	{r3, pc}
    1eec:	.word	0x1fff8200
    1ef0:	.word	0x1fffb454
    1ef4:	.word	0x1fff9460
    1ef8:	.word	0x1fffba50
    1efc:	.word	0x0000c6f8
    1f00:	.word	0x1fff965c

00001f04 <setup>:
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    1f04:	ldr	r0, [pc, #516]	; (210c <setup+0x208>)


uint8_t Brightness = 0;

void setup()
{
    1f06:	push	{r3, r4, r5, lr}
    1f08:	ldr	r3, [r0, #0]
    1f0a:	ands.w	r4, r3, #1
    1f0e:	beq.w	20b6 <setup+0x1b2>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
    1f12:	movs	r3, #14
    1f14:	movs	r2, #0
    1f16:	ldr	r1, [pc, #504]	; (2110 <setup+0x20c>)
    1f18:	ldr	r0, [pc, #504]	; (2114 <setup+0x210>)
    1f1a:	bl	55fc <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    1f1e:	ldr	r0, [pc, #504]	; (2118 <setup+0x214>)
    1f20:	ldr	r3, [r0, #0]
    1f22:	ands.w	r4, r3, #1
    1f26:	beq.w	2070 <setup+0x16c>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
    1f2a:	movs	r3, #14
    1f2c:	mov	r2, r3
    1f2e:	ldr	r1, [pc, #480]	; (2110 <setup+0x20c>)
    1f30:	ldr	r0, [pc, #488]	; (211c <setup+0x218>)
    1f32:	bl	55fc <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    1f36:	ldr	r0, [pc, #488]	; (2120 <setup+0x21c>)
    1f38:	ldr	r3, [r0, #0]
    1f3a:	ands.w	r4, r3, #1
    1f3e:	beq.n	202c <setup+0x128>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
    1f40:	movs	r3, #14
    1f42:	movs	r2, #28
    1f44:	ldr	r1, [pc, #456]	; (2110 <setup+0x20c>)
    1f46:	ldr	r0, [pc, #476]	; (2124 <setup+0x220>)
    1f48:	bl	55fc <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    1f4c:	ldr	r0, [pc, #472]	; (2128 <setup+0x224>)
    1f4e:	ldr	r3, [r0, #0]
    1f50:	ands.w	r4, r3, #1
    1f54:	beq.n	1fe8 <setup+0xe4>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
    1f56:	movs	r2, #42	; 0x2a
    1f58:	ldr	r1, [pc, #436]	; (2110 <setup+0x20c>)
    1f5a:	ldr	r0, [pc, #464]	; (212c <setup+0x228>)
    1f5c:	ldr	r5, [pc, #464]	; (2130 <setup+0x22c>)
    1f5e:	ldr	r4, [pc, #468]	; (2134 <setup+0x230>)
    1f60:	movs	r3, #14
    1f62:	bl	55fc <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    1f66:	ldr	r2, [pc, #464]	; (2138 <setup+0x234>)
    1f68:	ldr	r1, [pc, #464]	; (213c <setup+0x238>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1f6a:	ldrb	r3, [r2, #0]
    1f6c:	cmp	r3, #0
    1f6e:	beq.n	1f6a <setup+0x66>
    1f70:	ldrb	r3, [r1, #0]
    1f72:	lsls	r3, r3, #31
    1f74:	bpl.n	1f6a <setup+0x66>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1f76:	ldr	r3, [r5, #0]
    1f78:	ldr	r0, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1f7a:	subs	r3, r3, r0
    1f7c:	cmp	r3, #14
    1f7e:	bls.n	1f6a <setup+0x66>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1f80:	movs	r1, #12
    1f82:	ldr	r0, [pc, #444]	; (2140 <setup+0x23c>)
    1f84:	bl	8dec <usb_serial_write>
    1f88:	ldr	r0, [pc, #440]	; (2144 <setup+0x240>)
    1f8a:	bl	a780 <Print::println()>
    1f8e:	movs	r1, #12
    1f90:	ldr	r0, [pc, #436]	; (2148 <setup+0x244>)
    1f92:	bl	8dec <usb_serial_write>
    1f96:	ldr	r0, [pc, #428]	; (2144 <setup+0x240>)
    1f98:	bl	a780 <Print::println()>

#ifdef DEBUG_MODE
  Serial.println("Port Opened.");
  Serial.println("Initializing");
#endif
  StripCommander.begin();
    1f9c:	ldr	r0, [pc, #428]	; (214c <setup+0x248>)
    1f9e:	bl	3e70 <StripCommand::begin()>
  IR.enableIRIn();
    1fa2:	ldr	r0, [pc, #428]	; (2150 <setup+0x24c>)
    1fa4:	bl	6370 <IRrecv::enableIRIn()>
  init_Player();
    1fa8:	bl	1ea0 <init_Player()>

  T1.addEvent(100, MegaFlash);
    1fac:	movs	r2, #2
    1fae:	movs	r1, #100	; 0x64
    1fb0:	ldr	r0, [pc, #416]	; (2154 <setup+0x250>)
    1fb2:	bl	3d44 <Thunder::addEvent(unsigned long, FX)>
  T1.addEvent(600, GroupFlash);
    1fb6:	movs	r2, #1
    1fb8:	mov.w	r1, #600	; 0x258
    1fbc:	ldr	r0, [pc, #404]	; (2154 <setup+0x250>)
    1fbe:	bl	3d44 <Thunder::addEvent(unsigned long, FX)>
  T1.addEvent(1000, SingleFlash);
    1fc2:	movs	r2, #0
    1fc4:	mov.w	r1, #1000	; 0x3e8
    1fc8:	ldr	r0, [pc, #392]	; (2154 <setup+0x250>)
    1fca:	bl	3d44 <Thunder::addEvent(unsigned long, FX)>
    1fce:	movs	r1, #25
    1fd0:	ldr	r0, [pc, #388]	; (2158 <setup+0x254>)
    1fd2:	bl	8dec <usb_serial_write>
    1fd6:	ldr	r0, [pc, #364]	; (2144 <setup+0x240>)
    1fd8:	bl	a780 <Print::println()>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    1fdc:	ldr	r0, [pc, #380]	; (215c <setup+0x258>)

#ifdef DEBUG_MODE
  Serial.println("Successfully Initialized.");
#endif
  FastLED.show();   //Clear all LEDs
}
    1fde:	ldmia.w	sp!, {r3, r4, r5, lr}
    1fe2:	ldrb	r1, [r0, #0]
    1fe4:	b.w	56a0 <CFastLED::show(unsigned char)>
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    1fe8:	bl	9164 <__cxa_guard_acquire>
    1fec:	cmp	r0, #0
    1fee:	beq.n	1f56 <setup+0x52>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    1ff0:	ldr	r1, [pc, #364]	; (2160 <setup+0x25c>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    1ff2:	ldr	r3, [pc, #312]	; (212c <setup+0x228>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    1ff4:	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    1ff6:	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1ff8:	movs	r2, #255	; 0xff
    1ffa:	movs	r5, #1
    1ffc:	str	r4, [r3, #20]
        m_pNext = NULL;
    1ffe:	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    2000:	strb	r5, [r3, #18]
    2002:	strb	r2, [r3, #12]
    2004:	strb	r2, [r3, #13]
    2006:	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2008:	strb	r2, [r3, #15]
    200a:	strb	r2, [r3, #16]
    200c:	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    200e:	cmp	r0, #0
    2010:	beq.n	20fe <setup+0x1fa>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    2012:	ldr	r2, [pc, #336]	; (2164 <setup+0x260>)
    2014:	ldr	r1, [r2, #0]
    2016:	cbz	r1, 201a <setup+0x116>
    2018:	str	r3, [r1, #8]
/// Class to ensure that a minimum amount of time has kicked since the last time run - and delay if not enough time has passed yet
/// this should make sure that chipsets that have
template<int WAIT> class CMinWait {
	uint16_t mLastMicros;
public:
	CMinWait() { mLastMicros = 0; }
    201a:	movs	r4, #0
#ifdef HAS_PIXIE
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_ORDER> {};
#endif

#ifdef FASTLED_HAS_CLOCKLESS
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};
    201c:	ldr	r1, [pc, #328]	; (2168 <setup+0x264>)
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    201e:	ldr	r0, [pc, #264]	; (2128 <setup+0x224>)
    2020:	strh	r4, [r3, #32]
        m_pTail = this;
    2022:	str	r3, [r2, #0]
#ifdef HAS_PIXIE
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_ORDER> {};
#endif

#ifdef FASTLED_HAS_CLOCKLESS
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};
    2024:	str	r1, [r3, #0]
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    2026:	bl	9170 <__cxa_guard_release>
    202a:	b.n	1f56 <setup+0x52>
    202c:	bl	9164 <__cxa_guard_acquire>
    2030:	cmp	r0, #0
    2032:	beq.n	1f40 <setup+0x3c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    2034:	ldr	r1, [pc, #296]	; (2160 <setup+0x25c>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    2036:	ldr	r3, [pc, #236]	; (2124 <setup+0x220>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    2038:	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    203a:	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    203c:	movs	r2, #255	; 0xff
    203e:	movs	r5, #1
    2040:	str	r4, [r3, #20]
        m_pNext = NULL;
    2042:	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    2044:	strb	r5, [r3, #18]
    2046:	strb	r2, [r3, #12]
    2048:	strb	r2, [r3, #13]
    204a:	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    204c:	strb	r2, [r3, #15]
    204e:	strb	r2, [r3, #16]
    2050:	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    2052:	cmp	r0, #0
    2054:	beq.n	2102 <setup+0x1fe>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    2056:	ldr	r2, [pc, #268]	; (2164 <setup+0x260>)
    2058:	ldr	r1, [r2, #0]
    205a:	cbz	r1, 205e <setup+0x15a>
    205c:	str	r3, [r1, #8]
    205e:	movs	r4, #0
#ifdef HAS_PIXIE
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_ORDER> {};
#endif

#ifdef FASTLED_HAS_CLOCKLESS
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};
    2060:	ldr	r1, [pc, #264]	; (216c <setup+0x268>)
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    2062:	ldr	r0, [pc, #188]	; (2120 <setup+0x21c>)
    2064:	strh	r4, [r3, #32]
        m_pTail = this;
    2066:	str	r3, [r2, #0]
#ifdef HAS_PIXIE
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_ORDER> {};
#endif

#ifdef FASTLED_HAS_CLOCKLESS
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};
    2068:	str	r1, [r3, #0]
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    206a:	bl	9170 <__cxa_guard_release>
    206e:	b.n	1f40 <setup+0x3c>
    2070:	bl	9164 <__cxa_guard_acquire>
    2074:	cmp	r0, #0
    2076:	beq.w	1f2a <setup+0x26>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    207a:	ldr	r1, [pc, #228]	; (2160 <setup+0x25c>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    207c:	ldr	r3, [pc, #156]	; (211c <setup+0x218>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    207e:	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    2080:	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2082:	movs	r2, #255	; 0xff
    2084:	movs	r5, #1
    2086:	str	r4, [r3, #20]
        m_pNext = NULL;
    2088:	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    208a:	strb	r5, [r3, #18]
    208c:	strb	r2, [r3, #12]
    208e:	strb	r2, [r3, #13]
    2090:	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2092:	strb	r2, [r3, #15]
    2094:	strb	r2, [r3, #16]
    2096:	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    2098:	cmp	r0, #0
    209a:	beq.n	2106 <setup+0x202>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    209c:	ldr	r2, [pc, #196]	; (2164 <setup+0x260>)
    209e:	ldr	r1, [r2, #0]
    20a0:	cbz	r1, 20a4 <setup+0x1a0>
    20a2:	str	r3, [r1, #8]
    20a4:	movs	r4, #0
#ifdef HAS_PIXIE
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_ORDER> {};
#endif

#ifdef FASTLED_HAS_CLOCKLESS
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};
    20a6:	ldr	r1, [pc, #200]	; (2170 <setup+0x26c>)
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    20a8:	ldr	r0, [pc, #108]	; (2118 <setup+0x214>)
    20aa:	strh	r4, [r3, #32]
        m_pTail = this;
    20ac:	str	r3, [r2, #0]
#ifdef HAS_PIXIE
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_ORDER> {};
#endif

#ifdef FASTLED_HAS_CLOCKLESS
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};
    20ae:	str	r1, [r3, #0]
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    20b0:	bl	9170 <__cxa_guard_release>
    20b4:	b.n	1f2a <setup+0x26>
    20b6:	bl	9164 <__cxa_guard_acquire>
    20ba:	cmp	r0, #0
    20bc:	beq.w	1f12 <setup+0xe>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    20c0:	ldr	r1, [pc, #156]	; (2160 <setup+0x25c>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    20c2:	ldr	r3, [pc, #80]	; (2114 <setup+0x210>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    20c4:	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    20c6:	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    20c8:	movs	r2, #255	; 0xff
    20ca:	movs	r5, #1
    20cc:	str	r4, [r3, #20]
        m_pNext = NULL;
    20ce:	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    20d0:	strb	r5, [r3, #18]
    20d2:	strb	r2, [r3, #12]
    20d4:	strb	r2, [r3, #13]
    20d6:	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    20d8:	strb	r2, [r3, #15]
    20da:	strb	r2, [r3, #16]
    20dc:	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    20de:	cbz	r0, 20fa <setup+0x1f6>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    20e0:	ldr	r2, [pc, #128]	; (2164 <setup+0x260>)
    20e2:	ldr	r1, [r2, #0]
    20e4:	cbz	r1, 20e8 <setup+0x1e4>
    20e6:	str	r3, [r1, #8]
    20e8:	movs	r4, #0
#ifdef HAS_PIXIE
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_ORDER> {};
#endif

#ifdef FASTLED_HAS_CLOCKLESS
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};
    20ea:	ldr	r1, [pc, #136]	; (2174 <setup+0x270>)
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    20ec:	ldr	r0, [pc, #28]	; (210c <setup+0x208>)
    20ee:	strh	r4, [r3, #32]
        m_pTail = this;
    20f0:	str	r3, [r2, #0]
#ifdef HAS_PIXIE
template<uint8_t DATA_PIN, EOrder RGB_ORDER> class PIXIE : public PixieController<DATA_PIN, RGB_ORDER> {};
#endif

#ifdef FASTLED_HAS_CLOCKLESS
template<uint8_t DATA_PIN> class NEOPIXEL : public WS2812Controller800Khz<DATA_PIN, GRB> {};
    20f2:	str	r1, [r3, #0]
		return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset);
	}

	template<template<uint8_t DATA_PIN> class CHIPSET, uint8_t DATA_PIN>
	static CLEDController &addLeds(struct CRGB *data, int nLedsOrOffset, int nLedsIfOffset = 0) {
		static CHIPSET<DATA_PIN> c;
    20f4:	bl	9170 <__cxa_guard_release>
    20f8:	b.n	1f12 <setup+0xe>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    20fa:	str	r3, [r1, #0]
    20fc:	b.n	20e0 <setup+0x1dc>
    20fe:	str	r3, [r1, #0]
    2100:	b.n	2012 <setup+0x10e>
    2102:	str	r3, [r1, #0]
    2104:	b.n	2056 <setup+0x152>
    2106:	str	r3, [r1, #0]
    2108:	b.n	209c <setup+0x198>
    210a:	nop
    210c:	.word	0x1fff9fe4
    2110:	.word	0x1fffa436
    2114:	.word	0x1fff9fe8
    2118:	.word	0x1fff9fbc
    211c:	.word	0x1fff9fc0
    2120:	.word	0x1fff9f94
    2124:	.word	0x1fff9f98
    2128:	.word	0x1fff9f6c
    212c:	.word	0x1fff9f70
    2130:	.word	0x1fffbccc
    2134:	.word	0x1fffbfd8
    2138:	.word	0x1fffbdb0
    213c:	.word	0x1fffbcc8
    2140:	.word	0x0000c718
    2144:	.word	0x1fff965c
    2148:	.word	0x0000c728
    214c:	.word	0x1fffa3f8
    2150:	.word	0x1fffb450
    2154:	.word	0x1fffa2a4
    2158:	.word	0x0000c738
    215c:	.word	0x1fffb888
    2160:	.word	0x1fffb898
    2164:	.word	0x1fffb8a8
    2168:	.word	0x0000c6dc
    216c:	.word	0x0000c6b8
    2170:	.word	0x0000c694
    2174:	.word	0x0000c670

00002178 <toggleRain()>:
  }
}


void toggleRain()
{
    2178:	push	{r3, lr}
      if (!Rain.isPlaying())
    217a:	ldr	r0, [pc, #28]	; (2198 <toggleRain()+0x20>)
    217c:	bl	5050 <AudioPlaySdWav::isPlaying()>
    2180:	cbz	r0, 218c <toggleRain()+0x14>
      {
        Rain.play("RAIN.WAV");
      }
      else
      {
        Rain.stop();
    2182:	ldr	r0, [pc, #20]	; (2198 <toggleRain()+0x20>)
      }
}
    2184:	ldmia.w	sp!, {r3, lr}
      {
        Rain.play("RAIN.WAV");
      }
      else
      {
        Rain.stop();
    2188:	b.w	4af0 <AudioPlaySdWav::stop()>

void toggleRain()
{
      if (!Rain.isPlaying())
      {
        Rain.play("RAIN.WAV");
    218c:	ldr	r1, [pc, #12]	; (219c <toggleRain()+0x24>)
    218e:	ldr	r0, [pc, #8]	; (2198 <toggleRain()+0x20>)
      }
      else
      {
        Rain.stop();
      }
}
    2190:	ldmia.w	sp!, {r3, lr}

void toggleRain()
{
      if (!Rain.isPlaying())
      {
        Rain.play("RAIN.WAV");
    2194:	b.w	4b50 <AudioPlaySdWav::play(char const*)>
    2198:	.word	0x1fffb1b4
    219c:	.word	0x0000c754

000021a0 <IR_Management()>:
    StripCommander.dynamicStateUpdate();
  }
}

void IR_Management()
{
    21a0:	push	{r4, lr}
    21a2:	sub	sp, #24
  switch (getIRCmd())
    21a4:	bl	1e48 <getIRCmd()>
    21a8:	cmp	r0, #45	; 0x2d
    21aa:	bhi.n	2220 <IR_Management()+0x80>
    21ac:	tbb	[pc, r0]
    21b0:	.word	0x3853383a
    21b4:	.word	0x38383838
    21b8:	.word	0x5e383838
    21bc:	.word	0x38383838
    21c0:	.word	0x38383838
    21c4:	.word	0x38763838
    21c8:	.word	0x38383838
    21cc:	.word	0x38383838
    21d0:	.word	0x38383838
    21d4:	.word	0x38383838
    21d8:	.word	0x387a3838
    21dc:	.short	0x1738
    21de:	movs	r1, #6
    21e0:	ldr	r0, [pc, #244]	; (22d8 <IR_Management()+0x138>)
    21e2:	bl	8dec <usb_serial_write>
    21e6:	ldr	r0, [pc, #244]	; (22dc <IR_Management()+0x13c>)
    21e8:	bl	a780 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21ec:	ldr	r1, [pc, #240]	; (22e0 <IR_Management()+0x140>)
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    21ee:	ldr	r2, [pc, #244]	; (22e4 <IR_Management()+0x144>)
    21f0:	ldr	r3, [r1, #0]
    21f2:	str	r3, [sp, #16]
	return ret;
    21f4:	ldr	r3, [sp, #16]
        startThunder();
      break;

    case RPT:
      Serial.println("Repeat");
      if ( IRRepeatTimeout < IR_REPEAT_TIMEOUT)
    21f6:	ldr	r0, [r2, #0]
    21f8:	subs	r3, r3, r0
    21fa:	cmp	r3, #199	; 0xc7
      {
        switch (LastIRCmd)
    21fc:	ldr	r3, [pc, #232]	; (22e8 <IR_Management()+0x148>)
        startThunder();
      break;

    case RPT:
      Serial.println("Repeat");
      if ( IRRepeatTimeout < IR_REPEAT_TIMEOUT)
    21fe:	bhi.n	22be <IR_Management()+0x11e>
      {
        switch (LastIRCmd)
    2200:	ldrb	r3, [r3, #0]
    2202:	cmp	r3, #0
    2204:	beq.n	22c4 <IR_Management()+0x124>
    2206:	cmp	r3, #11
    2208:	bne.n	2218 <IR_Management()+0x78>
        {
          case Ip:
            Brightness  = constrain(Brightness + 1, 0, 255);
            break;
          case Im:
            Brightness  = constrain(Brightness - 1, 0, 255);
    220a:	ldr	r0, [pc, #224]	; (22ec <IR_Management()+0x14c>)
    220c:	ldrb	r4, [r0, #0]
    220e:	subs	r3, r4, #1
    2210:	cmp	r4, #0
    2212:	beq.n	22d4 <IR_Management()+0x134>
    2214:	uxtb	r3, r3
    2216:	strb	r3, [r0, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2218:	ldr	r3, [r1, #0]
    221a:	str	r3, [sp, #20]
	return ret;
    221c:	ldr	r3, [sp, #20]
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    221e:	str	r3, [r2, #0]
      else LastIRCmd = NO_CMD;
      break;

    default: break;
  }
}
    2220:	add	sp, #24
    2222:	pop	{r4, pc}
    2224:	movs	r1, #11
    2226:	ldr	r0, [pc, #200]	; (22f0 <IR_Management()+0x150>)
    2228:	bl	8dec <usb_serial_write>
    222c:	ldr	r0, [pc, #172]	; (22dc <IR_Management()+0x13c>)
    222e:	bl	a780 <Print::println()>
{
  switch (getIRCmd())
  {
    case Ip:
      Serial.println("Intensity +");
      Brightness  = constrain(Brightness + 10, 0, 255);
    2232:	ldr	r2, [pc, #184]	; (22ec <IR_Management()+0x14c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2234:	ldr	r1, [pc, #168]	; (22e0 <IR_Management()+0x140>)
    2236:	ldrb	r3, [r2, #0]
    2238:	ldr	r1, [r1, #0]
    223a:	str	r1, [sp, #8]
    223c:	adds	r3, #10
    223e:	ldr	r0, [pc, #164]	; (22e4 <IR_Management()+0x144>)
      IRRepeatTimeout = 0;
      LastIRCmd = Ip;
    2240:	ldr	r1, [pc, #164]	; (22e8 <IR_Management()+0x148>)
	return ret;
    2242:	ldr	r4, [sp, #8]
    2244:	str	r4, [r0, #0]
{
  switch (getIRCmd())
  {
    case Ip:
      Serial.println("Intensity +");
      Brightness  = constrain(Brightness + 10, 0, 255);
    2246:	cmp	r3, #255	; 0xff
    2248:	it	ge
    224a:	movge	r3, #255	; 0xff
      IRRepeatTimeout = 0;
      LastIRCmd = Ip;
    224c:	movs	r0, #0
{
  switch (getIRCmd())
  {
    case Ip:
      Serial.println("Intensity +");
      Brightness  = constrain(Brightness + 10, 0, 255);
    224e:	strb	r3, [r2, #0]
      IRRepeatTimeout = 0;
      LastIRCmd = Ip;
    2250:	strb	r0, [r1, #0]
      else LastIRCmd = NO_CMD;
      break;

    default: break;
  }
}
    2252:	add	sp, #24
    2254:	pop	{r4, pc}
    case Play:
        toggleRain();
      break;

    case Ca:
      StripCommander.fadeToHSV(10, 255, 255, 1500);
    2256:	movs	r3, #255	; 0xff
    2258:	movw	r2, #1500	; 0x5dc
    225c:	str	r2, [sp, #0]
    225e:	movs	r1, #10
    2260:	mov	r2, r3
    2262:	ldr	r0, [pc, #144]	; (22f4 <IR_Management()+0x154>)
    2264:	bl	402c <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)>
      else LastIRCmd = NO_CMD;
      break;

    default: break;
  }
}
    2268:	add	sp, #24
    226a:	pop	{r4, pc}
    226c:	movs	r1, #11
    226e:	ldr	r0, [pc, #136]	; (22f8 <IR_Management()+0x158>)
    2270:	bl	8dec <usb_serial_write>
    2274:	ldr	r0, [pc, #100]	; (22dc <IR_Management()+0x13c>)
    2276:	bl	a780 <Print::println()>
      LastIRCmd = Ip;
      break;

    case Im:
      Serial.println("Intensity -");
      Brightness  = constrain(Brightness - 10, 0, 255);
    227a:	ldr	r2, [pc, #112]	; (22ec <IR_Management()+0x14c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    227c:	ldr	r1, [pc, #96]	; (22e0 <IR_Management()+0x140>)
    227e:	ldrb	r3, [r2, #0]
    2280:	ldr	r1, [r1, #0]
    2282:	str	r1, [sp, #12]
    2284:	ldr	r0, [pc, #92]	; (22e4 <IR_Management()+0x144>)
      IRRepeatTimeout = 0;
      LastIRCmd = Im;
    2286:	ldr	r1, [pc, #96]	; (22e8 <IR_Management()+0x148>)
	return ret;
    2288:	ldr	r4, [sp, #12]
    228a:	str	r4, [r0, #0]
      LastIRCmd = Ip;
      break;

    case Im:
      Serial.println("Intensity -");
      Brightness  = constrain(Brightness - 10, 0, 255);
    228c:	subs	r3, #10
    228e:	bic.w	r3, r3, r3, asr #31
      IRRepeatTimeout = 0;
      LastIRCmd = Im;
    2292:	movs	r0, #11
      LastIRCmd = Ip;
      break;

    case Im:
      Serial.println("Intensity -");
      Brightness  = constrain(Brightness - 10, 0, 255);
    2294:	strb	r3, [r2, #0]
      IRRepeatTimeout = 0;
      LastIRCmd = Im;
    2296:	strb	r0, [r1, #0]
      else LastIRCmd = NO_CMD;
      break;

    default: break;
  }
}
    2298:	add	sp, #24
    229a:	pop	{r4, pc}
      IRRepeatTimeout = 0;
      LastIRCmd = Im;
      break;

    case Play:
        toggleRain();
    229c:	bl	2178 <toggleRain()>
      else LastIRCmd = NO_CMD;
      break;

    default: break;
  }
}
    22a0:	add	sp, #24
    22a2:	pop	{r4, pc}
    22a4:	movs	r1, #13
    22a6:	ldr	r0, [pc, #84]	; (22fc <IR_Management()+0x15c>)
    22a8:	bl	8dec <usb_serial_write>
    22ac:	ldr	r0, [pc, #44]	; (22dc <IR_Management()+0x13c>)
    22ae:	bl	a780 <Print::println()>
      }
}

void startThunder()
{
  T1.trig(&ThunderCenter);
    22b2:	ldr	r1, [pc, #76]	; (2300 <IR_Management()+0x160>)
    22b4:	ldr	r0, [pc, #76]	; (2304 <IR_Management()+0x164>)
    22b6:	bl	3d10 <Thunder::trig(AudioPlaySdWav*)>
      else LastIRCmd = NO_CMD;
      break;

    default: break;
  }
}
    22ba:	add	sp, #24
    22bc:	pop	{r4, pc}
            break;
          default: break;
        }
        IRRepeatTimeout = 0;
      }
      else LastIRCmd = NO_CMD;
    22be:	movs	r2, #44	; 0x2c
    22c0:	strb	r2, [r3, #0]
      break;

    default: break;
  }
}
    22c2:	b.n	2220 <IR_Management()+0x80>
      if ( IRRepeatTimeout < IR_REPEAT_TIMEOUT)
      {
        switch (LastIRCmd)
        {
          case Ip:
            Brightness  = constrain(Brightness + 1, 0, 255);
    22c4:	ldr	r0, [pc, #36]	; (22ec <IR_Management()+0x14c>)
    22c6:	ldrb	r3, [r0, #0]
    22c8:	adds	r3, #1
    22ca:	cmp.w	r3, #256	; 0x100
    22ce:	bne.n	2214 <IR_Management()+0x74>
    22d0:	movs	r3, #255	; 0xff
    22d2:	b.n	2216 <IR_Management()+0x76>
    22d4:	movs	r3, #0
    22d6:	b.n	2216 <IR_Management()+0x76>
    22d8:	.word	0x0000c788
    22dc:	.word	0x1fff965c
    22e0:	.word	0x1fffbccc
    22e4:	.word	0x1fffb474
    22e8:	.word	0x1fff9458
    22ec:	.word	0x1fffb160
    22f0:	.word	0x0000c760
    22f4:	.word	0x1fffa3f8
    22f8:	.word	0x0000c76c
    22fc:	.word	0x0000c778
    2300:	.word	0x1fffaee0
    2304:	.word	0x1fffa2a4

00002308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>:
#pragma once

namespace ArduinoJson {
namespace Internals {
template <typename TInput>
void skipSpacesAndComments(TInput& input) {
    2308:	ldr	r3, [r0, #0]
    230a:	ldrb	r2, [r3, #0]
  for (;;) {
    switch (input.current()) {
    230c:	subs	r2, #9
    230e:	cmp	r2, #38	; 0x26
    2310:	bhi.n	2362 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x5a>
    2312:	tbb	[pc, r2]
    2316:	.short	0x1a1a
    2318:	.word	0x261a2626
    231c:	.word	0x26262626
    2320:	.word	0x26262626
    2324:	.word	0x26262626
    2328:	.word	0x26262626
    232c:	.word	0x26261a26
    2330:	.word	0x26262626
    2334:	.word	0x26262626
    2338:	.word	0x26262626
    233c:	.byte	0x14
    233d:	.byte	0x00
        input.move();
        continue;

      // comments
      case '/':
        switch (input.next()) {
    233e:	ldrb	r2, [r3, #1]
    2340:	cmp	r2, #42	; 0x2a
    2342:	beq.n	2364 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x5c>
    2344:	cmp	r2, #47	; 0x2f
    2346:	beq.n	2358 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x50>
    2348:	bx	lr
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    234a:	adds	r1, r3, #1
    234c:	str	r1, [r0, #0]
    234e:	ldrb	r2, [r3, #1]
    2350:	mov	r3, r1
    2352:	b.n	230c <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x4>
          case '/':
            // not need to skip "//"
            for (;;) {
              input.move();
              if (input.current() == '\0') return;
              if (input.current() == '\n') break;
    2354:	cmp	r2, #10
    2356:	beq.n	234a <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x42>
    2358:	adds	r3, #1
    235a:	str	r3, [r0, #0]
    }

    TChar current() const {
      return _ptr[0];
    235c:	ldrb	r2, [r3, #0]
          // C++-style line comment
          case '/':
            // not need to skip "//"
            for (;;) {
              input.move();
              if (input.current() == '\0') return;
    235e:	cmp	r2, #0
    2360:	bne.n	2354 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x4c>
    2362:	bx	lr
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2364:	adds	r1, r3, #1
    2366:	adds	r2, r1, #1
    2368:	str	r2, [r0, #0]
    }

    TChar current() const {
      return _ptr[0];
    236a:	ldrb	r3, [r1, #1]
          case '*':
            input.move();  // skip '/'
            // no need to skip '*'
            for (;;) {
              input.move();
              if (input.current() == '\0') return;
    236c:	cmp	r3, #0
    236e:	beq.n	2362 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x5a>
              if (input.current() == '*' && input.next() == '/') {
    2370:	cmp	r3, #42	; 0x2a
    2372:	beq.n	2378 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x70>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2374:	mov	r1, r2
    2376:	b.n	2366 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x5e>
    2378:	ldrb	r3, [r2, #1]
    237a:	cmp	r3, #47	; 0x2f
    237c:	bne.n	2374 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x6c>
    237e:	adds	r3, r1, #3
    2380:	str	r3, [r0, #0]
    2382:	ldrb	r2, [r1, #3]
    2384:	b.n	230c <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)+0x4>
    2386:	nop

00002388 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()>:
  return true;
}

template <typename TReader, typename TWriter>
inline ArduinoJson::JsonObject &
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObject() {
    2388:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Create an empty object
  JsonObject &object = _buffer->createObject();
    238c:	ldr	r5, [r0, #0]
  return true;
}

template <typename TReader, typename TWriter>
inline ArduinoJson::JsonObject &
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObject() {
    238e:	sub	sp, #20
    2390:	mov	r9, r0
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
    if (!jsonBuffer) return NULL;
    2392:	cbz	r5, 23ec <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x64>
    return jsonBuffer->alloc(n);
    2394:	ldr	r2, [r5, #0]
    2396:	movs	r1, #8
    2398:	ldr	r2, [r2, #0]
    239a:	mov	r0, r5
    239c:	blx	r2
  JsonArray *ptr = new (this) JsonArray(this);
  return ptr ? *ptr : JsonArray::invalid();
}

inline ArduinoJson::JsonObject &ArduinoJson::JsonBuffer::createObject() {
  JsonObject *ptr = new (this) JsonObject(this);
    239e:	cbz	r0, 23ec <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x64>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
    23a0:	movs	r2, #0
    23a2:	str	r5, [r0, #0]
    23a4:	str	r2, [r0, #4]
    23a6:	mov	r4, r0
 private:
  JsonParser &operator=(const JsonParser &);  // non-copiable

  static bool eat(TReader &, char charToSkip);
  FORCE_INLINE bool eat(char charToSkip) {
    return eat(_reader, charToSkip);
    23a8:	add.w	r6, r9, #4
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    23ac:	mov	r0, r6
    23ae:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    }

    TChar current() const {
      return _ptr[0];
    23b2:	ldr.w	r2, [r9, #4]
  if (reader.current() != charToSkip) return false;
    23b6:	ldrb	r1, [r2, #0]
    23b8:	cmp	r1, #123	; 0x7b
    23ba:	beq.n	23fc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x74>

  // Returns a reference an invalid JsonObject.
  // This object is meant to replace a NULL pointer.
  // This is used when memory allocation or JSON parsing fail.
  static JsonObject& invalid() {
    static JsonObject instance(NULL);
    23bc:	ldr	r6, [pc, #732]	; (269c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x314>)
    23be:	ldr	r3, [r6, #0]
    23c0:	ands.w	r5, r3, #1
    23c4:	beq.n	23ce <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x46>
ERROR_INVALID_VALUE:
ERROR_MISSING_BRACE:
ERROR_MISSING_COLON:
ERROR_MISSING_COMMA:
ERROR_NO_MEMORY:
  return JsonObject::invalid();
    23c6:	ldr	r0, [pc, #728]	; (26a0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x318>)
}
    23c8:	add	sp, #20
    23ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23ce:	mov	r0, r6
    23d0:	bl	9164 <__cxa_guard_acquire>
    23d4:	cmp	r0, #0
    23d6:	beq.n	23c6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x3e>
    23d8:	ldr	r4, [pc, #708]	; (26a0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x318>)
    23da:	mov	r0, r6
    23dc:	str	r5, [r4, #0]
    23de:	str	r5, [r4, #4]
    23e0:	bl	9170 <__cxa_guard_release>
ERROR_INVALID_VALUE:
ERROR_MISSING_BRACE:
ERROR_MISSING_COLON:
ERROR_MISSING_COMMA:
ERROR_NO_MEMORY:
  return JsonObject::invalid();
    23e4:	mov	r0, r4
}
    23e6:	add	sp, #20
    23e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23ec:	ldr	r6, [pc, #684]	; (269c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x314>)
    23ee:	ldr	r2, [r6, #0]
    23f0:	ands.w	r5, r2, #1
    23f4:	beq.w	258a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x202>
  return ptr ? *ptr : JsonObject::invalid();
    23f8:	ldr	r4, [pc, #676]	; (26a0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x318>)
    23fa:	b.n	23a8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x20>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    23fc:	adds	r2, #1
    23fe:	str.w	r2, [r9, #4]
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2402:	mov	r0, r6
    2404:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    }

    TChar current() const {
      return _ptr[0];
    2408:	ldr.w	r2, [r9, #4]
  if (reader.current() != charToSkip) return false;
    240c:	ldrb	r1, [r2, #0]
    240e:	cmp	r1, #125	; 0x7d
    2410:	beq.w	25e8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x260>
    return min <= c && c <= max;
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    2414:	movw	r8, #32749	; 0x7fed
    2418:	str	r4, [sp, #4]
inline const char *
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseString() {
  typename TypeTraits::RemoveReference<TWriter>::type::String str =
      _writer.startString();

  skipSpacesAndComments(_reader);
    241a:	mov	r0, r6
template <typename TChar>
class StringWriter {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    241c:	ldr.w	r5, [r9, #8]
    2420:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    2424:	ldr.w	r2, [r9, #4]
    2428:	ldrb	r0, [r2, #0]
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    242a:	cmp	r0, #39	; 0x27
    242c:	beq.n	2522 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x19a>
    242e:	cmp	r0, #34	; 0x22
    2430:	beq.n	2522 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x19a>
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    2432:	bic.w	r3, r0, #32
    2436:	subs	r3, #65	; 0x41
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    2438:	sub.w	r1, r0, #43	; 0x2b
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    243c:	cmp	r3, #25
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    243e:	uxtb	r1, r1
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    2440:	bls.n	2508 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x180>
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    2442:	cmp	r1, #14
    2444:	lsr.w	r3, r8, r1
    2448:	bls.n	2504 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x17c>
    void append(TChar c) {
      *(*_writePtr)++ = c;
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    244a:	ldr.w	r3, [r9, #8]
    244e:	movs	r4, #0
    2450:	adds	r2, r3, #1
    2452:	str.w	r2, [r9, #8]
    2456:	strb	r4, [r3, #0]

  // Read each key value pair
  for (;;) {
    // 1 - Parse key
    const char *key = parseString();
    if (!key) goto ERROR_INVALID_KEY;
    2458:	cmp	r5, #0
    245a:	beq.n	23bc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x34>
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    245c:	mov	r0, r6
    245e:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    2462:	ldr.w	r3, [r9, #4]
  if (reader.current() != charToSkip) return false;
    2466:	ldrb	r2, [r3, #0]
    2468:	cmp	r2, #58	; 0x3a
    246a:	bne.n	23bc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x34>

template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
    246c:	ldrb.w	r2, [r9, #12]
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2470:	adds	r3, #1
    2472:	str.w	r3, [r9, #4]
    2476:	cmp	r2, #0
    2478:	beq.n	23bc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x34>
  _nestingLimit--;
    247a:	subs	r2, #1
    247c:	strb.w	r2, [r9, #12]

template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingToUnsafe(
    JsonVariant *destination) {
  skipSpacesAndComments(_reader);
    2480:	mov	r0, r6
    2482:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    }

    TChar current() const {
      return _ptr[0];
    2486:	ldr.w	r3, [r9, #4]
    248a:	ldrb	r7, [r3, #0]

  switch (_reader.current()) {
    248c:	cmp	r7, #91	; 0x5b
    248e:	beq.w	265a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2d2>
    2492:	cmp	r7, #123	; 0x7b
    2494:	bne.w	25f6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x26e>
}

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObjectTo(
    JsonVariant *destination) {
  JsonObject &object = parseObject();
    2498:	mov	r0, r9
    249a:	bl	2388 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()>
  if (!object.success()) return false;
    249e:	ldr	r3, [r0, #0]
}

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObjectTo(
    JsonVariant *destination) {
  JsonObject &object = parseObject();
    24a0:	mov	sl, r0
  if (!object.success()) return false;
    24a2:	cmp	r3, #0
    24a4:	beq.w	276a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x3e2>

  *destination = object;
    24a8:	mov.w	fp, #7
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
  _nestingLimit--;
  bool success = parseAnythingToUnsafe(destination);
  _nestingLimit++;
    24ac:	ldrb.w	r3, [r9, #12]
    24b0:	adds	r3, #1
    24b2:	strb.w	r3, [r9, #12]
    24b6:	ldr	r3, [sp, #4]
    24b8:	ldr	r7, [r3, #4]
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    24ba:	mov	r4, r7
    24bc:	cbnz	r7, 24c6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x13e>
    24be:	b.n	283a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x4b2>
  bool operator!=(const ListIterator<T> &other) const {
    return _node != other._node;
  }

  ListIterator<T> &operator++() {
    if (_node) _node = _node->next;
    24c0:	ldr	r4, [r4, #0]
    24c2:	cmp	r4, #0
    24c4:	beq.n	25a4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x21c>
      return _ptr[1];
    }
  };

  static bool equals(const TChar* str, const char* expected) {
    return strcmp(reinterpret_cast<const char*>(str), expected) == 0;
    24c6:	ldr	r1, [r4, #4]
    24c8:	mov	r0, r5
    24ca:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    24ce:	cmp	r0, #0
    24d0:	bne.n	24c0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x138>
template <typename TSource, typename Enable = void>
struct ValueSetter {
  template <typename TDestination>
  static bool set(JsonBuffer*, TDestination& destination,
                  const TSource& source) {
    destination = source;
    24d2:	strb.w	fp, [r4, #8]
    24d6:	str.w	sl, [r4, #12]
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    24da:	mov	r0, r6
    24dc:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    void move() {
      ++_ptr;
    }

    TChar current() const {
      return _ptr[0];
    24e0:	ldr.w	r2, [r9, #4]
  if (reader.current() != charToSkip) return false;
    24e4:	ldrb	r3, [r2, #0]
    24e6:	cmp	r3, #125	; 0x7d
    24e8:	beq.n	25e6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x25e>
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    24ea:	mov	r0, r6
    24ec:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    24f0:	ldr.w	r3, [r9, #4]
  if (reader.current() != charToSkip) return false;
    24f4:	ldrb	r2, [r3, #0]
    24f6:	cmp	r2, #44	; 0x2c
    24f8:	bne.w	23bc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x34>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    24fc:	adds	r3, #1
    24fe:	str.w	r3, [r9, #4]
  // Check opening brace
  if (!eat('{')) goto ERROR_MISSING_BRACE;
  if (eat('}')) goto SUCCESS_EMPTY_OBJECT;

  // Read each key value pair
  for (;;) {
    2502:	b.n	241a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x92>
    2504:	lsls	r4, r3, #31
    2506:	bpl.n	244a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0xc2>
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}

    void append(TChar c) {
      *(*_writePtr)++ = c;
    2508:	ldr.w	r3, [r9, #8]
    250c:	adds	r2, #1
    250e:	adds	r1, r3, #1
    2510:	str.w	r2, [r9, #4]
    2514:	str.w	r1, [r9, #8]
    2518:	strb	r0, [r3, #0]
    }

    TChar current() const {
      return _ptr[0];
    251a:	ldr.w	r2, [r9, #4]
    251e:	ldrb	r0, [r2, #0]
    2520:	b.n	2432 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0xaa>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2522:	adds	r7, r2, #1
    2524:	str.w	r7, [r9, #4]
    }

    TChar current() const {
      return _ptr[0];
    2528:	ldrb	r3, [r2, #1]
  if (isQuote(c)) {  // quotes
    _reader.move();
    char stopChar = c;
    for (;;) {
      c = _reader.current();
      if (c == '\0') break;
    252a:	cmp	r3, #0
    252c:	beq.n	244a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0xc2>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    252e:	adds	r2, #2
      _reader.move();

      if (c == stopChar) break;
    2530:	cmp	r0, r3
    2532:	str.w	r2, [r9, #4]
    2536:	bne.n	255e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x1d6>
    2538:	b.n	244a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0xc2>
    253a:	ldr.w	r2, [r9, #8]
    253e:	adds	r1, r2, #1
    2540:	str.w	r1, [r9, #8]
    2544:	strb	r3, [r2, #0]
    }

    TChar current() const {
      return _ptr[0];
    2546:	ldr.w	r7, [r9, #4]
    254a:	ldrb	r3, [r7, #0]
  if (isQuote(c)) {  // quotes
    _reader.move();
    char stopChar = c;
    for (;;) {
      c = _reader.current();
      if (c == '\0') break;
    254c:	cmp	r3, #0
    254e:	beq.w	244a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0xc2>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2552:	adds	r2, r7, #1
      _reader.move();

      if (c == stopChar) break;
    2554:	cmp	r0, r3
    2556:	str.w	r2, [r9, #4]
    255a:	beq.w	244a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0xc2>

      if (c == '\\') {
    255e:	cmp	r3, #92	; 0x5c
    2560:	bne.n	253a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x1b2>
    }

    TChar current() const {
      return _ptr[0];
    2562:	ldrb	r3, [r7, #1]
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    2564:	ldr	r1, [pc, #316]	; (26a4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x31c>)
    for (;;) {
      if (p[0] == '\0') return c;
      if (p[0] == c) return p[1];
    2566:	cmp	r3, #98	; 0x62
    2568:	bne.n	2570 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x1e8>
    256a:	b.n	2586 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x1fe>
    256c:	cmp	r3, r2
    256e:	beq.n	2586 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x1fe>

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
    2570:	ldrb.w	r2, [r1, #2]!
    2574:	cmp	r2, #0
    2576:	bne.n	256c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x1e4>
        // replace char
        c = Encoding::unescapeChar(_reader.current());
        if (c == '\0') break;
    2578:	cmp	r3, #0
    257a:	beq.w	244a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0xc2>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    257e:	adds	r7, #2
    2580:	str.w	r7, [r9, #4]
    2584:	b.n	253a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x1b2>
      if (p[0] == c) return p[1];
    2586:	ldrb	r3, [r1, #1]
    2588:	b.n	2578 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x1f0>

  // Returns a reference an invalid JsonObject.
  // This object is meant to replace a NULL pointer.
  // This is used when memory allocation or JSON parsing fail.
  static JsonObject& invalid() {
    static JsonObject instance(NULL);
    258a:	mov	r0, r6
    258c:	bl	9164 <__cxa_guard_acquire>
    2590:	cmp	r0, #0
    2592:	beq.w	23f8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x70>
    2596:	ldr	r4, [pc, #264]	; (26a0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x318>)
    2598:	mov	r0, r6
    259a:	str	r5, [r4, #0]
    259c:	str	r5, [r4, #4]
    259e:	bl	9170 <__cxa_guard_release>
    25a2:	b.n	23a8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x20>
    for (node_type *node = _firstNode; node; node = node->next) nodeCount++;
    return nodeCount;
  }

  iterator add() {
    node_type *newNode = new (_buffer) node_type();
    25a4:	ldr	r3, [sp, #4]
    25a6:	ldr	r0, [r3, #0]
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
    if (!jsonBuffer) return NULL;
    25a8:	cmp	r0, #0
    25aa:	beq.w	2740 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x3b8>
    return jsonBuffer->alloc(n);
    25ae:	ldr	r3, [r0, #0]
    25b0:	movs	r1, #16
    25b2:	ldr	r3, [r3, #0]
    25b4:	blx	r3
    25b6:	mov	r7, r0
    25b8:	cmp	r0, #0
    25ba:	beq.w	2aa2 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x71a>
    25be:	ldr	r2, [sp, #4]

// A node for a singly-linked list.
// Used by List<T> and its iterators.
template <typename T>
struct ListNode : public Internals::JsonBufferAllocated {
  ListNode() : next(NULL) {}
    25c0:	movs	r3, #0
    25c2:	ldr	r1, [r2, #4]
    25c4:	str	r3, [r0, #0]
  template <typename Print>
  friend class Internals::JsonSerializer;

 public:
  // Creates an uninitialized JsonVariant
  JsonVariant() : _type(Internals::JSON_UNDEFINED) {}
    25c6:	strb	r3, [r0, #8]

    if (_firstNode) {
    25c8:	cmp	r1, #0
    25ca:	beq.w	2844 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x4bc>
    25ce:	mov	r4, r7
    25d0:	b.n	25d4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x24c>
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
    25d2:	mov	r1, r3
    25d4:	ldr	r3, [r1, #0]
    25d6:	cmp	r3, #0
    25d8:	bne.n	25d2 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x24a>
      lastNode->next = newNode;
    25da:	str	r4, [r1, #0]
  template <typename TStringRef, typename TValueRef>
  bool set_impl(TStringRef key, TValueRef value) {
    iterator it = findKey<TStringRef>(key);
    if (it == end()) {
      it = Internals::List<JsonPair>::add();
      if (it == end()) return false;
    25dc:	cmp	r4, #0
    25de:	beq.w	23bc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x34>
                                TSource>::should_duplicate>::type> {
  template <typename TDestination>
  static bool set(JsonBuffer*, TDestination& destination,
                  const TSource& source) {
    // unsigned char* -> char*
    destination = reinterpret_cast<const char*>(source);
    25e2:	str	r5, [r4, #4]
    25e4:	b.n	24d2 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x14a>
    25e6:	ldr	r4, [sp, #4]
    25e8:	adds	r2, #1
    25ea:	mov	r0, r4
    25ec:	str.w	r2, [r9, #4]
ERROR_MISSING_BRACE:
ERROR_MISSING_COLON:
ERROR_MISSING_COMMA:
ERROR_NO_MEMORY:
  return JsonObject::invalid();
}
    25f0:	add	sp, #20
    25f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    25f6:	cmp	r7, #39	; 0x27
    25f8:	itt	ne
    25fa:	subne	r7, #34	; 0x22
    25fc:	clzne	r7, r7
inline const char *
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseString() {
  typename TypeTraits::RemoveReference<TWriter>::type::String str =
      _writer.startString();

  skipSpacesAndComments(_reader);
    2600:	mov	r0, r6
    2602:	ite	ne
    2604:	lsrne	r7, r7, #5
    2606:	moveq	r7, #1
template <typename TChar>
class StringWriter {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    2608:	ldr.w	sl, [r9, #8]
    260c:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    }

    TChar current() const {
      return _ptr[0];
    2610:	ldr.w	r2, [r9, #4]
    2614:	ldrb	r0, [r2, #0]
    2616:	cmp	r0, #39	; 0x27
    2618:	beq.n	26c0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x338>
    261a:	cmp	r0, #34	; 0x22
    261c:	beq.n	26c0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x338>
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    261e:	bic.w	r3, r0, #32
    2622:	subs	r3, #65	; 0x41
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    2624:	sub.w	r1, r0, #43	; 0x2b
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    2628:	cmp	r3, #25
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    262a:	uxtb	r1, r1
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    262c:	bls.n	2722 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x39a>
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    262e:	cmp	r1, #14
    2630:	lsr.w	r3, r8, r1
    2634:	bls.n	271e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x396>
    void append(TChar c) {
      *(*_writePtr)++ = c;
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    2636:	ldr.w	r3, [r9, #8]
    263a:	movs	r2, #0
    263c:	adds	r1, r3, #1
    263e:	str.w	r1, [r9, #8]
    2642:	strb	r2, [r3, #0]
template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseStringTo(
    JsonVariant *destination) {
  bool hasQuotes = isQuote(_reader.current());
  const char *value = parseString();
  if (value == NULL) return false;
    2644:	cmp.w	sl, #0
    2648:	beq.w	276a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x3e2>
  if (hasQuotes) {
    *destination = value;
    264c:	cmp	r7, r2
    264e:	ite	eq
    2650:	moveq.w	fp, #1
    2654:	movne.w	fp, #2
    2658:	b.n	24ac <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x124>

template <typename TReader, typename TWriter>
inline ArduinoJson::JsonArray &
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArray() {
  // Create an empty array
  JsonArray &array = _buffer->createArray();
    265a:	ldr.w	r7, [r9]
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
    if (!jsonBuffer) return NULL;
    265e:	cbz	r7, 26b0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x328>
    return jsonBuffer->alloc(n);
    2660:	ldr	r3, [r7, #0]
    2662:	movs	r1, #8
    2664:	ldr	r3, [r3, #0]
    2666:	mov	r0, r7
    2668:	blx	r3
#pragma once

#include "Deserialization/JsonParser.hpp"

inline ArduinoJson::JsonArray &ArduinoJson::JsonBuffer::createArray() {
  JsonArray *ptr = new (this) JsonArray(this);
    266a:	cbz	r0, 26b0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x328>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
    266c:	str	r7, [r0, #0]
    266e:	str	r4, [r0, #4]
    2670:	mov	r7, r0
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2672:	mov	r0, r6
    2674:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    2678:	ldr.w	r3, [r9, #4]
  if (reader.current() != charToSkip) return false;
    267c:	ldrb	r2, [r3, #0]
    267e:	cmp	r2, #91	; 0x5b
    2680:	beq.n	2776 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x3ee>

  // Returns a reference an invalid JsonArray.
  // This object is meant to replace a NULL pointer.
  // This is used when memory allocation or JSON parsing fail.
  static JsonArray &invalid() {
    static JsonArray instance(NULL);
    2682:	ldr	r3, [pc, #36]	; (26a8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x320>)
    2684:	ldr	r3, [r3, #0]
    2686:	ands.w	r7, r3, #1
    268a:	beq.n	2744 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x3bc>

ERROR_INVALID_VALUE:
ERROR_MISSING_BRACKET:
ERROR_MISSING_COMMA:
ERROR_NO_MEMORY:
  return JsonArray::invalid();
    268c:	ldr	r7, [pc, #28]	; (26ac <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x324>)

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArrayTo(
    JsonVariant *destination) {
  JsonArray &array = parseArray();
  if (!array.success()) return false;
    268e:	ldr	r3, [r7, #0]
    2690:	cmp	r3, #0
    2692:	beq.n	276a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x3e2>

  *destination = array;
    2694:	mov	sl, r7
    2696:	mov.w	fp, #6
    269a:	b.n	24ac <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x124>
    269c:	.word	0x1fffa00c
    26a0:	.word	0x1fffa010
    26a4:	.word	0x0000c794
    26a8:	.word	0x1fffa018
    26ac:	.word	0x1fffa01c
    26b0:	ldr	r3, [pc, #744]	; (299c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x614>)
    26b2:	ldr	r3, [r3, #0]
    26b4:	ands.w	r7, r3, #1
    26b8:	beq.w	284c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x4c4>
  return ptr ? *ptr : JsonArray::invalid();
    26bc:	ldr	r7, [pc, #736]	; (29a0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x618>)
    26be:	b.n	2672 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2ea>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    26c0:	adds	r4, r2, #1
    26c2:	str.w	r4, [r9, #4]
    }

    TChar current() const {
      return _ptr[0];
    26c6:	ldrb	r3, [r2, #1]
  if (isQuote(c)) {  // quotes
    _reader.move();
    char stopChar = c;
    for (;;) {
      c = _reader.current();
      if (c == '\0') break;
    26c8:	cmp	r3, #0
    26ca:	beq.n	2636 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2ae>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    26cc:	adds	r2, #2
      _reader.move();

      if (c == stopChar) break;
    26ce:	cmp	r3, r0
    26d0:	str.w	r2, [r9, #4]
    26d4:	bne.n	26f8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x370>
    26d6:	b.n	2636 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2ae>
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}

    void append(TChar c) {
      *(*_writePtr)++ = c;
    26d8:	ldr.w	r2, [r9, #8]
    26dc:	adds	r1, r2, #1
    26de:	str.w	r1, [r9, #8]
    26e2:	strb	r3, [r2, #0]
    }

    TChar current() const {
      return _ptr[0];
    26e4:	ldr.w	r4, [r9, #4]
    26e8:	ldrb	r3, [r4, #0]
  if (isQuote(c)) {  // quotes
    _reader.move();
    char stopChar = c;
    for (;;) {
      c = _reader.current();
      if (c == '\0') break;
    26ea:	cmp	r3, #0
    26ec:	beq.n	2636 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2ae>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    26ee:	adds	r2, r4, #1
      _reader.move();

      if (c == stopChar) break;
    26f0:	cmp	r0, r3
    26f2:	str.w	r2, [r9, #4]
    26f6:	beq.n	2636 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2ae>

      if (c == '\\') {
    26f8:	cmp	r3, #92	; 0x5c
    26fa:	bne.n	26d8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x350>
    }

    TChar current() const {
      return _ptr[0];
    26fc:	ldrb	r3, [r4, #1]
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    26fe:	ldr	r1, [pc, #676]	; (29a4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x61c>)
    for (;;) {
      if (p[0] == '\0') return c;
      if (p[0] == c) return p[1];
    2700:	cmp	r3, #98	; 0x62
    2702:	bne.n	270a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x382>
    2704:	b.n	273c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x3b4>
    2706:	cmp	r3, r2
    2708:	beq.n	273c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x3b4>

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
    270a:	ldrb.w	r2, [r1, #2]!
    270e:	cmp	r2, #0
    2710:	bne.n	2706 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x37e>
        // replace char
        c = Encoding::unescapeChar(_reader.current());
        if (c == '\0') break;
    2712:	cmp	r3, #0
    2714:	beq.n	2636 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2ae>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2716:	adds	r4, #2
    2718:	str.w	r4, [r9, #4]
    271c:	b.n	26d8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x350>
    271e:	lsls	r3, r3, #31
    2720:	bpl.n	2636 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2ae>
    2722:	ldr.w	r3, [r9, #8]
    2726:	adds	r2, #1
    2728:	adds	r1, r3, #1
    272a:	str.w	r2, [r9, #4]
    272e:	str.w	r1, [r9, #8]
    2732:	strb	r0, [r3, #0]
    }

    TChar current() const {
      return _ptr[0];
    2734:	ldr.w	r2, [r9, #4]
    2738:	ldrb	r0, [r2, #0]
    273a:	b.n	261e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x296>
      if (p[0] == c) return p[1];
    273c:	ldrb	r3, [r1, #1]
    273e:	b.n	2712 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x38a>
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
    if (!jsonBuffer) return NULL;
    2740:	mov	r1, r7
    2742:	b.n	25d4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x24c>
    2744:	ldr	r0, [pc, #596]	; (299c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x614>)
    2746:	bl	9164 <__cxa_guard_acquire>
    274a:	cmp	r0, #0
    274c:	beq.n	268c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x304>
    274e:	ldr	r3, [pc, #592]	; (29a0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x618>)
    2750:	ldr	r0, [pc, #584]	; (299c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x614>)
    2752:	str	r7, [r3, #0]
    2754:	str	r7, [r3, #4]
    2756:	bl	9170 <__cxa_guard_release>

ERROR_INVALID_VALUE:
ERROR_MISSING_BRACKET:
ERROR_MISSING_COMMA:
ERROR_NO_MEMORY:
  return JsonArray::invalid();
    275a:	ldr	r7, [pc, #580]	; (29a0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x618>)
    275c:	b.n	268e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x306>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    275e:	adds	r3, #1
    2760:	str.w	r3, [r9, #4]

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArrayTo(
    JsonVariant *destination) {
  JsonArray &array = parseArray();
  if (!array.success()) return false;
    2764:	ldr	r3, [r7, #0]
    2766:	cmp	r3, #0
    2768:	bne.n	2694 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x30c>
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
  _nestingLimit--;
  bool success = parseAnythingToUnsafe(destination);
  _nestingLimit++;
    276a:	ldrb.w	r2, [r9, #12]
    276e:	adds	r2, #1
    2770:	strb.w	r2, [r9, #12]
    2774:	b.n	23bc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x34>
    2776:	adds	r3, #1
    2778:	str.w	r3, [r9, #4]
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    277c:	mov	r0, r6
    277e:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    }

    TChar current() const {
      return _ptr[0];
    2782:	ldr.w	r3, [r9, #4]
  if (reader.current() != charToSkip) return false;
    2786:	ldrb	r2, [r3, #0]
    2788:	cmp	r2, #93	; 0x5d
    278a:	beq.n	275e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x3d6>

template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
    278c:	ldrb.w	r3, [r9, #12]
    2790:	cmp	r3, #0
    2792:	beq.w	2682 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2fa>
  _nestingLimit--;
    2796:	subs	r3, #1
    2798:	strb.w	r3, [r9, #12]

template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingToUnsafe(
    JsonVariant *destination) {
  skipSpacesAndComments(_reader);
    279c:	mov	r0, r6
    279e:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    27a2:	ldr.w	r3, [r9, #4]
    27a6:	ldrb.w	sl, [r3]

  switch (_reader.current()) {
    27aa:	cmp.w	sl, #91	; 0x5b
    27ae:	beq.n	2872 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x4ea>
    27b0:	cmp.w	sl, #123	; 0x7b
    27b4:	bne.w	28c2 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x53a>
}

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObjectTo(
    JsonVariant *destination) {
  JsonObject &object = parseObject();
    27b8:	mov	r0, r9
    27ba:	bl	2388 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()>
  if (!object.success()) return false;
    27be:	ldr	r3, [r0, #0]
}

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObjectTo(
    JsonVariant *destination) {
  JsonObject &object = parseObject();
    27c0:	mov	r4, r0
  if (!object.success()) return false;
    27c2:	cmp	r3, #0
    27c4:	beq.w	2ab6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x72e>

  *destination = object;
    27c8:	mov.w	sl, #7
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
  _nestingLimit--;
  bool success = parseAnythingToUnsafe(destination);
  _nestingLimit++;
    27cc:	ldrb.w	r3, [r9, #12]
    27d0:	adds	r3, #1
    27d2:	strb.w	r3, [r9, #12]
    for (node_type *node = _firstNode; node; node = node->next) nodeCount++;
    return nodeCount;
  }

  iterator add() {
    node_type *newNode = new (_buffer) node_type();
    27d6:	ldr	r0, [r7, #0]
    27d8:	cbz	r0, 27ea <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x462>
    return jsonBuffer->alloc(n);
    27da:	ldr	r3, [r0, #0]
    27dc:	movs	r1, #12
    27de:	ldr	r3, [r3, #0]
    27e0:	blx	r3
    27e2:	cbz	r0, 27ea <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x462>
    27e4:	movs	r3, #0
    27e6:	str	r3, [r0, #0]
    27e8:	strb	r3, [r0, #4]

    if (_firstNode) {
    27ea:	ldr	r2, [r7, #4]
    27ec:	cbnz	r2, 27f2 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x46a>
    27ee:	b.n	2866 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x4de>
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
    27f0:	mov	r2, r3
    27f2:	ldr	r3, [r2, #0]
    27f4:	cmp	r3, #0
    27f6:	bne.n	27f0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x468>
      lastNode->next = newNode;
    27f8:	str	r0, [r2, #0]
  }

  template <typename TValueRef>
  bool add_impl(TValueRef value) {
    iterator it = Internals::List<JsonVariant>::add();
    if (it == end()) return false;
    27fa:	cmp	r0, #0
    27fc:	beq.w	2682 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2fa>
template <typename TSource, typename Enable = void>
struct ValueSetter {
  template <typename TDestination>
  static bool set(JsonBuffer*, TDestination& destination,
                  const TSource& source) {
    destination = source;
    2800:	strb.w	sl, [r0, #4]
    2804:	str	r4, [r0, #8]
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2806:	mov	r0, r6
    2808:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    280c:	ldr.w	r3, [r9, #4]
  if (reader.current() != charToSkip) return false;
    2810:	ldrb	r2, [r3, #0]
    2812:	cmp	r2, #93	; 0x5d
    2814:	beq.n	286a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x4e2>
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2816:	mov	r0, r6
    2818:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    281c:	ldr.w	r2, [r9, #4]
  if (reader.current() != charToSkip) return false;
    2820:	ldrb	r3, [r2, #0]
    2822:	cmp	r3, #44	; 0x2c
    2824:	bne.w	2682 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2fa>

template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
    2828:	ldrb.w	r3, [r9, #12]
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    282c:	adds	r2, #1
    282e:	str.w	r2, [r9, #4]
    2832:	cmp	r3, #0
    2834:	beq.w	2682 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2fa>
    2838:	b.n	2796 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x40e>
    for (node_type *node = _firstNode; node; node = node->next) nodeCount++;
    return nodeCount;
  }

  iterator add() {
    node_type *newNode = new (_buffer) node_type();
    283a:	ldr	r3, [sp, #4]
    283c:	ldr	r0, [r3, #0]
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
    if (!jsonBuffer) return NULL;
    283e:	cmp	r0, #0
    2840:	bne.w	25ae <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x226>
    if (_firstNode) {
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
      lastNode->next = newNode;
    } else {
      _firstNode = newNode;
    2844:	ldr	r3, [sp, #4]
    2846:	mov	r4, r7
    2848:	str	r7, [r3, #4]
    284a:	b.n	25dc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x254>

  // Returns a reference an invalid JsonArray.
  // This object is meant to replace a NULL pointer.
  // This is used when memory allocation or JSON parsing fail.
  static JsonArray &invalid() {
    static JsonArray instance(NULL);
    284c:	ldr	r0, [pc, #332]	; (299c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x614>)
    284e:	bl	9164 <__cxa_guard_acquire>
    2852:	cmp	r0, #0
    2854:	beq.w	26bc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x334>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
    2858:	ldr	r3, [pc, #324]	; (29a0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x618>)
    285a:	ldr	r0, [pc, #320]	; (299c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x614>)
    285c:	str	r7, [r3, #0]
    285e:	str	r7, [r3, #4]
    2860:	bl	9170 <__cxa_guard_release>
    2864:	b.n	26bc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x334>
    if (_firstNode) {
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
      lastNode->next = newNode;
    } else {
      _firstNode = newNode;
    2866:	str	r0, [r7, #4]
    2868:	b.n	27fa <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x472>
    286a:	adds	r3, #1
    286c:	str.w	r3, [r9, #4]
    2870:	b.n	268e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x306>

template <typename TReader, typename TWriter>
inline ArduinoJson::JsonArray &
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArray() {
  // Create an empty array
  JsonArray &array = _buffer->createArray();
    2872:	ldr.w	r4, [r9]
    2876:	cmp	r4, #0
    2878:	beq.w	2a74 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6ec>
    return jsonBuffer->alloc(n);
    287c:	ldr	r3, [r4, #0]
    287e:	movs	r1, #8
    2880:	ldr	r3, [r3, #0]
    2882:	mov	r0, r4
    2884:	blx	r3
#pragma once

#include "Deserialization/JsonParser.hpp"

inline ArduinoJson::JsonArray &ArduinoJson::JsonBuffer::createArray() {
  JsonArray *ptr = new (this) JsonArray(this);
    2886:	cmp	r0, #0
    2888:	beq.w	2a74 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6ec>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
    288c:	movs	r3, #0
    288e:	str	r4, [r0, #0]
    2890:	str	r3, [r0, #4]
    2892:	mov	r4, r0
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2894:	mov	r0, r6
    2896:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    }

    TChar current() const {
      return _ptr[0];
    289a:	ldr.w	r3, [r9, #4]
  if (reader.current() != charToSkip) return false;
    289e:	ldrb	r2, [r3, #0]
    28a0:	cmp	r2, #91	; 0x5b
    28a2:	beq.w	29e0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x658>
    28a6:	ldr	r3, [pc, #244]	; (299c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x614>)
    28a8:	ldr	r3, [r3, #0]
    28aa:	ands.w	r4, r3, #1
    28ae:	beq.w	29c4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x63c>

ERROR_INVALID_VALUE:
ERROR_MISSING_BRACKET:
ERROR_MISSING_COMMA:
ERROR_NO_MEMORY:
  return JsonArray::invalid();
    28b2:	ldr	r4, [pc, #236]	; (29a0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x618>)

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArrayTo(
    JsonVariant *destination) {
  JsonArray &array = parseArray();
  if (!array.success()) return false;
    28b4:	ldr	r3, [r4, #0]
    28b6:	cmp	r3, #0
    28b8:	beq.w	2ab6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x72e>

  *destination = array;
    28bc:	mov.w	sl, #6
    28c0:	b.n	27cc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x444>
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    28c2:	cmp.w	sl, #39	; 0x27
    28c6:	itt	ne
    28c8:	subne.w	sl, sl, #34	; 0x22
    28cc:	clzne	sl, sl
inline const char *
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseString() {
  typename TypeTraits::RemoveReference<TWriter>::type::String str =
      _writer.startString();

  skipSpacesAndComments(_reader);
    28d0:	mov	r0, r6
    28d2:	ite	ne
    28d4:	movne.w	sl, sl, lsr #5
    28d8:	moveq.w	sl, #1
template <typename TChar>
class StringWriter {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    28dc:	ldr.w	r4, [r9, #8]
    28e0:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    28e4:	ldr.w	r2, [r9, #4]
    28e8:	ldrb.w	lr, [r2]
    28ec:	cmp.w	lr, #39	; 0x27
    28f0:	beq.n	2954 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x5cc>
    28f2:	cmp.w	lr, #34	; 0x22
    28f6:	beq.n	2954 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x5cc>
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    28f8:	bic.w	r1, lr, #32
    28fc:	subs	r1, #65	; 0x41
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    28fe:	sub.w	r3, lr, #43	; 0x2b
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    2902:	cmp	r1, #25
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    2904:	uxtb	r3, r3
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    2906:	bls.n	2936 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x5ae>
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    2908:	cmp	r3, #14
    290a:	lsr.w	r1, r8, r3
    290e:	bls.n	2932 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x5aa>
    void append(TChar c) {
      *(*_writePtr)++ = c;
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    2910:	ldr.w	r3, [r9, #8]
    2914:	movs	r2, #0
    2916:	adds	r1, r3, #1
    2918:	str.w	r1, [r9, #8]
    291c:	strb	r2, [r3, #0]
template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseStringTo(
    JsonVariant *destination) {
  bool hasQuotes = isQuote(_reader.current());
  const char *value = parseString();
  if (value == NULL) return false;
    291e:	cmp	r4, #0
    2920:	beq.w	2ab6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x72e>
  if (hasQuotes) {
    *destination = value;
    2924:	cmp	sl, r2
    2926:	ite	eq
    2928:	moveq.w	sl, #1
    292c:	movne.w	sl, #2
    2930:	b.n	27cc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x444>
    2932:	lsls	r1, r1, #31
    2934:	bpl.n	2910 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x588>
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}

    void append(TChar c) {
      *(*_writePtr)++ = c;
    2936:	ldr.w	r3, [r9, #8]
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    293a:	adds	r2, #1
    293c:	adds	r1, r3, #1
    293e:	str.w	r2, [r9, #4]
    2942:	str.w	r1, [r9, #8]
    2946:	strb.w	lr, [r3]
    }

    TChar current() const {
      return _ptr[0];
    294a:	ldr.w	r2, [r9, #4]
    294e:	ldrb.w	lr, [r2]
    2952:	b.n	28f8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x570>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2954:	adds	r0, r2, #1
    2956:	str.w	r0, [r9, #4]
    }

    TChar current() const {
      return _ptr[0];
    295a:	ldrb	r3, [r2, #1]
  if (isQuote(c)) {  // quotes
    _reader.move();
    char stopChar = c;
    for (;;) {
      c = _reader.current();
      if (c == '\0') break;
    295c:	cmp	r3, #0
    295e:	beq.n	2910 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x588>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2960:	adds	r2, #2
      _reader.move();

      if (c == stopChar) break;
    2962:	cmp	lr, r3
    2964:	str.w	r2, [r9, #4]
    2968:	bne.n	298c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x604>
    296a:	b.n	2910 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x588>
    296c:	ldr.w	r2, [r9, #8]
    2970:	adds	r1, r2, #1
    2972:	str.w	r1, [r9, #8]
    2976:	strb	r3, [r2, #0]
    }

    TChar current() const {
      return _ptr[0];
    2978:	ldr.w	r0, [r9, #4]
    297c:	ldrb	r3, [r0, #0]
  if (isQuote(c)) {  // quotes
    _reader.move();
    char stopChar = c;
    for (;;) {
      c = _reader.current();
      if (c == '\0') break;
    297e:	cmp	r3, #0
    2980:	beq.n	2910 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x588>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2982:	adds	r2, r0, #1
      _reader.move();

      if (c == stopChar) break;
    2984:	cmp	lr, r3
    2986:	str.w	r2, [r9, #4]
    298a:	beq.n	2910 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x588>

      if (c == '\\') {
    298c:	cmp	r3, #92	; 0x5c
    298e:	bne.n	296c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x5e4>
    }

    TChar current() const {
      return _ptr[0];
    2990:	ldrb	r3, [r0, #1]
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    2992:	ldr	r1, [pc, #16]	; (29a4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x61c>)
    for (;;) {
      if (p[0] == '\0') return c;
      if (p[0] == c) return p[1];
    2994:	cmp	r3, #98	; 0x62
    2996:	bne.n	29ac <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x624>
    2998:	b.n	29c0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x638>
    299a:	nop
    299c:	.word	0x1fffa018
    29a0:	.word	0x1fffa01c
    29a4:	.word	0x0000c794
    29a8:	cmp	r3, r2
    29aa:	beq.n	29c0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x638>

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
    29ac:	ldrb.w	r2, [r1, #2]!
    29b0:	cmp	r2, #0
    29b2:	bne.n	29a8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x620>
        // replace char
        c = Encoding::unescapeChar(_reader.current());
        if (c == '\0') break;
    29b4:	cmp	r3, #0
    29b6:	beq.n	2910 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x588>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    29b8:	adds	r0, #2
    29ba:	str.w	r0, [r9, #4]
    29be:	b.n	296c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x5e4>
      if (p[0] == c) return p[1];
    29c0:	ldrb	r3, [r1, #1]
    29c2:	b.n	29b4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x62c>
    29c4:	ldr	r0, [pc, #260]	; (2acc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x744>)
    29c6:	bl	9164 <__cxa_guard_acquire>
    29ca:	cmp	r0, #0
    29cc:	beq.w	28b2 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x52a>
    29d0:	ldr	r3, [pc, #252]	; (2ad0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x748>)
    29d2:	ldr	r0, [pc, #248]	; (2acc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x744>)
    29d4:	str	r4, [r3, #0]
    29d6:	str	r4, [r3, #4]
    29d8:	bl	9170 <__cxa_guard_release>

ERROR_INVALID_VALUE:
ERROR_MISSING_BRACKET:
ERROR_MISSING_COMMA:
ERROR_NO_MEMORY:
  return JsonArray::invalid();
    29dc:	ldr	r4, [pc, #240]	; (2ad0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x748>)
    29de:	b.n	28b4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x52c>
    29e0:	adds	r3, #1
    29e2:	str.w	r3, [r9, #4]
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    29e6:	mov	r0, r6
    29e8:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    }

    TChar current() const {
      return _ptr[0];
    29ec:	ldr.w	r3, [r9, #4]
  if (reader.current() != charToSkip) return false;
    29f0:	ldrb	r2, [r3, #0]
    29f2:	cmp	r2, #93	; 0x5d
    29f4:	beq.n	2aa8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x720>
    29f6:	add.w	fp, sp, #8
    29fa:	mov.w	sl, #0

  // Read each value
  for (;;) {
    // 1 - Parse value
    JsonVariant value;
    if (!parseAnythingTo(&value)) goto ERROR_INVALID_VALUE;
    29fe:	mov	r1, fp
    2a00:	mov	r0, r9
    2a02:	strb.w	sl, [sp, #8]
    2a06:	bl	2ad4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)>
    2a0a:	cmp	r0, #0
    2a0c:	beq.w	28a6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x51e>
    for (node_type *node = _firstNode; node; node = node->next) nodeCount++;
    return nodeCount;
  }

  iterator add() {
    node_type *newNode = new (_buffer) node_type();
    2a10:	ldr	r0, [r4, #0]
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
    if (!jsonBuffer) return NULL;
    2a12:	cmp	r0, #0
    2a14:	beq.n	2a86 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6fe>
    return jsonBuffer->alloc(n);
    2a16:	ldr	r3, [r0, #0]
    2a18:	movs	r1, #12
    2a1a:	ldr	r3, [r3, #0]
    2a1c:	blx	r3
    2a1e:	mov	r3, r0
    2a20:	cbz	r0, 2a2a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6a2>
    2a22:	str.w	sl, [r0]
    2a26:	strb.w	sl, [r0, #4]

    if (_firstNode) {
    2a2a:	ldr	r2, [r4, #4]
    2a2c:	cbnz	r2, 2a32 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6aa>
    2a2e:	b.n	2a82 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6fa>
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
    2a30:	mov	r2, r1
    2a32:	ldr	r1, [r2, #0]
    2a34:	cmp	r1, #0
    2a36:	bne.n	2a30 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6a8>
      lastNode->next = newNode;
    2a38:	str	r3, [r2, #0]
  }

  template <typename TValueRef>
  bool add_impl(TValueRef value) {
    iterator it = Internals::List<JsonVariant>::add();
    if (it == end()) return false;
    2a3a:	cmp	r3, #0
    2a3c:	beq.w	28a6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x51e>
    2a40:	ldmia.w	fp, {r0, r1}
    2a44:	adds	r3, #4
    2a46:	stmia.w	r3, {r0, r1}
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2a4a:	mov	r0, r6
    2a4c:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    2a50:	ldr.w	r3, [r9, #4]
  if (reader.current() != charToSkip) return false;
    2a54:	ldrb	r2, [r3, #0]
    2a56:	cmp	r2, #93	; 0x5d
    2a58:	beq.n	2ac2 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x73a>
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2a5a:	mov	r0, r6
    2a5c:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    2a60:	ldr.w	r3, [r9, #4]
  if (reader.current() != charToSkip) return false;
    2a64:	ldrb	r2, [r3, #0]
    2a66:	cmp	r2, #44	; 0x2c
    2a68:	bne.w	28a6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x51e>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2a6c:	adds	r3, #1
    2a6e:	str.w	r3, [r9, #4]
    2a72:	b.n	29fe <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x676>

  // Returns a reference an invalid JsonArray.
  // This object is meant to replace a NULL pointer.
  // This is used when memory allocation or JSON parsing fail.
  static JsonArray &invalid() {
    static JsonArray instance(NULL);
    2a74:	ldr	r3, [pc, #84]	; (2acc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x744>)
    2a76:	ldr	r3, [r3, #0]
    2a78:	ands.w	r4, r3, #1
    2a7c:	beq.n	2a8a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x702>
  return ptr ? *ptr : JsonArray::invalid();
    2a7e:	ldr	r4, [pc, #80]	; (2ad0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x748>)
    2a80:	b.n	2894 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x50c>
    } else {
      _firstNode = newNode;
    2a82:	str	r3, [r4, #4]
    2a84:	b.n	2a3a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6b2>
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
    if (!jsonBuffer) return NULL;
    2a86:	mov	r3, r0
    2a88:	b.n	2a2a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6a2>
    2a8a:	ldr	r0, [pc, #64]	; (2acc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x744>)
    2a8c:	bl	9164 <__cxa_guard_acquire>
    2a90:	cmp	r0, #0
    2a92:	beq.n	2a7e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6f6>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
    2a94:	ldr	r3, [pc, #56]	; (2ad0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x748>)
    2a96:	ldr	r0, [pc, #52]	; (2acc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x744>)
    2a98:	str	r4, [r3, #0]
    2a9a:	str	r4, [r3, #4]
    2a9c:	bl	9170 <__cxa_guard_release>
    2aa0:	b.n	2a7e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x6f6>
    2aa2:	ldr	r3, [sp, #4]
    2aa4:	ldr	r1, [r3, #4]
    2aa6:	b.n	25c8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x240>
    2aa8:	adds	r3, #1
    2aaa:	str.w	r3, [r9, #4]

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArrayTo(
    JsonVariant *destination) {
  JsonArray &array = parseArray();
  if (!array.success()) return false;
    2aae:	ldr	r3, [r4, #0]
    2ab0:	cmp	r3, #0
    2ab2:	bne.w	28bc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x534>
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
  _nestingLimit--;
  bool success = parseAnythingToUnsafe(destination);
  _nestingLimit++;
    2ab6:	ldrb.w	r3, [r9, #12]
    2aba:	adds	r3, #1
    2abc:	strb.w	r3, [r9, #12]
    2ac0:	b.n	2682 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x2fa>
    2ac2:	adds	r3, #1
    2ac4:	str.w	r3, [r9, #4]
    2ac8:	b.n	28b4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()+0x52c>
    2aca:	nop
    2acc:	.word	0x1fffa018
    2ad0:	.word	0x1fffa01c

00002ad4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)>:
  return true;
}

template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    2ad4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
    2ad8:	ldrb	r5, [r0, #12]
  return true;
}

template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    2ada:	sub	sp, #12
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
    2adc:	cbnz	r5, 2ae6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x12>
  _nestingLimit--;
  bool success = parseAnythingToUnsafe(destination);
  _nestingLimit++;
  return success;
}
    2ade:	mov	r0, r5
    2ae0:	add	sp, #12
    2ae2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2ae6:	mov	r4, r0
template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
  _nestingLimit--;
    2ae8:	subs	r5, #1

template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingToUnsafe(
    JsonVariant *destination) {
  skipSpacesAndComments(_reader);
    2aea:	adds	r7, r0, #4
template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
  _nestingLimit--;
    2aec:	strb	r5, [r0, #12]

template <typename TReader, typename TWriter>
inline bool
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingToUnsafe(
    JsonVariant *destination) {
  skipSpacesAndComments(_reader);
    2aee:	mov	r0, r7
    2af0:	mov	r6, r1
    2af2:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    }

    TChar current() const {
      return _ptr[0];
    2af6:	ldr	r3, [r4, #4]
    2af8:	ldrb	r5, [r3, #0]

  switch (_reader.current()) {
    2afa:	cmp	r5, #91	; 0x5b
    2afc:	beq.n	2b96 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xc2>
    2afe:	cmp	r5, #123	; 0x7b
    2b00:	beq.n	2b6a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x96>
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    2b02:	cmp	r5, #39	; 0x27
    2b04:	itt	ne
    2b06:	subne	r5, #34	; 0x22
    2b08:	clzne	r5, r5
inline const char *
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseString() {
  typename TypeTraits::RemoveReference<TWriter>::type::String str =
      _writer.startString();

  skipSpacesAndComments(_reader);
    2b0c:	mov	r0, r7
    2b0e:	ite	ne
    2b10:	lsrne	r5, r5, #5
    2b12:	moveq	r5, #1
template <typename TChar>
class StringWriter {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    2b14:	ldr	r7, [r4, #8]
    2b16:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    2b1a:	ldr	r0, [r4, #4]
    2b1c:	ldrb	r1, [r0, #0]
    2b1e:	cmp	r1, #39	; 0x27
    2b20:	beq.n	2be0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x10c>
    2b22:	cmp	r1, #34	; 0x22
    2b24:	beq.n	2be0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x10c>
    return min <= c && c <= max;
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    2b26:	movw	lr, #32749	; 0x7fed
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    2b2a:	bic.w	r3, r1, #32
    2b2e:	subs	r3, #65	; 0x41
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    2b30:	sub.w	r2, r1, #43	; 0x2b
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    2b34:	cmp	r3, #25
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    2b36:	uxtb	r2, r2
  inline bool parseArrayTo(JsonVariant *destination);
  inline bool parseObjectTo(JsonVariant *destination);
  inline bool parseStringTo(JsonVariant *destination);

  static inline bool isInRange(char c, char min, char max) {
    return min <= c && c <= max;
    2b38:	bls.n	2b84 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xb0>
  }

  static inline bool isLetterOrNumber(char c) {
    return isInRange(c, '0', '9') || isInRange(c, 'a', 'z') ||
           isInRange(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    2b3a:	cmp	r2, #14
    2b3c:	lsr.w	r3, lr, r2
    2b40:	bls.n	2b80 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xac>
    void append(TChar c) {
      *(*_writePtr)++ = c;
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    2b42:	ldr	r3, [r4, #8]
    2b44:	movs	r2, #0
    2b46:	adds	r1, r3, #1
    2b48:	str	r1, [r4, #8]
    2b4a:	strb	r2, [r3, #0]
template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseStringTo(
    JsonVariant *destination) {
  bool hasQuotes = isQuote(_reader.current());
  const char *value = parseString();
  if (value == NULL) return false;
    2b4c:	cmp	r7, #0
    2b4e:	beq.w	2c60 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x18c>
  if (hasQuotes) {
    2b52:	cmp	r5, #0
    2b54:	bne.n	2c42 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x16e>
    *destination = value;
  } else {
    *destination = RawJson(value);
    2b56:	movs	r5, #1
    2b58:	str	r7, [r6, #4]
    2b5a:	strb	r5, [r6, #0]
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
  _nestingLimit--;
  bool success = parseAnythingToUnsafe(destination);
  _nestingLimit++;
    2b5c:	ldrb	r3, [r4, #12]
  return success;
}
    2b5e:	mov	r0, r5
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseAnythingTo(
    JsonVariant *destination) {
  if (_nestingLimit == 0) return false;
  _nestingLimit--;
  bool success = parseAnythingToUnsafe(destination);
  _nestingLimit++;
    2b60:	adds	r3, #1
    2b62:	strb	r3, [r4, #12]
  return success;
}
    2b64:	add	sp, #12
    2b66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseObjectTo(
    JsonVariant *destination) {
  JsonObject &object = parseObject();
    2b6a:	mov	r0, r4
    2b6c:	bl	2388 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()>
  if (!object.success()) return false;
    2b70:	ldr	r3, [r0, #0]
    2b72:	cmp	r3, #0
    2b74:	beq.n	2c60 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x18c>

  *destination = object;
    2b76:	movs	r3, #7
    2b78:	str	r0, [r6, #4]
    2b7a:	strb	r3, [r6, #0]
  return true;
    2b7c:	movs	r5, #1
    2b7e:	b.n	2b5c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x88>
    2b80:	lsls	r3, r3, #31
    2b82:	bpl.n	2b42 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x6e>
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}

    void append(TChar c) {
      *(*_writePtr)++ = c;
    2b84:	ldr	r3, [r4, #8]
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2b86:	adds	r0, #1
    2b88:	adds	r2, r3, #1
    2b8a:	str	r0, [r4, #4]
    2b8c:	str	r2, [r4, #8]
    2b8e:	strb	r1, [r3, #0]
    }

    TChar current() const {
      return _ptr[0];
    2b90:	ldr	r0, [r4, #4]
    2b92:	ldrb	r1, [r0, #0]
    2b94:	b.n	2b2a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x56>

template <typename TReader, typename TWriter>
inline ArduinoJson::JsonArray &
ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArray() {
  // Create an empty array
  JsonArray &array = _buffer->createArray();
    2b96:	ldr	r5, [r4, #0]
    2b98:	cmp	r5, #0
    2b9a:	beq.n	2c64 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x190>
    return jsonBuffer->alloc(n);
    2b9c:	ldr	r3, [r5, #0]
    2b9e:	movs	r1, #8
    2ba0:	ldr	r3, [r3, #0]
    2ba2:	mov	r0, r5
    2ba4:	blx	r3
#pragma once

#include "Deserialization/JsonParser.hpp"

inline ArduinoJson::JsonArray &ArduinoJson::JsonBuffer::createArray() {
  JsonArray *ptr = new (this) JsonArray(this);
    2ba6:	cmp	r0, #0
    2ba8:	beq.n	2c64 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x190>
    2baa:	movs	r3, #0
    2bac:	str	r5, [r0, #0]
    2bae:	str	r3, [r0, #4]
    2bb0:	mov	r5, r0
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2bb2:	mov	r0, r7
    2bb4:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    2bb8:	ldr	r3, [r4, #4]
  if (reader.current() != charToSkip) return false;
    2bba:	ldrb	r2, [r3, #0]
    2bbc:	cmp	r2, #91	; 0x5b
    2bbe:	beq.n	2c76 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x1a2>
    2bc0:	ldr.w	r8, [pc, #372]	; 2d38 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x264>
    2bc4:	ldr	r5, [pc, #360]	; (2d30 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x25c>)
    2bc6:	ldr.w	r3, [r8]
    2bca:	ands.w	r7, r3, #1
    2bce:	beq.n	2c4a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x176>

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArrayTo(
    JsonVariant *destination) {
  JsonArray &array = parseArray();
  if (!array.success()) return false;
    2bd0:	ldr	r3, [r5, #0]
    2bd2:	cmp	r3, #0
    2bd4:	beq.n	2c60 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x18c>

  *destination = array;
    2bd6:	movs	r3, #6
    2bd8:	str	r5, [r6, #4]
    2bda:	strb	r3, [r6, #0]
  return true;
    2bdc:	movs	r5, #1
    2bde:	b.n	2b5c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x88>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2be0:	add.w	lr, r0, #1
    2be4:	str.w	lr, [r4, #4]
    }

    TChar current() const {
      return _ptr[0];
    2be8:	ldrb	r3, [r0, #1]
  if (isQuote(c)) {  // quotes
    _reader.move();
    char stopChar = c;
    for (;;) {
      c = _reader.current();
      if (c == '\0') break;
    2bea:	cmp	r3, #0
    2bec:	beq.n	2b42 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x6e>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2bee:	adds	r0, #2
      _reader.move();

      if (c == stopChar) break;
    2bf0:	cmp	r3, r1
    2bf2:	str	r0, [r4, #4]
    2bf4:	bne.n	2c16 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x142>
    2bf6:	b.n	2b42 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x6e>
    2bf8:	ldr	r2, [r4, #8]
    2bfa:	adds	r0, r2, #1
    2bfc:	str	r0, [r4, #8]
    2bfe:	strb	r3, [r2, #0]
    }

    TChar current() const {
      return _ptr[0];
    2c00:	ldr.w	lr, [r4, #4]
    2c04:	ldrb.w	r3, [lr]
  if (isQuote(c)) {  // quotes
    _reader.move();
    char stopChar = c;
    for (;;) {
      c = _reader.current();
      if (c == '\0') break;
    2c08:	cmp	r3, #0
    2c0a:	beq.n	2b42 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x6e>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2c0c:	add.w	r2, lr, #1
      _reader.move();

      if (c == stopChar) break;
    2c10:	cmp	r1, r3
    2c12:	str	r2, [r4, #4]
    2c14:	beq.n	2b42 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x6e>

      if (c == '\\') {
    2c16:	cmp	r3, #92	; 0x5c
    2c18:	bne.n	2bf8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x124>
    }

    TChar current() const {
      return _ptr[0];
    2c1a:	ldrb.w	r3, [lr, #1]
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    2c1e:	ldr	r0, [pc, #276]	; (2d34 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x260>)
    for (;;) {
      if (p[0] == '\0') return c;
      if (p[0] == c) return p[1];
    2c20:	cmp	r3, #98	; 0x62
    2c22:	bne.n	2c2a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x156>
    2c24:	b.n	2c3e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x16a>
    2c26:	cmp	r3, r2
    2c28:	beq.n	2c3e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x16a>

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
    2c2a:	ldrb.w	r2, [r0, #2]!
    2c2e:	cmp	r2, #0
    2c30:	bne.n	2c26 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x152>
        // replace char
        c = Encoding::unescapeChar(_reader.current());
        if (c == '\0') break;
    2c32:	cmp	r3, #0
    2c34:	beq.n	2b42 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x6e>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2c36:	add.w	r2, lr, #2
    2c3a:	str	r2, [r4, #4]
    2c3c:	b.n	2bf8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x124>
      if (p[0] == c) return p[1];
    2c3e:	ldrb	r3, [r0, #1]
    2c40:	b.n	2c32 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x15e>
    JsonVariant *destination) {
  bool hasQuotes = isQuote(_reader.current());
  const char *value = parseString();
  if (value == NULL) return false;
  if (hasQuotes) {
    *destination = value;
    2c42:	movs	r3, #2
    2c44:	str	r7, [r6, #4]
    2c46:	strb	r3, [r6, #0]
    2c48:	b.n	2b5c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x88>
    2c4a:	mov	r0, r8
    2c4c:	bl	9164 <__cxa_guard_acquire>
    2c50:	cmp	r0, #0
    2c52:	beq.n	2bd0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xfc>
    2c54:	mov	r0, r8
    2c56:	str	r7, [r5, #0]
    2c58:	str	r7, [r5, #4]
    2c5a:	bl	9170 <__cxa_guard_release>
    2c5e:	b.n	2bd0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xfc>

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::parseArrayTo(
    JsonVariant *destination) {
  JsonArray &array = parseArray();
  if (!array.success()) return false;
    2c60:	movs	r5, #0
    2c62:	b.n	2b5c <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x88>
    2c64:	ldr.w	r8, [pc, #208]	; 2d38 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x264>
    2c68:	ldr.w	r3, [r8]
    2c6c:	ands.w	r5, r3, #1
    2c70:	beq.n	2d0a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x236>
  return ptr ? *ptr : JsonArray::invalid();
    2c72:	ldr	r5, [pc, #188]	; (2d30 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x25c>)
    2c74:	b.n	2bb2 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xde>
    2c76:	adds	r3, #1
    2c78:	str	r3, [r4, #4]
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2c7a:	mov	r0, r7
    2c7c:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    }

    TChar current() const {
      return _ptr[0];
    2c80:	ldr	r3, [r4, #4]
  if (reader.current() != charToSkip) return false;
    2c82:	ldrb	r2, [r3, #0]
    2c84:	cmp	r2, #93	; 0x5d
    2c86:	beq.n	2d00 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x22c>
    2c88:	mov	r8, sp
    2c8a:	mov.w	r9, #0

  // Read each value
  for (;;) {
    // 1 - Parse value
    JsonVariant value;
    if (!parseAnythingTo(&value)) goto ERROR_INVALID_VALUE;
    2c8e:	mov	r1, r8
    2c90:	mov	r0, r4
    2c92:	strb.w	r9, [sp]
    2c96:	bl	2ad4 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)>
    2c9a:	cmp	r0, #0
    2c9c:	beq.n	2bc0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xec>
    for (node_type *node = _firstNode; node; node = node->next) nodeCount++;
    return nodeCount;
  }

  iterator add() {
    node_type *newNode = new (_buffer) node_type();
    2c9e:	ldr	r0, [r5, #0]
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
    if (!jsonBuffer) return NULL;
    2ca0:	cbz	r0, 2d06 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x232>
    return jsonBuffer->alloc(n);
    2ca2:	ldr	r3, [r0, #0]
    2ca4:	movs	r1, #12
    2ca6:	ldr	r3, [r3, #0]
    2ca8:	blx	r3
    2caa:	mov	lr, r0
    2cac:	cbz	r0, 2cb6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x1e2>
    2cae:	str.w	r9, [r0]
    2cb2:	strb.w	r9, [r0, #4]

    if (_firstNode) {
    2cb6:	ldr	r2, [r5, #4]
    2cb8:	cbnz	r2, 2cbe <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x1ea>
    2cba:	b.n	2d2a <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x256>
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
    2cbc:	mov	r2, r3
    2cbe:	ldr	r3, [r2, #0]
    2cc0:	cmp	r3, #0
    2cc2:	bne.n	2cbc <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x1e8>
      lastNode->next = newNode;
    2cc4:	str.w	lr, [r2]
  }

  template <typename TValueRef>
  bool add_impl(TValueRef value) {
    iterator it = Internals::List<JsonVariant>::add();
    if (it == end()) return false;
    2cc8:	cmp.w	lr, #0
    2ccc:	beq.w	2bc0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xec>
    2cd0:	ldmia.w	r8, {r0, r1}
    2cd4:	add.w	lr, lr, #4
    2cd8:	stmia.w	lr, {r0, r1}
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2cdc:	mov	r0, r7
    2cde:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    2ce2:	ldr	r3, [r4, #4]
  if (reader.current() != charToSkip) return false;
    2ce4:	ldrb	r2, [r3, #0]
    2ce6:	cmp	r2, #93	; 0x5d
    2ce8:	beq.n	2d00 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x22c>
#include "JsonParser.hpp"

template <typename TReader, typename TWriter>
inline bool ArduinoJson::Internals::JsonParser<TReader, TWriter>::eat(
    TReader &reader, char charToSkip) {
  skipSpacesAndComments(reader);
    2cea:	mov	r0, r7
    2cec:	bl	2308 <void ArduinoJson::Internals::skipSpacesAndComments<ArduinoJson::Internals::CharPointerTraits<char>::Reader>(ArduinoJson::Internals::CharPointerTraits<char>::Reader&)>
    2cf0:	ldr	r3, [r4, #4]
  if (reader.current() != charToSkip) return false;
    2cf2:	ldrb	r2, [r3, #0]
    2cf4:	cmp	r2, #44	; 0x2c
    2cf6:	bne.w	2bc0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xec>
   public:
    Reader(const TChar* ptr)
        : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

    void move() {
      ++_ptr;
    2cfa:	adds	r3, #1
    2cfc:	str	r3, [r4, #4]
    2cfe:	b.n	2c8e <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x1ba>
    2d00:	adds	r3, #1
    2d02:	str	r3, [r4, #4]
    2d04:	b.n	2bd0 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xfc>
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
    if (!jsonBuffer) return NULL;
    2d06:	mov	lr, r0
    2d08:	b.n	2cb6 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x1e2>

  // Returns a reference an invalid JsonArray.
  // This object is meant to replace a NULL pointer.
  // This is used when memory allocation or JSON parsing fail.
  static JsonArray &invalid() {
    static JsonArray instance(NULL);
    2d0a:	mov	r0, r8
    2d0c:	bl	9164 <__cxa_guard_acquire>
    2d10:	cmp	r0, #0
    2d12:	beq.n	2c72 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x19e>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
    2d14:	ldr.w	r9, [pc, #24]	; 2d30 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x25c>
    2d18:	mov	r0, r8
    2d1a:	str.w	r5, [r9]
    2d1e:	str.w	r5, [r9, #4]
    2d22:	bl	9170 <__cxa_guard_release>
    2d26:	mov	r5, r9
    2d28:	b.n	2bb2 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0xde>
    if (_firstNode) {
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
      lastNode->next = newNode;
    } else {
      _firstNode = newNode;
    2d2a:	str.w	lr, [r5, #4]
    2d2e:	b.n	2cc8 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseAnythingTo(ArduinoJson::JsonVariant*)+0x1f4>
    2d30:	.word	0x1fffa01c
    2d34:	.word	0x0000c794
    2d38:	.word	0x1fffa018

00002d3c <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)>:
#include "./ctype.hpp"

namespace ArduinoJson {
namespace Polyfills {
template <typename T>
T parseInteger(const char *s) {
    2d3c:	push	{r4}
  if (!s) return 0;
    2d3e:	cbz	r0, 2d78 <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)+0x3c>

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    2d40:	ldrb	r3, [r0, #0]
    2d42:	cmp	r3, #43	; 0x2b
    2d44:	beq.n	2d90 <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)+0x54>
    2d46:	cmp	r3, #45	; 0x2d
    2d48:	beq.n	2d7c <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)+0x40>
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2d4a:	sub.w	r2, r3, #48	; 0x30
    2d4e:	cmp	r2, #9
    2d50:	bhi.n	2d94 <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)+0x58>
    2d52:	mov	r2, r0
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;

  T result = 0;
  bool negative_result = false;
    2d54:	movs	r4, #0
    2d56:	movs	r0, #0
    2d58:	add.w	r0, r0, r0, lsl #2
    2d5c:	add.w	r0, r3, r0, lsl #1
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2d60:	ldrb.w	r3, [r2, #1]!
    2d64:	sub.w	r1, r3, #48	; 0x30
    result = static_cast<T>(result * 10 + (*s - '0'));
    2d68:	subs	r0, #48	; 0x30
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2d6a:	cmp	r1, #9
    result = static_cast<T>(result * 10 + (*s - '0'));
    2d6c:	and.w	r0, r0, #255	; 0xff
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2d70:	bls.n	2d58 <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)+0x1c>
    result = static_cast<T>(result * 10 + (*s - '0'));
    s++;
  }

  return negative_result ? static_cast<T>(result * -1) : result;
    2d72:	cbz	r4, 2d78 <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)+0x3c>
    2d74:	negs	r0, r0
    2d76:	uxtb	r0, r0
}
    2d78:	pop	{r4}
    2d7a:	bx	lr
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    2d7c:	movs	r4, #1
    2d7e:	ldrb	r3, [r0, #1]
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2d80:	sub.w	r1, r3, #48	; 0x30
    2d84:	cmp	r1, #9

  switch (*s) {
    case '-':
      negative_result = true;
    case '+':
      s++;
    2d86:	add.w	r2, r0, #1
      break;
  }

  while (isdigit(*s)) {
    2d8a:	bls.n	2d56 <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)+0x1a>
    2d8c:	movs	r0, #0
    2d8e:	b.n	2d72 <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)+0x36>
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;

  T result = 0;
  bool negative_result = false;
    2d90:	movs	r4, #0
    2d92:	b.n	2d7e <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)+0x42>
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2d94:	movs	r0, #0
    2d96:	b.n	2d78 <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)+0x3c>

00002d98 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)>:
#include "./ctype.hpp"

namespace ArduinoJson {
namespace Polyfills {
template <typename T>
T parseInteger(const char *s) {
    2d98:	push	{r4}
  if (!s) return 0;
    2d9a:	cbz	r0, 2dd2 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)+0x3a>

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    2d9c:	ldrb	r3, [r0, #0]
    2d9e:	cmp	r3, #43	; 0x2b
    2da0:	beq.n	2dea <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)+0x52>
    2da2:	cmp	r3, #45	; 0x2d
    2da4:	beq.n	2dd6 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)+0x3e>
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2da6:	sub.w	r2, r3, #48	; 0x30
    2daa:	cmp	r2, #9
    2dac:	bhi.n	2dee <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)+0x56>
    2dae:	mov	r2, r0
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;

  T result = 0;
  bool negative_result = false;
    2db0:	movs	r4, #0
    2db2:	movs	r0, #0
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = static_cast<T>(result * 10 + (*s - '0'));
    2db4:	add.w	r0, r0, r0, lsl #2
    2db8:	add.w	r0, r3, r0, lsl #1
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2dbc:	ldrb.w	r3, [r2, #1]!
    2dc0:	sub.w	r1, r3, #48	; 0x30
    result = static_cast<T>(result * 10 + (*s - '0'));
    2dc4:	subs	r0, #48	; 0x30
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2dc6:	cmp	r1, #9
    result = static_cast<T>(result * 10 + (*s - '0'));
    2dc8:	uxth	r0, r0
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2dca:	bls.n	2db4 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)+0x1c>
    result = static_cast<T>(result * 10 + (*s - '0'));
    s++;
  }

  return negative_result ? static_cast<T>(result * -1) : result;
    2dcc:	cbz	r4, 2dd2 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)+0x3a>
    2dce:	negs	r0, r0
    2dd0:	uxth	r0, r0
}
    2dd2:	pop	{r4}
    2dd4:	bx	lr
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    2dd6:	movs	r4, #1
    2dd8:	ldrb	r3, [r0, #1]
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2dda:	sub.w	r1, r3, #48	; 0x30
    2dde:	cmp	r1, #9

  switch (*s) {
    case '-':
      negative_result = true;
    case '+':
      s++;
    2de0:	add.w	r2, r0, #1
      break;
  }

  while (isdigit(*s)) {
    2de4:	bls.n	2db2 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)+0x1a>
    2de6:	movs	r0, #0
    2de8:	b.n	2dcc <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)+0x34>
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;

  T result = 0;
  bool negative_result = false;
    2dea:	movs	r4, #0
    2dec:	b.n	2dd8 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)+0x40>
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    2dee:	movs	r0, #0
    2df0:	b.n	2dd2 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)+0x3a>
    2df2:	nop

00002df4 <serialParse() [clone .part.25]>:
  }
}



void serialParse()
    2df4:	push	{r4, r5, r6, r7, lr}
    2df6:	ldr	r4, [pc, #616]	; (3060 <serialParse() [clone .part.25]+0x26c>)
    2df8:	sub	sp, #28
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2dfa:	bl	8d98 <usb_serial_available>
  if (Serial.available()) {
    char lastChar = '\0';
    int i = 0;

    while (lastChar != '\r') {
      if (Serial.available()) {
    2dfe:	cmp	r0, #0
    2e00:	beq.n	2dfa <serialParse() [clone .part.25]+0x6>
        virtual int read() { return usb_serial_getchar(); }
    2e02:	bl	8d20 <usb_serial_getchar>
        lastChar = Serial.read();
    2e06:	uxtb	r0, r0
{
  if (Serial.available()) {
    char lastChar = '\0';
    int i = 0;

    while (lastChar != '\r') {
    2e08:	cmp	r0, #13
      if (Serial.available()) {
        lastChar = Serial.read();
        input[i] = lastChar;
    2e0a:	strb.w	r0, [r4, #1]!
{
  if (Serial.available()) {
    char lastChar = '\0';
    int i = 0;

    while (lastChar != '\r') {
    2e0e:	bne.n	2dfa <serialParse() [clone .part.25]+0x6>
    2e10:	b.n	2e16 <serialParse() [clone .part.25]+0x22>
    2e12:	bl	8d20 <usb_serial_getchar>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2e16:	bl	8d98 <usb_serial_available>
        lastChar = Serial.read();
        input[i] = lastChar;
        i++;
      }
    }
    while (Serial.available()) Serial.read();
    2e1a:	cmp	r0, #0
    2e1c:	bne.n	2e12 <serialParse() [clone .part.25]+0x1e>
  JsonParser(JsonBuffer *buffer, TReader reader, TWriter writer,
             uint8_t nestingLimit)
      : _buffer(buffer),
        _reader(reader),
        _writer(writer),
        _nestingLimit(nestingLimit) {}
    2e1e:	ldr	r2, [pc, #580]	; (3064 <serialParse() [clone .part.25]+0x270>)
    2e20:	ldr	r3, [pc, #580]	; (3068 <serialParse() [clone .part.25]+0x274>)
    2e22:	str	r2, [sp, #8]
  // JsonObject& parseObject(TString);
  // TString = const char*, const char[N], const FlashStringHelper*
  template <typename TString>
  JsonObject &parseObject(
      TString *json, uint8_t nestingLimit = ARDUINOJSON_DEFAULT_NESTING_LIMIT) {
    return Internals::makeParser(that(), json, nestingLimit).parseObject();
    2e24:	add	r0, sp, #8
    2e26:	movs	r2, #10
    2e28:	str	r3, [sp, #12]
    2e2a:	str	r3, [sp, #16]
    2e2c:	strb.w	r2, [sp, #20]
    2e30:	bl	2388 <ArduinoJson::Internals::JsonParser<ArduinoJson::Internals::CharPointerTraits<char>::Reader, ArduinoJson::Internals::StringWriter<char> >::parseObject()>
    2e34:	ldr	r4, [r0, #4]
    2e36:	mov	r6, r0
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    2e38:	cbnz	r4, 2e42 <serialParse() [clone .part.25]+0x4e>
    2e3a:	b.n	2f0c <serialParse() [clone .part.25]+0x118>
    2e3c:	ldr	r4, [r4, #0]
    2e3e:	cmp	r4, #0
    2e40:	beq.n	2f0c <serialParse() [clone .part.25]+0x118>
      return _ptr[1];
    }
  };

  static bool equals(const TChar* str, const char* expected) {
    return strcmp(reinterpret_cast<const char*>(str), expected) == 0;
    2e42:	ldr	r1, [r4, #4]
    2e44:	ldr	r0, [pc, #548]	; (306c <serialParse() [clone .part.25]+0x278>)
    2e46:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    2e4a:	cmp	r0, #0
    2e4c:	bne.n	2e3c <serialParse() [clone .part.25]+0x48>
    2e4e:	ldrb	r3, [r4, #8]
  }
}

inline const char *JsonVariant::variantAsString() const {
  using namespace Internals;
  if (_type == JSON_UNPARSED && _content.asString &&
    2e50:	cmp	r3, #1
    2e52:	beq.n	2f10 <serialParse() [clone .part.25]+0x11c>
      !strcmp("null", _content.asString))
    return NULL;
  if (_type == JSON_STRING || _type == JSON_UNPARSED) return _content.asString;
    2e54:	cmp	r3, #2
    2e56:	bne.n	2e5a <serialParse() [clone .part.25]+0x66>
    2e58:	ldr	r0, [r4, #12]

inline const char *JsonVariant::variantAsString() const {
  using namespace Internals;
  if (_type == JSON_UNPARSED && _content.asString &&
      !strcmp("null", _content.asString))
    return NULL;
    2e5a:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2e5c:	mov	r0, r4
    2e5e:	bl	c1c0 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2e62:	mov	r1, r0
    2e64:	mov	r0, r4
    2e66:	bl	8dec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2e6a:	ldr	r0, [pc, #516]	; (3070 <serialParse() [clone .part.25]+0x27c>)
    2e6c:	bl	a780 <Print::println()>

    JsonObject& root = jsonBuffer.parseObject(input);
    const char* method = root["method"];
    Serial.println(method);
    if (strcmp(method, "fadeToRGB") == 0)
    2e70:	ldr	r1, [pc, #512]	; (3074 <serialParse() [clone .part.25]+0x280>)
    2e72:	mov	r0, r4
    2e74:	bl	bec8 <strcmp>
    2e78:	cmp	r0, #0
    2e7a:	beq.n	2f24 <serialParse() [clone .part.25]+0x130>
    {
      StripCommander.fadeToRGB(root["R"], root["G"], root["B"], root["Delay"]);
    }
    else if (strcmp(method, "fadeToHSV") == 0) //{method:fadeToHSV,H:160,S:255,V:255,Delay:2000}
    2e7c:	ldr	r1, [pc, #504]	; (3078 <serialParse() [clone .part.25]+0x284>)
    2e7e:	mov	r0, r4
    2e80:	bl	bec8 <strcmp>
    2e84:	cmp	r0, #0
    2e86:	beq.w	2fda <serialParse() [clone .part.25]+0x1e6>
    {
      StripCommander.fadeToHSV(root["H"], root["S"], root["V"], root["Delay"]);
    }
    else if (strcmp(method, "setToRGB") == 0) //{method:setToRGB,R:255,G:100,B:0}
    2e8a:	ldr	r1, [pc, #496]	; (307c <serialParse() [clone .part.25]+0x288>)
    2e8c:	mov	r0, r4
    2e8e:	bl	bec8 <strcmp>
    2e92:	cmp	r0, #0
    2e94:	beq.w	3012 <serialParse() [clone .part.25]+0x21e>
    {
      Serial.println("set to RGB value");
      StripCommander.setToRGB(root["R"], root["G"], root["B"]);
      LastFrameShowed = false;
    }
    else if (strcmp(method, "setToHSV") == 0) //{method:setToHSV,H:255,S:100,V:0}
    2e98:	ldr	r1, [pc, #484]	; (3080 <serialParse() [clone .part.25]+0x28c>)
    2e9a:	mov	r0, r4
    2e9c:	bl	bec8 <strcmp>
    2ea0:	cmp	r0, #0
    2ea2:	beq.n	2f5c <serialParse() [clone .part.25]+0x168>
    {
      Serial.println("set to HSV value");
      StripCommander.setToHSV(root["H"], root["S"], root["V"]);
      LastFrameShowed = false;
    }
    else if (strcmp(method, "rainbow") == 0)    //{method:rainbow}
    2ea4:	ldr	r1, [pc, #476]	; (3084 <serialParse() [clone .part.25]+0x290>)
    2ea6:	mov	r0, r4
    2ea8:	bl	bec8 <strcmp>
    2eac:	mov	r5, r0
    2eae:	cmp	r0, #0
    2eb0:	beq.w	318e <serialParse() [clone .part.25]+0x39a>
    {
      Serial.println("Rainbow");
      StripCommander.rainbow();
      LastFrameShowed = false;
    }
    else if (strcmp(method, "flash") == 0)
    2eb4:	ldr	r1, [pc, #464]	; (3088 <serialParse() [clone .part.25]+0x294>)
    2eb6:	mov	r0, r4
    2eb8:	bl	bec8 <strcmp>
    2ebc:	mov	r5, r0
    2ebe:	cmp	r0, #0
    2ec0:	beq.w	315a <serialParse() [clone .part.25]+0x366>
      for (uint8_t i = 0; i <= FlashCount; i++)
      {
        StripCommander.flash(random(0, NUM_LEDS));
      }
    }
    else if (strcmp(method, "groupFlash") == 0) //{method:groupFlash,Group:0,Direction:1}
    2ec4:	ldr	r1, [pc, #452]	; (308c <serialParse() [clone .part.25]+0x298>)
    2ec6:	mov	r0, r4
    2ec8:	bl	bec8 <strcmp>
    2ecc:	cmp	r0, #0
    2ece:	beq.n	2fa2 <serialParse() [clone .part.25]+0x1ae>
    {
      StripCommander.groupFlash(root["Group"], root["Direction"]);
    }
    else if (strcmp(method, "rdmGroupFlash") == 0) //{method:rdmGroupFlash}
    2ed0:	ldr	r1, [pc, #444]	; (3090 <serialParse() [clone .part.25]+0x29c>)
    2ed2:	mov	r0, r4
    2ed4:	bl	bec8 <strcmp>
    2ed8:	cmp	r0, #0
    2eda:	beq.w	363e <serialParse() [clone .part.25]+0x84a>
    {
      StripCommander.groupFlash();
    }
    else if (strcmp(method, "rain") == 0) //{method:rain}
    2ede:	ldr	r1, [pc, #436]	; (3094 <serialParse() [clone .part.25]+0x2a0>)
    2ee0:	mov	r0, r4
    2ee2:	bl	bec8 <strcmp>
    2ee6:	cmp	r0, #0
    2ee8:	beq.w	3650 <serialParse() [clone .part.25]+0x85c>
    {
      toggleRain();
    }
    else if (strcmp(method, "thunder") == 0) //{method:thunder}
    2eec:	mov	r0, r4
    2eee:	ldr	r1, [pc, #424]	; (3098 <serialParse() [clone .part.25]+0x2a4>)
    2ef0:	bl	bec8 <strcmp>
    2ef4:	cmp	r0, #0
    2ef6:	beq.w	362c <serialParse() [clone .part.25]+0x838>
    2efa:	movs	r1, #19
    2efc:	ldr	r0, [pc, #412]	; (309c <serialParse() [clone .part.25]+0x2a8>)
    2efe:	bl	8dec <usb_serial_write>
    2f02:	ldr	r0, [pc, #364]	; (3070 <serialParse() [clone .part.25]+0x27c>)
    2f04:	bl	a780 <Print::println()>
    else
    {
      Serial.println("ca ne marche pas ^^");
    }
  }
}
    2f08:	add	sp, #28
    2f0a:	pop	{r4, r5, r6, r7, pc}
  template <typename TStringRef, typename TValue>
  typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    const_iterator it = findKey<TStringRef>(key);
    return it != end() ? it->value.as<TValue>()
                       : Internals::JsonVariantDefault<TValue>::get();
    2f0c:	movs	r4, #0
    2f0e:	b.n	2e5c <serialParse() [clone .part.25]+0x68>
  }
}

inline const char *JsonVariant::variantAsString() const {
  using namespace Internals;
  if (_type == JSON_UNPARSED && _content.asString &&
    2f10:	ldr	r4, [r4, #12]
    2f12:	cbz	r4, 2f20 <serialParse() [clone .part.25]+0x12c>
      !strcmp("null", _content.asString))
    2f14:	mov	r1, r4
    2f16:	ldr	r0, [pc, #392]	; (30a0 <serialParse() [clone .part.25]+0x2ac>)
    2f18:	bl	bec8 <strcmp>
  }
}

inline const char *JsonVariant::variantAsString() const {
  using namespace Internals;
  if (_type == JSON_UNPARSED && _content.asString &&
    2f1c:	cmp	r0, #0
    2f1e:	beq.n	2e5a <serialParse() [clone .part.25]+0x66>
    2f20:	mov	r0, r4
    2f22:	b.n	2e5a <serialParse() [clone .part.25]+0x66>
    2f24:	ldr	r4, [r6, #4]
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    2f26:	cmp	r4, #0
    2f28:	beq.w	3140 <serialParse() [clone .part.25]+0x34c>
    2f2c:	mov	r5, r4
    2f2e:	b.n	2f38 <serialParse() [clone .part.25]+0x144>
    2f30:	ldr	r5, [r5, #0]
    2f32:	cmp	r5, #0
    2f34:	beq.w	3058 <serialParse() [clone .part.25]+0x264>
    2f38:	ldr	r1, [r5, #4]
    2f3a:	ldr	r0, [pc, #360]	; (30a4 <serialParse() [clone .part.25]+0x2b0>)
    2f3c:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    2f40:	cmp	r0, #0
    2f42:	bne.n	2f30 <serialParse() [clone .part.25]+0x13c>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
    2f44:	ldrb	r3, [r5, #8]
    2f46:	cmp	r3, #5
    2f48:	bhi.w	3646 <serialParse() [clone .part.25]+0x852>
    2f4c:	tbh	[pc, r3, lsl #1]
    2f50:	.word	0x01d301b8
    2f54:	.word	0x01d101d3
    2f58:	.word	0x01cd01d1
    2f5c:	movs	r1, #16
    2f5e:	ldr	r0, [pc, #328]	; (30a8 <serialParse() [clone .part.25]+0x2b4>)
    2f60:	bl	8dec <usb_serial_write>
    2f64:	ldr	r0, [pc, #264]	; (3070 <serialParse() [clone .part.25]+0x27c>)
    2f66:	bl	a780 <Print::println()>
    2f6a:	ldr	r4, [r6, #4]
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    2f6c:	cmp	r4, #0
    2f6e:	beq.w	3502 <serialParse() [clone .part.25]+0x70e>
    2f72:	mov	r5, r4
    2f74:	b.n	2f7e <serialParse() [clone .part.25]+0x18a>
    2f76:	ldr	r5, [r5, #0]
    2f78:	cmp	r5, #0
    2f7a:	beq.w	328a <serialParse() [clone .part.25]+0x496>
    2f7e:	ldr	r1, [r5, #4]
    2f80:	ldr	r0, [pc, #296]	; (30ac <serialParse() [clone .part.25]+0x2b8>)
    2f82:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    2f86:	cmp	r0, #0
    2f88:	bne.n	2f76 <serialParse() [clone .part.25]+0x182>
    2f8a:	ldrb	r3, [r5, #8]
    2f8c:	cmp	r3, #5
    2f8e:	bhi.w	369c <serialParse() [clone .part.25]+0x8a8>
    2f92:	tbh	[pc, r3, lsl #1]
    2f96:	.short	0x02f6
    2f98:	.word	0x02e902e9
    2f9c:	.word	0x02fc02fc
    2fa0:	.short	0x02f8
    2fa2:	ldr	r5, [r6, #4]
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    2fa4:	cmp	r5, #0
    2fa6:	beq.w	35d6 <serialParse() [clone .part.25]+0x7e2>
    2faa:	mov	r4, r5
    2fac:	b.n	2fb6 <serialParse() [clone .part.25]+0x1c2>
    2fae:	ldr	r4, [r4, #0]
    2fb0:	cmp	r4, #0
    2fb2:	beq.w	35d2 <serialParse() [clone .part.25]+0x7de>
    2fb6:	ldr	r1, [r4, #4]
    2fb8:	ldr	r0, [pc, #244]	; (30b0 <serialParse() [clone .part.25]+0x2bc>)
    2fba:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    2fbe:	cmp	r0, #0
    2fc0:	bne.n	2fae <serialParse() [clone .part.25]+0x1ba>
    2fc2:	ldrb	r3, [r4, #8]
    2fc4:	cmp	r3, #5
    2fc6:	bhi.w	371a <serialParse() [clone .part.25]+0x926>
    2fca:	tbh	[pc, r3, lsl #1]
    2fce:	.short	0x032d
    2fd0:	.word	0x03210321
    2fd4:	.word	0x031f031f
    2fd8:	.short	0x02e2
    2fda:	ldr	r4, [r6, #4]
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    2fdc:	cmp	r4, #0
    2fde:	beq.w	33b0 <serialParse() [clone .part.25]+0x5bc>
    2fe2:	mov	r5, r4
    2fe4:	b.n	2fee <serialParse() [clone .part.25]+0x1fa>
    2fe6:	ldr	r5, [r5, #0]
    2fe8:	cmp	r5, #0
    2fea:	beq.w	31a8 <serialParse() [clone .part.25]+0x3b4>
    2fee:	ldr	r1, [r5, #4]
    2ff0:	ldr	r0, [pc, #184]	; (30ac <serialParse() [clone .part.25]+0x2b8>)
    2ff2:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    2ff6:	cmp	r0, #0
    2ff8:	bne.n	2fe6 <serialParse() [clone .part.25]+0x1f2>
    2ffa:	ldrb	r3, [r5, #8]
    2ffc:	cmp	r3, #5
    2ffe:	bhi.w	367e <serialParse() [clone .part.25]+0x88a>
    3002:	tbh	[pc, r3, lsl #1]
    3006:	.short	0x022f
    3008:	.word	0x02220222
    300c:	.word	0x02200220
    3010:	.short	0x021c
    3012:	movs	r1, #16
    3014:	ldr	r0, [pc, #156]	; (30b4 <serialParse() [clone .part.25]+0x2c0>)
    3016:	bl	8dec <usb_serial_write>
    301a:	ldr	r0, [pc, #84]	; (3070 <serialParse() [clone .part.25]+0x27c>)
    301c:	bl	a780 <Print::println()>
    3020:	ldr	r4, [r6, #4]
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    3022:	cmp	r4, #0
    3024:	beq.w	326e <serialParse() [clone .part.25]+0x47a>
    3028:	mov	r5, r4
    302a:	b.n	3034 <serialParse() [clone .part.25]+0x240>
    302c:	ldr	r5, [r5, #0]
    302e:	cmp	r5, #0
    3030:	beq.w	3212 <serialParse() [clone .part.25]+0x41e>
    3034:	ldr	r1, [r5, #4]
    3036:	ldr	r0, [pc, #108]	; (30a4 <serialParse() [clone .part.25]+0x2b0>)
    3038:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    303c:	cmp	r0, #0
    303e:	bne.n	302c <serialParse() [clone .part.25]+0x238>
    3040:	ldrb	r3, [r5, #8]
    3042:	cmp	r3, #5
    3044:	bhi.w	36ba <serialParse() [clone .part.25]+0x8c6>
    3048:	tbh	[pc, r3, lsl #1]
    304c:	.word	0x023a01f7
    3050:	.word	0x0234023a
    3054:	.word	0x02360234
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    3058:	cmp	r4, #0
    305a:	beq.n	3140 <serialParse() [clone .part.25]+0x34c>
    305c:	mov	r6, r4
    305e:	b.n	30bc <serialParse() [clone .part.25]+0x2c8>
    3060:	.word	0x1fffb477
    3064:	.word	0x1fffb4f0
    3068:	.word	0x1fffb478
    306c:	.word	0x0000c7a0
    3070:	.word	0x1fff965c
    3074:	.word	0x0000c7b0
    3078:	.word	0x0000c7d4
    307c:	.word	0x0000c7e8
    3080:	.word	0x0000c808
    3084:	.word	0x0000c828
    3088:	.word	0x0000c838
    308c:	.word	0x0000c840
    3090:	.word	0x0000c860
    3094:	.word	0x0000c870
    3098:	.word	0x0000c878
    309c:	.word	0x0000c894
    30a0:	.word	0x0000c7a8
    30a4:	.word	0x0000c7bc
    30a8:	.word	0x0000c814
    30ac:	.word	0x0000c7e0
    30b0:	.word	0x0000c84c
    30b4:	.word	0x0000c7f4
    30b8:	ldr	r6, [r6, #0]
    30ba:	cbz	r6, 30e0 <serialParse() [clone .part.25]+0x2ec>
    30bc:	ldr	r1, [r6, #4]
    30be:	ldr	r0, [pc, #592]	; (3310 <serialParse() [clone .part.25]+0x51c>)
    30c0:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    30c4:	cmp	r0, #0
    30c6:	bne.n	30b8 <serialParse() [clone .part.25]+0x2c4>
    30c8:	ldrb	r3, [r6, #8]
    30ca:	cmp	r3, #5
    30cc:	bhi.w	3660 <serialParse() [clone .part.25]+0x86c>
    30d0:	tbh	[pc, r3, lsl #1]
    30d4:	.word	0x00fa0006
    30d8:	.word	0x00f800fa
    30dc:	.word	0x014500f8
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    30e0:	cmp	r4, #0
    30e2:	beq.n	3142 <serialParse() [clone .part.25]+0x34e>
    30e4:	movs	r7, #0
    30e6:	mov	r6, r4
    30e8:	b.n	30ee <serialParse() [clone .part.25]+0x2fa>
    30ea:	ldr	r6, [r6, #0]
    30ec:	cbz	r6, 3112 <serialParse() [clone .part.25]+0x31e>
    30ee:	ldr	r1, [r6, #4]
    30f0:	ldr	r0, [pc, #544]	; (3314 <serialParse() [clone .part.25]+0x520>)
    30f2:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    30f6:	cmp	r0, #0
    30f8:	bne.n	30ea <serialParse() [clone .part.25]+0x2f6>
    30fa:	ldrb	r3, [r6, #8]
    30fc:	cmp	r3, #5
    30fe:	bhi.w	3688 <serialParse() [clone .part.25]+0x894>
    3102:	tbh	[pc, r3, lsl #1]
    3106:	.short	0x0006
    3108:	.word	0x011f011f
    310c:	.word	0x013f013f
    3110:	.short	0x00ee
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    3112:	cbz	r4, 3144 <serialParse() [clone .part.25]+0x350>
    3114:	movs	r6, #0
    3116:	b.n	311c <serialParse() [clone .part.25]+0x328>
    3118:	ldr	r4, [r4, #0]
    311a:	cbz	r4, 3146 <serialParse() [clone .part.25]+0x352>
    311c:	ldr	r1, [r4, #4]
    311e:	ldr	r0, [pc, #504]	; (3318 <serialParse() [clone .part.25]+0x524>)
    3120:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    3124:	cmp	r0, #0
    3126:	bne.n	3118 <serialParse() [clone .part.25]+0x324>
    3128:	ldrb	r3, [r4, #8]
    312a:	cmp	r3, #5
    312c:	bhi.w	3692 <serialParse() [clone .part.25]+0x89e>
    3130:	tbh	[pc, r3, lsl #1]
    3134:	.word	0x011b0009
    3138:	.word	0x0119011b
    313c:	.word	0x01040119
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    3140:	movs	r5, #0
    3142:	movs	r7, #0
    3144:	movs	r6, #0
    case JSON_UNDEFINED:
      return 0;
    3146:	movs	r0, #0
    JsonObject& root = jsonBuffer.parseObject(input);
    const char* method = root["method"];
    Serial.println(method);
    if (strcmp(method, "fadeToRGB") == 0)
    {
      StripCommander.fadeToRGB(root["R"], root["G"], root["B"], root["Delay"]);
    3148:	str	r0, [sp, #0]
    314a:	mov	r3, r6
    314c:	mov	r2, r7
    314e:	mov	r1, r5
    3150:	ldr	r0, [pc, #456]	; (331c <serialParse() [clone .part.25]+0x528>)
    3152:	bl	432c <StripCommand::fadeToRGB(unsigned char, unsigned char, unsigned char, unsigned short)>
    else
    {
      Serial.println("ca ne marche pas ^^");
    }
  }
}
    3156:	add	sp, #28
    3158:	pop	{r4, r5, r6, r7, pc}
    315a:	movs	r1, #5
    315c:	ldr	r0, [pc, #448]	; (3320 <serialParse() [clone .part.25]+0x52c>)
    315e:	bl	8dec <usb_serial_write>
    3162:	ldr	r0, [pc, #448]	; (3324 <serialParse() [clone .part.25]+0x530>)
    3164:	bl	a780 <Print::println()>
      LastFrameShowed = false;
    }
    else if (strcmp(method, "flash") == 0)
    {
      Serial.println("Flash");      //{method:flash}
      uint8_t FlashCount = random(1, 15);
    3168:	movs	r1, #15
    316a:	movs	r0, #1
    316c:	bl	a8b4 <random(long, long)>
    3170:	mov	r4, r5
    3172:	uxtb	r5, r0
      for (uint8_t i = 0; i <= FlashCount; i++)
      {
        StripCommander.flash(random(0, NUM_LEDS));
    3174:	movs	r1, #56	; 0x38
    3176:	movs	r0, #0
    3178:	bl	a8b4 <random(long, long)>
    317c:	adds	r4, #1
    317e:	uxth	r1, r0
    3180:	ldr	r0, [pc, #408]	; (331c <serialParse() [clone .part.25]+0x528>)
    3182:	bl	3edc <StripCommand::flash(unsigned short)>
    }
    else if (strcmp(method, "flash") == 0)
    {
      Serial.println("Flash");      //{method:flash}
      uint8_t FlashCount = random(1, 15);
      for (uint8_t i = 0; i <= FlashCount; i++)
    3186:	uxtb	r3, r4
    3188:	cmp	r5, r3
    318a:	bcs.n	3174 <serialParse() [clone .part.25]+0x380>
    318c:	b.n	2f08 <serialParse() [clone .part.25]+0x114>
    318e:	movs	r1, #7
    3190:	ldr	r0, [pc, #404]	; (3328 <serialParse() [clone .part.25]+0x534>)
    3192:	bl	8dec <usb_serial_write>
    3196:	ldr	r0, [pc, #396]	; (3324 <serialParse() [clone .part.25]+0x530>)
    3198:	bl	a780 <Print::println()>
      LastFrameShowed = false;
    }
    else if (strcmp(method, "rainbow") == 0)    //{method:rainbow}
    {
      Serial.println("Rainbow");
      StripCommander.rainbow();
    319c:	ldr	r0, [pc, #380]	; (331c <serialParse() [clone .part.25]+0x528>)
    319e:	bl	438c <StripCommand::rainbow()>
      LastFrameShowed = false;
    31a2:	ldr	r3, [pc, #392]	; (332c <serialParse() [clone .part.25]+0x538>)
    31a4:	strb	r5, [r3, #0]
    31a6:	b.n	2f08 <serialParse() [clone .part.25]+0x114>
    31a8:	cmp	r4, #0
    31aa:	beq.w	33b0 <serialParse() [clone .part.25]+0x5bc>
    31ae:	mov	r6, r4
    31b0:	b.n	31b6 <serialParse() [clone .part.25]+0x3c2>
    31b2:	ldr	r6, [r6, #0]
    31b4:	cbz	r6, 31da <serialParse() [clone .part.25]+0x3e6>
    31b6:	ldr	r1, [r6, #4]
    31b8:	ldr	r0, [pc, #372]	; (3330 <serialParse() [clone .part.25]+0x53c>)
    31ba:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    31be:	cmp	r0, #0
    31c0:	bne.n	31b2 <serialParse() [clone .part.25]+0x3be>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
    31c2:	ldrb	r3, [r6, #8]
    31c4:	cmp	r3, #5
    31c6:	bhi.w	3674 <serialParse() [clone .part.25]+0x880>
    31ca:	tbh	[pc, r3, lsl #1]
    31ce:	.short	0x0006
    31d0:	.word	0x01290129
    31d4:	.word	0x01230123
    31d8:	.short	0x0125
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    31da:	cmp	r4, #0
    31dc:	beq.w	33b2 <serialParse() [clone .part.25]+0x5be>
    31e0:	movs	r7, #0
    31e2:	mov	r6, r4
    31e4:	b.n	31ee <serialParse() [clone .part.25]+0x3fa>
    31e6:	ldr	r6, [r6, #0]
    31e8:	cmp	r6, #0
    31ea:	beq.w	3388 <serialParse() [clone .part.25]+0x594>
    31ee:	ldr	r1, [r6, #4]
    31f0:	ldr	r0, [pc, #320]	; (3334 <serialParse() [clone .part.25]+0x540>)
    31f2:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    31f6:	cmp	r0, #0
    31f8:	bne.n	31e6 <serialParse() [clone .part.25]+0x3f2>
    31fa:	ldrb	r3, [r6, #8]
    31fc:	cmp	r3, #5
    31fe:	bhi.w	3656 <serialParse() [clone .part.25]+0x862>
    3202:	tbh	[pc, r3, lsl #1]
    3206:	.short	0x00c1
    3208:	.word	0x00fb00fb
    320c:	.word	0x00f900f9
    3210:	.short	0x00f5
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    3212:	cbz	r4, 326e <serialParse() [clone .part.25]+0x47a>
    3214:	mov	r6, r4
    3216:	b.n	321c <serialParse() [clone .part.25]+0x428>
    3218:	ldr	r6, [r6, #0]
    321a:	cbz	r6, 3240 <serialParse() [clone .part.25]+0x44c>
    321c:	ldr	r1, [r6, #4]
    321e:	ldr	r0, [pc, #240]	; (3310 <serialParse() [clone .part.25]+0x51c>)
    3220:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    3224:	cmp	r0, #0
    3226:	bne.n	3218 <serialParse() [clone .part.25]+0x424>
    3228:	ldrb	r3, [r6, #8]
    322a:	cmp	r3, #5
    322c:	bhi.w	36c4 <serialParse() [clone .part.25]+0x8d0>
    3230:	tbh	[pc, r3, lsl #1]
    3234:	.word	0x01330006
    3238:	.word	0x01310133
    323c:	.word	0x012d0131
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    3240:	cbz	r4, 3270 <serialParse() [clone .part.25]+0x47c>
    3242:	movs	r6, #0
    3244:	b.n	324a <serialParse() [clone .part.25]+0x456>
    3246:	ldr	r4, [r4, #0]
    3248:	cbz	r4, 3272 <serialParse() [clone .part.25]+0x47e>
    324a:	ldr	r1, [r4, #4]
    324c:	ldr	r0, [pc, #196]	; (3314 <serialParse() [clone .part.25]+0x520>)
    324e:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    3252:	cmp	r0, #0
    3254:	bne.n	3246 <serialParse() [clone .part.25]+0x452>
    3256:	ldrb	r3, [r4, #8]
    3258:	cmp	r3, #5
    325a:	bhi.w	36b0 <serialParse() [clone .part.25]+0x8bc>
    325e:	tbh	[pc, r3, lsl #1]
    3262:	.short	0x0008
    3264:	.word	0x01090109
    3268:	.word	0x01070107
    326c:	.short	0x0103
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    326e:	movs	r5, #0
    3270:	movs	r6, #0
    case JSON_UNDEFINED:
      return 0;
    3272:	movs	r0, #0
      StripCommander.fadeToHSV(root["H"], root["S"], root["V"], root["Delay"]);
    }
    else if (strcmp(method, "setToRGB") == 0) //{method:setToRGB,R:255,G:100,B:0}
    {
      Serial.println("set to RGB value");
      StripCommander.setToRGB(root["R"], root["G"], root["B"]);
    3274:	mov	r3, r0
    3276:	mov	r2, r6
    3278:	mov	r1, r5
    327a:	ldr	r0, [pc, #160]	; (331c <serialParse() [clone .part.25]+0x528>)
    327c:	bl	4364 <StripCommand::setToRGB(unsigned char, unsigned char, unsigned char)>
      LastFrameShowed = false;
    3280:	ldr	r3, [pc, #168]	; (332c <serialParse() [clone .part.25]+0x538>)
    3282:	movs	r2, #0
    3284:	strb	r2, [r3, #0]
    else
    {
      Serial.println("ca ne marche pas ^^");
    }
  }
}
    3286:	add	sp, #28
    3288:	pop	{r4, r5, r6, r7, pc}
    328a:	cmp	r4, #0
    328c:	beq.w	3502 <serialParse() [clone .part.25]+0x70e>
    3290:	mov	r6, r4
    3292:	b.n	329c <serialParse() [clone .part.25]+0x4a8>
    3294:	ldr	r6, [r6, #0]
    3296:	cmp	r6, #0
    3298:	beq.w	34da <serialParse() [clone .part.25]+0x6e6>
    329c:	ldr	r1, [r6, #4]
    329e:	ldr	r0, [pc, #144]	; (3330 <serialParse() [clone .part.25]+0x53c>)
    32a0:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    32a4:	cmp	r0, #0
    32a6:	bne.n	3294 <serialParse() [clone .part.25]+0x4a0>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
    32a8:	ldrb	r3, [r6, #8]
    32aa:	cmp	r3, #5
    32ac:	bhi.w	36a6 <serialParse() [clone .part.25]+0x8b2>
    32b0:	tbh	[pc, r3, lsl #1]
    32b4:	.word	0x014e0113
    32b8:	.word	0x014c014e
    32bc:	.word	0x0148014c
    32c0:	movs	r5, #0
    32c2:	b.n	305c <serialParse() [clone .part.25]+0x268>
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    32c4:	ldrb	r7, [r6, #12]
    32c6:	b.n	30e6 <serialParse() [clone .part.25]+0x2f2>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    32c8:	ldr	r7, [r6, #12]
    32ca:	cmp	r7, #0
    32cc:	beq.w	30e6 <serialParse() [clone .part.25]+0x2f2>
      if (!strcmp("true", _content.asString)) return 1;
    32d0:	mov	r1, r7
    32d2:	ldr	r0, [pc, #100]	; (3338 <serialParse() [clone .part.25]+0x544>)
    32d4:	bl	bec8 <strcmp>
    32d8:	cmp	r0, #0
    32da:	bne.w	3742 <serialParse() [clone .part.25]+0x94e>
    32de:	movs	r7, #1
    32e0:	b.n	30e6 <serialParse() [clone .part.25]+0x2f2>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    32e2:	ldr	r6, [r6, #12]
    32e4:	negs	r6, r6
    32e6:	uxtb	r6, r6
    32e8:	b.n	311c <serialParse() [clone .part.25]+0x328>
    32ea:	ldr	r5, [r5, #12]
    32ec:	negs	r5, r5
    32ee:	uxtb	r5, r5
    32f0:	b.n	305c <serialParse() [clone .part.25]+0x268>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    32f2:	ldrb	r5, [r5, #12]
    32f4:	b.n	305c <serialParse() [clone .part.25]+0x268>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    32f6:	ldr	r5, [r5, #12]
    32f8:	cmp	r5, #0
    32fa:	beq.w	305c <serialParse() [clone .part.25]+0x268>
      if (!strcmp("true", _content.asString)) return 1;
    32fe:	mov	r1, r5
    3300:	ldr	r0, [pc, #52]	; (3338 <serialParse() [clone .part.25]+0x544>)
    3302:	bl	bec8 <strcmp>
    3306:	cmp	r0, #0
    3308:	bne.w	372e <serialParse() [clone .part.25]+0x93a>
    330c:	movs	r5, #1
    330e:	b.n	305c <serialParse() [clone .part.25]+0x268>
    3310:	.word	0x0000c7c8
    3314:	.word	0x0000c7b8
    3318:	.word	0x0000c7cc
    331c:	.word	0x1fffa3f8
    3320:	.word	0x0000c868
    3324:	.word	0x1fff965c
    3328:	.word	0x0000c830
    332c:	.word	0x1fff9459
    3330:	.word	0x0000c7e4
    3334:	.word	0x0000c7dc
    3338:	.word	0x0000c7c0
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    333c:	ldr	r0, [r4, #12]
    333e:	negs	r0, r0
    3340:	uxth	r0, r0
    3342:	b.n	3148 <serialParse() [clone .part.25]+0x354>
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    3344:	ldr	r6, [r6, #12]
    3346:	cmp	r6, #0
    3348:	beq.w	311c <serialParse() [clone .part.25]+0x328>
      if (!strcmp("true", _content.asString)) return 1;
    334c:	mov	r1, r6
    334e:	ldr	r0, [pc, #588]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    3350:	bl	bec8 <strcmp>
    3354:	cmp	r0, #0
    3356:	bne.w	36e2 <serialParse() [clone .part.25]+0x8ee>
    335a:	movs	r6, #1
    335c:	b.n	311c <serialParse() [clone .part.25]+0x328>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    335e:	ldr	r7, [r6, #12]
    3360:	negs	r7, r7
    3362:	uxtb	r7, r7
    3364:	b.n	30e6 <serialParse() [clone .part.25]+0x2f2>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    3366:	ldrh	r0, [r4, #12]
    3368:	b.n	3148 <serialParse() [clone .part.25]+0x354>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    336a:	ldr	r4, [r4, #12]
    336c:	cmp	r4, #0
    336e:	beq.w	3792 <serialParse() [clone .part.25]+0x99e>
      if (!strcmp("true", _content.asString)) return 1;
    3372:	mov	r1, r4
    3374:	ldr	r0, [pc, #548]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    3376:	bl	bec8 <strcmp>
    337a:	cmp	r0, #0
    337c:	bne.w	36ec <serialParse() [clone .part.25]+0x8f8>
    3380:	movs	r0, #1
    3382:	b.n	3148 <serialParse() [clone .part.25]+0x354>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    3384:	ldrb	r6, [r6, #12]
    3386:	b.n	311c <serialParse() [clone .part.25]+0x328>
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    3388:	cbz	r4, 33b4 <serialParse() [clone .part.25]+0x5c0>
    338a:	movs	r6, #0
    338c:	b.n	3392 <serialParse() [clone .part.25]+0x59e>
    338e:	ldr	r4, [r4, #0]
    3390:	cbz	r4, 33b6 <serialParse() [clone .part.25]+0x5c2>
    3392:	ldr	r1, [r4, #4]
    3394:	ldr	r0, [pc, #520]	; (35a0 <serialParse() [clone .part.25]+0x7ac>)
    3396:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    339a:	cmp	r0, #0
    339c:	bne.n	338e <serialParse() [clone .part.25]+0x59a>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
    339e:	ldrb	r3, [r4, #8]
    33a0:	cmp	r3, #5
    33a2:	bhi.w	366a <serialParse() [clone .part.25]+0x876>
    33a6:	tbb	[pc, r3]
    33aa:	.short	0x1606
    33ac:	.word	0x10141416
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    33b0:	movs	r5, #0
    33b2:	movs	r7, #0
    33b4:	movs	r6, #0
    case JSON_UNDEFINED:
      return 0;
    33b6:	movs	r0, #0
    {
      StripCommander.fadeToRGB(root["R"], root["G"], root["B"], root["Delay"]);
    }
    else if (strcmp(method, "fadeToHSV") == 0) //{method:fadeToHSV,H:160,S:255,V:255,Delay:2000}
    {
      StripCommander.fadeToHSV(root["H"], root["S"], root["V"], root["Delay"]);
    33b8:	str	r0, [sp, #0]
    33ba:	mov	r3, r6
    33bc:	mov	r2, r7
    33be:	mov	r1, r5
    33c0:	ldr	r0, [pc, #480]	; (35a4 <serialParse() [clone .part.25]+0x7b0>)
    33c2:	bl	402c <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)>
    else
    {
      Serial.println("ca ne marche pas ^^");
    }
  }
}
    33c6:	add	sp, #28
    33c8:	pop	{r4, r5, r6, r7, pc}
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    33ca:	ldr	r0, [r4, #12]
    33cc:	negs	r0, r0
    33ce:	uxth	r0, r0
    33d0:	b.n	33b8 <serialParse() [clone .part.25]+0x5c4>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    33d2:	ldrh	r0, [r4, #12]
    33d4:	b.n	33b8 <serialParse() [clone .part.25]+0x5c4>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    33d6:	ldr	r4, [r4, #12]
    33d8:	cmp	r4, #0
    33da:	beq.w	375e <serialParse() [clone .part.25]+0x96a>
      if (!strcmp("true", _content.asString)) return 1;
    33de:	mov	r1, r4
    33e0:	ldr	r0, [pc, #440]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    33e2:	bl	bec8 <strcmp>
    33e6:	cmp	r0, #0
    33e8:	bne.w	374c <serialParse() [clone .part.25]+0x958>
    33ec:	movs	r0, #1
    33ee:	b.n	33b8 <serialParse() [clone .part.25]+0x5c4>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    33f0:	ldr	r3, [r6, #12]
    33f2:	negs	r3, r3
    33f4:	uxth	r6, r3
    33f6:	b.n	3392 <serialParse() [clone .part.25]+0x59e>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    33f8:	ldrh	r6, [r6, #12]
    33fa:	b.n	3392 <serialParse() [clone .part.25]+0x59e>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    33fc:	ldr	r6, [r6, #12]
    33fe:	cmp	r6, #0
    3400:	beq.n	3392 <serialParse() [clone .part.25]+0x59e>
      if (!strcmp("true", _content.asString)) return 1;
    3402:	mov	r1, r6
    3404:	ldr	r0, [pc, #404]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    3406:	bl	bec8 <strcmp>
    340a:	cmp	r0, #0
    340c:	bne.w	3724 <serialParse() [clone .part.25]+0x930>
    3410:	movs	r6, #1
    3412:	b.n	3392 <serialParse() [clone .part.25]+0x59e>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    3414:	ldrh	r7, [r6, #12]
    3416:	b.n	31e2 <serialParse() [clone .part.25]+0x3ee>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    3418:	ldr	r7, [r6, #12]
    341a:	negs	r7, r7
    341c:	uxth	r7, r7
    341e:	b.n	31e2 <serialParse() [clone .part.25]+0x3ee>
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    3420:	ldr	r7, [r6, #12]
    3422:	cmp	r7, #0
    3424:	beq.w	31e2 <serialParse() [clone .part.25]+0x3ee>
      if (!strcmp("true", _content.asString)) return 1;
    3428:	mov	r1, r7
    342a:	ldr	r0, [pc, #368]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    342c:	bl	bec8 <strcmp>
    3430:	cmp	r0, #0
    3432:	bne.w	3706 <serialParse() [clone .part.25]+0x912>
    3436:	movs	r7, #1
    3438:	b.n	31e2 <serialParse() [clone .part.25]+0x3ee>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
    343a:	movs	r5, #0
    343c:	b.n	3214 <serialParse() [clone .part.25]+0x420>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    343e:	ldr	r5, [r5, #12]
    3440:	negs	r5, r5
    3442:	uxth	r5, r5
    3444:	b.n	31ae <serialParse() [clone .part.25]+0x3ba>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    3446:	ldrh	r5, [r5, #12]
    3448:	b.n	31ae <serialParse() [clone .part.25]+0x3ba>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    344a:	ldr	r5, [r5, #12]
    344c:	cmp	r5, #0
    344e:	beq.w	31ae <serialParse() [clone .part.25]+0x3ba>
      if (!strcmp("true", _content.asString)) return 1;
    3452:	mov	r1, r5
    3454:	ldr	r0, [pc, #324]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    3456:	bl	bec8 <strcmp>
    345a:	cmp	r0, #0
    345c:	bne.w	3738 <serialParse() [clone .part.25]+0x944>
    3460:	movs	r5, #1
    3462:	b.n	31ae <serialParse() [clone .part.25]+0x3ba>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
    3464:	movs	r5, #0
    3466:	b.n	31ae <serialParse() [clone .part.25]+0x3ba>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    3468:	ldr	r0, [r4, #12]
    346a:	negs	r0, r0
    346c:	uxtb	r0, r0
    346e:	b.n	3274 <serialParse() [clone .part.25]+0x480>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    3470:	ldrb	r0, [r4, #12]
    3472:	b.n	3274 <serialParse() [clone .part.25]+0x480>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    3474:	ldr	r4, [r4, #12]
    3476:	cmp	r4, #0
    3478:	beq.w	3784 <serialParse() [clone .part.25]+0x990>
      if (!strcmp("true", _content.asString)) return 1;
    347c:	mov	r1, r4
    347e:	ldr	r0, [pc, #284]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    3480:	bl	bec8 <strcmp>
    3484:	cmp	r0, #0
    3486:	bne.w	36fe <serialParse() [clone .part.25]+0x90a>
    348a:	movs	r0, #1
    348c:	b.n	3274 <serialParse() [clone .part.25]+0x480>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    348e:	ldr	r6, [r6, #12]
    3490:	negs	r6, r6
    3492:	uxtb	r6, r6
    3494:	b.n	324a <serialParse() [clone .part.25]+0x456>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    3496:	ldrb	r6, [r6, #12]
    3498:	b.n	324a <serialParse() [clone .part.25]+0x456>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    349a:	ldr	r6, [r6, #12]
    349c:	cmp	r6, #0
    349e:	beq.w	324a <serialParse() [clone .part.25]+0x456>
      if (!strcmp("true", _content.asString)) return 1;
    34a2:	mov	r1, r6
    34a4:	ldr	r0, [pc, #244]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    34a6:	bl	bec8 <strcmp>
    34aa:	cmp	r0, #0
    34ac:	bne.w	36d8 <serialParse() [clone .part.25]+0x8e4>
    34b0:	movs	r6, #1
    34b2:	b.n	324a <serialParse() [clone .part.25]+0x456>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    34b4:	ldrb	r5, [r5, #12]
    34b6:	b.n	3214 <serialParse() [clone .part.25]+0x420>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    34b8:	ldr	r5, [r5, #12]
    34ba:	negs	r5, r5
    34bc:	uxtb	r5, r5
    34be:	b.n	3214 <serialParse() [clone .part.25]+0x420>
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    34c0:	ldr	r5, [r5, #12]
    34c2:	cmp	r5, #0
    34c4:	beq.w	3214 <serialParse() [clone .part.25]+0x420>
      if (!strcmp("true", _content.asString)) return 1;
    34c8:	mov	r1, r5
    34ca:	ldr	r0, [pc, #208]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    34cc:	bl	bec8 <strcmp>
    34d0:	cmp	r0, #0
    34d2:	bne.w	36f4 <serialParse() [clone .part.25]+0x900>
    34d6:	movs	r5, #1
    34d8:	b.n	3214 <serialParse() [clone .part.25]+0x420>
    34da:	cbz	r4, 3504 <serialParse() [clone .part.25]+0x710>
    34dc:	movs	r6, #0
    34de:	b.n	34e4 <serialParse() [clone .part.25]+0x6f0>
    34e0:	ldr	r4, [r4, #0]
    34e2:	cbz	r4, 3506 <serialParse() [clone .part.25]+0x712>
    34e4:	ldr	r1, [r4, #4]
    34e6:	ldr	r0, [pc, #192]	; (35a8 <serialParse() [clone .part.25]+0x7b4>)
    34e8:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    34ec:	cmp	r0, #0
    34ee:	bne.n	34e0 <serialParse() [clone .part.25]+0x6ec>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
    34f0:	ldrb	r3, [r4, #8]
    34f2:	cmp	r3, #5
    34f4:	bhi.w	36ce <serialParse() [clone .part.25]+0x8da>
    34f8:	tbb	[pc, r3]
    34fc:	.word	0x15171705
    3500:	.short	0x1115
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    3502:	movs	r5, #0
    3504:	movs	r6, #0
    case JSON_UNDEFINED:
      return 0;
    3506:	movs	r0, #0
      LastFrameShowed = false;
    }
    else if (strcmp(method, "setToHSV") == 0) //{method:setToHSV,H:255,S:100,V:0}
    {
      Serial.println("set to HSV value");
      StripCommander.setToHSV(root["H"], root["S"], root["V"]);
    3508:	mov	r3, r0
    350a:	mov	r2, r6
    350c:	mov	r1, r5
    350e:	ldr	r0, [pc, #148]	; (35a4 <serialParse() [clone .part.25]+0x7b0>)
    3510:	bl	42fc <StripCommand::setToHSV(unsigned short, unsigned short, unsigned short)>
      LastFrameShowed = false;
    3514:	ldr	r3, [pc, #148]	; (35ac <serialParse() [clone .part.25]+0x7b8>)
    3516:	movs	r2, #0
    3518:	strb	r2, [r3, #0]
    else
    {
      Serial.println("ca ne marche pas ^^");
    }
  }
}
    351a:	add	sp, #28
    351c:	pop	{r4, r5, r6, r7, pc}
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    351e:	ldr	r0, [r4, #12]
    3520:	negs	r0, r0
    3522:	uxth	r0, r0
    3524:	b.n	3508 <serialParse() [clone .part.25]+0x714>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    3526:	ldrh	r0, [r4, #12]
    3528:	b.n	3508 <serialParse() [clone .part.25]+0x714>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    352a:	ldr	r4, [r4, #12]
    352c:	cmp	r4, #0
    352e:	beq.w	376a <serialParse() [clone .part.25]+0x976>
      if (!strcmp("true", _content.asString)) return 1;
    3532:	mov	r1, r4
    3534:	ldr	r0, [pc, #100]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    3536:	bl	bec8 <strcmp>
    353a:	cmp	r0, #0
    353c:	bne.w	3762 <serialParse() [clone .part.25]+0x96e>
    3540:	movs	r0, #1
    3542:	b.n	3508 <serialParse() [clone .part.25]+0x714>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    3544:	ldr	r6, [r6, #12]
    3546:	negs	r6, r6
    3548:	uxth	r6, r6
    354a:	b.n	34e4 <serialParse() [clone .part.25]+0x6f0>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    354c:	ldrh	r6, [r6, #12]
    354e:	b.n	34e4 <serialParse() [clone .part.25]+0x6f0>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    3550:	ldr	r6, [r6, #12]
    3552:	cmp	r6, #0
    3554:	beq.n	34e4 <serialParse() [clone .part.25]+0x6f0>
      if (!strcmp("true", _content.asString)) return 1;
    3556:	mov	r1, r6
    3558:	ldr	r0, [pc, #64]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    355a:	bl	bec8 <strcmp>
    355e:	cmp	r0, #0
    3560:	bne.w	3788 <serialParse() [clone .part.25]+0x994>
    3564:	movs	r6, #1
    3566:	b.n	34e4 <serialParse() [clone .part.25]+0x6f0>
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    3568:	ldr	r5, [r5, #12]
    356a:	cmp	r5, #0
    356c:	beq.w	3290 <serialParse() [clone .part.25]+0x49c>
      if (!strcmp("true", _content.asString)) return 1;
    3570:	mov	r1, r5
    3572:	ldr	r0, [pc, #40]	; (359c <serialParse() [clone .part.25]+0x7a8>)
    3574:	bl	bec8 <strcmp>
    3578:	cmp	r0, #0
    357a:	bne.w	3754 <serialParse() [clone .part.25]+0x960>
    357e:	movs	r5, #1
    3580:	b.n	3290 <serialParse() [clone .part.25]+0x49c>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
    3582:	movs	r5, #0
    3584:	b.n	3290 <serialParse() [clone .part.25]+0x49c>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    3586:	ldr	r5, [r5, #12]
    3588:	negs	r5, r5
    358a:	uxth	r5, r5
    358c:	b.n	3290 <serialParse() [clone .part.25]+0x49c>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    358e:	ldrh	r5, [r5, #12]
    3590:	b.n	3290 <serialParse() [clone .part.25]+0x49c>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    3592:	ldr	r4, [r4, #12]
    3594:	negs	r4, r4
    3596:	uxtb	r4, r4
    3598:	b.n	35b4 <serialParse() [clone .part.25]+0x7c0>
    359a:	nop
    359c:	.word	0x0000c7c0
    35a0:	.word	0x0000c7cc
    35a4:	.word	0x1fffa3f8
    35a8:	.word	0x0000c7dc
    35ac:	.word	0x1fff9459
    35b0:	ldr	r5, [r5, #0]
    35b2:	cbz	r5, 35d8 <serialParse() [clone .part.25]+0x7e4>
    35b4:	ldr	r1, [r5, #4]
    35b6:	ldr	r0, [pc, #480]	; (3798 <serialParse() [clone .part.25]+0x9a4>)
    35b8:	bl	bec8 <strcmp>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
    35bc:	cmp	r0, #0
    35be:	bne.n	35b0 <serialParse() [clone .part.25]+0x7bc>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
    35c0:	ldrb	r3, [r5, #8]
    35c2:	cmp	r3, #5
    35c4:	bhi.w	3710 <serialParse() [clone .part.25]+0x91c>
    35c8:	tbb	[pc, r3]
    35cc:	.word	0x11131306
    35d0:	.short	0x0d11
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
    35d2:	cmp	r5, #0
    35d4:	bne.n	35b4 <serialParse() [clone .part.25]+0x7c0>
    35d6:	movs	r4, #0
    case JSON_UNDEFINED:
      return 0;
    35d8:	movs	r0, #0
        StripCommander.flash(random(0, NUM_LEDS));
      }
    }
    else if (strcmp(method, "groupFlash") == 0) //{method:groupFlash,Group:0,Direction:1}
    {
      StripCommander.groupFlash(root["Group"], root["Direction"]);
    35da:	mov	r2, r0
    35dc:	mov	r1, r4
    35de:	ldr	r0, [pc, #444]	; (379c <serialParse() [clone .part.25]+0x9a8>)
    35e0:	bl	3f14 <StripCommand::groupFlash(unsigned char, unsigned char)>
    35e4:	b.n	2f08 <serialParse() [clone .part.25]+0x114>
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    35e6:	ldr	r0, [r5, #12]
    35e8:	negs	r0, r0
    35ea:	uxtb	r0, r0
    35ec:	b.n	35da <serialParse() [clone .part.25]+0x7e6>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    35ee:	ldrb	r0, [r5, #12]
    35f0:	b.n	35da <serialParse() [clone .part.25]+0x7e6>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    35f2:	ldr	r5, [r5, #12]
    35f4:	cmp	r5, #0
    35f6:	beq.w	3776 <serialParse() [clone .part.25]+0x982>
      if (!strcmp("true", _content.asString)) return 1;
    35fa:	mov	r1, r5
    35fc:	ldr	r0, [pc, #416]	; (37a0 <serialParse() [clone .part.25]+0x9ac>)
    35fe:	bl	bec8 <strcmp>
    3602:	cmp	r0, #0
    3604:	bne.w	376e <serialParse() [clone .part.25]+0x97a>
    3608:	movs	r0, #1
    360a:	b.n	35da <serialParse() [clone .part.25]+0x7e6>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    360c:	ldrb	r4, [r4, #12]
    360e:	b.n	35b4 <serialParse() [clone .part.25]+0x7c0>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    3610:	ldr	r4, [r4, #12]
    3612:	cmp	r4, #0
    3614:	beq.n	35b4 <serialParse() [clone .part.25]+0x7c0>
      if (!strcmp("true", _content.asString)) return 1;
    3616:	mov	r1, r4
    3618:	ldr	r0, [pc, #388]	; (37a0 <serialParse() [clone .part.25]+0x9ac>)
    361a:	bl	bec8 <strcmp>
    361e:	cmp	r0, #0
    3620:	bne.w	377a <serialParse() [clone .part.25]+0x986>
    3624:	movs	r4, #1
    3626:	b.n	35b4 <serialParse() [clone .part.25]+0x7c0>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
    3628:	movs	r4, #0
    362a:	b.n	35b4 <serialParse() [clone .part.25]+0x7c0>
    362c:	movs	r1, #17
    362e:	ldr	r0, [pc, #372]	; (37a4 <serialParse() [clone .part.25]+0x9b0>)
    3630:	bl	8dec <usb_serial_write>
      }
}

void startThunder()
{
  T1.trig(&ThunderCenter);
    3634:	ldr	r1, [pc, #368]	; (37a8 <serialParse() [clone .part.25]+0x9b4>)
    3636:	ldr	r0, [pc, #372]	; (37ac <serialParse() [clone .part.25]+0x9b8>)
    3638:	bl	3d10 <Thunder::trig(AudioPlaySdWav*)>
    363c:	b.n	2f08 <serialParse() [clone .part.25]+0x114>
    {
      StripCommander.groupFlash(root["Group"], root["Direction"]);
    }
    else if (strcmp(method, "rdmGroupFlash") == 0) //{method:rdmGroupFlash}
    {
      StripCommander.groupFlash();
    363e:	ldr	r0, [pc, #348]	; (379c <serialParse() [clone .part.25]+0x9a8>)
    3640:	bl	3fcc <StripCommand::groupFlash()>
    3644:	b.n	2f08 <serialParse() [clone .part.25]+0x114>
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
    default:
      return static_cast<T>(_content.asFloat);
    3646:	ldr	r0, [r5, #12]
    3648:	bl	b668 <__aeabi_f2uiz>
    364c:	uxtb	r5, r0
    364e:	b.n	305c <serialParse() [clone .part.25]+0x268>
    }
    else if (strcmp(method, "rain") == 0) //{method:rain}
    {
      toggleRain();
    3650:	bl	2178 <toggleRain()>
    3654:	b.n	2f08 <serialParse() [clone .part.25]+0x114>
    3656:	ldr	r0, [r6, #12]
    3658:	bl	b668 <__aeabi_f2uiz>
    365c:	uxth	r6, r0
    365e:	b.n	3392 <serialParse() [clone .part.25]+0x59e>
    3660:	ldr	r0, [r6, #12]
    3662:	bl	b668 <__aeabi_f2uiz>
    3666:	uxtb	r7, r0
    3668:	b.n	30e6 <serialParse() [clone .part.25]+0x2f2>
    366a:	ldr	r0, [r4, #12]
    366c:	bl	b668 <__aeabi_f2uiz>
    3670:	uxth	r0, r0
    3672:	b.n	33b8 <serialParse() [clone .part.25]+0x5c4>
    3674:	ldr	r0, [r6, #12]
    3676:	bl	b668 <__aeabi_f2uiz>
    367a:	uxth	r7, r0
    367c:	b.n	31e2 <serialParse() [clone .part.25]+0x3ee>
    367e:	ldr	r0, [r5, #12]
    3680:	bl	b668 <__aeabi_f2uiz>
    3684:	uxth	r5, r0
    3686:	b.n	31ae <serialParse() [clone .part.25]+0x3ba>
    3688:	ldr	r0, [r6, #12]
    368a:	bl	b668 <__aeabi_f2uiz>
    368e:	uxtb	r6, r0
    3690:	b.n	311c <serialParse() [clone .part.25]+0x328>
    3692:	ldr	r0, [r4, #12]
    3694:	bl	b668 <__aeabi_f2uiz>
    3698:	uxth	r0, r0
    369a:	b.n	3148 <serialParse() [clone .part.25]+0x354>
    369c:	ldr	r0, [r5, #12]
    369e:	bl	b668 <__aeabi_f2uiz>
    36a2:	uxth	r5, r0
    36a4:	b.n	3290 <serialParse() [clone .part.25]+0x49c>
    36a6:	ldr	r0, [r6, #12]
    36a8:	bl	b668 <__aeabi_f2uiz>
    36ac:	uxth	r6, r0
    36ae:	b.n	34e4 <serialParse() [clone .part.25]+0x6f0>
    36b0:	ldr	r0, [r4, #12]
    36b2:	bl	b668 <__aeabi_f2uiz>
    36b6:	uxtb	r0, r0
    36b8:	b.n	3274 <serialParse() [clone .part.25]+0x480>
    36ba:	ldr	r0, [r5, #12]
    36bc:	bl	b668 <__aeabi_f2uiz>
    36c0:	uxtb	r5, r0
    36c2:	b.n	3214 <serialParse() [clone .part.25]+0x420>
    36c4:	ldr	r0, [r6, #12]
    36c6:	bl	b668 <__aeabi_f2uiz>
    36ca:	uxtb	r6, r0
    36cc:	b.n	324a <serialParse() [clone .part.25]+0x456>
    36ce:	ldr	r0, [r4, #12]
    36d0:	bl	b668 <__aeabi_f2uiz>
    36d4:	uxth	r0, r0
    36d6:	b.n	3508 <serialParse() [clone .part.25]+0x714>
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
    36d8:	mov	r0, r6
    36da:	bl	2d3c <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)>
    36de:	mov	r6, r0
    36e0:	b.n	324a <serialParse() [clone .part.25]+0x456>
    36e2:	mov	r0, r6
    36e4:	bl	2d3c <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)>
    36e8:	mov	r6, r0
    36ea:	b.n	311c <serialParse() [clone .part.25]+0x328>
    36ec:	mov	r0, r4
    36ee:	bl	2d98 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)>
    36f2:	b.n	3148 <serialParse() [clone .part.25]+0x354>
    36f4:	mov	r0, r5
    36f6:	bl	2d3c <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)>
    36fa:	mov	r5, r0
    36fc:	b.n	3214 <serialParse() [clone .part.25]+0x420>
    36fe:	mov	r0, r4
    3700:	bl	2d3c <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)>
    3704:	b.n	3274 <serialParse() [clone .part.25]+0x480>
    3706:	mov	r0, r7
    3708:	bl	2d98 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)>
    370c:	mov	r7, r0
    370e:	b.n	31e2 <serialParse() [clone .part.25]+0x3ee>
    default:
      return static_cast<T>(_content.asFloat);
    3710:	ldr	r0, [r5, #12]
    3712:	bl	b668 <__aeabi_f2uiz>
    3716:	uxtb	r0, r0
    3718:	b.n	35da <serialParse() [clone .part.25]+0x7e6>
    371a:	ldr	r0, [r4, #12]
    371c:	bl	b668 <__aeabi_f2uiz>
    3720:	uxtb	r4, r0
    3722:	b.n	35b4 <serialParse() [clone .part.25]+0x7c0>
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
    3724:	mov	r0, r6
    3726:	bl	2d98 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)>
    372a:	mov	r6, r0
    372c:	b.n	3392 <serialParse() [clone .part.25]+0x59e>
    372e:	mov	r0, r5
    3730:	bl	2d3c <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)>
    3734:	mov	r5, r0
    3736:	b.n	305c <serialParse() [clone .part.25]+0x268>
    3738:	mov	r0, r5
    373a:	bl	2d98 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)>
    373e:	mov	r5, r0
    3740:	b.n	31ae <serialParse() [clone .part.25]+0x3ba>
    3742:	mov	r0, r7
    3744:	bl	2d3c <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)>
    3748:	mov	r7, r0
    374a:	b.n	30e6 <serialParse() [clone .part.25]+0x2f2>
    374c:	mov	r0, r4
    374e:	bl	2d98 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)>
    3752:	b.n	33b8 <serialParse() [clone .part.25]+0x5c4>
    3754:	mov	r0, r5
    3756:	bl	2d98 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)>
    375a:	mov	r5, r0
    375c:	b.n	3290 <serialParse() [clone .part.25]+0x49c>
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    375e:	mov	r0, r4
    3760:	b.n	33b8 <serialParse() [clone .part.25]+0x5c4>
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
    3762:	mov	r0, r4
    3764:	bl	2d98 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)>
    3768:	b.n	3508 <serialParse() [clone .part.25]+0x714>
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    376a:	mov	r0, r4
    376c:	b.n	3508 <serialParse() [clone .part.25]+0x714>
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
    376e:	mov	r0, r5
    3770:	bl	2d3c <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)>
    3774:	b.n	35da <serialParse() [clone .part.25]+0x7e6>
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    3776:	mov	r0, r5
    3778:	b.n	35da <serialParse() [clone .part.25]+0x7e6>
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
    377a:	mov	r0, r4
    377c:	bl	2d3c <unsigned char ArduinoJson::Polyfills::parseInteger<unsigned char>(char const*)>
    3780:	mov	r4, r0
    3782:	b.n	35b4 <serialParse() [clone .part.25]+0x7c0>
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    3784:	mov	r0, r4
    3786:	b.n	3274 <serialParse() [clone .part.25]+0x480>
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
    3788:	mov	r0, r6
    378a:	bl	2d98 <unsigned short ArduinoJson::Polyfills::parseInteger<unsigned short>(char const*)>
    378e:	mov	r6, r0
    3790:	b.n	34e4 <serialParse() [clone .part.25]+0x6f0>
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
    3792:	mov	r0, r4
    3794:	b.n	3148 <serialParse() [clone .part.25]+0x354>
    3796:	nop
    3798:	.word	0x0000c854
    379c:	.word	0x1fffa3f8
    37a0:	.word	0x0000c7c0
    37a4:	.word	0x0000c880
    37a8:	.word	0x1fffaee0
    37ac:	.word	0x1fffa2a4

000037b0 <taskManager()>:
{
  taskManager();
}

void taskManager()
{
    37b0:	push	{lr}
    37b2:	sub	sp, #12
  IR_Management();
    37b4:	bl	21a0 <IR_Management()>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    37b8:	bl	8d98 <usb_serial_available>



void serialParse()
{
  if (Serial.available()) {
    37bc:	cbnz	r0, 37fe <taskManager()+0x4e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37be:	ldr	r1, [pc, #104]	; (3828 <taskManager()+0x78>)
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    37c0:	ldr	r2, [pc, #104]	; (382c <taskManager()+0x7c>)
    37c2:	ldr	r3, [r1, #0]
    37c4:	str	r3, [sp, #0]
	return ret;
    37c6:	ldr	r3, [sp, #0]
{
  IR_Management();

  serialParse();

  if (RefreshOutputTimer >= OUTPUT_REFRESH_RATE)
    37c8:	ldr	r0, [r2, #0]
    37ca:	subs	r3, r3, r0
    37cc:	cmp	r3, #6
    37ce:	bhi.n	37d6 <taskManager()+0x26>
      LastFrameShowed = true;
      FastLED.show();
    }
    StripCommander.dynamicStateUpdate();
  }
}
    37d0:	add	sp, #12
    37d2:	ldr.w	pc, [sp], #4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37d6:	ldr	r3, [r1, #0]
    37d8:	str	r3, [sp, #4]
	return ret;
    37da:	ldr	r3, [sp, #4]
  serialParse();

  if (RefreshOutputTimer >= OUTPUT_REFRESH_RATE)
  {
    RefreshOutputTimer = 0;
    T1.Update();
    37dc:	ldr	r0, [pc, #80]	; (3830 <taskManager()+0x80>)
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    37de:	str	r3, [r2, #0]
    37e0:	bl	3c28 <Thunder::Update()>
    if (StripCommander.RunningFX)  //Update output only if necessary, RefreshOutputTimer is reset only if frame is displayed ==> As soon as one frame il
    37e4:	ldr	r3, [pc, #76]	; (3834 <taskManager()+0x84>)
    37e6:	ldrb.w	r2, [r3, #245]	; 0xf5
    37ea:	cbnz	r2, 3812 <taskManager()+0x62>
    {
      StripCommander.StateChanged = false;
      FastLED.show();
    }
    else if (!LastFrameShowed)  //Show one more frame after RunningFX has been reset to be sure last effect iteration has been showed.
    37ec:	ldr	r3, [pc, #72]	; (3838 <taskManager()+0x88>)
    37ee:	ldrb	r2, [r3, #0]
    37f0:	cbz	r2, 3804 <taskManager()+0x54>
    {
      LastFrameShowed = true;
      FastLED.show();
    }
    StripCommander.dynamicStateUpdate();
    37f2:	ldr	r0, [pc, #64]	; (3834 <taskManager()+0x84>)
    37f4:	bl	43bc <StripCommand::dynamicStateUpdate()>
  }
}
    37f8:	add	sp, #12
    37fa:	ldr.w	pc, [sp], #4
    37fe:	bl	2df4 <serialParse() [clone .part.25]>
    3802:	b.n	37be <taskManager()+0xe>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    3804:	ldr	r0, [pc, #52]	; (383c <taskManager()+0x8c>)
      StripCommander.StateChanged = false;
      FastLED.show();
    }
    else if (!LastFrameShowed)  //Show one more frame after RunningFX has been reset to be sure last effect iteration has been showed.
    {
      LastFrameShowed = true;
    3806:	movs	r2, #1
    3808:	ldrb	r1, [r0, #0]
    380a:	strb	r2, [r3, #0]
    380c:	bl	56a0 <CFastLED::show(unsigned char)>
    3810:	b.n	37f2 <taskManager()+0x42>
    3812:	ldr	r0, [pc, #40]	; (383c <taskManager()+0x8c>)
  {
    RefreshOutputTimer = 0;
    T1.Update();
    if (StripCommander.RunningFX)  //Update output only if necessary, RefreshOutputTimer is reset only if frame is displayed ==> As soon as one frame il
    {
      StripCommander.StateChanged = false;
    3814:	movs	r2, #0
    3816:	ldrb	r1, [r0, #0]
    3818:	strb.w	r2, [r3, #230]	; 0xe6
    381c:	bl	56a0 <CFastLED::show(unsigned char)>
    else if (!LastFrameShowed)  //Show one more frame after RunningFX has been reset to be sure last effect iteration has been showed.
    {
      LastFrameShowed = true;
      FastLED.show();
    }
    StripCommander.dynamicStateUpdate();
    3820:	ldr	r0, [pc, #16]	; (3834 <taskManager()+0x84>)
    3822:	bl	43bc <StripCommand::dynamicStateUpdate()>
    3826:	b.n	37f8 <taskManager()+0x48>
    3828:	.word	0x1fffbccc
    382c:	.word	0x1fffaea0
    3830:	.word	0x1fffa2a4
    3834:	.word	0x1fffa3f8
    3838:	.word	0x1fff9459
    383c:	.word	0x1fffb888

00003840 <loop>:
  FastLED.show();   //Clear all LEDs
}

void loop()
{
  taskManager();
    3840:	b.w	37b0 <taskManager()>

00003844 <_GLOBAL__sub_I_IRcmdCommands>:
}

void startThunder()
{
  T1.trig(&ThunderCenter);
    3844:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NO_CMD,
  RPT
} ircmd;

ircmd MyCMD = NO_CMD;
IRrecv IR(IR_PIN);
    3848:	movs	r1, #8
    384a:	sub	sp, #20
    384c:	ldr	r0, [pc, #780]	; (3b5c <_GLOBAL__sub_I_IRcmdCommands+0x318>)

class AudioMixer4 : public AudioStream
{
#if defined(__ARM_ARCH_7EM__)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    384e:	ldr	r7, [pc, #784]	; (3b60 <_GLOBAL__sub_I_IRcmdCommands+0x31c>)
    3850:	ldr	r6, [pc, #784]	; (3b64 <_GLOBAL__sub_I_IRcmdCommands+0x320>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    3852:	ldr	r5, [pc, #788]	; (3b68 <_GLOBAL__sub_I_IRcmdCommands+0x324>)
    3854:	ldr.w	r9, [pc, #872]	; 3bc0 <_GLOBAL__sub_I_IRcmdCommands+0x37c>
    3858:	bl	6360 <IRrecv::IRrecv(int)>
#include "StripCommand.h"
#include "IRdefine.h"
#include "Thunder.h"


StripCommand StripCommander;
    385c:	ldr	r0, [pc, #780]	; (3b6c <_GLOBAL__sub_I_IRcmdCommands+0x328>)
    385e:	bl	3dd8 <StripCommand::StripCommand()>

Thunder T1 = Thunder("THUNDER.WAV", &StripCommander);
    3862:	ldr	r2, [pc, #776]	; (3b6c <_GLOBAL__sub_I_IRcmdCommands+0x328>)
    3864:	ldr	r1, [pc, #776]	; (3b70 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
    3866:	ldr	r0, [pc, #780]	; (3b74 <_GLOBAL__sub_I_IRcmdCommands+0x330>)
    3868:	bl	3bf0 <Thunder::Thunder(char const*, StripCommand*)>
Thunder T2 = Thunder("THUNDER.WAV", &StripCommander);
    386c:	ldr	r2, [pc, #764]	; (3b6c <_GLOBAL__sub_I_IRcmdCommands+0x328>)
    386e:	ldr	r1, [pc, #768]	; (3b70 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
    3870:	ldr	r0, [pc, #772]	; (3b78 <_GLOBAL__sub_I_IRcmdCommands+0x334>)
    3872:	bl	3bf0 <Thunder::Thunder(char const*, StripCommand*)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3876:	ldr	r2, [pc, #772]	; (3b7c <_GLOBAL__sub_I_IRcmdCommands+0x338>)
    uint8_t data[1];
  };

 public:
  DynamicJsonBufferBase(size_t initialSize = 256)
      : _head(NULL), _nextBlockCapacity(initialSize) {}
    3878:	ldr	r3, [pc, #772]	; (3b80 <_GLOBAL__sub_I_IRcmdCommands+0x33c>)
    387a:	ldr	r1, [r2, #0]
    387c:	str	r1, [sp, #8]
	return ret;
    387e:	ldr	r4, [sp, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3880:	ldr	r2, [r2, #0]
    3882:	str	r2, [sp, #12]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    3884:	ldr	r1, [pc, #764]	; (3b84 <_GLOBAL__sub_I_IRcmdCommands+0x340>)
	return ret;
    3886:	ldr	r0, [sp, #12]
    3888:	ldr	r2, [pc, #764]	; (3b88 <_GLOBAL__sub_I_IRcmdCommands+0x344>)
    388a:	str	r0, [r1, #0]
    388c:	mov.w	r1, #256	; 0x100
    3890:	str	r1, [r3, #12]
elapsedMillis IRRepeatTimeout = 0;
#define IR_REPEAT_TIMEOUT 200

boolean LastFrameShowed = true;

DynamicJsonBuffer jsonBuffer;
    3892:	mov	r0, r3
    3894:	mov.w	r8, #0
    3898:	str	r4, [r2, #0]
    389a:	ldr	r1, [pc, #752]	; (3b8c <_GLOBAL__sub_I_IRcmdCommands+0x348>)
    389c:	ldr	r2, [pc, #752]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    389e:	ldr	r4, [pc, #756]	; (3b94 <_GLOBAL__sub_I_IRcmdCommands+0x350>)
    38a0:	str	r4, [r3, #0]
    38a2:	str.w	r8, [r3, #8]
    38a6:	bl	b6a8 <__aeabi_atexit>
char input[100];


// GUItool: begin automatically generated code
AudioPlaySdWav           Rain;     //xy=102,155
    38aa:	ldr	r0, [pc, #748]	; (3b98 <_GLOBAL__sub_I_IRcmdCommands+0x354>)
    38ac:	bl	1df0 <AudioPlaySdWav::AudioPlaySdWav()>
    38b0:	ldr	r2, [pc, #732]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    38b2:	ldr	r1, [pc, #744]	; (3b9c <_GLOBAL__sub_I_IRcmdCommands+0x358>)
    38b4:	ldr	r0, [pc, #736]	; (3b98 <_GLOBAL__sub_I_IRcmdCommands+0x354>)
    38b6:	bl	b6a8 <__aeabi_atexit>
AudioPlaySdWav           ThunderLeft;     //xy=112,285
    38ba:	ldr	r0, [pc, #740]	; (3ba0 <_GLOBAL__sub_I_IRcmdCommands+0x35c>)
    38bc:	bl	1df0 <AudioPlaySdWav::AudioPlaySdWav()>
    38c0:	ldr	r2, [pc, #716]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    38c2:	ldr	r1, [pc, #728]	; (3b9c <_GLOBAL__sub_I_IRcmdCommands+0x358>)
    38c4:	ldr	r0, [pc, #728]	; (3ba0 <_GLOBAL__sub_I_IRcmdCommands+0x35c>)
    38c6:	bl	b6a8 <__aeabi_atexit>
AudioPlaySdWav           ThunderRight;     //xy=114,336
    38ca:	ldr	r0, [pc, #728]	; (3ba4 <_GLOBAL__sub_I_IRcmdCommands+0x360>)
    38cc:	bl	1df0 <AudioPlaySdWav::AudioPlaySdWav()>
    38d0:	ldr	r2, [pc, #700]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    38d2:	ldr	r1, [pc, #712]	; (3b9c <_GLOBAL__sub_I_IRcmdCommands+0x358>)
    38d4:	ldr	r0, [pc, #716]	; (3ba4 <_GLOBAL__sub_I_IRcmdCommands+0x360>)
    38d6:	bl	b6a8 <__aeabi_atexit>
AudioPlaySdWav           ThunderCenter;     //xy=115,401
    38da:	ldr	r0, [pc, #716]	; (3ba8 <_GLOBAL__sub_I_IRcmdCommands+0x364>)
    38dc:	bl	1df0 <AudioPlaySdWav::AudioPlaySdWav()>
    38e0:	ldr	r2, [pc, #684]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    38e2:	ldr	r1, [pc, #696]	; (3b9c <_GLOBAL__sub_I_IRcmdCommands+0x358>)
    38e4:	ldr	r0, [pc, #704]	; (3ba8 <_GLOBAL__sub_I_IRcmdCommands+0x364>)
    38e6:	bl	b6a8 <__aeabi_atexit>
    38ea:	add.w	r2, r7, #40	; 0x28
    38ee:	movs	r1, #4
    38f0:	mov	r0, r7
    38f2:	bl	1da0 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    38f6:	mov.w	r4, #65536	; 0x10000

class AudioMixer4 : public AudioStream
{
#if defined(__ARM_ARCH_7EM__)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    38fa:	add.w	r2, r6, #40	; 0x28
    38fe:	movs	r1, #4
    3900:	mov	r0, r6
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    3902:	str	r4, [r7, #24]
    3904:	str	r4, [r7, #28]
    3906:	str	r4, [r7, #32]
    3908:	str	r4, [r7, #36]	; 0x24

class AudioMixer4 : public AudioStream
{
#if defined(__ARM_ARCH_7EM__)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    390a:	str.w	r9, [r7]
    390e:	bl	1da0 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    3912:	ldr.w	lr, [pc, #688]	; 3bc4 <_GLOBAL__sub_I_IRcmdCommands+0x380>
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    3916:	str	r4, [r6, #24]
    3918:	movs	r0, #2
    391a:	add.w	r2, r5, #24
    391e:	str	r4, [r6, #28]
    3920:	str	r4, [r6, #32]
    3922:	str	r4, [r6, #36]	; 0x24
			active = false;
			destination_list = NULL;
    3924:	mov	r3, r8

class AudioMixer4 : public AudioStream
{
#if defined(__ARM_ARCH_7EM__)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    3926:	str.w	r9, [r6]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
    392a:	mov	r1, r8
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
    392c:	strb.w	r8, [r5, #8]
			destination_list = NULL;
    3930:	str.w	r8, [r5, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    3934:	str.w	lr, [r5]
    3938:	strb	r0, [r5, #9]
    393a:	str	r2, [r5, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    393c:	mov	r4, r5
    393e:	b.n	3942 <_GLOBAL__sub_I_IRcmdCommands+0xfe>
    3940:	ldr	r2, [r4, #16]
				inputQueue[i] = NULL;
    3942:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    3946:	ldrb	r2, [r5, #9]
    3948:	ldr	r0, [pc, #540]	; (3b68 <_GLOBAL__sub_I_IRcmdCommands+0x324>)
    394a:	adds	r3, #1
    394c:	cmp	r2, r3
    394e:	bgt.n	3940 <_GLOBAL__sub_I_IRcmdCommands+0xfc>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    3950:	ldr	r3, [pc, #600]	; (3bac <_GLOBAL__sub_I_IRcmdCommands+0x368>)
    3952:	ldr	r2, [r3, #0]
    3954:	cbnz	r2, 395a <_GLOBAL__sub_I_IRcmdCommands+0x116>
    3956:	b.n	3b58 <_GLOBAL__sub_I_IRcmdCommands+0x314>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    3958:	mov	r2, r3
    395a:	ldr	r3, [r2, #20]
    395c:	cmp	r3, #0
    395e:	bne.n	3958 <_GLOBAL__sub_I_IRcmdCommands+0x114>
				p->next_update = this;
    3960:	str	r5, [r2, #20]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3962:	ldr.w	sl, [pc, #612]	; 3bc8 <_GLOBAL__sub_I_IRcmdCommands+0x384>
#include "DMAChannel.h"

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
    3966:	ldr	r3, [pc, #584]	; (3bb0 <_GLOBAL__sub_I_IRcmdCommands+0x36c>)
    3968:	ldr	r0, [pc, #508]	; (3b68 <_GLOBAL__sub_I_IRcmdCommands+0x324>)
    396a:	str	r3, [r5, #0]
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
    396c:	movs	r4, #0
    396e:	str	r4, [r5, #20]
			cpu_cycles = 0;
    3970:	strh	r4, [r5, #4]
			cpu_cycles_max = 0;
    3972:	strh	r4, [r5, #6]
			numConnections = 0;
    3974:	strb	r4, [r5, #10]
    3976:	bl	54f4 <AudioOutputI2S::begin()>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    397a:	ldr	r3, [pc, #540]	; (3b98 <_GLOBAL__sub_I_IRcmdCommands+0x354>)
    397c:	ldr.w	fp, [pc, #588]	; 3bcc <_GLOBAL__sub_I_IRcmdCommands+0x388>
    3980:	str.w	r3, [sl]
		{ isConnected = false;
		  connect(); }
    3984:	mov	r0, sl
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3986:	strb.w	r4, [sl, #8]
    398a:	str.w	r7, [sl, #4]
    398e:	strb.w	r4, [sl, #9]
    3992:	str.w	r4, [sl, #12]
		{ isConnected = false;
    3996:	strb.w	r4, [sl, #16]
		  connect(); }
    399a:	bl	aab4 <AudioConnection::connect()>
AudioMixer4              mixer1;         //xy=366,222
AudioMixer4              mixer2;         //xy=367,300
AudioOutputI2S           i2s1;           //xy=569,260
AudioConnection          patchCord1(Rain, 0, mixer1, 0);
    399e:	ldr	r2, [pc, #496]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    39a0:	ldr	r1, [pc, #528]	; (3bb4 <_GLOBAL__sub_I_IRcmdCommands+0x370>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    39a2:	ldr.w	r9, [pc, #556]	; 3bd0 <_GLOBAL__sub_I_IRcmdCommands+0x38c>
    39a6:	ldr.w	r8, [pc, #556]	; 3bd4 <_GLOBAL__sub_I_IRcmdCommands+0x390>
    39aa:	mov	r0, sl
    39ac:	bl	b6a8 <__aeabi_atexit>
    39b0:	ldr	r3, [pc, #484]	; (3b98 <_GLOBAL__sub_I_IRcmdCommands+0x354>)
    39b2:	strb.w	r4, [fp, #9]
    39b6:	mov.w	sl, #1
		{ isConnected = false;
		  connect(); }
    39ba:	mov	r0, fp
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    39bc:	stmia.w	fp, {r3, r6}
    39c0:	str.w	r4, [fp, #12]
		{ isConnected = false;
    39c4:	strb.w	r4, [fp, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    39c8:	strb.w	sl, [fp, #8]
		{ isConnected = false;
		  connect(); }
    39cc:	bl	aab4 <AudioConnection::connect()>
AudioConnection          patchCord2(Rain, 1, mixer2, 0);
    39d0:	ldr	r2, [pc, #444]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    39d2:	ldr	r1, [pc, #480]	; (3bb4 <_GLOBAL__sub_I_IRcmdCommands+0x370>)
    39d4:	mov	r0, fp
    39d6:	bl	b6a8 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    39da:	ldr	r3, [pc, #452]	; (3ba0 <_GLOBAL__sub_I_IRcmdCommands+0x35c>)
    39dc:	str.w	r3, [r9]
		{ isConnected = false;
		  connect(); }
    39e0:	mov	r0, r9
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    39e2:	strb.w	r4, [r9, #8]
    39e6:	str.w	r7, [r9, #4]
    39ea:	strb.w	sl, [r9, #9]
    39ee:	str.w	r4, [r9, #12]
		{ isConnected = false;
    39f2:	strb.w	r4, [r9, #16]
		  connect(); }
    39f6:	bl	aab4 <AudioConnection::connect()>
AudioConnection          patchCord3(ThunderLeft, 0, mixer1, 1);
    39fa:	ldr	r2, [pc, #404]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    39fc:	ldr	r1, [pc, #436]	; (3bb4 <_GLOBAL__sub_I_IRcmdCommands+0x370>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    39fe:	ldr.w	fp, [pc, #472]	; 3bd8 <_GLOBAL__sub_I_IRcmdCommands+0x394>
    3a02:	mov	r0, r9
    3a04:	bl	b6a8 <__aeabi_atexit>
    3a08:	ldr	r3, [pc, #404]	; (3ba0 <_GLOBAL__sub_I_IRcmdCommands+0x35c>)
    3a0a:	strb.w	sl, [r8, #8]
    3a0e:	stmia.w	r8, {r3, r7}
		{ isConnected = false;
		  connect(); }
    3a12:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3a14:	mov.w	r3, #2
    3a18:	strb.w	r3, [r8, #9]
    3a1c:	str.w	r4, [r8, #12]
		{ isConnected = false;
    3a20:	strb.w	r4, [r8, #16]
		  connect(); }
    3a24:	bl	aab4 <AudioConnection::connect()>
AudioConnection          patchCord4(ThunderLeft, 1, mixer1, 2);
    3a28:	ldr	r2, [pc, #356]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    3a2a:	ldr	r1, [pc, #392]	; (3bb4 <_GLOBAL__sub_I_IRcmdCommands+0x370>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3a2c:	ldr.w	r9, [pc, #376]	; 3ba8 <_GLOBAL__sub_I_IRcmdCommands+0x364>
    3a30:	mov	r0, r8
    3a32:	bl	b6a8 <__aeabi_atexit>
    3a36:	ldr.w	r8, [pc, #420]	; 3bdc <_GLOBAL__sub_I_IRcmdCommands+0x398>
    3a3a:	strb.w	r4, [fp, #8]
    3a3e:	movs	r3, #3
		{ isConnected = false;
		  connect(); }
    3a40:	mov	r0, fp
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3a42:	strb.w	r3, [fp, #9]
    3a46:	str	r3, [sp, #4]
    3a48:	str.w	r7, [fp, #4]
    3a4c:	str.w	r4, [fp, #12]
		{ isConnected = false;
    3a50:	strb.w	r4, [fp, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3a54:	str.w	r9, [fp]
		{ isConnected = false;
		  connect(); }
    3a58:	bl	aab4 <AudioConnection::connect()>
AudioConnection          patchCord5(ThunderCenter, 0, mixer1, 3);
    3a5c:	ldr	r2, [pc, #304]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    3a5e:	ldr	r1, [pc, #340]	; (3bb4 <_GLOBAL__sub_I_IRcmdCommands+0x370>)
    3a60:	mov	r0, fp
    3a62:	bl	b6a8 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3a66:	ldr.w	fp, [pc, #376]	; 3be0 <_GLOBAL__sub_I_IRcmdCommands+0x39c>
    3a6a:	ldr	r3, [sp, #4]
    3a6c:	strb.w	r3, [r8, #9]
		{ isConnected = false;
		  connect(); }
    3a70:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3a72:	str.w	r9, [r8]
    3a76:	str.w	r6, [r8, #4]
    3a7a:	strb.w	sl, [r8, #8]
    3a7e:	str.w	r4, [r8, #12]
		{ isConnected = false;
    3a82:	strb.w	r4, [r8, #16]
		  connect(); }
    3a86:	bl	aab4 <AudioConnection::connect()>
AudioConnection          patchCord6(ThunderCenter, 1, mixer2, 3);
    3a8a:	ldr	r2, [pc, #260]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    3a8c:	ldr	r1, [pc, #292]	; (3bb4 <_GLOBAL__sub_I_IRcmdCommands+0x370>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3a8e:	ldr.w	r9, [pc, #340]	; 3be4 <_GLOBAL__sub_I_IRcmdCommands+0x3a0>
    3a92:	mov	r0, r8
    3a94:	bl	b6a8 <__aeabi_atexit>
    3a98:	ldr.w	r8, [pc, #264]	; 3ba4 <_GLOBAL__sub_I_IRcmdCommands+0x360>
    3a9c:	strb.w	r4, [fp, #8]
		{ isConnected = false;
		  connect(); }
    3aa0:	mov	r0, fp
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3aa2:	str.w	r6, [fp, #4]
    3aa6:	strb.w	sl, [fp, #9]
    3aaa:	str.w	r4, [fp, #12]
		{ isConnected = false;
    3aae:	strb.w	r4, [fp, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3ab2:	str.w	r8, [fp]
		{ isConnected = false;
		  connect(); }
    3ab6:	bl	aab4 <AudioConnection::connect()>
AudioConnection          patchCord7(ThunderRight, 0, mixer2, 1);
    3aba:	ldr	r2, [pc, #212]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    3abc:	ldr	r1, [pc, #244]	; (3bb4 <_GLOBAL__sub_I_IRcmdCommands+0x370>)
    3abe:	mov	r0, fp
    3ac0:	bl	b6a8 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3ac4:	ldr.w	fp, [pc, #288]	; 3be8 <_GLOBAL__sub_I_IRcmdCommands+0x3a4>
    3ac8:	str.w	r8, [r9]
    3acc:	mov.w	r3, #2
		{ isConnected = false;
		  connect(); }
    3ad0:	mov	r0, r9
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3ad2:	strb.w	r3, [r9, #9]
    3ad6:	str.w	r6, [r9, #4]
    3ada:	strb.w	sl, [r9, #8]
    3ade:	str.w	r4, [r9, #12]
		{ isConnected = false;
    3ae2:	strb.w	r4, [r9, #16]
		  connect(); }
    3ae6:	bl	aab4 <AudioConnection::connect()>
AudioConnection          patchCord8(ThunderRight, 1, mixer2, 2);
    3aea:	ldr	r2, [pc, #164]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    3aec:	ldr	r1, [pc, #196]	; (3bb4 <_GLOBAL__sub_I_IRcmdCommands+0x370>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3aee:	ldr.w	r8, [pc, #252]	; 3bec <_GLOBAL__sub_I_IRcmdCommands+0x3a8>
    3af2:	mov	r0, r9
    3af4:	bl	b6a8 <__aeabi_atexit>
		{ isConnected = false;
		  connect(); }
    3af8:	mov	r0, fp
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3afa:	strb.w	r4, [fp, #8]
    3afe:	str.w	r7, [fp]
    3b02:	str.w	r5, [fp, #4]
    3b06:	strb.w	r4, [fp, #9]
    3b0a:	str.w	r4, [fp, #12]
		{ isConnected = false;
    3b0e:	strb.w	r4, [fp, #16]
		  connect(); }
    3b12:	bl	aab4 <AudioConnection::connect()>
AudioConnection          patchCord9(mixer1, 0, i2s1, 0);
    3b16:	ldr	r2, [pc, #120]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    3b18:	ldr	r1, [pc, #152]	; (3bb4 <_GLOBAL__sub_I_IRcmdCommands+0x370>)
    3b1a:	mov	r0, fp
    3b1c:	bl	b6a8 <__aeabi_atexit>
    3b20:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    3b22:	strb.w	sl, [r8, #9]
    3b26:	str.w	r6, [r8]
    3b2a:	str.w	r5, [r8, #4]
    3b2e:	strb.w	r4, [r8, #8]
    3b32:	str.w	r4, [r8, #12]
		{ isConnected = false;
    3b36:	strb.w	r4, [r8, #16]
		  connect(); }
    3b3a:	bl	aab4 <AudioConnection::connect()>
AudioConnection          patchCord10(mixer2, 0, i2s1, 1);
    3b3e:	mov	r0, r8
    3b40:	ldr	r2, [pc, #76]	; (3b90 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
    3b42:	ldr	r1, [pc, #112]	; (3bb4 <_GLOBAL__sub_I_IRcmdCommands+0x370>)
    3b44:	bl	b6a8 <__aeabi_atexit>
#include "AudioControl.h"

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
    3b48:	ldr	r3, [pc, #108]	; (3bb8 <_GLOBAL__sub_I_IRcmdCommands+0x374>)
    3b4a:	ldr	r2, [pc, #112]	; (3bbc <_GLOBAL__sub_I_IRcmdCommands+0x378>)
    3b4c:	str	r2, [r3, #0]
    3b4e:	movs	r2, #10
    3b50:	strb	r2, [r3, #8]
}

void startThunder()
{
  T1.trig(&ThunderCenter);
    3b52:	add	sp, #20
    3b54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    3b58:	str	r0, [r3, #0]
    3b5a:	b.n	3962 <_GLOBAL__sub_I_IRcmdCommands+0x11e>
    3b5c:	.word	0x1fffb450
    3b60:	.word	0x1fffb500
    3b64:	.word	0x1fffb538
    3b68:	.word	0x1fffa3c4
    3b6c:	.word	0x1fffa3f8
    3b70:	.word	0x0000c8a8
    3b74:	.word	0x1fffa2a4
    3b78:	.word	0x1fffa334
    3b7c:	.word	0x1fffbccc
    3b80:	.word	0x1fffb4f0
    3b84:	.word	0x1fffb474
    3b88:	.word	0x1fffaea0
    3b8c:	.word	0x0000057d
    3b90:	.word	0x1fff93fc
    3b94:	.word	0x0000c664
    3b98:	.word	0x1fffb1b4
    3b9c:	.word	0x00000565
    3ba0:	.word	0x1fffb570
    3ba4:	.word	0x1fffa024
    3ba8:	.word	0x1fffaee0
    3bac:	.word	0x1fffbde0
    3bb0:	.word	0x0000ca40
    3bb4:	.word	0x00000559
    3bb8:	.word	0x1fffb454
    3bbc:	.word	0x0000ca0c
    3bc0:	.word	0x0000ca28
    3bc4:	.word	0x0000c658
    3bc8:	.word	0x1fffaea4
    3bcc:	.word	0x1fffaeb8
    3bd0:	.word	0x1fffaecc
    3bd4:	.word	0x1fffb4dc
    3bd8:	.word	0x1fffb460
    3bdc:	.word	0x1fffb164
    3be0:	.word	0x1fffb178
    3be4:	.word	0x1fffb18c
    3be8:	.word	0x1fffa3e4
    3bec:	.word	0x1fffb1a0

00003bf0 <Thunder::Thunder(char const*, StripCommand*)>:
#include "Thunder.h"

Thunder::Thunder(const char *FileName, StripCommand *_stripCommander)
    3bf0:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bf2:	ldr	r3, [pc, #48]	; (3c24 <Thunder::Thunder(char const*, StripCommand*)+0x34>)
    3bf4:	sub	sp, #8
    3bf6:	ldr	r3, [r3, #0]
    3bf8:	str	r3, [sp, #4]
	return ret;
    3bfa:	ldr	r3, [sp, #4]
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
    3bfc:	str	r3, [r0, #4]
    3bfe:	movs	r3, #0
    3c00:	mov	r4, r0
    3c02:	mov	r6, r1
    3c04:	mov	r5, r2
    3c06:	strb	r3, [r0, #0]
    3c08:	strb	r3, [r0, #1]
    3c0a:	strb	r3, [r0, #2]
    3c0c:	strb	r3, [r0, #20]
    3c0e:	strb	r3, [r0, #21]
    3c10:	mov	r1, r3
    3c12:	movs	r2, #120	; 0x78
    3c14:	adds	r0, #24
    3c16:	bl	bd10 <memset>
{
    this->filename = FileName;
    this->StripCommander_p = _stripCommander;
}
    3c1a:	mov	r0, r4
#include "Thunder.h"

Thunder::Thunder(const char *FileName, StripCommand *_stripCommander)
{
    this->filename = FileName;
    3c1c:	str	r6, [r4, #8]
    this->StripCommander_p = _stripCommander;
    3c1e:	str	r5, [r4, #16]
}
    3c20:	add	sp, #8
    3c22:	pop	{r4, r5, r6, pc}
    3c24:	.word	0x1fffbccc

00003c28 <Thunder::Update()>:

void Thunder::Update()
{ //If this thunder is active, and has been properly initialized, we check the timestand versus script events and apply correspondig effects
    if (this->numberOfEvents == 0)
    3c28:	ldrb	r3, [r0, #20]
    3c2a:	cbz	r3, 3c54 <Thunder::Update()+0x2c>
        return;

    if (this->Active)
    3c2c:	ldrb	r2, [r0, #1]
    3c2e:	cbz	r2, 3c54 <Thunder::Update()+0x2c>
    {
        if (this->CurrentEvent < this->numberOfEvents)
    3c30:	ldrb	r2, [r0, #21]
    3c32:	cmp	r3, r2
    3c34:	bls.n	3c56 <Thunder::Update()+0x2e>
    this->filename = FileName;
    this->StripCommander_p = _stripCommander;
}

void Thunder::Update()
{ //If this thunder is active, and has been properly initialized, we check the timestand versus script events and apply correspondig effects
    3c36:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c38:	ldr	r5, [pc, #192]	; (3cfc <Thunder::Update()+0xd4>)

    if (this->Active)
    {
        if (this->CurrentEvent < this->numberOfEvents)
        {
            if (this->t >= this->Script[this->CurrentEvent].timestamp)
    3c3a:	ldr	r1, [r0, #4]
    3c3c:	ldr	r3, [r5, #0]
    this->filename = FileName;
    this->StripCommander_p = _stripCommander;
}

void Thunder::Update()
{ //If this thunder is active, and has been properly initialized, we check the timestand versus script events and apply correspondig effects
    3c3e:	sub	sp, #8

    if (this->Active)
    {
        if (this->CurrentEvent < this->numberOfEvents)
        {
            if (this->t >= this->Script[this->CurrentEvent].timestamp)
    3c40:	adds	r2, #3
    3c42:	str	r3, [sp, #0]
	return ret;
    3c44:	ldr	r3, [sp, #0]
    3c46:	ldr.w	r2, [r0, r2, lsl #3]
    3c4a:	subs	r3, r3, r1
    3c4c:	cmp	r2, r3
    3c4e:	bls.n	3c5c <Thunder::Update()+0x34>
        else
        {
            this->Active = false;
        }
    }
}
    3c50:	add	sp, #8
    3c52:	pop	{r4, r5, r6, pc}
    3c54:	bx	lr
                this->CurrentEvent++;
            }
        }
        else
        {
            this->Active = false;
    3c56:	movs	r3, #0
    3c58:	strb	r3, [r0, #1]
    3c5a:	bx	lr
    3c5c:	mov	r4, r0
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3c5e:	movs	r1, #10
    3c60:	ldr	r0, [pc, #156]	; (3d00 <Thunder::Update()+0xd8>)
    3c62:	bl	8dec <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c66:	ldr	r3, [r5, #0]
    3c68:	str	r3, [sp, #4]
	return ret;
    3c6a:	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3c6c:	ldr	r3, [r4, #4]
    3c6e:	ldr	r0, [pc, #148]	; (3d04 <Thunder::Update()+0xdc>)
    3c70:	subs	r1, r1, r3
    3c72:	movs	r2, #10
    3c74:	movs	r3, #0
    3c76:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    3c7a:	ldr	r0, [pc, #136]	; (3d04 <Thunder::Update()+0xdc>)
    3c7c:	bl	a780 <Print::println()>
    3c80:	movs	r1, #6
    3c82:	ldr	r0, [pc, #132]	; (3d08 <Thunder::Update()+0xe0>)
    3c84:	bl	8dec <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3c88:	movs	r2, #10
    3c8a:	movs	r3, #0
    3c8c:	ldrb	r1, [r4, #21]
    3c8e:	ldr	r0, [pc, #116]	; (3d04 <Thunder::Update()+0xdc>)
    3c90:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    3c94:	ldr	r0, [pc, #108]	; (3d04 <Thunder::Update()+0xdc>)
    3c96:	bl	a780 <Print::println()>
    3c9a:	movs	r1, #9
    3c9c:	ldr	r0, [pc, #108]	; (3d0c <Thunder::Update()+0xe4>)
    3c9e:	bl	8dec <usb_serial_write>

                Serial.print("Event ");
                Serial.println(this->CurrentEvent);

                Serial.print("Event ID ");
                Serial.println(this->Script[this->CurrentEvent].effect);
    3ca2:	ldrb	r3, [r4, #21]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3ca4:	ldr	r0, [pc, #92]	; (3d04 <Thunder::Update()+0xdc>)
    3ca6:	add.w	r3, r4, r3, lsl #3
    3caa:	ldrb	r1, [r3, #28]
    3cac:	bl	a820 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    3cb0:	ldr	r0, [pc, #80]	; (3d04 <Thunder::Update()+0xdc>)
    3cb2:	bl	a780 <Print::println()>

                switch (this->Script[this->CurrentEvent].effect)
    3cb6:	ldrb	r3, [r4, #21]
    3cb8:	add.w	r2, r4, r3, lsl #3
    3cbc:	ldrb	r2, [r2, #28]
    3cbe:	cmp	r2, #1
    3cc0:	beq.n	3cf2 <Thunder::Update()+0xca>
    3cc2:	bcc.n	3cd6 <Thunder::Update()+0xae>
    3cc4:	cmp	r2, #2
    3cc6:	bne.n	3cd0 <Thunder::Update()+0xa8>
                case GroupFlash:
                    this->StripCommander_p->groupFlash();
                    break;

                case MegaFlash:
                    this->StripCommander_p->flashAll();
    3cc8:	ldr	r0, [r4, #16]
    3cca:	bl	3ff0 <StripCommand::flashAll()>
    3cce:	ldrb	r3, [r4, #21]
                    break;

                default:
                    break;
                }
                this->CurrentEvent++;
    3cd0:	adds	r3, #1
    3cd2:	strb	r3, [r4, #21]
    3cd4:	b.n	3c50 <Thunder::Update()+0x28>

                switch (this->Script[this->CurrentEvent].effect)
                {
                case SingleFlash:
                {
                    uint8_t FlashCount = random(1, 15);
    3cd6:	movs	r1, #15
    3cd8:	movs	r0, #1
    3cda:	bl	a8b4 <random(long, long)>
    3cde:	movs	r5, #0
    3ce0:	uxtb	r6, r0
    3ce2:	adds	r5, #1
                    for (uint8_t i = 0; i <= FlashCount; i++)
                    {
                        this->StripCommander_p->flash();
    3ce4:	ldr	r0, [r4, #16]
    3ce6:	bl	3e98 <StripCommand::flash()>
                switch (this->Script[this->CurrentEvent].effect)
                {
                case SingleFlash:
                {
                    uint8_t FlashCount = random(1, 15);
                    for (uint8_t i = 0; i <= FlashCount; i++)
    3cea:	uxtb	r3, r5
    3cec:	cmp	r6, r3
    3cee:	bcs.n	3ce2 <Thunder::Update()+0xba>
    3cf0:	b.n	3cce <Thunder::Update()+0xa6>
                    }
                }
                break;

                case GroupFlash:
                    this->StripCommander_p->groupFlash();
    3cf2:	ldr	r0, [r4, #16]
    3cf4:	bl	3fcc <StripCommand::groupFlash()>
    3cf8:	ldrb	r3, [r4, #21]
                    break;
    3cfa:	b.n	3cd0 <Thunder::Update()+0xa8>
    3cfc:	.word	0x1fffbccc
    3d00:	.word	0x0000c8b4
    3d04:	.word	0x1fff965c
    3d08:	.word	0x0000c8c0
    3d0c:	.word	0x0000c8c8

00003d10 <Thunder::trig(AudioPlaySdWav*)>:
        }
    }
}

void Thunder::trig(AudioPlaySdWav *Player_p)
{ //If audioChannel is free, then we start the thunder wave file and launch associated FX script by setting Active
    3d10:	push	{r4, r5, lr}
    3d12:	mov	r4, r0
    3d14:	sub	sp, #12
    if (Player_p->isPlaying())
    3d16:	mov	r0, r1
        }
    }
}

void Thunder::trig(AudioPlaySdWav *Player_p)
{ //If audioChannel is free, then we start the thunder wave file and launch associated FX script by setting Active
    3d18:	mov	r5, r1
    if (Player_p->isPlaying())
    3d1a:	bl	5050 <AudioPlaySdWav::isPlaying()>
    3d1e:	cbnz	r0, 3d3a <Thunder::trig(AudioPlaySdWav*)+0x2a>
        return;
    this->AudioPlayer_p = Player_p;
    this->Active = true;
    3d20:	movs	r3, #1
    this->CurrentEvent = 0;
    3d22:	strb	r0, [r4, #21]
void Thunder::trig(AudioPlaySdWav *Player_p)
{ //If audioChannel is free, then we start the thunder wave file and launch associated FX script by setting Active
    if (Player_p->isPlaying())
        return;
    this->AudioPlayer_p = Player_p;
    this->Active = true;
    3d24:	strb	r3, [r4, #1]

void Thunder::trig(AudioPlaySdWav *Player_p)
{ //If audioChannel is free, then we start the thunder wave file and launch associated FX script by setting Active
    if (Player_p->isPlaying())
        return;
    this->AudioPlayer_p = Player_p;
    3d26:	str	r5, [r4, #12]
    this->Active = true;
    this->CurrentEvent = 0;
    this->AudioPlayer_p->play(this->filename);
    3d28:	mov	r0, r5
    3d2a:	ldr	r1, [r4, #8]
    3d2c:	bl	4b50 <AudioPlaySdWav::play(char const*)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d30:	ldr	r3, [pc, #12]	; (3d40 <Thunder::trig(AudioPlaySdWav*)+0x30>)
    3d32:	ldr	r3, [r3, #0]
    3d34:	str	r3, [sp, #4]
	return ret;
    3d36:	ldr	r3, [sp, #4]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    3d38:	str	r3, [r4, #4]
    this->t = 0;
}
    3d3a:	add	sp, #12
    3d3c:	pop	{r4, r5, pc}
    3d3e:	nop
    3d40:	.word	0x1fffbccc

00003d44 <Thunder::addEvent(unsigned long, FX)>:

//Add one event to the event list, sort them so the timestamp is increasing.
int Thunder::addEvent(uint32_t TimeStamp, FX effect)
{
    3d44:	push	{r3, r4, r5, r6, r7, lr}
    if (this->numberOfEvents < THUNDER_MAX_NUMBER_OF_EVENTS)
    3d46:	ldrb	r4, [r0, #20]
    3d48:	cmp	r4, #14
    3d4a:	bhi.n	3dca <Thunder::addEvent(unsigned long, FX)+0x86>
    {
        if (numberOfEvents != 0)
    3d4c:	cbz	r4, 3d78 <Thunder::addEvent(unsigned long, FX)+0x34>
        {
            //Go through the elements to keep increasing order
            for (int index = 0; index <= numberOfEvents; index++)
    3d4e:	mov	r7, r4
    3d50:	movs	r3, #0
    3d52:	add.w	lr, r0, r4, lsl #3
    3d56:	b.n	3d66 <Thunder::addEvent(unsigned long, FX)+0x22>
            {
                if (index != numberOfEvents)
                {
                    if (TimeStamp < this->Script[numberOfEvents - 1].timestamp)
    3d58:	ldr.w	r6, [r0, r5, lsl #3]
    3d5c:	cmp	r1, r6
    3d5e:	bcc.n	3da0 <Thunder::addEvent(unsigned long, FX)+0x5c>
    if (this->numberOfEvents < THUNDER_MAX_NUMBER_OF_EVENTS)
    {
        if (numberOfEvents != 0)
        {
            //Go through the elements to keep increasing order
            for (int index = 0; index <= numberOfEvents; index++)
    3d60:	adds	r3, #1
    3d62:	cmp	r3, r4
    3d64:	bgt.n	3d7c <Thunder::addEvent(unsigned long, FX)+0x38>
            {
                if (index != numberOfEvents)
    3d66:	cmp	r4, r3
                {
                    if (TimeStamp < this->Script[numberOfEvents - 1].timestamp)
    3d68:	add.w	r5, r4, #2
        if (numberOfEvents != 0)
        {
            //Go through the elements to keep increasing order
            for (int index = 0; index <= numberOfEvents; index++)
            {
                if (index != numberOfEvents)
    3d6c:	bne.n	3d58 <Thunder::addEvent(unsigned long, FX)+0x14>
                        break;
                    }
                }
                else
                { //Timestamp is higher than all elements, add it at the end
                    this->Script[numberOfEvents] = {TimeStamp, effect};
    3d6e:	str.w	r1, [lr, #24]
    3d72:	strb.w	r2, [lr, #28]
    3d76:	b.n	3d60 <Thunder::addEvent(unsigned long, FX)+0x1c>
                }
            }
        }
        else
        { //Timestamp is higher than all elements, add it at the end
            this->Script[numberOfEvents] = {TimeStamp, effect};
    3d78:	str	r1, [r0, #24]
    3d7a:	strb	r2, [r0, #28]
    3d7c:	mov	r5, r0
        }
        numberOfEvents++;
    3d7e:	adds	r4, #1
    3d80:	strb	r4, [r0, #20]
    3d82:	movs	r1, #33	; 0x21
    3d84:	ldr	r0, [pc, #72]	; (3dd0 <Thunder::addEvent(unsigned long, FX)+0x8c>)
    3d86:	bl	8dec <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3d8a:	ldrb	r1, [r5, #20]
    3d8c:	ldr	r0, [pc, #68]	; (3dd4 <Thunder::addEvent(unsigned long, FX)+0x90>)
    3d8e:	movs	r3, #0
    3d90:	movs	r2, #10
    3d92:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    3d96:	ldr	r0, [pc, #60]	; (3dd4 <Thunder::addEvent(unsigned long, FX)+0x90>)
    3d98:	bl	a780 <Print::println()>
        Serial.print("Current number of events for T1: ");
        Serial.println(numberOfEvents);
        return 1;
    3d9c:	movs	r0, #1
    3d9e:	pop	{r3, r4, r5, r6, r7, pc}
            {
                if (index != numberOfEvents)
                {
                    if (TimeStamp < this->Script[numberOfEvents - 1].timestamp)
                    {
                        for (int shiftIndex = numberOfEvents; shiftIndex > index; shiftIndex--)
    3da0:	cmp	r4, r3
    3da2:	ble.n	3dc0 <Thunder::addEvent(unsigned long, FX)+0x7c>
    3da4:	add.w	r5, r0, r4, lsl #3
    3da8:	b.n	3dac <Thunder::addEvent(unsigned long, FX)+0x68>
    3daa:	ldr	r6, [r5, #16]
                        {
                            this->Script[shiftIndex].timestamp = this->Script[shiftIndex - 1].timestamp;
                            this->Script[shiftIndex].effect = this->Script[shiftIndex - 1].effect;
    3dac:	ldrb.w	lr, [r5, #20]
                {
                    if (TimeStamp < this->Script[numberOfEvents - 1].timestamp)
                    {
                        for (int shiftIndex = numberOfEvents; shiftIndex > index; shiftIndex--)
                        {
                            this->Script[shiftIndex].timestamp = this->Script[shiftIndex - 1].timestamp;
    3db0:	str	r6, [r5, #24]
    3db2:	subs	r7, #1
            {
                if (index != numberOfEvents)
                {
                    if (TimeStamp < this->Script[numberOfEvents - 1].timestamp)
                    {
                        for (int shiftIndex = numberOfEvents; shiftIndex > index; shiftIndex--)
    3db4:	cmp	r7, r3
                        {
                            this->Script[shiftIndex].timestamp = this->Script[shiftIndex - 1].timestamp;
                            this->Script[shiftIndex].effect = this->Script[shiftIndex - 1].effect;
    3db6:	strb.w	lr, [r5, #28]
    3dba:	sub.w	r5, r5, #8
            {
                if (index != numberOfEvents)
                {
                    if (TimeStamp < this->Script[numberOfEvents - 1].timestamp)
                    {
                        for (int shiftIndex = numberOfEvents; shiftIndex > index; shiftIndex--)
    3dbe:	bne.n	3daa <Thunder::addEvent(unsigned long, FX)+0x66>
    3dc0:	add.w	r3, r0, r3, lsl #3
                        {
                            this->Script[shiftIndex].timestamp = this->Script[shiftIndex - 1].timestamp;
                            this->Script[shiftIndex].effect = this->Script[shiftIndex - 1].effect;
                        }
                        this->Script[index] = {TimeStamp, effect};
    3dc4:	str	r1, [r3, #24]
    3dc6:	strb	r2, [r3, #28]
                        break;
    3dc8:	b.n	3d7c <Thunder::addEvent(unsigned long, FX)+0x38>
        Serial.print("Current number of events for T1: ");
        Serial.println(numberOfEvents);
        return 1;
    }
    else
        return -1; //Return error, could not add event as list is already full
    3dca:	mov.w	r0, #4294967295
    3dce:	pop	{r3, r4, r5, r6, r7, pc}
    3dd0:	.word	0x0000c8d4
    3dd4:	.word	0x1fff965c

00003dd8 <StripCommand::StripCommand()>:

#include "StripCommand.h"
#include "FastLED.h"

StripCommand::StripCommand()
    3dd8:	push	{r4, r5, r6, r7, lr}
    3dda:	ldr	r4, [pc, #136]	; (3e64 <StripCommand::StripCommand()+0x8c>)
    3ddc:	sub	sp, #12
    3dde:	mov	r6, r0
    3de0:	mov	r7, r0
    3de2:	add.w	lr, r4, #48	; 0x30
    3de6:	ldr	r0, [r4, #0]
    3de8:	ldr	r1, [r4, #4]
    3dea:	ldr	r2, [r4, #8]
    3dec:	ldr	r3, [r4, #12]
    3dee:	mov	r5, r7
    3df0:	stmia	r5!, {r0, r1, r2, r3}
    3df2:	adds	r4, #16
    3df4:	cmp	r4, lr
    3df6:	mov	r7, r5
    3df8:	bne.n	3de6 <StripCommand::StripCommand()+0xe>
    3dfa:	ldr	r0, [r4, #0]
    3dfc:	ldr	r1, [r4, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3dfe:	ldr	r2, [pc, #104]	; (3e68 <StripCommand::StripCommand()+0x90>)
    3e00:	ldr	r3, [pc, #104]	; (3e6c <StripCommand::StripCommand()+0x94>)
    3e02:	stmia	r7!, {r0, r1}
    3e04:	ldr	r1, [r2, #0]
    3e06:	str	r1, [sp, #4]
	return ret;
    3e08:	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e0a:	ldr	r2, [r2, #0]
    3e0c:	str	r2, [sp, #0]
    3e0e:	ldrh	r4, [r3, #4]
	return ret;
    3e10:	ldr	r5, [sp, #0]
    3e12:	ldr	r0, [r3, #0]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    3e14:	str.w	r1, [r6, #232]	; 0xe8
    3e18:	movs	r3, #0
    3e1a:	movs	r2, #1
    3e1c:	movs	r1, #10
    3e1e:	str.w	r5, [r6, #236]	; 0xec
    3e22:	strh	r4, [r6, #60]	; 0x3c
    3e24:	str	r0, [r6, #56]	; 0x38
    3e26:	strb.w	r2, [r6, #230]	; 0xe6
    3e2a:	strb.w	r2, [r6, #707]	; 0x2c3
    3e2e:	str.w	r1, [r6, #240]	; 0xf0
    3e32:	strb.w	r3, [r6, #244]	; 0xf4
    3e36:	strb.w	r3, [r6, #245]	; 0xf5
    3e3a:	strh.w	r3, [r6, #246]	; 0xf6
    3e3e:	strh.w	r3, [r6, #248]	; 0xf8
    3e42:	strb.w	r3, [r6, #250]	; 0xfa
    3e46:	strb.w	r3, [r6, #708]	; 0x2c4
    3e4a:	add.w	r4, r6, #712	; 0x2c8
    3e4e:	addw	r5, r6, #2728	; 0xaa8
    3e52:	mov	r0, r4
    3e54:	adds	r4, #36	; 0x24
    3e56:	bl	44f4 <StripLED::StripLED()>
    3e5a:	cmp	r4, r5
    3e5c:	bne.n	3e52 <StripCommand::StripCommand()+0x7a>
{
}
    3e5e:	mov	r0, r6
    3e60:	add	sp, #12
    3e62:	pop	{r4, r5, r6, r7, pc}
    3e64:	.word	0x0000c8f8
    3e68:	.word	0x1fffbccc
    3e6c:	.word	0x0000c930

00003e70 <StripCommand::begin()>:

void StripCommand::begin()
{
    3e70:	push	{r3, r4, r5, r6, r7, lr}
    3e72:	mov	r6, r0
    3e74:	add.w	r5, r0, #712	; 0x2c8
    3e78:	add.w	r7, r0, #56	; 0x38
    3e7c:	mov	r4, r0
    3e7e:	subs	r1, r4, r6
  for (uint8_t i = 0; i < NUM_LEDS; i++)
  {
    pixels[i].init(i, Group[i]);
    3e80:	ldrb.w	r2, [r4], #1
    3e84:	mov	r0, r5
    3e86:	uxth	r1, r1
    3e88:	bl	452c <StripLED::init(unsigned short, unsigned char)>
{
}

void StripCommand::begin()
{
  for (uint8_t i = 0; i < NUM_LEDS; i++)
    3e8c:	cmp	r4, r7
    3e8e:	add.w	r5, r5, #36	; 0x24
    3e92:	bne.n	3e7e <StripCommand::begin()+0xe>
  {
    pixels[i].init(i, Group[i]);
  }
}
    3e94:	pop	{r3, r4, r5, r6, r7, pc}
    3e96:	nop

00003e98 <StripCommand::flash()>:
  }
}

void StripCommand::flash()
{
  if (CurrentMode != Flashing && RunningFX)
    3e98:	ldrb.w	r3, [r0, #244]	; 0xf4
    break;
  }
}

void StripCommand::flash()
{
    3e9c:	push	{r4, r5, r6, lr}
  if (CurrentMode != Flashing && RunningFX)
    3e9e:	cbz	r3, 3ea6 <StripCommand::flash()+0xe>
    3ea0:	ldrb.w	r3, [r0, #245]	; 0xf5
    3ea4:	cbnz	r3, 3ed8 <StripCommand::flash()+0x40>
    return;
  CurrentMode = Flashing;
    3ea6:	movs	r6, #0
    3ea8:	mov	r5, r0
    3eaa:	strb.w	r6, [r0, #244]	; 0xf4
  uint16_t Id = random(0, NUM_LEDS);
    3eae:	movs	r1, #56	; 0x38
    3eb0:	mov	r0, r6
    3eb2:	bl	a8b4 <random(long, long)>
    3eb6:	uxth	r0, r0
  pixels[Id].Mode = Flashing;
    3eb8:	add.w	r0, r0, r0, lsl #3
    3ebc:	add.w	r4, r5, r0, lsl #2
  pixels[Id].Offset = random(20, 300);
    3ec0:	mov.w	r1, #300	; 0x12c
{
  if (CurrentMode != Flashing && RunningFX)
    return;
  CurrentMode = Flashing;
  uint16_t Id = random(0, NUM_LEDS);
  pixels[Id].Mode = Flashing;
    3ec4:	strb.w	r6, [r4, #720]	; 0x2d0
  pixels[Id].Offset = random(20, 300);
    3ec8:	movs	r0, #20
    3eca:	bl	a8b4 <random(long, long)>
  pixels[Id].Trigger = 1;
    3ece:	movs	r3, #1
  if (CurrentMode != Flashing && RunningFX)
    return;
  CurrentMode = Flashing;
  uint16_t Id = random(0, NUM_LEDS);
  pixels[Id].Mode = Flashing;
  pixels[Id].Offset = random(20, 300);
    3ed0:	strh.w	r0, [r4, #734]	; 0x2de
  pixels[Id].Trigger = 1;
    3ed4:	strb.w	r3, [r4, #715]	; 0x2cb
    3ed8:	pop	{r4, r5, r6, pc}
    3eda:	nop

00003edc <StripCommand::flash(unsigned short)>:
}

void StripCommand::flash(uint16_t Id)
{
  if (CurrentMode != Flashing && RunningFX)
    3edc:	ldrb.w	r3, [r0, #244]	; 0xf4
  pixels[Id].Offset = random(20, 300);
  pixels[Id].Trigger = 1;
}

void StripCommand::flash(uint16_t Id)
{
    3ee0:	push	{r4, lr}
  if (CurrentMode != Flashing && RunningFX)
    3ee2:	cbz	r3, 3eea <StripCommand::flash(unsigned short)+0xe>
    3ee4:	ldrb.w	r3, [r0, #245]	; 0xf5
    3ee8:	cbnz	r3, 3f10 <StripCommand::flash(unsigned short)+0x34>
    return;
  CurrentMode = Flashing;
  pixels[Id].Mode = Flashing;
    3eea:	add.w	r1, r1, r1, lsl #3
    3eee:	add.w	r4, r0, r1, lsl #2

void StripCommand::flash(uint16_t Id)
{
  if (CurrentMode != Flashing && RunningFX)
    return;
  CurrentMode = Flashing;
    3ef2:	movs	r3, #0
    3ef4:	strb.w	r3, [r0, #244]	; 0xf4
  pixels[Id].Mode = Flashing;
  pixels[Id].Offset = random(20, 300);
    3ef8:	mov.w	r1, #300	; 0x12c
void StripCommand::flash(uint16_t Id)
{
  if (CurrentMode != Flashing && RunningFX)
    return;
  CurrentMode = Flashing;
  pixels[Id].Mode = Flashing;
    3efc:	strb.w	r3, [r4, #720]	; 0x2d0
  pixels[Id].Offset = random(20, 300);
    3f00:	movs	r0, #20
    3f02:	bl	a8b4 <random(long, long)>
  pixels[Id].Trigger = 1;
    3f06:	movs	r3, #1
{
  if (CurrentMode != Flashing && RunningFX)
    return;
  CurrentMode = Flashing;
  pixels[Id].Mode = Flashing;
  pixels[Id].Offset = random(20, 300);
    3f08:	strh.w	r0, [r4, #734]	; 0x2de
  pixels[Id].Trigger = 1;
    3f0c:	strb.w	r3, [r4, #715]	; 0x2cb
    3f10:	pop	{r4, pc}
    3f12:	nop

00003f14 <StripCommand::groupFlash(unsigned char, unsigned char)>:
  pixels[Id].Trigger = 1;
}

void StripCommand::groupFlash(uint8_t gr, uint8_t dir)
{
  if (CurrentMode != Flashing && RunningFX)
    3f14:	ldrb.w	r3, [r0, #244]	; 0xf4
  pixels[Id].Offset = Offset;
  pixels[Id].Trigger = 1;
}

void StripCommand::groupFlash(uint8_t gr, uint8_t dir)
{
    3f18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (CurrentMode != Flashing && RunningFX)
    3f1c:	cbz	r3, 3f26 <StripCommand::groupFlash(unsigned char, unsigned char)+0x12>
    3f1e:	ldrb.w	r3, [r0, #245]	; 0xf5
    3f22:	cmp	r3, #0
    3f24:	bne.n	3fa8 <StripCommand::groupFlash(unsigned char, unsigned char)+0x94>
    3f26:	mov	r8, r0
    3f28:	mov	r7, r1
    3f2a:	ldr	r0, [pc, #152]	; (3fc4 <StripCommand::groupFlash(unsigned char, unsigned char)+0xb0>)
    3f2c:	movs	r1, #19
    3f2e:	mov	r9, r2
    return;
  Serial.println("GroupFlash received");
  CurrentMode = Flashing;
    3f30:	movs	r6, #0
    3f32:	bl	8dec <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3f36:	ldr	r0, [pc, #144]	; (3fc8 <StripCommand::groupFlash(unsigned char, unsigned char)+0xb4>)
    3f38:	bl	a780 <Print::println()>
  uint8_t spd = random(2, 25);
    3f3c:	movs	r1, #25
void StripCommand::groupFlash(uint8_t gr, uint8_t dir)
{
  if (CurrentMode != Flashing && RunningFX)
    return;
  Serial.println("GroupFlash received");
  CurrentMode = Flashing;
    3f3e:	strb.w	r6, [r8, #244]	; 0xf4
  uint8_t spd = random(2, 25);
    3f42:	movs	r0, #2
    3f44:	bl	a8b4 <random(long, long)>
    3f48:	add.w	r4, r8, #4294967295
    3f4c:	uxtb	r0, r0

void StripCommand::flash(uint16_t Id, uint16_t Offset)
{
  if (CurrentMode != Flashing && RunningFX)
    return;
  CurrentMode = Flashing;
    3f4e:	mov	r2, r6
    3f50:	mov	r3, r8
    3f52:	add.w	r1, r8, #2016	; 0x7e0
      {
        flash(i, spd * Multiplier);
      }
      else
      {
        flash(i, spd * LedPerGroup[gr] - spd * Multiplier);
    3f56:	add.w	ip, r8, r7
  if (CurrentMode != Flashing && RunningFX)
    return;
  CurrentMode = Flashing;
  pixels[Id].Mode = Flashing;
  pixels[Id].Offset = Offset;
  pixels[Id].Trigger = 1;
    3f5a:	mov.w	lr, #1
    3f5e:	b.n	3f66 <StripCommand::groupFlash(unsigned char, unsigned char)+0x52>
    3f60:	adds	r3, #36	; 0x24
    return;
  Serial.println("GroupFlash received");
  CurrentMode = Flashing;
  uint8_t spd = random(2, 25);
  uint16_t Multiplier = 0;
  for (uint8_t i = 0; i < NUM_LEDS; i++)
    3f62:	cmp	r1, r3
    3f64:	beq.n	3fa8 <StripCommand::groupFlash(unsigned char, unsigned char)+0x94>
  {
    if (Group[i] == gr)
    3f66:	ldrb.w	r5, [r4, #1]!
    3f6a:	cmp	r5, r7
    3f6c:	bne.n	3f60 <StripCommand::groupFlash(unsigned char, unsigned char)+0x4c>
    {
      if (dir == 0)
      {
        flash(i, spd * Multiplier);
    3f6e:	smulbb	r5, r0, r6
  uint16_t Multiplier = 0;
  for (uint8_t i = 0; i < NUM_LEDS; i++)
  {
    if (Group[i] == gr)
    {
      if (dir == 0)
    3f72:	cmp.w	r9, #0
    3f76:	bne.n	3fac <StripCommand::groupFlash(unsigned char, unsigned char)+0x98>
  pixels[Id].Trigger = 1;
}

void StripCommand::flash(uint16_t Id, uint16_t Offset)
{
  if (CurrentMode != Flashing && RunningFX)
    3f78:	ldrb.w	sl, [r8, #244]	; 0xf4
  {
    if (Group[i] == gr)
    {
      if (dir == 0)
      {
        flash(i, spd * Multiplier);
    3f7c:	uxth	r5, r5
  pixels[Id].Trigger = 1;
}

void StripCommand::flash(uint16_t Id, uint16_t Offset)
{
  if (CurrentMode != Flashing && RunningFX)
    3f7e:	cmp.w	sl, #0
    3f82:	beq.n	3f8e <StripCommand::groupFlash(unsigned char, unsigned char)+0x7a>
    3f84:	ldrb.w	sl, [r8, #245]	; 0xf5
    3f88:	cmp.w	sl, #0
    3f8c:	bne.n	3f9e <StripCommand::groupFlash(unsigned char, unsigned char)+0x8a>
    return;
  CurrentMode = Flashing;
    3f8e:	strb.w	r2, [r8, #244]	; 0xf4
  pixels[Id].Mode = Flashing;
    3f92:	strb.w	r2, [r3, #720]	; 0x2d0
  pixels[Id].Offset = Offset;
    3f96:	strh.w	r5, [r3, #734]	; 0x2de
  pixels[Id].Trigger = 1;
    3f9a:	strb.w	lr, [r3, #715]	; 0x2cb
    3f9e:	adds	r3, #36	; 0x24
      }
      else
      {
        flash(i, spd * LedPerGroup[gr] - spd * Multiplier);
      }
      Multiplier++;
    3fa0:	adds	r6, #1
    return;
  Serial.println("GroupFlash received");
  CurrentMode = Flashing;
  uint8_t spd = random(2, 25);
  uint16_t Multiplier = 0;
  for (uint8_t i = 0; i < NUM_LEDS; i++)
    3fa2:	cmp	r1, r3
      }
      else
      {
        flash(i, spd * LedPerGroup[gr] - spd * Multiplier);
      }
      Multiplier++;
    3fa4:	uxth	r6, r6
    return;
  Serial.println("GroupFlash received");
  CurrentMode = Flashing;
  uint8_t spd = random(2, 25);
  uint16_t Multiplier = 0;
  for (uint8_t i = 0; i < NUM_LEDS; i++)
    3fa6:	bne.n	3f66 <StripCommand::groupFlash(unsigned char, unsigned char)+0x52>
    3fa8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      {
        flash(i, spd * Multiplier);
      }
      else
      {
        flash(i, spd * LedPerGroup[gr] - spd * Multiplier);
    3fac:	ldrb.w	r5, [ip, #56]	; 0x38
  pixels[Id].Trigger = 1;
}

void StripCommand::flash(uint16_t Id, uint16_t Offset)
{
  if (CurrentMode != Flashing && RunningFX)
    3fb0:	ldrb.w	sl, [r8, #244]	; 0xf4
      {
        flash(i, spd * Multiplier);
      }
      else
      {
        flash(i, spd * LedPerGroup[gr] - spd * Multiplier);
    3fb4:	subs	r5, r5, r6
    3fb6:	smulbb	r5, r5, r0
    3fba:	uxth	r5, r5
  pixels[Id].Trigger = 1;
}

void StripCommand::flash(uint16_t Id, uint16_t Offset)
{
  if (CurrentMode != Flashing && RunningFX)
    3fbc:	cmp.w	sl, #0
    3fc0:	beq.n	3f8e <StripCommand::groupFlash(unsigned char, unsigned char)+0x7a>
    3fc2:	b.n	3f84 <StripCommand::groupFlash(unsigned char, unsigned char)+0x70>
    3fc4:	.word	0x0000c938
    3fc8:	.word	0x1fff965c

00003fcc <StripCommand::groupFlash()>:
  uint8_t dir = random(0, 2);
  groupFlash(gr, dir);
}

void StripCommand::groupFlash()
{
    3fcc:	push	{r3, r4, r5, lr}
  uint8_t gr = random(0, NUM_GROUPS - 1);
    3fce:	movs	r1, #5
  uint8_t dir = random(0, 2);
  groupFlash(gr, dir);
}

void StripCommand::groupFlash()
{
    3fd0:	mov	r4, r0
  uint8_t gr = random(0, NUM_GROUPS - 1);
    3fd2:	movs	r0, #0
    3fd4:	bl	a8b4 <random(long, long)>
  uint8_t dir = random(0, 2);
    3fd8:	movs	r1, #2
  groupFlash(gr, dir);
}

void StripCommand::groupFlash()
{
  uint8_t gr = random(0, NUM_GROUPS - 1);
    3fda:	mov	r5, r0
  uint8_t dir = random(0, 2);
    3fdc:	movs	r0, #0
    3fde:	bl	a8b4 <random(long, long)>
  groupFlash(gr, dir);
    3fe2:	uxtb	r1, r5
    3fe4:	uxtb	r2, r0
    3fe6:	mov	r0, r4
}
    3fe8:	ldmia.w	sp!, {r3, r4, r5, lr}

void StripCommand::groupFlash()
{
  uint8_t gr = random(0, NUM_GROUPS - 1);
  uint8_t dir = random(0, 2);
  groupFlash(gr, dir);
    3fec:	b.w	3f14 <StripCommand::groupFlash(unsigned char, unsigned char)>

00003ff0 <StripCommand::flashAll()>:
}

void StripCommand::flashAll()
{
  if (CurrentMode != Flashing && RunningFX)
    3ff0:	ldrb.w	r3, [r0, #244]	; 0xf4
  uint8_t dir = random(0, 2);
  groupFlash(gr, dir);
}

void StripCommand::flashAll()
{
    3ff4:	push	{r4, r5, r6, lr}
  if (CurrentMode != Flashing && RunningFX)
    3ff6:	cbz	r3, 3ffe <StripCommand::flashAll()+0xe>
    3ff8:	ldrb.w	r3, [r0, #245]	; 0xf5
    3ffc:	cbnz	r3, 4028 <StripCommand::flashAll()+0x38>
    return;
  CurrentMode = Flashing;
    3ffe:	movs	r5, #0
    4000:	mov	r4, r0
    4002:	strb.w	r5, [r0, #244]	; 0xf4
    4006:	add.w	r6, r0, #2016	; 0x7e0
  for (uint16_t Id = 0; Id < NUM_LEDS; Id++)
  {
    pixels[Id].Mode = Flashing;
    400a:	strb.w	r5, [r4, #720]	; 0x2d0
    pixels[Id].Offset = random(20, 300);
    400e:	mov.w	r1, #300	; 0x12c
    4012:	movs	r0, #20
    4014:	bl	a8b4 <random(long, long)>
    pixels[Id].Trigger = 1;
    4018:	movs	r3, #1
    return;
  CurrentMode = Flashing;
  for (uint16_t Id = 0; Id < NUM_LEDS; Id++)
  {
    pixels[Id].Mode = Flashing;
    pixels[Id].Offset = random(20, 300);
    401a:	strh.w	r0, [r4, #734]	; 0x2de
    pixels[Id].Trigger = 1;
    401e:	strb.w	r3, [r4, #715]	; 0x2cb
    4022:	adds	r4, #36	; 0x24
void StripCommand::flashAll()
{
  if (CurrentMode != Flashing && RunningFX)
    return;
  CurrentMode = Flashing;
  for (uint16_t Id = 0; Id < NUM_LEDS; Id++)
    4024:	cmp	r4, r6
    4026:	bne.n	400a <StripCommand::flashAll()+0x1a>
    4028:	pop	{r4, r5, r6, pc}
    402a:	nop

0000402c <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)>:
    pixels[Id].Trigger = 1;
  }
}

void StripCommand::fadeToHSV(uint16_t H, uint16_t S, uint16_t V, uint16_t Delay)
{
    402c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((CurrentMode != Fading && RunningFX) || (CurrentMode == Fading && !FadingDone))
    4030:	ldrb.w	r4, [r0, #244]	; 0xf4
    pixels[Id].Trigger = 1;
  }
}

void StripCommand::fadeToHSV(uint16_t H, uint16_t S, uint16_t V, uint16_t Delay)
{
    4034:	sub	sp, #20
  if ((CurrentMode != Fading && RunningFX) || (CurrentMode == Fading && !FadingDone))
    4036:	cmp	r4, #1
    pixels[Id].Trigger = 1;
  }
}

void StripCommand::fadeToHSV(uint16_t H, uint16_t S, uint16_t V, uint16_t Delay)
{
    4038:	ldrh.w	r7, [sp, #56]	; 0x38
  if ((CurrentMode != Fading && RunningFX) || (CurrentMode == Fading && !FadingDone))
    403c:	beq.w	4270 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x244>
    4040:	ldrb.w	r4, [r0, #245]	; 0xf5
    4044:	cmp	r4, #0
    4046:	bne.w	4262 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x236>
    404a:	mov	r6, r0
    404c:	mov	r4, r1
    404e:	ldr	r0, [pc, #632]	; (42c8 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x29c>)
    4050:	movs	r1, #22
    4052:	mov	r8, r2
    4054:	mov	r9, r3
    4056:	bl	8dec <usb_serial_write>
    405a:	ldr	r0, [pc, #624]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    405c:	bl	a780 <Print::println()>
    return;

  Serial.println("Fading To HSV Received");

  CurrentMode = Fading;
    4060:	movs	r3, #1
    4062:	strb.w	r3, [r6, #244]	; 0xf4
  StartingColor = rgb2hsv_approximate(leds[0]);
    4066:	add	r0, sp, #12
    4068:	add.w	r1, r6, #62	; 0x3e
    406c:	bl	594c <rgb2hsv_approximate(CRGB const&)>
  TargetColor = CHSV(H, S, V);
  FadingDelay = Delay;
  FadingDone = false;
    4070:	movs	r5, #0
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    4072:	ldrb.w	r1, [sp, #12]
        s = rhs.s;
    4076:	ldrb.w	r2, [sp, #13]
        v = rhs.v;
    407a:	ldrb.w	r3, [sp, #14]
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    407e:	strb.w	r4, [r6, #254]	; 0xfe
  Serial.println("Fading To HSV Received");

  CurrentMode = Fading;
  StartingColor = rgb2hsv_approximate(leds[0]);
  TargetColor = CHSV(H, S, V);
  FadingDelay = Delay;
    4082:	strh.w	r7, [r6, #248]	; 0xf8
    4086:	strb.w	r1, [r6, #251]	; 0xfb
        s = rhs.s;
    408a:	strb.w	r2, [r6, #252]	; 0xfc
        v = rhs.v;
    408e:	strb.w	r3, [r6, #253]	; 0xfd
  FadingDone = false;
    4092:	strb.w	r5, [r6, #707]	; 0x2c3
    4096:	movs	r1, #9
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
        s = rhs.s;
    4098:	strb.w	r8, [r6, #255]	; 0xff
        v = rhs.v;
    409c:	strb.w	r9, [r6, #256]	; 0x100
    40a0:	ldr	r0, [pc, #556]	; (42d0 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a4>)
  Serial.print(StartingColor.h);
  Serial.print(" FadingDone ? ");
  Serial.println(FadingDone);
#endif

  RefreshRate = FadingDelay / MAX_TRANSIENT_STEPS;
    40a2:	ldr	r4, [pc, #560]	; (42d4 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a8>)
    40a4:	bl	8dec <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    40a8:	mov	r3, r5
    40aa:	movs	r2, #10
    40ac:	ldrb.w	r1, [r6, #254]	; 0xfe
    40b0:	ldr	r0, [pc, #536]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    40b2:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    40b6:	movs	r1, #13
    40b8:	ldr	r0, [pc, #540]	; (42d8 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2ac>)
    40ba:	bl	8dec <usb_serial_write>
    40be:	mov	r3, r5
    40c0:	movs	r2, #10
    40c2:	ldrb.w	r1, [r6, #251]	; 0xfb
    40c6:	ldr	r0, [pc, #516]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    40c8:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    40cc:	movs	r1, #14
    40ce:	ldr	r0, [pc, #524]	; (42dc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2b0>)
    40d0:	bl	8dec <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    40d4:	ldrb.w	r1, [r6, #707]	; 0x2c3
    40d8:	ldr	r0, [pc, #496]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    40da:	bl	a820 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    40de:	ldr	r0, [pc, #492]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    40e0:	bl	a780 <Print::println()>
    40e4:	ldrh.w	r3, [r6, #248]	; 0xf8
    /// allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
        s = rhs.s;
        v = rhs.v;
    40e8:	ldrb.w	r2, [r6, #256]	; 0x100
    }

    /// allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    40ec:	ldrb.w	lr, [r6, #251]	; 0xfb
        s = rhs.s;
    40f0:	ldrb.w	r7, [r6, #252]	; 0xfc
        v = rhs.v;
    40f4:	ldrb.w	r5, [r6, #253]	; 0xfd
    }

    /// allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    40f8:	ldrb.w	r0, [r6, #254]	; 0xfe
        s = rhs.s;
    40fc:	ldrb.w	r1, [r6, #255]	; 0xff
    4100:	umull	r4, r3, r4, r3
    4104:	lsrs	r3, r3, #4
    4106:	strh.w	r3, [r6, #246]	; 0xf6
  fill_gradient(GradientBuffer, 0, StartingColor, MAX_TRANSIENT_STEPS - 1, TargetColor);
    410a:	addw	r3, r6, #257	; 0x101

    // If we're fading toward black (val=0) or white (sat=0),
    // then set the endhue to the starthue.
    // This lets us ramp smoothly to black or white, regardless
    // of what 'hue' was set in the endcolor (since it doesn't matter)
    if( endcolor.value == 0 || endcolor.saturation == 0) {
    410e:	cmp	r2, #0
    4110:	bne.w	4268 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x23c>
        endcolor.hue = startcolor.hue;
    4114:	mov	r0, lr

    // Similarly, if we're fading in from black (val=0) or white (sat=0)
    // then set the starthue to the endhue.
    // This lets us ramp smoothly up from black or white, regardless
    // of what 'hue' was set in the startcolor (since it doesn't matter)
    if( startcolor.value == 0 || startcolor.saturation == 0) {
    4116:	cbz	r5, 411e <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0xf2>
    4118:	cmp	r7, #0
    411a:	bne.w	427c <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x250>

    saccum87 huedistance87;
    saccum87 satdistance87;
    saccum87 valdistance87;

    satdistance87 = (endcolor.sat - startcolor.sat) << 7;
    411e:	subs	r1, r1, r7
    valdistance87 = (endcolor.val - startcolor.val) << 7;
    4120:	subs	r2, r2, r5

    saccum87 huedistance87;
    saccum87 satdistance87;
    saccum87 valdistance87;

    satdistance87 = (endcolor.sat - startcolor.sat) << 7;
    4122:	lsls	r1, r1, #7
    valdistance87 = (endcolor.val - startcolor.val) << 7;
    4124:	lsls	r2, r2, #7
    4126:	mov.w	r9, #0
    saccum87 huedelta87 = huedistance87 / divisor;
    saccum87 satdelta87 = satdistance87 / divisor;
    saccum87 valdelta87 = valdistance87 / divisor;

    huedelta87 *= 2;
    satdelta87 *= 2;
    412a:	ldr	r4, [pc, #436]	; (42e0 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2b4>)
    412c:	smull	lr, r8, r4, r1
    valdelta87 *= 2;
    4130:	smull	lr, r4, r4, r2
    4134:	asrs	r2, r2, #31
    4136:	rsb	r2, r2, r4, asr #3
    saccum87 huedelta87 = huedistance87 / divisor;
    saccum87 satdelta87 = satdistance87 / divisor;
    saccum87 valdelta87 = valdistance87 / divisor;

    huedelta87 *= 2;
    satdelta87 *= 2;
    413a:	asrs	r1, r1, #31
    413c:	rsb	r8, r1, r8, asr #3
    valdelta87 *= 2;
    4140:	lsls	r2, r2, #1
    saccum87 huedelta87 = huedistance87 / divisor;
    saccum87 satdelta87 = satdistance87 / divisor;
    saccum87 valdelta87 = valdistance87 / divisor;

    huedelta87 *= 2;
    satdelta87 *= 2;
    4142:	mov.w	r8, r8, lsl #1
    valdelta87 *= 2;

    accum88 hue88 = startcolor.hue << 8;
    accum88 sat88 = startcolor.sat << 8;
    4146:	mov.w	fp, r7, lsl #8
    414a:	mov	r7, r3
    saccum87 satdelta87 = satdistance87 / divisor;
    saccum87 valdelta87 = valdistance87 / divisor;

    huedelta87 *= 2;
    satdelta87 *= 2;
    valdelta87 *= 2;
    414c:	uxth	r3, r2

    accum88 hue88 = startcolor.hue << 8;
    414e:	lsls	r4, r0, #8
    accum88 sat88 = startcolor.sat << 8;
    accum88 val88 = startcolor.val << 8;
    4150:	lsls	r5, r5, #8
    saccum87 huedelta87 = huedistance87 / divisor;
    saccum87 satdelta87 = satdistance87 / divisor;
    saccum87 valdelta87 = valdistance87 / divisor;

    huedelta87 *= 2;
    satdelta87 *= 2;
    4152:	uxth.w	r8, r8
    valdelta87 *= 2;
    4156:	str	r3, [sp, #4]
    4158:	addw	sl, r6, #707	; 0x2c3
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    415c:	asrs	r1, r4, #8
    415e:	mov.w	r0, fp, asr #8
    4162:	asrs	r2, r5, #8
    4164:	strb.w	r1, [sp, #12]
    4168:	strb.w	r0, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    416c:	mov	r1, r7
    416e:	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4170:	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4174:	bl	57e0 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    accum88 val88 = startcolor.val << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
        targetArray[i] = CHSV( hue88 >> 8, sat88 >> 8, val88 >> 8);
        hue88 += huedelta87;
        sat88 += satdelta87;
        val88 += valdelta87;
    4178:	ldr	r3, [sp, #4]
    417a:	adds	r7, #3
    accum88 hue88 = startcolor.hue << 8;
    accum88 sat88 = startcolor.sat << 8;
    accum88 val88 = startcolor.val << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
        targetArray[i] = CHSV( hue88 >> 8, sat88 >> 8, val88 >> 8);
        hue88 += huedelta87;
    417c:	add	r4, r9
        sat88 += satdelta87;
    417e:	add	fp, r8
        val88 += valdelta87;
    4180:	add	r5, r3
    valdelta87 *= 2;

    accum88 hue88 = startcolor.hue << 8;
    accum88 sat88 = startcolor.sat << 8;
    accum88 val88 = startcolor.val << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    4182:	cmp	r7, sl
        targetArray[i] = CHSV( hue88 >> 8, sat88 >> 8, val88 >> 8);
        hue88 += huedelta87;
    4184:	uxth	r4, r4
        sat88 += satdelta87;
    4186:	uxth.w	fp, fp
        val88 += valdelta87;
    418a:	uxth	r5, r5
    valdelta87 *= 2;

    accum88 hue88 = startcolor.hue << 8;
    accum88 sat88 = startcolor.sat << 8;
    accum88 val88 = startcolor.val << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    418c:	bne.n	415c <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x130>
    418e:	mov	r4, r6
  for (int x = 0; x < MAX_TRANSIENT_STEPS; x++)
    4190:	movs	r5, #0
    4192:	movs	r1, #8
    4194:	ldr	r0, [pc, #332]	; (42e4 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2b8>)
    4196:	bl	8dec <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    419a:	mov	r1, r5
    419c:	ldr	r0, [pc, #300]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    419e:	bl	a820 <Print::print(long)>
    41a2:	movs	r1, #5
    41a4:	ldr	r0, [pc, #320]	; (42e8 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2bc>)
    41a6:	bl	8dec <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    41aa:	movs	r3, #0
    41ac:	movs	r2, #10
    41ae:	ldrb.w	r1, [r4, #257]	; 0x101
    41b2:	ldr	r0, [pc, #280]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    41b4:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    41b8:	movs	r1, #5
    41ba:	ldr	r0, [pc, #304]	; (42ec <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2c0>)
    41bc:	bl	8dec <usb_serial_write>
    41c0:	movs	r3, #0
    41c2:	movs	r2, #10
    41c4:	ldrb.w	r1, [r4, #258]	; 0x102
    41c8:	ldr	r0, [pc, #256]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    41ca:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    41ce:	movs	r1, #5
    41d0:	ldr	r0, [pc, #284]	; (42f0 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2c4>)
    41d2:	bl	8dec <usb_serial_write>
    41d6:	ldrb.w	r1, [r4, #259]	; 0x103
    41da:	ldr	r0, [pc, #240]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    41dc:	movs	r3, #0
    41de:	movs	r2, #10
    41e0:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    41e4:	adds	r5, #1
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    41e6:	ldr	r0, [pc, #228]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    41e8:	bl	a780 <Print::println()>
    41ec:	cmp	r5, #150	; 0x96
    41ee:	add.w	r4, r4, #3
    41f2:	bne.n	4192 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x166>
    Serial.print(" G = ");
    Serial.print(GradientBuffer[x].g);
    Serial.print(" B = ");
    Serial.println(GradientBuffer[x].b);
  }
  GradientIndex = 0;
    41f4:	movs	r4, #0
    41f6:	movs	r1, #13
    41f8:	strb.w	r4, [r6, #250]	; 0xfa
    41fc:	ldr	r0, [pc, #244]	; (42f4 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2c8>)
    41fe:	bl	8dec <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4202:	ldrh.w	r1, [r6, #246]	; 0xf6
    4206:	ldr	r0, [pc, #196]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    4208:	bl	a820 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    420c:	ldr	r0, [pc, #188]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    420e:	bl	a780 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4212:	ldr	r3, [pc, #228]	; (42f8 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2cc>)
    4214:	ldr	r0, [pc, #184]	; (42d0 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a4>)
    4216:	ldr	r3, [r3, #0]
    4218:	str	r3, [sp, #12]
	return ret;
    421a:	ldr	r3, [sp, #12]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    421c:	str.w	r3, [r6, #232]	; 0xe8
    4220:	movs	r1, #9
    4222:	bl	8dec <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4226:	mov	r3, r4
    4228:	movs	r2, #10
    422a:	ldrb.w	r1, [r6, #254]	; 0xfe
    422e:	ldr	r0, [pc, #156]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    4230:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4234:	movs	r1, #13
    4236:	ldr	r0, [pc, #160]	; (42d8 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2ac>)
    4238:	bl	8dec <usb_serial_write>
    423c:	mov	r3, r4
    423e:	movs	r2, #10
    4240:	ldrb.w	r1, [r6, #251]	; 0xfb
    4244:	ldr	r0, [pc, #132]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    4246:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    424a:	movs	r1, #14
    424c:	ldr	r0, [pc, #140]	; (42dc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2b0>)
    424e:	bl	8dec <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4252:	ldrb.w	r1, [r6, #707]	; 0x2c3
    4256:	ldr	r0, [pc, #116]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    4258:	bl	a820 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    425c:	ldr	r0, [pc, #108]	; (42cc <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2a0>)
    425e:	bl	a780 <Print::println()>
  Serial.print(TargetColor.h);
  Serial.print(" starting H, ");
  Serial.print(StartingColor.h);
  Serial.print(" FadingDone ? ");
  Serial.println(FadingDone);
}
    4262:	add	sp, #20
    4264:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // If we're fading toward black (val=0) or white (sat=0),
    // then set the endhue to the starthue.
    // This lets us ramp smoothly to black or white, regardless
    // of what 'hue' was set in the endcolor (since it doesn't matter)
    if( endcolor.value == 0 || endcolor.saturation == 0) {
        endcolor.hue = startcolor.hue;
    4268:	cmp	r1, #0
    426a:	it	eq
    426c:	moveq	r0, lr
    426e:	b.n	4116 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
  }
}

void StripCommand::fadeToHSV(uint16_t H, uint16_t S, uint16_t V, uint16_t Delay)
{
  if ((CurrentMode != Fading && RunningFX) || (CurrentMode == Fading && !FadingDone))
    4270:	ldrb.w	r4, [r0, #707]	; 0x2c3
    4274:	cmp	r4, #0
    4276:	bne.w	404a <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x1e>
    427a:	b.n	4262 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x236>
    saccum87 valdistance87;

    satdistance87 = (endcolor.sat - startcolor.sat) << 7;
    valdistance87 = (endcolor.val - startcolor.val) << 7;

    uint8_t huedelta8 = endcolor.hue - startcolor.hue;
    427c:	rsb	r0, lr, r0
    4280:	uxtb	r0, r0

    saccum87 huedistance87;
    saccum87 satdistance87;
    saccum87 valdistance87;

    satdistance87 = (endcolor.sat - startcolor.sat) << 7;
    4282:	subs	r1, r1, r7
    valdistance87 = (endcolor.val - startcolor.val) << 7;
    4284:	subs	r2, r2, r5

    uint8_t huedelta8 = endcolor.hue - startcolor.hue;

    if( directionCode == SHORTEST_HUES ) {
        directionCode = FORWARD_HUES;
        if( huedelta8 > 127) {
    4286:	lsls	r4, r0, #24

    saccum87 huedistance87;
    saccum87 satdistance87;
    saccum87 valdistance87;

    satdistance87 = (endcolor.sat - startcolor.sat) << 7;
    4288:	mov.w	r1, r1, lsl #7
    valdistance87 = (endcolor.val - startcolor.val) << 7;
    428c:	mov.w	r2, r2, lsl #7

    uint8_t huedelta8 = endcolor.hue - startcolor.hue;

    if( directionCode == SHORTEST_HUES ) {
        directionCode = FORWARD_HUES;
        if( huedelta8 > 127) {
    4290:	bpl.n	42b4 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x288>
    4292:	negs	r0, r0
    4294:	uxtb	r0, r0
    4296:	lsls	r0, r0, #7
    4298:	negs	r0, r0
    429a:	ldr	r4, [pc, #68]	; (42e0 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2b4>)
    429c:	sxth	r0, r0
    429e:	smull	r4, r9, r4, r0
    42a2:	asrs	r0, r0, #31
    42a4:	rsb	r9, r0, r9, asr #3
    42a8:	mov.w	r9, r9, lsl #1
    }

    /// allow copy construction
    inline CHSV(const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    42ac:	mov	r0, lr
    42ae:	uxth.w	r9, r9
    42b2:	b.n	412a <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0xfe>
    42b4:	ldr	r4, [pc, #40]	; (42e0 <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0x2b4>)
    42b6:	lsls	r0, r0, #7
    42b8:	smull	r0, r9, r4, r0
    42bc:	mov.w	r9, r9, lsr #3
    42c0:	mov	r0, lr
    42c2:	mov.w	r9, r9, lsl #1
    42c6:	b.n	412a <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)+0xfe>
    42c8:	.word	0x0000c94c
    42cc:	.word	0x1fff965c
    42d0:	.word	0x0000c964
    42d4:	.word	0x1b4e81b5
    42d8:	.word	0x0000c970
    42dc:	.word	0x0000c980
    42e0:	.word	0x0dbeb61f
    42e4:	.word	0x0000c990
    42e8:	.word	0x0000c99c
    42ec:	.word	0x0000c9a4
    42f0:	.word	0x0000c9ac
    42f4:	.word	0x0000c9b4
    42f8:	.word	0x1fffbccc

000042fc <StripCommand::setToHSV(unsigned short, unsigned short, unsigned short)>:
  Serial.print(" FadingDone ? ");
  Serial.println(FadingDone);
}

void StripCommand::setToHSV(uint16_t H, uint16_t S, uint16_t V)
{
    42fc:	push	{r4, lr}
    42fe:	sub	sp, #8
    4300:	mov	r4, r0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4302:	strb.w	r1, [sp]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4306:	mov	r0, sp
    4308:	add	r1, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    430a:	strb.w	r3, [sp, #2]
    430e:	strb.w	r2, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4312:	bl	57e0 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
  fill_solid(leds, NUM_LEDS, CHSV(H, S, V));
    4316:	add	r2, sp, #4
    4318:	add.w	r0, r4, #62	; 0x3e
    431c:	movs	r1, #56	; 0x38
    431e:	bl	5780 <fill_solid(CRGB*, int, CRGB const&)>
  StateChanged = true;
    4322:	movs	r3, #1
    4324:	strb.w	r3, [r4, #230]	; 0xe6
}
    4328:	add	sp, #8
    432a:	pop	{r4, pc}

0000432c <StripCommand::fadeToRGB(unsigned char, unsigned char, unsigned char, unsigned short)>:

void StripCommand::fadeToRGB(uint8_t R, uint8_t G, uint8_t B, uint16_t Delay)
{
    432c:	push	{r4, r5, lr}
    432e:	sub	sp, #20
    4330:	mov	r4, r0
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    4332:	strb.w	r1, [sp, #12]
  CHSV myColor = rgb2hsv_approximate(CRGB(R, G, B));
    4336:	add	r0, sp, #8
    4338:	add	r1, sp, #12
  fill_solid(leds, NUM_LEDS, CHSV(H, S, V));
  StateChanged = true;
}

void StripCommand::fadeToRGB(uint8_t R, uint8_t G, uint8_t B, uint16_t Delay)
{
    433a:	ldrh.w	r5, [sp, #32]
    433e:	strb.w	r2, [sp, #13]
    4342:	strb.w	r3, [sp, #14]
  CHSV myColor = rgb2hsv_approximate(CRGB(R, G, B));
    4346:	bl	594c <rgb2hsv_approximate(CRGB const&)>
  fadeToHSV(myColor.h, myColor.s, myColor.v, Delay);
    434a:	ldrb.w	r3, [sp, #10]
    434e:	ldrb.w	r2, [sp, #9]
    4352:	ldrb.w	r1, [sp, #8]
    4356:	str	r5, [sp, #0]
    4358:	mov	r0, r4
    435a:	bl	402c <StripCommand::fadeToHSV(unsigned short, unsigned short, unsigned short, unsigned short)>
}
    435e:	add	sp, #20
    4360:	pop	{r4, r5, pc}
    4362:	nop

00004364 <StripCommand::setToRGB(unsigned char, unsigned char, unsigned char)>:

void StripCommand::setToRGB(uint8_t R, uint8_t G, uint8_t B)
{
    4364:	push	{r4, lr}
    4366:	sub	sp, #8
    4368:	mov	r4, r0
    436a:	strb.w	r1, [sp, #4]
    436e:	strb.w	r2, [sp, #5]
  fill_solid(leds, NUM_LEDS, CRGB(R, G, B));
    4372:	adds	r0, #62	; 0x3e
    4374:	add	r2, sp, #4
    4376:	movs	r1, #56	; 0x38
    4378:	strb.w	r3, [sp, #6]
    437c:	bl	5780 <fill_solid(CRGB*, int, CRGB const&)>
  StateChanged = true;
    4380:	movs	r3, #1
    4382:	strb.w	r3, [r4, #230]	; 0xe6
}
    4386:	add	sp, #8
    4388:	pop	{r4, pc}
    438a:	nop

0000438c <StripCommand::rainbow()>:

void StripCommand::rainbow()
{
  if (CurrentMode != Rainbow && RunningFX)
    438c:	ldrb.w	r3, [r0, #244]	; 0xf4
    4390:	cmp	r3, #2
  fill_solid(leds, NUM_LEDS, CRGB(R, G, B));
  StateChanged = true;
}

void StripCommand::rainbow()
{
    4392:	push	{r4, lr}
    4394:	mov	r4, r0
  if (CurrentMode != Rainbow && RunningFX)
    4396:	beq.n	43a4 <StripCommand::rainbow()+0x18>
    4398:	ldrb.w	r3, [r0, #245]	; 0xf5
    439c:	cbz	r3, 43a4 <StripCommand::rainbow()+0x18>
  {
    CurrentMode = Rainbow;
    439e:	movs	r3, #2
    43a0:	strb.w	r3, [r0, #244]	; 0xf4
  }
  fill_rainbow(leds, 56, CurrentRainbowStartingHue, 5);
    43a4:	movs	r3, #5
    43a6:	ldrb.w	r2, [r4, #708]	; 0x2c4
    43aa:	movs	r1, #56	; 0x38
    43ac:	add.w	r0, r4, #62	; 0x3e
    43b0:	bl	57a0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
  StateChanged = true;
    43b4:	movs	r3, #1
    43b6:	strb.w	r3, [r4, #230]	; 0xe6
    43ba:	pop	{r4, pc}

000043bc <StripCommand::dynamicStateUpdate()>:
    pixels[i].init(i, Group[i]);
  }
}

void StripCommand::dynamicStateUpdate()
{
    43bc:	push	{r4, r5, r6, r7, lr}
  RunningFX = false;
  switch (CurrentMode)
    43be:	ldrb.w	r3, [r0, #244]	; 0xf4
  }
}

void StripCommand::dynamicStateUpdate()
{
  RunningFX = false;
    43c2:	movs	r2, #0
  switch (CurrentMode)
    43c4:	cmp	r3, #1
    pixels[i].init(i, Group[i]);
  }
}

void StripCommand::dynamicStateUpdate()
{
    43c6:	sub	sp, #20
    43c8:	mov	r6, r0
  RunningFX = false;
    43ca:	strb.w	r2, [r0, #245]	; 0xf5
  switch (CurrentMode)
    43ce:	beq.n	4434 <StripCommand::dynamicStateUpdate()+0x78>
    43d0:	bcc.n	43f0 <StripCommand::dynamicStateUpdate()+0x34>
    43d2:	cmp	r3, #2
    43d4:	bne.n	43ec <StripCommand::dynamicStateUpdate()+0x30>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    43d6:	ldr	r3, [pc, #276]	; (44ec <StripCommand::dynamicStateUpdate()+0x130>)
      }
    }
    break;

  case Rainbow:
    if (RainbowTimer >= RainbowRate)
    43d8:	ldr.w	r4, [r0, #236]	; 0xec
    43dc:	ldr	r3, [r3, #0]
    43de:	str	r3, [sp, #12]
	return ret;
    43e0:	ldr	r3, [sp, #12]
    43e2:	ldr.w	r1, [r0, #240]	; 0xf0
    43e6:	subs	r3, r3, r4
    43e8:	cmp	r1, r3
    43ea:	bls.n	44b4 <StripCommand::dynamicStateUpdate()+0xf8>
    break;

  default:
    break;
  }
}
    43ec:	add	sp, #20
    43ee:	pop	{r4, r5, r6, r7, pc}
    43f0:	add.w	r5, r0, #712	; 0x2c8
    43f4:	mov	r4, r0
    43f6:	add.w	r7, r0, #168	; 0xa8
  {
  case Flashing:
  {
    for (uint8_t i = 0; i < NUM_LEDS; i++)
    {
      leds[i] = pixels[i].update();
    43fa:	mov	r1, r5
    43fc:	add	r0, sp, #12
    43fe:	bl	4534 <StripLED::update()>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4402:	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    4406:	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    440a:	ldrb.w	r1, [sp, #12]
    440e:	strb.w	r1, [r4, #62]	; 0x3e
        g = rhs.g;
    4412:	strb.w	r2, [r4, #63]	; 0x3f
        b = rhs.b;
    4416:	strb.w	r3, [r4, #64]	; 0x40
      RunningFX |= pixels[i].Active;
    441a:	ldrb	r3, [r5, #9]
    441c:	ldrb.w	r2, [r6, #245]	; 0xf5
    4420:	adds	r4, #3
    4422:	orrs	r3, r2
  RunningFX = false;
  switch (CurrentMode)
  {
  case Flashing:
  {
    for (uint8_t i = 0; i < NUM_LEDS; i++)
    4424:	cmp	r4, r7
    {
      leds[i] = pixels[i].update();
      RunningFX |= pixels[i].Active;
    4426:	strb.w	r3, [r6, #245]	; 0xf5
    442a:	add.w	r5, r5, #36	; 0x24
  RunningFX = false;
  switch (CurrentMode)
  {
  case Flashing:
  {
    for (uint8_t i = 0; i < NUM_LEDS; i++)
    442e:	bne.n	43fa <StripCommand::dynamicStateUpdate()+0x3e>
    break;

  default:
    break;
  }
}
    4430:	add	sp, #20
    4432:	pop	{r4, r5, r6, r7, pc}
    }
  }
  break;

  case Fading:
    if (!FadingDone)
    4434:	ldrb.w	r2, [r0, #707]	; 0x2c3
    4438:	cmp	r2, #0
    443a:	bne.n	43ec <StripCommand::dynamicStateUpdate()+0x30>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    443c:	ldr	r4, [pc, #172]	; (44ec <StripCommand::dynamicStateUpdate()+0x130>)
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    443e:	ldr.w	r0, [r0, #232]	; 0xe8
    4442:	ldr	r2, [r4, #0]
    4444:	str	r2, [sp, #4]
	return ret;
    4446:	ldr	r2, [sp, #4]
    {
      RunningFX = true;
      if (tStrip >= RefreshRate)
    4448:	ldrh.w	r1, [r6, #246]	; 0xf6
  break;

  case Fading:
    if (!FadingDone)
    {
      RunningFX = true;
    444c:	strb.w	r3, [r6, #245]	; 0xf5
      if (tStrip >= RefreshRate)
    4450:	subs	r3, r2, r0
    4452:	cmp	r1, r3
    4454:	bhi.n	43ec <StripCommand::dynamicStateUpdate()+0x30>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4456:	ldr	r3, [r4, #0]
    4458:	str	r3, [sp, #8]
	return ret;
    445a:	ldr	r3, [sp, #8]
      {
        while (tStrip >= RefreshRate)
    445c:	subs	r0, r3, r0
    445e:	cmp	r1, r0
    4460:	bhi.n	4490 <StripCommand::dynamicStateUpdate()+0xd4>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4462:	movs	r3, #0
    4464:	movs	r2, #10
    4466:	ldrb.w	r1, [r6, #250]	; 0xfa
    446a:	ldr	r0, [pc, #132]	; (44f0 <StripCommand::dynamicStateUpdate()+0x134>)
    446c:	bl	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    4470:	ldr	r0, [pc, #124]	; (44f0 <StripCommand::dynamicStateUpdate()+0x134>)
    4472:	bl	a780 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4476:	ldr	r3, [r4, #0]
    4478:	str	r3, [sp, #8]
        {
          Serial.println(GradientIndex);
          tStrip -= RefreshRate;
    447a:	ldrh.w	r1, [r6, #246]	; 0xf6
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
	elapsedMillis & operator -= (unsigned long val)      { ms += val ; return *this; }
    447e:	ldr.w	r3, [r6, #232]	; 0xe8
	return ret;
    4482:	ldr	r2, [sp, #8]
    4484:	add	r3, r1
    if (!FadingDone)
    {
      RunningFX = true;
      if (tStrip >= RefreshRate)
      {
        while (tStrip >= RefreshRate)
    4486:	subs	r2, r2, r3
    4488:	cmp	r1, r2
    448a:	str.w	r3, [r6, #232]	; 0xe8
    448e:	bls.n	4462 <StripCommand::dynamicStateUpdate()+0xa6>
        {
          Serial.println(GradientIndex);
          tStrip -= RefreshRate;
        }
        if (GradientIndex < 150)
    4490:	ldrb.w	r3, [r6, #250]	; 0xfa
    4494:	cmp	r3, #149	; 0x95
    4496:	bhi.n	44c8 <StripCommand::dynamicStateUpdate()+0x10c>
        {
          GradientIndex++;
    4498:	adds	r3, #1
    449a:	uxtb	r3, r3
          fill_solid(leds, NUM_LEDS, GradientBuffer[GradientIndex - 1]);
    449c:	add.w	r2, r3, r3, lsl #1
    44a0:	add	r2, r6
          Serial.println(GradientIndex);
          tStrip -= RefreshRate;
        }
        if (GradientIndex < 150)
        {
          GradientIndex++;
    44a2:	strb.w	r3, [r6, #250]	; 0xfa
          fill_solid(leds, NUM_LEDS, GradientBuffer[GradientIndex - 1]);
    44a6:	adds	r2, #254	; 0xfe
    44a8:	add.w	r0, r6, #62	; 0x3e
    44ac:	movs	r1, #56	; 0x38
    44ae:	bl	5780 <fill_solid(CRGB*, int, CRGB const&)>
          return;
    44b2:	b.n	43ec <StripCommand::dynamicStateUpdate()+0x30>

  case Rainbow:
    if (RainbowTimer >= RainbowRate)
    {
      RainbowRate = 0;
      CurrentRainbowStartingHue +=1;
    44b4:	ldrb.w	r3, [r0, #708]	; 0x2c4
    break;

  case Rainbow:
    if (RainbowTimer >= RainbowRate)
    {
      RainbowRate = 0;
    44b8:	str.w	r2, [r0, #240]	; 0xf0
      CurrentRainbowStartingHue +=1;
    44bc:	adds	r3, #1
    44be:	strb.w	r3, [r0, #708]	; 0x2c4
      this->rainbow();
    44c2:	bl	438c <StripCommand::rainbow()>
    44c6:	b.n	43ec <StripCommand::dynamicStateUpdate()+0x30>
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    44c8:	add	r1, sp, #12
    44ca:	add.w	r0, r6, #254	; 0xfe
    44ce:	bl	57e0 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
          fill_solid(leds, NUM_LEDS, GradientBuffer[GradientIndex - 1]);
          return;
        }
        else
        {
          fill_solid(leds, NUM_LEDS, TargetColor);
    44d2:	add	r2, sp, #12
    44d4:	movs	r1, #56	; 0x38
    44d6:	add.w	r0, r6, #62	; 0x3e
    44da:	bl	5780 <fill_solid(CRGB*, int, CRGB const&)>
          RunningFX = false;
    44de:	movs	r2, #0
          FadingDone = true;
    44e0:	movs	r3, #1
          return;
        }
        else
        {
          fill_solid(leds, NUM_LEDS, TargetColor);
          RunningFX = false;
    44e2:	strb.w	r2, [r6, #245]	; 0xf5
          FadingDone = true;
    44e6:	strb.w	r3, [r6, #707]	; 0x2c3
    44ea:	b.n	43ec <StripCommand::dynamicStateUpdate()+0x30>
    44ec:	.word	0x1fffbccc
    44f0:	.word	0x1fff965c

000044f4 <StripLED::StripLED()>:
#include "StripLED.h"

StripLED::StripLED()
    44f4:	push	{r4, r5, r6}
    44f6:	movs	r2, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44f8:	ldr	r1, [pc, #44]	; (4528 <StripLED::StripLED()+0x34>)
    44fa:	strb	r2, [r0, #2]
    44fc:	sub	sp, #12
    44fe:	ldr	r1, [r1, #0]
    4500:	str	r1, [sp, #4]
	return ret;
    4502:	ldr	r6, [sp, #4]
    4504:	strh	r2, [r0, #0]
    4506:	movs	r1, #100	; 0x64
    4508:	movs	r5, #10
    450a:	movs	r4, #30
    450c:	strb	r2, [r0, #3]
    450e:	strb	r2, [r0, #8]
    4510:	strb	r2, [r0, #9]
    4512:	strb	r2, [r0, #10]
    4514:	strh	r2, [r0, #22]
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
    4516:	str	r6, [r0, #4]
    4518:	strh	r5, [r0, #12]
    451a:	strh	r4, [r0, #14]
    451c:	strh	r1, [r0, #16]
    451e:	strh	r1, [r0, #18]
{
}
    4520:	add	sp, #12
    4522:	pop	{r4, r5, r6}
    4524:	bx	lr
    4526:	nop
    4528:	.word	0x1fffbccc

0000452c <StripLED::init(unsigned short, unsigned char)>:

void StripLED::init(uint16_t ID, uint8_t Group)
{
  this->ID = ID;
    452c:	strh	r1, [r0, #0]
  this->Group = Group;
    452e:	strb	r2, [r0, #2]
    4530:	bx	lr
    4532:	nop

00004534 <StripLED::update()>:
}

CRGB StripLED::update()
{
    4534:	push	{r4, r5, r6, r7, lr}
  if (Trigger && !Active)
    4536:	ldrb	r3, [r1, #3]
  this->ID = ID;
  this->Group = Group;
}

CRGB StripLED::update()
{
    4538:	sub	sp, #20
    453a:	mov	r4, r1
    453c:	mov	r5, r0
  if (Trigger && !Active)
    453e:	cbnz	r3, 4552 <StripLED::update()+0x1e>
    4540:	ldrb	r3, [r1, #9]
      Serial.println(this->TFall);
#endif
    }
    t = 0;
  }
  if (Active)
    4542:	cbnz	r3, 4570 <StripLED::update()+0x3c>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4544:	movs	r3, #0
      }
      return CRGB(CHSV(0, 0, Brightness));
    }
  }
  return CRGB::Black;
}
    4546:	mov	r0, r5
    4548:	strb	r3, [r5, #0]
    454a:	strb	r3, [r5, #1]
    454c:	strb	r3, [r5, #2]
    454e:	add	sp, #20
    4550:	pop	{r4, r5, r6, r7, pc}
  this->Group = Group;
}

CRGB StripLED::update()
{
  if (Trigger && !Active)
    4552:	ldrb	r2, [r1, #9]
    4554:	cbnz	r2, 4570 <StripLED::update()+0x3c>
  {
    Active = true;
    Trigger = false;
    if (this->Mode == Flashing)
    4556:	ldrb	r1, [r1, #8]
CRGB StripLED::update()
{
  if (Trigger && !Active)
  {
    Active = true;
    Trigger = false;
    4558:	strb	r2, [r4, #3]

CRGB StripLED::update()
{
  if (Trigger && !Active)
  {
    Active = true;
    455a:	movs	r2, #1
    455c:	strb	r2, [r4, #9]
    Trigger = false;
    if (this->Mode == Flashing)
    455e:	cmp	r1, #0
    4560:	beq.n	45c6 <StripLED::update()+0x92>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4562:	ldr	r2, [pc, #332]	; (46b0 <StripLED::update()+0x17c>)
    4564:	ldr	r2, [r2, #0]
    4566:	str	r2, [sp, #8]
	return ret;
    4568:	ldr	r2, [sp, #8]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    456a:	str	r2, [r4, #4]
      Serial.println(this->TFall);
#endif
    }
    t = 0;
  }
  if (Active)
    456c:	cmp	r3, #0
    456e:	beq.n	4544 <StripLED::update()+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4570:	ldr	r3, [pc, #316]	; (46b0 <StripLED::update()+0x17c>)
  {
    uint16_t T = t;
    if (this->Mode == Flashing)
    4572:	ldrb	r2, [r4, #8]
    4574:	ldr	r3, [r3, #0]
    4576:	str	r3, [sp, #12]
	return ret;
    4578:	ldr	r3, [sp, #12]
    457a:	cmp	r2, #0
    457c:	bne.n	4544 <StripLED::update()+0x10>
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    457e:	ldr	r0, [r4, #4]
    {
      if (T <= Offset)
    4580:	ldrh	r1, [r4, #22]
    4582:	subs	r3, r3, r0
    }
    t = 0;
  }
  if (Active)
  {
    uint16_t T = t;
    4584:	uxth	r3, r3
    if (this->Mode == Flashing)
    {
      if (T <= Offset)
    4586:	cmp	r1, r3
    4588:	bcs.n	45c2 <StripLED::update()+0x8e>
      {
        Brightness = 0;
      }
      else if (T <= SumTRise)
    458a:	ldrh	r1, [r4, #24]
    458c:	cmp	r1, r3
    458e:	bcc.n	4672 <StripLED::update()+0x13e>
      {
        Brightness = (UpStep * T) / 100;
    4590:	ldrh	r1, [r4, #30]
    4592:	ldr	r2, [pc, #288]	; (46b4 <StripLED::update()+0x180>)
    4594:	mul.w	r3, r3, r1
    4598:	smull	r1, r2, r2, r3
    459c:	asrs	r3, r3, #31
    459e:	rsb	r3, r3, r2, asr #5
    45a2:	strh	r3, [r4, #20]
    45a4:	uxtb	r2, r3
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    45a6:	movs	r3, #0
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    45a8:	add	r0, sp, #4
    45aa:	mov	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    45ac:	strb.w	r2, [sp, #6]
    45b0:	strb.w	r3, [sp, #4]
    45b4:	strb.w	r3, [sp, #5]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    45b8:	bl	57e0 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
      }
      return CRGB(CHSV(0, 0, Brightness));
    }
  }
  return CRGB::Black;
}
    45bc:	mov	r0, r5
    45be:	add	sp, #20
    45c0:	pop	{r4, r5, r6, r7, pc}
    uint16_t T = t;
    if (this->Mode == Flashing)
    {
      if (T <= Offset)
      {
        Brightness = 0;
    45c2:	strh	r2, [r4, #20]
    45c4:	b.n	45a6 <StripLED::update()+0x72>
  {
    Active = true;
    Trigger = false;
    if (this->Mode == Flashing)
    {
      TRise = random(5, 25);
    45c6:	movs	r1, #25
    45c8:	movs	r0, #5
    45ca:	bl	a8b4 <random(long, long)>
      THigh = random(5, 25);
    45ce:	movs	r1, #25
  {
    Active = true;
    Trigger = false;
    if (this->Mode == Flashing)
    {
      TRise = random(5, 25);
    45d0:	strh	r0, [r4, #12]
      THigh = random(5, 25);
    45d2:	movs	r0, #5
    45d4:	bl	a8b4 <random(long, long)>
      TFall = random(50, 200);
    45d8:	movs	r1, #200	; 0xc8
    Active = true;
    Trigger = false;
    if (this->Mode == Flashing)
    {
      TRise = random(5, 25);
      THigh = random(5, 25);
    45da:	strh	r0, [r4, #14]
      TFall = random(50, 200);
    45dc:	movs	r0, #50	; 0x32
    45de:	bl	a8b4 <random(long, long)>
      SumTRise = TRise + Offset;
    45e2:	ldrh	r6, [r4, #12]
    45e4:	ldrh	r2, [r4, #22]
      SumTHigh = SumTRise + THigh;
    45e6:	ldrh	r1, [r4, #14]
      SumTFall = SumTHigh + TFall;
      UpStep = 100 * MaxBrightness / TRise;
    45e8:	ldrh	r3, [r4, #18]
    if (this->Mode == Flashing)
    {
      TRise = random(5, 25);
      THigh = random(5, 25);
      TFall = random(50, 200);
      SumTRise = TRise + Offset;
    45ea:	add	r2, r6
    45ec:	uxth	r2, r2
      SumTHigh = SumTRise + THigh;
    45ee:	add	r1, r2
    Trigger = false;
    if (this->Mode == Flashing)
    {
      TRise = random(5, 25);
      THigh = random(5, 25);
      TFall = random(50, 200);
    45f0:	uxth	r0, r0
      SumTRise = TRise + Offset;
      SumTHigh = SumTRise + THigh;
    45f2:	uxth	r1, r1
      SumTFall = SumTHigh + TFall;
    45f4:	adds	r7, r0, r1
    if (this->Mode == Flashing)
    {
      TRise = random(5, 25);
      THigh = random(5, 25);
      TFall = random(50, 200);
      SumTRise = TRise + Offset;
    45f6:	strh	r2, [r4, #24]
      SumTHigh = SumTRise + THigh;
      SumTFall = SumTHigh + TFall;
      UpStep = 100 * MaxBrightness / TRise;
    45f8:	movs	r2, #100	; 0x64
    45fa:	mul.w	r3, r2, r3
    Trigger = false;
    if (this->Mode == Flashing)
    {
      TRise = random(5, 25);
      THigh = random(5, 25);
      TFall = random(50, 200);
    45fe:	strh	r0, [r4, #16]
      SumTRise = TRise + Offset;
      SumTHigh = SumTRise + THigh;
    4600:	strh	r1, [r4, #26]
      SumTFall = SumTHigh + TFall;
      UpStep = 100 * MaxBrightness / TRise;
      DownStep = 100 * MaxBrightness / TFall;
    4602:	sdiv	r0, r3, r0
    4606:	movs	r1, #4
      THigh = random(5, 25);
      TFall = random(50, 200);
      SumTRise = TRise + Offset;
      SumTHigh = SumTRise + THigh;
      SumTFall = SumTHigh + TFall;
      UpStep = 100 * MaxBrightness / TRise;
    4608:	sdiv	r3, r3, r6
      DownStep = 100 * MaxBrightness / TFall;
    460c:	strh	r0, [r4, #32]
      THigh = random(5, 25);
      TFall = random(50, 200);
      SumTRise = TRise + Offset;
      SumTHigh = SumTRise + THigh;
      SumTFall = SumTHigh + TFall;
      UpStep = 100 * MaxBrightness / TRise;
    460e:	strh	r3, [r4, #30]
      TRise = random(5, 25);
      THigh = random(5, 25);
      TFall = random(50, 200);
      SumTRise = TRise + Offset;
      SumTHigh = SumTRise + THigh;
      SumTFall = SumTHigh + TFall;
    4610:	strh	r7, [r4, #28]
    4612:	ldr	r0, [pc, #164]	; (46b8 <StripLED::update()+0x184>)
    4614:	bl	8dec <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4618:	ldrh	r1, [r4, #0]
    461a:	ldr	r0, [pc, #160]	; (46bc <StripLED::update()+0x188>)
    461c:	bl	a820 <Print::print(long)>
    4620:	movs	r1, #19
    4622:	ldr	r0, [pc, #156]	; (46c0 <StripLED::update()+0x18c>)
    4624:	bl	8dec <usb_serial_write>
    4628:	movs	r1, #9
    462a:	ldr	r0, [pc, #152]	; (46c4 <StripLED::update()+0x190>)
    462c:	bl	8dec <usb_serial_write>
    4630:	ldrh	r1, [r4, #22]
    4632:	ldr	r0, [pc, #136]	; (46bc <StripLED::update()+0x188>)
    4634:	bl	a820 <Print::print(long)>
    4638:	movs	r1, #5
    463a:	ldr	r0, [pc, #140]	; (46c8 <StripLED::update()+0x194>)
    463c:	bl	8dec <usb_serial_write>
    4640:	ldrh	r1, [r4, #12]
    4642:	ldr	r0, [pc, #120]	; (46bc <StripLED::update()+0x188>)
    4644:	bl	a820 <Print::print(long)>
    4648:	movs	r1, #7
    464a:	ldr	r0, [pc, #128]	; (46cc <StripLED::update()+0x198>)
    464c:	bl	8dec <usb_serial_write>
    4650:	ldrh	r1, [r4, #14]
    4652:	ldr	r0, [pc, #104]	; (46bc <StripLED::update()+0x188>)
    4654:	bl	a820 <Print::print(long)>
    4658:	movs	r1, #7
    465a:	ldr	r0, [pc, #116]	; (46d0 <StripLED::update()+0x19c>)
    465c:	bl	8dec <usb_serial_write>
    4660:	ldrh	r1, [r4, #16]
    4662:	ldr	r0, [pc, #88]	; (46bc <StripLED::update()+0x188>)
    4664:	bl	a820 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4668:	ldr	r0, [pc, #80]	; (46bc <StripLED::update()+0x188>)
    466a:	bl	a780 <Print::println()>
    466e:	ldrb	r3, [r4, #9]
    4670:	b.n	4562 <StripLED::update()+0x2e>
      }
      else if (T <= SumTRise)
      {
        Brightness = (UpStep * T) / 100;
      }
      else if (T <= SumTHigh)
    4672:	ldrh	r1, [r4, #26]
    4674:	cmp	r3, r1
    4676:	bls.n	469e <StripLED::update()+0x16a>
      {
        Brightness = MaxBrightness;
      }
      else if (T <= SumTFall)
    4678:	ldrh	r0, [r4, #28]
    467a:	cmp	r0, r3
    467c:	bcc.n	46a6 <StripLED::update()+0x172>
      {
        Brightness = (MaxBrightness - DownStep * (T - SumTHigh) / 100);
    467e:	ldrh	r0, [r4, #32]
    4680:	ldr	r6, [pc, #48]	; (46b4 <StripLED::update()+0x180>)
    4682:	ldrh	r2, [r4, #18]
    4684:	subs	r3, r3, r1
    4686:	mul.w	r3, r0, r3
    468a:	smull	r0, r1, r6, r3
    468e:	asrs	r3, r3, #31
    4690:	sub.w	r3, r3, r1, asr #5
    4694:	add	r2, r3
    4696:	uxth	r2, r2
    4698:	strh	r2, [r4, #20]
    469a:	uxtb	r2, r2
    469c:	b.n	45a6 <StripLED::update()+0x72>
      {
        Brightness = (UpStep * T) / 100;
      }
      else if (T <= SumTHigh)
      {
        Brightness = MaxBrightness;
    469e:	ldrh	r2, [r4, #18]
    46a0:	strh	r2, [r4, #20]
    46a2:	uxtb	r2, r2
    46a4:	b.n	45a6 <StripLED::update()+0x72>
        Brightness = (MaxBrightness - DownStep * (T - SumTHigh) / 100);
      }
      else
      {
        Active = false;
        LastStep = true;
    46a6:	movs	r3, #1
      {
        Brightness = (MaxBrightness - DownStep * (T - SumTHigh) / 100);
      }
      else
      {
        Active = false;
    46a8:	strb	r2, [r4, #9]
        LastStep = true;
        Brightness = 0;
    46aa:	strh	r2, [r4, #20]
        Brightness = (MaxBrightness - DownStep * (T - SumTHigh) / 100);
      }
      else
      {
        Active = false;
        LastStep = true;
    46ac:	strb	r3, [r4, #10]
    46ae:	b.n	45a6 <StripLED::update()+0x72>
    46b0:	.word	0x1fffbccc
    46b4:	.word	0x51eb851f
    46b8:	.word	0x0000c9c4
    46bc:	.word	0x1fff965c
    46c0:	.word	0x0000c9cc
    46c4:	.word	0x0000c9e0
    46c8:	.word	0x0000c9ec
    46cc:	.word	0x0000c9f4
    46d0:	.word	0x0000c9fc

000046d4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    46d4:	push	{r4, lr}
    46d6:	mov	r4, r0
		release();
    46d8:	bl	a480 <DMAChannel::release()>
	}
    46dc:	mov	r0, r4
    46de:	pop	{r4, pc}

000046e0 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE>:
uint32_t  AudioOutputPWM::block_offset = 0;
bool AudioOutputPWM::update_responsibility = false;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    46e0:	ldr	r2, [pc, #8]	; (46ec <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0xc>)
    46e2:	ldr	r1, [pc, #12]	; (46f0 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x10>)
    46e4:	ldr	r0, [pc, #12]	; (46f4 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x14>)
    46e6:	b.w	b6a8 <__aeabi_atexit>
    46ea:	nop
    46ec:	.word	0x1fff93fc
    46f0:	.word	0x000046d5
    46f4:	.word	0x1fffb7f0

000046f8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
	static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
	static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    46f8:	ldr	r2, [pc, #8]	; (4704 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    46fa:	ldr	r1, [pc, #12]	; (4708 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    46fc:	ldr	r0, [pc, #12]	; (470c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    46fe:	b.w	b6a8 <__aeabi_atexit>
    4702:	nop
    4704:	.word	0x1fff93fc
    4708:	.word	0x000046d5
    470c:	.word	0x1fffb7f8

00004710 <AudioControlSGTL5000::disable()>:
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
    4710:	movs	r0, #0
    4712:	bx	lr

00004714 <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
    4714:	movs	r0, #0
    4716:	bx	lr

00004718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    4718:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    471a:	ldr	r4, [pc, #80]	; (476c <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x54>)
    471c:	ldrb	r3, [r0, #8]
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    471e:	cmp	r1, #36	; 0x24
    4720:	it	eq
    4722:	strheq	r2, [r0, #6]
    4724:	lsls	r3, r3, #1
		transmitting = 1;
    4726:	movs	r5, #1
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    4728:	mov	r6, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    472a:	mov	r0, r4
    472c:	ubfx	r1, r1, #8, #8
    4730:	mov	r7, r2
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4732:	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    4736:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    473a:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    473e:	bl	8680 <TwoWire::write(unsigned char)>
    4742:	uxtb	r1, r6
    4744:	mov	r0, r4
    4746:	bl	8680 <TwoWire::write(unsigned char)>
    474a:	ubfx	r1, r7, #8, #8
    474e:	mov	r0, r4
    4750:	bl	8680 <TwoWire::write(unsigned char)>
    4754:	uxtb	r1, r7
    4756:	mov	r0, r4
    4758:	bl	8680 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    475c:	mov	r1, r5
    475e:	mov	r0, r4
    4760:	bl	89c8 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    4764:	clz	r0, r0
    4768:	lsrs	r0, r0, #5
    476a:	pop	{r3, r4, r5, r6, r7, pc}
    476c:	.word	0x1fff9498

00004770 <AudioControlSGTL5000::enable()>:
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
    4770:	push	{r4, r5, r6, lr}
	muted = true;
    4772:	movs	r6, #1
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
    4774:	mov	r4, r0
	muted = true;
    4776:	strb	r6, [r0, #4]
	Wire.begin();
    4778:	ldr	r0, [pc, #208]	; (484c <AudioControlSGTL5000::enable()+0xdc>)
    477a:	bl	86a8 <TwoWire::begin()>
	delay(5);
    477e:	movs	r0, #5
    4780:	bl	9454 <delay>
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    4784:	mov	r0, r4
    4786:	movw	r2, #16480	; 0x4060
    478a:	movs	r1, #48	; 0x30
    478c:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    4790:	mov	r5, r0
    4792:	cmp	r0, #0
    4794:	beq.n	4848 <AudioControlSGTL5000::enable()+0xd8>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    4796:	movs	r2, #108	; 0x6c
    4798:	movs	r1, #38	; 0x26
    479a:	mov	r0, r4
    479c:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    47a0:	mov.w	r2, #498	; 0x1f2
    47a4:	movs	r1, #40	; 0x28
    47a6:	mov	r0, r4
    47a8:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    47ac:	movw	r2, #3874	; 0xf22
    47b0:	movs	r1, #44	; 0x2c
    47b2:	mov	r0, r4
    47b4:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    47b8:	movw	r2, #17478	; 0x4446
    47bc:	movs	r1, #60	; 0x3c
    47be:	mov	r0, r4
    47c0:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    47c4:	movw	r2, #311	; 0x137
    47c8:	movs	r1, #36	; 0x24
    47ca:	mov	r0, r4
    47cc:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    47d0:	movw	r2, #16639	; 0x40ff
    47d4:	movs	r1, #48	; 0x30
    47d6:	mov	r0, r4
    47d8:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    47dc:	movs	r2, #115	; 0x73
    47de:	movs	r1, #2
    47e0:	mov	r0, r4
    47e2:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    47e6:	mov.w	r0, #400	; 0x190
    47ea:	bl	9454 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    47ee:	movw	r2, #7453	; 0x1d1d
    47f2:	movs	r1, #46	; 0x2e
    47f4:	mov	r0, r4
    47f6:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    47fa:	movs	r2, #4
    47fc:	mov	r1, r2
    47fe:	mov	r0, r4
    4800:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_I2S_CTRL, 0x0130); // SCLK=32*Fs, 16bit, I2S format
    4804:	mov.w	r2, #304	; 0x130
    4808:	movs	r1, #6
    480a:	mov	r0, r4
    480c:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    4810:	movs	r2, #16
    4812:	movs	r1, #10
    4814:	mov	r0, r4
    4816:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    481a:	movs	r2, #0
    481c:	movs	r1, #14
    481e:	mov	r0, r4
    4820:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    4824:	movw	r2, #15420	; 0x3c3c
    4828:	movs	r1, #16
    482a:	mov	r0, r4
    482c:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    4830:	movw	r2, #32639	; 0x7f7f
    4834:	movs	r1, #34	; 0x22
    4836:	mov	r0, r4
    4838:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    483c:	movs	r2, #54	; 0x36
    483e:	movs	r1, #36	; 0x24
    4840:	mov	r0, r4
    4842:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	//mute = false;
	semi_automated = true;
    4846:	strb	r6, [r4, #9]
	return true;
}
    4848:	mov	r0, r5
    484a:	pop	{r4, r5, r6, pc}
    484c:	.word	0x1fff9498

00004850 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    4850:	push	{r4, lr}
    4852:	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    4854:	cbz	r1, 485e <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    4856:	cmp	r1, #1
    4858:	beq.n	487e <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    485a:	movs	r0, #0
    485c:	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    485e:	movs	r2, #85	; 0x55
    4860:	movs	r1, #32
    4862:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    4866:	cmp	r0, #0
    4868:	beq.n	485a <AudioControlSGTL5000::inputSelect(int)+0xa>
    486a:	ldrh	r2, [r4, #6]
    486c:	orr.w	r2, r2, #4
    4870:	mov	r0, r4
    4872:	uxth	r2, r2
    4874:	movs	r1, #36	; 0x24
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    4876:	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    487a:	b.w	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    487e:	movw	r2, #371	; 0x173
    4882:	movs	r1, #42	; 0x2a
    4884:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    4888:	cmp	r0, #0
    488a:	beq.n	485a <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    488c:	movs	r2, #136	; 0x88
    488e:	movs	r1, #32
    4890:	mov	r0, r4
    4892:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    4896:	cmp	r0, #0
    4898:	beq.n	485a <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    489a:	ldrh	r2, [r4, #6]
    489c:	mov	r0, r4
    489e:	bic.w	r2, r2, #4
    48a2:	movs	r1, #36	; 0x24
		} else {
			return false;
		}
	}
    48a4:	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    48a8:	b.w	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

000048ac <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    48ac:	push	{r3, r4, r5, lr}
    48ae:	mov	r5, r0
	if (n == 0) {
    48b0:	cbz	r1, 48f0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x44>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    48b2:	cmp	r1, #128	; 0x80
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    48b4:	ldrb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    48b6:	itte	ls
    48b8:	rsbls	r4, r1, #128	; 0x80
    48bc:	orrls.w	r4, r4, r4, lsl #8
    48c0:	movhi	r4, #0
	}
	if (muted) {
    48c2:	cbnz	r3, 48d2 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x26>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    48c4:	mov	r2, r4
    48c6:	mov	r0, r5
    48c8:	movs	r1, #34	; 0x22
}
    48ca:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    48ce:	b.w	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    48d2:	ldrh	r2, [r0, #6]
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
		muted = false;
    48d4:	movs	r3, #0
    48d6:	bic.w	r2, r2, #16
    48da:	strb	r3, [r0, #4]
    48dc:	movs	r1, #36	; 0x24
    48de:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    48e2:	mov	r2, r4
    48e4:	mov	r0, r5
    48e6:	movs	r1, #34	; 0x22
}
    48e8:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    48ec:	b.w	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    48f0:	movs	r3, #1
    48f2:	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    48f4:	movw	r2, #32639	; 0x7f7f
    48f8:	movs	r1, #34	; 0x22
    48fa:	bl	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    48fe:	ldrh	r2, [r5, #6]
    4900:	orr.w	r2, r2, #16
    4904:	mov	r0, r5
    4906:	uxth	r2, r2
    4908:	movs	r1, #36	; 0x24
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
    490a:	ldmia.w	sp!, {r3, r4, r5, lr}
    490e:	b.w	4718 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    4912:	nop

00004914 <AudioControlSGTL5000::volume(float)>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
    4914:	mov	r3, r1
    4916:	push	{r4, lr}
    4918:	ldr	r1, [pc, #28]	; (4938 <AudioControlSGTL5000::volume(float)+0x24>)
    491a:	mov	r4, r0
    491c:	mov	r0, r3
    491e:	bl	b290 <__aeabi_fmul>
    4922:	ldr	r1, [pc, #24]	; (493c <AudioControlSGTL5000::volume(float)+0x28>)
    4924:	bl	b080 <__addsf3>
    4928:	bl	b668 <__aeabi_f2uiz>
    492c:	mov	r1, r0
    492e:	mov	r0, r4
    4930:	ldmia.w	sp!, {r4, lr}
    4934:	b.w	48ac <AudioControlSGTL5000::volumeInteger(unsigned int)>
    4938:	.word	0x43010000
    493c:	.word	0x3eff7cee

00004940 <AudioMixer4::update()>:
}

#endif

void AudioMixer4::update(void)
{
    4940:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
    4944:	mov.w	r8, #0
}

#endif

void AudioMixer4::update(void)
{
    4948:	mov	r6, r0
    494a:	add.w	r5, r0, #24
	audio_block_t *in, *out=NULL;
    494e:	mov	r7, r8
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
    4950:	mov	r1, r8
    4952:	mov	r0, r6
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
    4954:	cmp	r7, #0
    4956:	beq.n	49f8 <AudioMixer4::update()+0xb8>
			if (out) {
				int32_t mult = multiplier[channel];
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
    4958:	bl	aa58 <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
    495c:	cbz	r0, 499c <AudioMixer4::update()+0x5c>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    495e:	ldr	r4, [r5, #0]
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
    4960:	cmp.w	r4, #65536	; 0x10000
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    4964:	add.w	r1, r7, #4
    4968:	add.w	lr, r0, #4

static void applyGainThenAdd(int16_t *data, const int16_t *in, int32_t mult)
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    496c:	add.w	ip, r7, #260	; 0x104

	if (mult == MULTI_UNITYGAIN) {
    4970:	beq.n	49c2 <AudioMixer4::update()+0x82>
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
	} else {
		do {
			uint32_t tmp32 = *src++; // read 2 samples from *data
    4972:	ldr.w	r2, [lr], #4
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    4976:	smulwb	r3, r4, r2
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    497a:	smulwt	r9, r4, r2
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    497e:	ssat	r2, #16, r3
    4982:	ssat	r3, #16, r9
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    4986:	pkhbt	r3, r2, r3, lsl #16
			int32_t val1 = signed_multiply_32x16b(mult, tmp32);
			int32_t val2 = signed_multiply_32x16t(mult, tmp32);
			val1 = signed_saturate_rshift(val1, 16, 0);
			val2 = signed_saturate_rshift(val2, 16, 0);
			tmp32 = pack_16b_16b(val2, val1);
			uint32_t tmp32b = *dst;
    498a:	ldr	r2, [r1, #0]
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    498c:	qadd16	r3, r3, r2
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
    4990:	str.w	r3, [r1], #4
		} while (dst < end);
    4994:	cmp	ip, r1
    4996:	bhi.n	4972 <AudioMixer4::update()+0x32>
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
    4998:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
void AudioMixer4::update(void)
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
    499c:	add.w	r8, r8, #1
    49a0:	cmp.w	r8, #4
    49a4:	add.w	r5, r5, #4
    49a8:	bne.n	4950 <AudioMixer4::update()+0x10>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
			}
		}
	}
	if (out) {
    49aa:	cmp	r7, #0
    49ac:	beq.n	4a30 <AudioMixer4::update()+0xf0>
		transmit(out);
    49ae:	mov	r0, r6
    49b0:	mov	r1, r7
    49b2:	movs	r2, #0
    49b4:	bl	aa24 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
    49b8:	mov	r0, r7
	}
}
    49ba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			}
		}
	}
	if (out) {
		transmit(out);
		release(out);
    49be:	b.w	a9d0 <AudioStream::release(audio_block_struct*)>
    49c2:	add.w	r1, r7, #12
    49c6:	add.w	r4, r0, #12
    49ca:	ldr.w	r3, [r1, #-8]
    49ce:	ldr.w	r2, [r4, #-8]
    49d2:	qadd16	r3, r3, r2
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    49d6:	str.w	r3, [r1, #-8]
    49da:	ldr.w	r2, [r4, #-4]
    49de:	ldr.w	r3, [r1, #-4]
    49e2:	qadd16	r3, r3, r2
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
    49e6:	cmp	ip, r1
	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    49e8:	str.w	r3, [r1, #-4]
    49ec:	add.w	r4, r4, #8
		} while (dst < end);
    49f0:	add.w	r1, r1, #8
    49f4:	bhi.n	49ca <AudioMixer4::update()+0x8a>
    49f6:	b.n	4998 <AudioMixer4::update()+0x58>
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
    49f8:	bl	aa70 <AudioStream::receiveWritable(unsigned int)>
			if (out) {
    49fc:	mov	r7, r0
    49fe:	cmp	r0, #0
    4a00:	beq.n	499c <AudioMixer4::update()+0x5c>
				int32_t mult = multiplier[channel];
    4a02:	ldr	r0, [r5, #0]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
    4a04:	cmp.w	r0, #65536	; 0x10000
    4a08:	beq.n	499c <AudioMixer4::update()+0x5c>
    4a0a:	adds	r1, r7, #4
#define MULTI_UNITYGAIN 65536

static void applyGain(int16_t *data, int32_t mult)
{
	uint32_t *p = (uint32_t *)data;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    4a0c:	add.w	r4, r7, #260	; 0x104

	do {
		uint32_t tmp32 = *p; // read 2 samples from *data
    4a10:	ldr	r3, [r1, #0]
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    4a12:	smulwb	r2, r0, r3
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    4a16:	smulwt	r3, r0, r3
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    4a1a:	ssat	r2, #16, r2
    4a1e:	ssat	r3, #16, r3
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    4a22:	pkhbt	r3, r2, r3, lsl #16
		int32_t val1 = signed_multiply_32x16b(mult, tmp32);
		int32_t val2 = signed_multiply_32x16t(mult, tmp32);
		val1 = signed_saturate_rshift(val1, 16, 0);
		val2 = signed_saturate_rshift(val2, 16, 0);
		*p++ = pack_16b_16b(val2, val1);
    4a26:	str.w	r3, [r1], #4
	} while (p < end);
    4a2a:	cmp	r4, r1
    4a2c:	bhi.n	4a10 <AudioMixer4::update()+0xd0>
    4a2e:	b.n	499c <AudioMixer4::update()+0x5c>
    4a30:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004a34 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    4a34:	ldr	r2, [pc, #8]	; (4a40 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    4a36:	ldr	r1, [pc, #12]	; (4a44 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    4a38:	ldr	r0, [pc, #12]	; (4a48 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    4a3a:	b.w	b6a8 <__aeabi_atexit>
    4a3e:	nop
    4a40:	.word	0x1fff93fc
    4a44:	.word	0x000046d5
    4a48:	.word	0x1fffb800

00004a4c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    4a4c:	ldr	r2, [pc, #8]	; (4a58 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    4a4e:	ldr	r1, [pc, #12]	; (4a5c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    4a50:	ldr	r0, [pc, #12]	; (4a60 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    4a52:	b.w	b6a8 <__aeabi_atexit>
    4a56:	nop
    4a58:	.word	0x1fff93fc
    4a5c:	.word	0x000046d5
    4a60:	.word	0x1fffb808

00004a64 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    4a64:	ldr	r2, [pc, #8]	; (4a70 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    4a66:	ldr	r1, [pc, #12]	; (4a74 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    4a68:	ldr	r0, [pc, #12]	; (4a78 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    4a6a:	b.w	b6a8 <__aeabi_atexit>
    4a6e:	nop
    4a70:	.word	0x1fff93fc
    4a74:	.word	0x000046d5
    4a78:	.word	0x1fffb810

00004a7c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    4a7c:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    4a7e:	ldr	r5, [pc, #28]	; (4a9c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    4a80:	ldr	r4, [pc, #28]	; (4aa0 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    4a82:	ldr	r0, [pc, #32]	; (4aa4 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    4a84:	mov	r2, r5
    4a86:	mov	r1, r4
    4a88:	bl	b6a8 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    4a8c:	mov	r2, r5
    4a8e:	mov	r1, r4
    4a90:	ldr	r0, [pc, #20]	; (4aa8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    4a92:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    4a96:	b.w	b6a8 <__aeabi_atexit>
    4a9a:	nop
    4a9c:	.word	0x1fff93fc
    4aa0:	.word	0x000046d5
    4aa4:	.word	0x1fffb818
    4aa8:	.word	0x1fffb820

00004aac <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    4aac:	ldr	r2, [pc, #8]	; (4ab8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    4aae:	ldr	r1, [pc, #12]	; (4abc <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    4ab0:	ldr	r0, [pc, #12]	; (4ac0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    4ab2:	b.w	b6a8 <__aeabi_atexit>
    4ab6:	nop
    4ab8:	.word	0x1fff93fc
    4abc:	.word	0x000046d5
    4ac0:	.word	0x1fffb828

00004ac4 <AudioPlaySdWav::begin()>:
#define STATE_PARSE4			11 // ignoring unknown chunk after "fmt "
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
    4ac4:	push	{r3, r4, r5, lr}
    4ac6:	mov	r4, r0
	state = STATE_STOP;
	state_play = STATE_STOP;
	data_length = 0;
	if (block_left) {
    4ac8:	ldr	r0, [r0, #108]	; 0x6c
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
	state = STATE_STOP;
    4aca:	movs	r3, #13
	state_play = STATE_STOP;
	data_length = 0;
    4acc:	movs	r5, #0
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
	state = STATE_STOP;
    4ace:	strb.w	r3, [r4, #635]	; 0x27b
	state_play = STATE_STOP;
    4ad2:	strb.w	r3, [r4, #636]	; 0x27c
	data_length = 0;
    4ad6:	str	r5, [r4, #96]	; 0x60
	if (block_left) {
    4ad8:	cbz	r0, 4ae0 <AudioPlaySdWav::begin()+0x1c>
		release(block_left);
    4ada:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
		block_left = NULL;
    4ade:	str	r5, [r4, #108]	; 0x6c
	}
	if (block_right) {
    4ae0:	ldr	r0, [r4, #112]	; 0x70
    4ae2:	cbz	r0, 4aec <AudioPlaySdWav::begin()+0x28>
		release(block_right);
    4ae4:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
		block_right = NULL;
    4ae8:	movs	r3, #0
    4aea:	str	r3, [r4, #112]	; 0x70
    4aec:	pop	{r3, r4, r5, pc}
    4aee:	nop

00004af0 <AudioPlaySdWav::stop()>:
	state = STATE_PARSE1;
	return true;
}

void AudioPlaySdWav::stop(void)
{
    4af0:	push	{r3, r4, r5, lr}
	__disable_irq();
    4af2:	cpsid	i
	if (state != STATE_STOP) {
    4af4:	ldrb.w	r3, [r0, #635]	; 0x27b
    4af8:	cmp	r3, #13
    4afa:	beq.n	4b44 <AudioPlaySdWav::stop()+0x54>
    4afc:	mov	r4, r0
		audio_block_t *b1 = block_left;
		block_left = NULL;
    4afe:	movs	r3, #0
		audio_block_t *b2 = block_right;
		block_right = NULL;
		state = STATE_STOP;
    4b00:	movs	r2, #13

void AudioPlaySdWav::stop(void)
{
	__disable_irq();
	if (state != STATE_STOP) {
		audio_block_t *b1 = block_left;
    4b02:	ldr	r0, [r0, #108]	; 0x6c
		block_left = NULL;
		audio_block_t *b2 = block_right;
    4b04:	ldr	r5, [r4, #112]	; 0x70
void AudioPlaySdWav::stop(void)
{
	__disable_irq();
	if (state != STATE_STOP) {
		audio_block_t *b1 = block_left;
		block_left = NULL;
    4b06:	str	r3, [r4, #108]	; 0x6c
		audio_block_t *b2 = block_right;
		block_right = NULL;
    4b08:	str	r3, [r4, #112]	; 0x70
		state = STATE_STOP;
    4b0a:	strb.w	r2, [r4, #635]	; 0x27b
		__enable_irq();
    4b0e:	cpsie	i
		if (b1) release(b1);
    4b10:	cbz	r0, 4b16 <AudioPlaySdWav::stop()+0x26>
    4b12:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
		if (b2) release(b2);
    4b16:	cbz	r5, 4b1e <AudioPlaySdWav::stop()+0x2e>
    4b18:	mov	r0, r5
    4b1a:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
		wavfile.close();
    4b1e:	add.w	r0, r4, #24
    4b22:	bl	6c20 <File::close()>
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    4b26:	ldr	r2, [pc, #32]	; (4b48 <AudioPlaySdWav::stop()+0x58>)
    4b28:	ldrh	r3, [r2, #0]
    4b2a:	cbnz	r3, 4b38 <AudioPlaySdWav::stop()+0x48>
		SPI.notUsingInterrupt(IRQ_SOFTWARE);
    4b2c:	movs	r1, #94	; 0x5e
    4b2e:	ldr	r0, [pc, #28]	; (4b4c <AudioPlaySdWav::stop()+0x5c>)
		AudioStopUsingSPI();
	#endif	
	} else {
		__enable_irq();
	}
}
    4b30:	ldmia.w	sp!, {r3, r4, r5, lr}
    4b34:	b.w	84ac <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    4b38:	subs	r3, #1
    4b3a:	uxth	r3, r3
    4b3c:	strh	r3, [r2, #0]
    4b3e:	cmp	r3, #0
    4b40:	beq.n	4b2c <AudioPlaySdWav::stop()+0x3c>
    4b42:	pop	{r3, r4, r5, pc}
		if (!(SIM_SCGC3 & SIM_SCGC3_SDHC)) AudioStopUsingSPI();
	#else 	
		AudioStopUsingSPI();
	#endif	
	} else {
		__enable_irq();
    4b44:	cpsie	i
	}
}
    4b46:	pop	{r3, r4, r5, pc}
    4b48:	.word	0x1fffb838
    4b4c:	.word	0x1fff9460

00004b50 <AudioPlaySdWav::play(char const*)>:
	}
}


bool AudioPlaySdWav::play(const char *filename)
{
    4b50:	push	{r4, r5, r6, lr}

extern unsigned short AudioUsingSPICount;

static inline void AudioStartUsingSPI(void) {
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
    4b52:	ldr	r5, [pc, #180]	; (4c08 <AudioPlaySdWav::play(char const*)+0xb8>)
    4b54:	sub	sp, #32
    4b56:	mov	r6, r1
    4b58:	mov	r4, r0
	stop();
    4b5a:	bl	4af0 <AudioPlaySdWav::stop()>
#ifdef SPI_HAS_NOTUSINGINTERRUPT

extern unsigned short AudioUsingSPICount;

static inline void AudioStartUsingSPI(void) {
	SPI.usingInterrupt(IRQ_SOFTWARE);
    4b5e:	movs	r1, #94	; 0x5e
    4b60:	ldr	r0, [pc, #168]	; (4c0c <AudioPlaySdWav::play(char const*)+0xbc>)
    4b62:	bl	8480 <SPIClass::usingInterrupt(IRQ_NUMBER_t)>
	AudioUsingSPICount++;
    4b66:	ldrh	r3, [r5, #0]
    4b68:	adds	r3, #1
    4b6a:	strh	r3, [r5, #0]
#if defined(HAS_KINETIS_SDHC)	
	if (!(SIM_SCGC3 & SIM_SCGC3_SDHC)) AudioStartUsingSPI();
#else 	
	AudioStartUsingSPI();
#endif
	__disable_irq();
    4b6c:	cpsid	i
	wavfile = SD.open(filename);
    4b6e:	movs	r3, #1
    4b70:	mov	r2, r6
    4b72:	mov	r0, sp
    4b74:	ldr	r1, [pc, #152]	; (4c10 <AudioPlaySdWav::play(char const*)+0xc0>)
    4b76:	bl	6d88 <SDClass::open(char const*, unsigned char)>
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    4b7a:	add	r2, sp, #32
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    4b7c:	ldrb.w	r0, [sp, #4]
    4b80:	ldrb.w	r3, [r2, #-20]!
    4b84:	ldr	r1, [sp, #8]
    4b86:	strb	r0, [r4, #28]
    4b88:	strb.w	r3, [r4, #36]	; 0x24
    4b8c:	str	r1, [r4, #32]
#include <utility/SdFatUtil.h>

#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

class File : public Stream {
    4b8e:	add.w	r3, r4, #37	; 0x25
    4b92:	add.w	r0, r4, #50	; 0x32
    4b96:	ldrb.w	r1, [r2, #1]!
    4b9a:	strb.w	r1, [r3], #1
    4b9e:	cmp	r3, r0
    4ba0:	bne.n	4b96 <AudioPlaySdWav::play(char const*)+0x46>
    4ba2:	ldr	r3, [sp, #28]
    4ba4:	str	r3, [r4, #52]	; 0x34
    4ba6:	mov	r0, sp
    4ba8:	bl	6c10 <File::~File()>
	__enable_irq();
    4bac:	cpsie	i
	if (!wavfile) {
    4bae:	add.w	r0, r4, #24
    4bb2:	bl	6c3c <File::operator bool()>
    4bb6:	mov	r6, r0
    4bb8:	cbnz	r0, 4bce <AudioPlaySdWav::play(char const*)+0x7e>
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    4bba:	ldrh	r3, [r5, #0]
    4bbc:	ldr	r2, [pc, #72]	; (4c08 <AudioPlaySdWav::play(char const*)+0xb8>)
    4bbe:	cbnz	r3, 4bf2 <AudioPlaySdWav::play(char const*)+0xa2>
		SPI.notUsingInterrupt(IRQ_SOFTWARE);
    4bc0:	movs	r1, #94	; 0x5e
    4bc2:	ldr	r0, [pc, #72]	; (4c0c <AudioPlaySdWav::play(char const*)+0xbc>)
    4bc4:	bl	84ac <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>
	state_play = STATE_STOP;
	data_length = 20;
	header_offset = 0;
	state = STATE_PARSE1;
	return true;
}
    4bc8:	mov	r0, r6
    4bca:	add	sp, #32
    4bcc:	pop	{r4, r5, r6, pc}
	#else 	
		AudioStopUsingSPI();
	#endif			
		return false;
	}
	buffer_length = 0;
    4bce:	movs	r3, #0
	buffer_offset = 0;
	state_play = STATE_STOP;
    4bd0:	movs	r0, #13
	data_length = 20;
    4bd2:	movs	r1, #20
	header_offset = 0;
	state = STATE_PARSE1;
    4bd4:	movs	r2, #8
	#else 	
		AudioStopUsingSPI();
	#endif			
		return false;
	}
	buffer_length = 0;
    4bd6:	strh.w	r3, [r4, #632]	; 0x278
	buffer_offset = 0;
    4bda:	strh.w	r3, [r4, #630]	; 0x276
	state_play = STATE_STOP;
	data_length = 20;
	header_offset = 0;
    4bde:	strb.w	r3, [r4, #634]	; 0x27a
	#endif			
		return false;
	}
	buffer_length = 0;
	buffer_offset = 0;
	state_play = STATE_STOP;
    4be2:	strb.w	r0, [r4, #636]	; 0x27c
	data_length = 20;
    4be6:	str	r1, [r4, #96]	; 0x60
	header_offset = 0;
	state = STATE_PARSE1;
    4be8:	strb.w	r2, [r4, #635]	; 0x27b
	return true;
}
    4bec:	mov	r0, r6
    4bee:	add	sp, #32
    4bf0:	pop	{r4, r5, r6, pc}
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    4bf2:	subs	r3, #1
    4bf4:	uxth	r3, r3
    4bf6:	strh	r3, [r2, #0]
    4bf8:	cmp	r3, #0
    4bfa:	bne.n	4bec <AudioPlaySdWav::play(char const*)+0x9c>
		SPI.notUsingInterrupt(IRQ_SOFTWARE);
    4bfc:	movs	r1, #94	; 0x5e
    4bfe:	ldr	r0, [pc, #12]	; (4c0c <AudioPlaySdWav::play(char const*)+0xbc>)
    4c00:	bl	84ac <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>
    4c04:	b.n	4bc8 <AudioPlaySdWav::play(char const*)+0x78>
    4c06:	nop
    4c08:	.word	0x1fffb838
    4c0c:	.word	0x1fff9460
    4c10:	.word	0x1fffba50

00004c14 <AudioPlaySdWav::parse_format()>:
	uint16_t format;
	uint16_t channels;
	uint32_t rate, b2m;
	uint16_t bits;

	format = header[0];
    4c14:	ldr	r3, [r0, #56]	; 0x38
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;
    4c16:	uxth	r2, r3
    4c18:	cmp	r2, #1
    4c1a:	beq.n	4c20 <AudioPlaySdWav::parse_format()+0xc>
    4c1c:	movs	r0, #0
	// if they're not the expected values, all we could do is
	// return false.  Do any real wav files have unexpected
	// values in these other fields?
	state_play = num;
	return true;
}
    4c1e:	bx	lr
	format = header[0];
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;

	rate = header[1];
    4c20:	ldr	r2, [r0, #60]	; 0x3c
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
    4c22:	movw	r1, #44100	; 0xac44
    4c26:	cmp	r2, r1
    4c28:	beq.n	4c70 <AudioPlaySdWav::parse_format()+0x5c>
		b2m = B2M_44100;
	} else if (rate == 22050) {
    4c2a:	movw	r1, #22050	; 0x5622
    4c2e:	cmp	r2, r1
    4c30:	beq.n	4c6a <AudioPlaySdWav::parse_format()+0x56>
		b2m = B2M_22050;
		num |= 4;
	} else if (rate == 11025) {
    4c32:	movw	r1, #11025	; 0x2b11
    4c36:	cmp	r2, r1
    4c38:	bne.n	4c1c <AudioPlaySdWav::parse_format()+0x8>
		b2m = B2M_11025;
    4c3a:	ldr	r1, [pc, #60]	; (4c78 <AudioPlaySdWav::parse_format()+0x64>)
		num |= 4;
    4c3c:	movs	r2, #4
	} else {
		return false;
	}

	channels = header[0] >> 16;
    4c3e:	lsrs	r3, r3, #16
	//Serial.print("  channels = ");
	//Serial.println(channels);
	if (channels == 1) {
    4c40:	cmp	r3, #1
    4c42:	beq.n	4c4e <AudioPlaySdWav::parse_format()+0x3a>
	} else if (channels == 2) {
    4c44:	cmp	r3, #2
    4c46:	bne.n	4c1c <AudioPlaySdWav::parse_format()+0x8>
		b2m >>= 1;
    4c48:	lsrs	r1, r1, #1
		num |= 1;
    4c4a:	orr.w	r2, r2, #1
	} else {
		return false;
	}

	bits = header[3] >> 16;
    4c4e:	ldrh.w	r3, [r0, #70]	; 0x46
	//Serial.print("  bits = ");
	//Serial.println(bits);
	if (bits == 8) {
    4c52:	cmp	r3, #8
    4c54:	beq.n	4c60 <AudioPlaySdWav::parse_format()+0x4c>
	} else if (bits == 16) {
    4c56:	cmp	r3, #16
    4c58:	bne.n	4c1c <AudioPlaySdWav::parse_format()+0x8>
		b2m >>= 1;
    4c5a:	lsrs	r1, r1, #1
		num |= 2;
    4c5c:	orr.w	r2, r2, #2
	} else {
		return false;
	}

	bytes2millis = b2m;
    4c60:	str	r1, [r0, #104]	; 0x68

	// we're not checking the byte rate and block align fields
	// if they're not the expected values, all we could do is
	// return false.  Do any real wav files have unexpected
	// values in these other fields?
	state_play = num;
    4c62:	strb.w	r2, [r0, #636]	; 0x27c
	return true;
    4c66:	movs	r0, #1
    4c68:	bx	lr
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
		b2m = B2M_44100;
	} else if (rate == 22050) {
		b2m = B2M_22050;
    4c6a:	ldr	r1, [pc, #16]	; (4c7c <AudioPlaySdWav::parse_format()+0x68>)
		num |= 4;
    4c6c:	movs	r2, #4
    4c6e:	b.n	4c3e <AudioPlaySdWav::parse_format()+0x2a>

	rate = header[1];
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
		b2m = B2M_44100;
    4c70:	ldr	r1, [pc, #12]	; (4c80 <AudioPlaySdWav::parse_format()+0x6c>)
#define B2M_22050 (uint32_t)((double)4294967296000.0 / AUDIO_SAMPLE_RATE_EXACT * 2.0)
#define B2M_11025 (uint32_t)((double)4294967296000.0 / AUDIO_SAMPLE_RATE_EXACT * 4.0)

bool AudioPlaySdWav::parse_format(void)
{
	uint8_t num = 0;
    4c72:	movs	r2, #0
    4c74:	b.n	4c3e <AudioPlaySdWav::parse_format()+0x2a>
    4c76:	nop
    4c78:	.word	0x1735ee34
    4c7c:	.word	0x0b9af71a
    4c80:	.word	0x05cd7b8d

00004c84 <AudioPlaySdWav::consume(unsigned long)>:

// https://ccrma.stanford.edu/courses/422/projects/WaveFormat/

// Consume already buffered data.  Returns true if audio transmitted.
bool AudioPlaySdWav::consume(uint32_t size)
{
    4c84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
    4c88:	ldrh.w	r6, [r0, #630]	; 0x276
    4c8c:	add.w	r7, r0, #118	; 0x76

// https://ccrma.stanford.edu/courses/422/projects/WaveFormat/

// Consume already buffered data.  Returns true if audio transmitted.
bool AudioPlaySdWav::consume(uint32_t size)
{
    4c90:	sub	sp, #12
	uint32_t len;
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
    4c92:	add	r6, r7
start:
	if (size == 0) return false;
    4c94:	cbz	r1, 4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
		if (header[0] == 0x61746164) {
    4c96:	ldr.w	fp, [pc, #948]	; 504c <AudioPlaySdWav::consume(unsigned long)+0x3c8>
    4c9a:	mov	r4, r0
    4c9c:	mov	r5, r1
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		p += len;
		size -= len;
		data_length = 8;
    4c9e:	mov.w	sl, #8
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
		data_length = 8;
		header_offset = 0;
    4ca2:	mov.w	r9, #0
	Serial.print(", space = ");
	Serial.print((AUDIO_BLOCK_SAMPLES - block_offset) * 2);
	Serial.print(", state = ");
	Serial.println(state);
#endif
	switch (state) {
    4ca6:	ldrb.w	r3, [r4, #635]	; 0x27b
    4caa:	cmp	r3, #13
    4cac:	bhi.w	4f60 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
    4cb0:	tbh	[pc, r3, lsl #1]
    4cb4:	.word	0x000f000f
    4cb8:	.word	0x009e00d3
    4cbc:	.word	0x000f000f
    4cc0:	.word	0x000f000f
    4cc4:	.word	0x00130116
    4cc8:	.word	0x00710045
    4ccc:	.word	0x000f0087
	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
    4cd0:	str	r2, [r4, #96]	; 0x60
		state = STATE_PARSE1;
		goto start;

	  // playing mono at native sample rate
	  case STATE_DIRECT_8BIT_MONO:
		return false;
    4cd2:	movs	r0, #0
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
    4cd4:	add	sp, #12
    4cd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		//Serial.println("unknown WAV header");
		break;

	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
    4cda:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    4cdc:	ldrb.w	r3, [r4, #634]	; 0x27a
    4ce0:	cmp	r2, r5
    4ce2:	add.w	r0, r4, #56	; 0x38
    4ce6:	it	cs
    4ce8:	movcs	r2, r5
    4cea:	add	r0, r3
    4cec:	mov	r1, r6
    4cee:	mov	r8, r2
    4cf0:	bl	8bec <memcpy>
		header_offset += len;
    4cf4:	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    4cf8:	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    4cfc:	ldr	r3, [r4, #96]	; 0x60
	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    4cfe:	add	r1, r8
		buffer_offset += len;
		data_length -= len;
    4d00:	rsb	r3, r8, r3
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
		buffer_offset += len;
    4d04:	add	r2, r8
	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    4d06:	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    4d0a:	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    4d0e:	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    4d10:	str	r3, [sp, #4]
    4d12:	cmp	r3, #0
    4d14:	bne.n	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		if (parse_format()) {
    4d16:	mov	r0, r4
    4d18:	bl	4c14 <AudioPlaySdWav::parse_format()>
    4d1c:	cmp	r0, #0
    4d1e:	beq.w	4f60 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
			header_offset = 0;
			state = STATE_PARSE3;
    4d22:	movs	r2, #10
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
			header_offset = 0;
    4d24:	ldr	r3, [sp, #4]
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
    4d26:	str.w	sl, [r4, #96]	; 0x60
		data_length -= len;
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
    4d2a:	rsb	r5, r8, r5
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
    4d2e:	add	r6, r8
			size -= len;
			data_length = 8;
			header_offset = 0;
    4d30:	strb.w	r3, [r4, #634]	; 0x27a
			state = STATE_PARSE3;
    4d34:	strb.w	r2, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    4d38:	cmp	r5, #0
    4d3a:	bne.n	4ca6 <AudioPlaySdWav::consume(unsigned long)+0x22>
    4d3c:	b.n	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.println("unknown audio format");
		break;

	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
    4d3e:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    4d40:	ldrb.w	r3, [r4, #634]	; 0x27a
    4d44:	cmp	r2, r5
    4d46:	add.w	r0, r4, #56	; 0x38
    4d4a:	it	cs
    4d4c:	movcs	r2, r5
    4d4e:	add	r0, r3
    4d50:	mov	r1, r6
    4d52:	mov	r8, r2
    4d54:	bl	8bec <memcpy>
		header_offset += len;
    4d58:	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    4d5c:	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    4d60:	ldr	r3, [r4, #96]	; 0x60
	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    4d62:	add	r1, r8
		buffer_offset += len;
    4d64:	add	r2, r8
		data_length -= len;
    4d66:	rsb	r3, r8, r3
	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    4d6a:	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    4d6e:	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    4d72:	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    4d74:	cmp	r3, #0
    4d76:	bne.n	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
		if (header[0] == 0x61746164) {
    4d78:	ldr	r1, [r4, #56]	; 0x38
		//Serial.print(header[0], HEX);
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
    4d7a:	ldr	r2, [r4, #60]	; 0x3c
    4d7c:	str	r2, [r4, #96]	; 0x60
		if (header[0] == 0x61746164) {
    4d7e:	cmp	r1, fp
		if (data_length > 0) return false;
		//Serial.print("chunk id = ");
		//Serial.print(header[0], HEX);
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
    4d80:	add	r6, r8
		size -= len;
    4d82:	rsb	r5, r8, r5
		data_length = header[1];
		if (header[0] == 0x61746164) {
    4d86:	beq.w	4f8c <AudioPlaySdWav::consume(unsigned long)+0x308>
				block_right = allocate();
				if (!block_right) return false;
			}
			total_length = data_length;
		} else {
			state = STATE_PARSE4;
    4d8a:	movs	r3, #11
    4d8c:	strb.w	r3, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    4d90:	cmp	r5, #0
    4d92:	bne.n	4ca6 <AudioPlaySdWav::consume(unsigned long)+0x22>
    4d94:	b.n	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		}
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
    4d96:	ldr	r2, [r4, #96]	; 0x60
			data_length -= size;
			buffer_offset += size;
    4d98:	ldrh.w	r3, [r4, #630]	; 0x276
		}
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
    4d9c:	cmp	r5, r2
    4d9e:	bcc.w	5038 <AudioPlaySdWav::consume(unsigned long)+0x3b4>
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
    4da2:	add	r3, r2
		data_length = 8;
		header_offset = 0;
		state = STATE_PARSE3;
    4da4:	movs	r1, #10
			data_length -= size;
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
    4da6:	subs	r5, r5, r2
		buffer_offset += data_length;
		data_length = 8;
    4da8:	str.w	sl, [r4, #96]	; 0x60
		if (size < data_length) {
			data_length -= size;
			buffer_offset += size;
			return false;
		}
		p += data_length;
    4dac:	add	r6, r2
		size -= data_length;
		buffer_offset += data_length;
		data_length = 8;
		header_offset = 0;
    4dae:	strb.w	r9, [r4, #634]	; 0x27a
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
    4db2:	strh.w	r3, [r4, #630]	; 0x276
		data_length = 8;
		header_offset = 0;
		state = STATE_PARSE3;
    4db6:	strb.w	r1, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    4dba:	cmp	r5, #0
    4dbc:	bne.w	4ca6 <AudioPlaySdWav::consume(unsigned long)+0x22>
    4dc0:	b.n	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.println("consumed unknown chunk");
		goto start;

	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
    4dc2:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		buffer_offset += len;
    4dc4:	ldrh.w	r1, [r4, #630]	; 0x276
    4dc8:	cmp	r5, r2
    4dca:	mov	r3, r5
    4dcc:	it	cs
    4dce:	movcs	r3, r2
    4dd0:	add	r1, r3
		data_length -= len;
		if (data_length > 0) return false;
    4dd2:	subs	r2, r2, r3

	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
    4dd4:	strh.w	r1, [r4, #630]	; 0x276
		data_length -= len;
		if (data_length > 0) return false;
    4dd8:	bne.w	4cd0 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		p += len;
		size -= len;
    4ddc:	subs	r5, r5, r3
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		p += len;
    4dde:	add	r6, r3
		size -= len;
		data_length = 8;
    4de0:	str.w	sl, [r4, #96]	; 0x60
		state = STATE_PARSE1;
    4de4:	strb.w	sl, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    4de8:	cmp	r5, #0
    4dea:	bne.w	4ca6 <AudioPlaySdWav::consume(unsigned long)+0x22>
    4dee:	b.n	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		state = STATE_STOP;
		return false;

	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
    4df0:	ldr	r3, [r4, #96]	; 0x60
		data_length -= size;
		if (leftover_bytes) {
    4df2:	ldrb.w	r1, [r4, #637]	; 0x27d
    4df6:	cmp	r5, r3
    4df8:	it	cs
    4dfa:	movcs	r5, r3
		return false;

	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
		data_length -= size;
    4dfc:	subs	r2, r3, r5
    4dfe:	str	r2, [r4, #96]	; 0x60
		if (leftover_bytes) {
    4e00:	cmp	r1, #0
    4e02:	beq.w	4f72 <AudioPlaySdWav::consume(unsigned long)+0x2ee>
			block_left->data[block_offset] = header[0];
    4e06:	ldr	r1, [r4, #108]	; 0x6c
    4e08:	ldrh.w	r3, [r4, #116]	; 0x74
    4e0c:	ldr	r0, [r4, #56]	; 0x38
    4e0e:	add.w	ip, r1, r3, lsl #1
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
    4e12:	mov.w	lr, #0
	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
		data_length -= size;
		if (leftover_bytes) {
			block_left->data[block_offset] = header[0];
    4e16:	strh.w	r0, [ip, #4]
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
    4e1a:	strb.w	lr, [r4, #637]	; 0x27d
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    4e1e:	ldr	r0, [r4, #112]	; 0x70
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
    4e20:	ldrb.w	ip, [r6, #1]
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
    4e24:	ldrb.w	lr, [r6], #2
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    4e28:	add.w	r0, r0, r3, lsl #1
    4e2c:	adds	r3, #1
    4e2e:	uxth	r3, r3
    4e30:	orr.w	lr, lr, ip, lsl #8
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    4e34:	cmp	r3, #127	; 0x7f
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    4e36:	strh.w	r3, [r4, #116]	; 0x74
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
    4e3a:	sub.w	r5, r5, #2
			block_right->data[block_offset++] = (msb << 8) | lsb;
    4e3e:	strh.w	lr, [r0, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    4e42:	bhi.w	4ffa <AudioPlaySdWav::consume(unsigned long)+0x376>
				data_length += size;
				buffer_offset = p - buffer;
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
    4e46:	cmp	r5, #0
    4e48:	bne.w	4f72 <AudioPlaySdWav::consume(unsigned long)+0x2ee>
				if (data_length == 0) break;
    4e4c:	cmp	r2, #0
    4e4e:	beq.w	4f7e <AudioPlaySdWav::consume(unsigned long)+0x2fa>
				leftover_bytes = 0;
    4e52:	strb.w	r5, [r4, #637]	; 0x27d
				return false;
    4e56:	mov	r0, r5
    4e58:	b.n	4cd4 <AudioPlaySdWav::consume(unsigned long)+0x50>
	  case STATE_DIRECT_8BIT_STEREO:
		return false;

	  // playing mono at native sample rate
	  case STATE_DIRECT_16BIT_MONO:
		if (size > data_length) size = data_length;
    4e5a:	ldr	r3, [r4, #96]	; 0x60
    4e5c:	ldr	r1, [r4, #108]	; 0x6c
    4e5e:	cmp	r5, r3
    4e60:	it	cs
    4e62:	movcs	r5, r3
		data_length -= size;
    4e64:	rsb	ip, r5, r3
    4e68:	adds	r6, #2
    4e6a:	str.w	ip, [r4, #96]	; 0x60
    4e6e:	b.n	4e78 <AudioPlaySdWav::consume(unsigned long)+0x1f4>
    4e70:	adds	r6, #2
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
    4e72:	cmp	r5, #0
    4e74:	beq.w	4fbc <AudioPlaySdWav::consume(unsigned long)+0x338>
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    4e78:	ldrh.w	r2, [r4, #116]	; 0x74
	  // playing mono at native sample rate
	  case STATE_DIRECT_16BIT_MONO:
		if (size > data_length) size = data_length;
		data_length -= size;
		while (1) {
			lsb = *p++;
    4e7c:	ldrb.w	r0, [r6, #-2]
			msb = *p++;
    4e80:	ldrb.w	lr, [r6, #-1]
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    4e84:	adds	r3, r2, #1
    4e86:	uxth	r3, r3
    4e88:	add.w	r2, r1, r2, lsl #1
    4e8c:	orr.w	r0, r0, lr, lsl #8
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    4e90:	cmp	r3, #127	; 0x7f
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    4e92:	strh.w	r3, [r4, #116]	; 0x74
		if (size > data_length) size = data_length;
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
    4e96:	sub.w	r5, r5, #2
			block_left->data[block_offset++] = (msb << 8) | lsb;
    4e9a:	strh	r0, [r2, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    4e9c:	bls.n	4e70 <AudioPlaySdWav::consume(unsigned long)+0x1ec>
				transmit(block_left, 0);
    4e9e:	movs	r2, #0
    4ea0:	mov	r0, r4
    4ea2:	bl	aa24 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				transmit(block_left, 1);
    4ea6:	movs	r2, #1
    4ea8:	ldr	r1, [r4, #108]	; 0x6c
    4eaa:	mov	r0, r4
    4eac:	bl	aa24 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
    4eb0:	ldr	r0, [r4, #108]	; 0x6c
    4eb2:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
				data_length += size;
    4eb6:	ldr	r3, [r4, #96]	; 0x60
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
    4eb8:	ldr	r0, [r4, #112]	; 0x70
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
				data_length += size;
    4eba:	add	r5, r3
				buffer_offset = p - buffer;
    4ebc:	subs	r6, r6, r7
			block_left->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
    4ebe:	movs	r3, #0
				data_length += size;
				buffer_offset = p - buffer;
    4ec0:	strh.w	r6, [r4, #630]	; 0x276
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
				data_length += size;
    4ec4:	str	r5, [r4, #96]	; 0x60
			block_left->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
    4ec6:	str	r3, [r4, #108]	; 0x6c
				data_length += size;
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
    4ec8:	cbz	r0, 4ed0 <AudioPlaySdWav::consume(unsigned long)+0x24c>
    4eca:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
    4ece:	ldr	r5, [r4, #96]	; 0x60
				if (data_length == 0) state = STATE_STOP;
    4ed0:	cbnz	r5, 4ed8 <AudioPlaySdWav::consume(unsigned long)+0x254>
    4ed2:	movs	r3, #13
    4ed4:	strb.w	r3, [r4, #635]	; 0x27b
				return true;
    4ed8:	movs	r0, #1
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
    4eda:	add	sp, #12
    4edc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Serial.println(state);
#endif
	switch (state) {
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
    4ee0:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    4ee2:	ldrb.w	r3, [r4, #634]	; 0x27a
    4ee6:	cmp	r2, r5
    4ee8:	add.w	r0, r4, #56	; 0x38
    4eec:	it	cs
    4eee:	movcs	r2, r5
    4ef0:	add	r0, r3
    4ef2:	mov	r1, r6
    4ef4:	mov	r8, r2
    4ef6:	bl	8bec <memcpy>
		header_offset += len;
    4efa:	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    4efe:	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    4f02:	ldr	r3, [r4, #96]	; 0x60
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    4f04:	add	r1, r8
		buffer_offset += len;
    4f06:	add	r2, r8
		data_length -= len;
    4f08:	rsb	r3, r8, r3
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    4f0c:	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    4f10:	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    4f14:	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    4f16:	cmp	r3, #0
    4f18:	bne.w	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
    4f1c:	ldr	r2, [r4, #56]	; 0x38
    4f1e:	ldr	r1, [pc, #296]	; (5048 <AudioPlaySdWav::consume(unsigned long)+0x3c4>)
    4f20:	cmp	r2, r1
    4f22:	bne.n	4f60 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
    4f24:	ldr	r2, [r4, #64]	; 0x40
    4f26:	sub.w	r1, r1, #15728640	; 0xf00000
    4f2a:	subw	r1, r1, #2043	; 0x7fb
    4f2e:	cmp	r2, r1
    4f30:	bne.n	4f60 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
			//Serial.println("is wav file");
			if (header[3] == 0x20746D66) {
    4f32:	add.w	r1, r1, #3674210304	; 0xdb000000
    4f36:	ldr	r2, [r4, #68]	; 0x44
    4f38:	add.w	r1, r1, #1974272	; 0x1e2000
    4f3c:	addw	r1, r1, #3087	; 0xc0f
    4f40:	cmp	r2, r1
    4f42:	beq.n	4fa6 <AudioPlaySdWav::consume(unsigned long)+0x322>
				// first chuck is something other than "fmt "
				//Serial.print("skipping \"");
				//Serial.printf("\" (%08X), ", __builtin_bswap32(header[3]));
				//Serial.print(header[4]);
				//Serial.println(" bytes");
				header_offset = 12;
    4f44:	movs	r3, #12
    4f46:	ldr	r2, [r4, #72]	; 0x48
    4f48:	strb.w	r3, [r4, #634]	; 0x27a
				state = STATE_PARSE5;
    4f4c:	strb.w	r3, [r4, #635]	; 0x27b
			}
			p += len;
			size -= len;
    4f50:	rsb	r5, r8, r5
				//Serial.print(header[4]);
				//Serial.println(" bytes");
				header_offset = 12;
				state = STATE_PARSE5;
			}
			p += len;
    4f54:	add	r6, r8
			size -= len;
			data_length = header[4];
    4f56:	str	r2, [r4, #96]	; 0x60
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    4f58:	cmp	r5, #0
    4f5a:	bne.w	4ca6 <AudioPlaySdWav::consume(unsigned long)+0x22>
    4f5e:	b.n	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>

	  // this is not supposed to happen!
	  //default:
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
    4f60:	movs	r3, #13
	state = STATE_STOP;
	return false;
    4f62:	movs	r0, #0

	  // this is not supposed to happen!
	  //default:
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
    4f64:	strb.w	r3, [r4, #636]	; 0x27c
	state = STATE_STOP;
    4f68:	strb.w	r3, [r4, #635]	; 0x27b
	return false;
}
    4f6c:	add	sp, #12
    4f6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			if (size == 0) {
    4f72:	subs	r5, #2
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
			goto right16;
		}
		while (1) {
			lsb = *p++;
    4f74:	ldrb	r0, [r6, #0]
			msb = *p++;
    4f76:	ldrb.w	lr, [r6, #1]
			size -= 2;
			if (size == 0) {
    4f7a:	bne.n	4fc6 <AudioPlaySdWav::consume(unsigned long)+0x342>
				if (data_length == 0) break;
    4f7c:	cbnz	r2, 4fdc <AudioPlaySdWav::consume(unsigned long)+0x358>
		//Serial.println("end of file reached");
		// end of file reached
		if (block_offset > 0) {
			// TODO: fill remainder of last block with zero and transmit
		}
		state = STATE_STOP;
    4f7e:	movs	r3, #13
		return false;
    4f80:	movs	r0, #0
		//Serial.println("end of file reached");
		// end of file reached
		if (block_offset > 0) {
			// TODO: fill remainder of last block with zero and transmit
		}
		state = STATE_STOP;
    4f82:	strb.w	r3, [r4, #635]	; 0x27b
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
    4f86:	add	sp, #12
    4f88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
			state = state_play;
    4f8c:	ldrb.w	r1, [r4, #636]	; 0x27c
			//Serial.print("wav: found data chunk, len=");
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
    4f90:	strb.w	r3, [r4, #637]	; 0x27d
			state = state_play;
			if (state & 1) {
    4f94:	lsls	r3, r1, #31
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
			state = state_play;
    4f96:	strb.w	r1, [r4, #635]	; 0x27b
			if (state & 1) {
    4f9a:	bmi.n	4fea <AudioPlaySdWav::consume(unsigned long)+0x366>
				// if we're going to start stereo
				// better allocate another output block
				block_right = allocate();
				if (!block_right) return false;
			}
			total_length = data_length;
    4f9c:	str	r2, [r4, #100]	; 0x64
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    4f9e:	cmp	r5, #0
    4fa0:	bne.w	4ca6 <AudioPlaySdWav::consume(unsigned long)+0x22>
    4fa4:	b.n	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
			//Serial.println("is wav file");
			if (header[3] == 0x20746D66) {
				// "fmt " header
				if (header[4] < 16) {
    4fa6:	ldr	r2, [r4, #72]	; 0x48
    4fa8:	sub.w	r1, r2, #16
    4fac:	cmp	r1, #24
    4fae:	bhi.n	4f60 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
					//Serial.println("WAVEFORMATEXTENSIBLE too long");
					break;
				}
				//Serial.println("header ok");
				header_offset = 0;
				state = STATE_PARSE2;
    4fb0:	movs	r1, #9
					// size of header[] should accomodate them...
					//Serial.println("WAVEFORMATEXTENSIBLE too long");
					break;
				}
				//Serial.println("header ok");
				header_offset = 0;
    4fb2:	strb.w	r3, [r4, #634]	; 0x27a
				state = STATE_PARSE2;
    4fb6:	strb.w	r1, [r4, #635]	; 0x27b
    4fba:	b.n	4f50 <AudioPlaySdWav::consume(unsigned long)+0x2cc>
				if (block_right) release(block_right);
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
				if (data_length == 0) break;
    4fbc:	cmp.w	ip, #0
    4fc0:	bne.w	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
    4fc4:	b.n	4f7e <AudioPlaySdWav::consume(unsigned long)+0x2fa>
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
    4fc6:	ldr	r1, [r4, #108]	; 0x6c
    4fc8:	ldrh.w	r3, [r4, #116]	; 0x74
    4fcc:	add.w	ip, r1, r3, lsl #1
    4fd0:	orr.w	r0, r0, lr, lsl #8
			leftover_bytes = 0;
			goto right16;
		}
		while (1) {
			lsb = *p++;
			msb = *p++;
    4fd4:	adds	r6, #2
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
    4fd6:	strh.w	r0, [ip, #4]
    4fda:	b.n	4e1e <AudioPlaySdWav::consume(unsigned long)+0x19a>
    4fdc:	ldrh	r3, [r6, #0]
			lsb = *p++;
			msb = *p++;
			size -= 2;
			if (size == 0) {
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
    4fde:	str	r3, [r4, #56]	; 0x38
				leftover_bytes = 2;
    4fe0:	movs	r3, #2
				return false;
    4fe2:	mov	r0, r5
			msb = *p++;
			size -= 2;
			if (size == 0) {
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
    4fe4:	strb.w	r3, [r4, #637]	; 0x27d
				return false;
    4fe8:	b.n	4cd4 <AudioPlaySdWav::consume(unsigned long)+0x50>
			leftover_bytes = 0;
			state = state_play;
			if (state & 1) {
				// if we're going to start stereo
				// better allocate another output block
				block_right = allocate();
    4fea:	bl	a928 <AudioStream::allocate()>
    4fee:	str	r0, [r4, #112]	; 0x70
				if (!block_right) return false;
    4ff0:	cmp	r0, #0
    4ff2:	beq.w	4cd2 <AudioPlaySdWav::consume(unsigned long)+0x4e>
    4ff6:	ldr	r2, [r4, #96]	; 0x60
    4ff8:	b.n	4f9c <AudioPlaySdWav::consume(unsigned long)+0x318>
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
    4ffa:	movs	r2, #0
    4ffc:	mov	r0, r4
    4ffe:	bl	aa24 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
				block_left = NULL;
    5002:	mov.w	r8, #0
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				release(block_left);
    5006:	ldr	r0, [r4, #108]	; 0x6c
    5008:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
				transmit(block_right, 1);
    500c:	movs	r2, #1
    500e:	ldr	r1, [r4, #112]	; 0x70
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				release(block_left);
				block_left = NULL;
    5010:	str.w	r8, [r4, #108]	; 0x6c
				transmit(block_right, 1);
    5014:	mov	r0, r4
    5016:	bl	aa24 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_right);
    501a:	ldr	r0, [r4, #112]	; 0x70
    501c:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
				block_right = NULL;
				data_length += size;
    5020:	ldr	r0, [r4, #96]	; 0x60
				transmit(block_left, 0);
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
    5022:	str.w	r8, [r4, #112]	; 0x70
				data_length += size;
				buffer_offset = p - buffer;
    5026:	subs	r6, r6, r7
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
    5028:	add	r0, r5
				buffer_offset = p - buffer;
    502a:	strh.w	r6, [r4, #630]	; 0x276
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
    502e:	str	r0, [r4, #96]	; 0x60
				buffer_offset = p - buffer;
				if (data_length == 0) state = STATE_STOP;
    5030:	cmp	r0, #0
    5032:	beq.w	4ed2 <AudioPlaySdWav::consume(unsigned long)+0x24e>
    5036:	b.n	4ed8 <AudioPlaySdWav::consume(unsigned long)+0x254>
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
			data_length -= size;
    5038:	subs	r2, r2, r5
			buffer_offset += size;
    503a:	add	r5, r3
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
			data_length -= size;
    503c:	str	r2, [r4, #96]	; 0x60
			buffer_offset += size;
    503e:	strh.w	r5, [r4, #630]	; 0x276
			return false;
    5042:	movs	r0, #0
    5044:	b.n	4cd4 <AudioPlaySdWav::consume(unsigned long)+0x50>
    5046:	nop
    5048:	.word	0x46464952
    504c:	.word	0x61746164

00005050 <AudioPlaySdWav::isPlaying()>:
}


bool AudioPlaySdWav::isPlaying(void)
{
	uint8_t s = *(volatile uint8_t *)&state;
    5050:	ldrb.w	r0, [r0, #635]	; 0x27b
	return (s < 8);
}
    5054:	cmp	r0, #7
    5056:	ite	hi
    5058:	movhi	r0, #0
    505a:	movls	r0, #1
    505c:	bx	lr
    505e:	nop

00005060 <AudioPlaySdWav::update()>:
void AudioPlaySdWav::update(void)
{
	int32_t n;

	// only update if we're playing
	if (state == STATE_STOP) return;
    5060:	ldrb.w	r3, [r0, #635]	; 0x27b
    5064:	cmp	r3, #13
    5066:	beq.w	51c2 <AudioPlaySdWav::update()+0x162>
	}
}


void AudioPlaySdWav::update(void)
{
    506a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    506e:	mov	r4, r0

	// only update if we're playing
	if (state == STATE_STOP) return;

	// allocate the audio blocks to transmit
	block_left = allocate();
    5070:	bl	a928 <AudioStream::allocate()>
    5074:	str	r0, [r4, #108]	; 0x6c
	if (block_left == NULL) return;
    5076:	cmp	r0, #0
    5078:	beq.w	51a2 <AudioPlaySdWav::update()+0x142>
	if (state < 8 && (state & 1) == 1) {
    507c:	ldrb.w	r3, [r4, #635]	; 0x27b
    5080:	cmp	r3, #7
    5082:	bls.w	51a6 <AudioPlaySdWav::update()+0x146>
			return;
		}
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
    5086:	movs	r3, #0
    5088:	str	r3, [r4, #112]	; 0x70
	block_offset = 0;

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
    508a:	ldrh.w	r3, [r4, #632]	; 0x278
    508e:	ldrh.w	r1, [r4, #630]	; 0x276
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
	}
	block_offset = 0;
    5092:	movs	r2, #0

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
    5094:	subs	r1, r3, r1
	if (n > 0) {
    5096:	cmp	r1, r2
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
	}
	block_offset = 0;
    5098:	strh.w	r2, [r4, #116]	; 0x74

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
	if (n > 0) {
    509c:	ble.n	50aa <AudioPlaySdWav::update()+0x4a>
		// we have buffered data
		if (consume(n)) return; // it was enough to transmit audio
    509e:	mov	r0, r4
    50a0:	bl	4c84 <AudioPlaySdWav::consume(unsigned long)>
    50a4:	cmp	r0, #0
    50a6:	bne.w	51d0 <AudioPlaySdWav::update()+0x170>
	}

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
    50aa:	ldrb.w	r3, [r4, #635]	; 0x27b
    50ae:	cmp	r3, #13
    50b0:	add.w	r6, r4, #24
    50b4:	beq.n	5102 <AudioPlaySdWav::update()+0xa2>
    50b6:	mov	r0, r6
    50b8:	bl	6ae8 <File::available()>
    50bc:	cbz	r0, 5102 <AudioPlaySdWav::update()+0xa2>
    50be:	add.w	r7, r4, #118	; 0x76
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
    50c2:	mov.w	r8, #0
    50c6:	b.n	50e8 <AudioPlaySdWav::update()+0x88>
    50c8:	strh.w	r8, [r4, #630]	; 0x276
		bool parsing = (state >= 8);
    50cc:	ldrb.w	r5, [r4, #635]	; 0x27b
		bool txok = consume(buffer_length);
    50d0:	bl	4c84 <AudioPlaySdWav::consume(unsigned long)>
		if (txok) {
			if (state != STATE_STOP) return;
    50d4:	ldrb.w	r3, [r4, #635]	; 0x27b
		buffer_length = wavfile.read(buffer, 512);
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
		if (txok) {
    50d8:	cmp	r0, #0
    50da:	bne.n	519e <AudioPlaySdWav::update()+0x13e>
			if (state != STATE_STOP) return;
		} else {
			if (state != STATE_STOP) {
    50dc:	cmp	r3, #13
    50de:	beq.n	5102 <AudioPlaySdWav::update()+0xa2>
				if (parsing && state < 8) goto readagain;
    50e0:	cmp	r5, #7
    50e2:	bls.n	5122 <AudioPlaySdWav::update()+0xc2>
    50e4:	cmp	r3, #7
    50e6:	bhi.n	5122 <AudioPlaySdWav::update()+0xc2>

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
    50e8:	mov	r1, r7
    50ea:	mov.w	r2, #512	; 0x200
    50ee:	mov	r0, r6
    50f0:	bl	6c14 <File::read(void*, unsigned short)>
    50f4:	uxth	r3, r0
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
    50f6:	mov	r1, r3
    50f8:	mov	r0, r4

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
    50fa:	strh.w	r3, [r4, #632]	; 0x278
		if (buffer_length == 0) goto end;
    50fe:	cmp	r3, #0
    5100:	bne.n	50c8 <AudioPlaySdWav::update()+0x68>
				else goto cleanup;
			}
		}
	}
end:	// end of file reached or other reason to stop
	wavfile.close();
    5102:	mov	r0, r6
    5104:	bl	6c20 <File::close()>
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    5108:	ldr	r2, [pc, #212]	; (51e0 <AudioPlaySdWav::update()+0x180>)
    510a:	ldrh	r3, [r2, #0]
    510c:	cmp	r3, #0
    510e:	bne.n	51c4 <AudioPlaySdWav::update()+0x164>
		SPI.notUsingInterrupt(IRQ_SOFTWARE);
    5110:	movs	r1, #94	; 0x5e
    5112:	ldr	r0, [pc, #208]	; (51e4 <AudioPlaySdWav::update()+0x184>)
    5114:	bl	84ac <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>
#if defined(HAS_KINETIS_SDHC)	
	if (!(SIM_SCGC3 & SIM_SCGC3_SDHC)) AudioStopUsingSPI();
#else 	
	AudioStopUsingSPI();
#endif	
	state_play = STATE_STOP;
    5118:	movs	r3, #13
    511a:	strb.w	r3, [r4, #636]	; 0x27c
	state = STATE_STOP;
    511e:	strb.w	r3, [r4, #635]	; 0x27b
cleanup:
	if (block_left) {
    5122:	ldr	r0, [r4, #108]	; 0x6c
    5124:	cbz	r0, 5164 <AudioPlaySdWav::update()+0x104>
		if (block_offset > 0) {
    5126:	ldrh.w	r3, [r4, #116]	; 0x74
    512a:	cbz	r3, 515c <AudioPlaySdWav::update()+0xfc>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    512c:	cmp	r3, #127	; 0x7f
    512e:	bhi.n	5144 <AudioPlaySdWav::update()+0xe4>
    5130:	add.w	r3, r0, r3, lsl #1
    5134:	adds	r3, #2
    5136:	add.w	r5, r0, #258	; 0x102
				block_left->data[i] = 0;
    513a:	movs	r2, #0
    513c:	strh.w	r2, [r3, #2]!
	state_play = STATE_STOP;
	state = STATE_STOP;
cleanup:
	if (block_left) {
		if (block_offset > 0) {
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    5140:	cmp	r3, r5
    5142:	bne.n	513c <AudioPlaySdWav::update()+0xdc>
				block_left->data[i] = 0;
			}
			transmit(block_left, 0);
    5144:	mov	r1, r0
    5146:	movs	r2, #0
    5148:	mov	r0, r4
    514a:	bl	aa24 <AudioStream::transmit(audio_block_struct*, unsigned char)>
			if (state < 8 && (state & 1) == 0) {
    514e:	ldrb.w	r3, [r4, #635]	; 0x27b
    5152:	cmp	r3, #7
    5154:	bhi.n	515a <AudioPlaySdWav::update()+0xfa>
    5156:	lsls	r3, r3, #31
    5158:	bpl.n	51d4 <AudioPlaySdWav::update()+0x174>
    515a:	ldr	r0, [r4, #108]	; 0x6c
				transmit(block_left, 1);
			}
		}
		release(block_left);
    515c:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
		block_left = NULL;
    5160:	movs	r3, #0
    5162:	str	r3, [r4, #108]	; 0x6c
	}
	if (block_right) {
    5164:	ldr	r0, [r4, #112]	; 0x70
    5166:	cbz	r0, 51a2 <AudioPlaySdWav::update()+0x142>
		if (block_offset > 0) {
    5168:	ldrh.w	r3, [r4, #116]	; 0x74
    516c:	cbz	r3, 5192 <AudioPlaySdWav::update()+0x132>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    516e:	cmp	r3, #127	; 0x7f
    5170:	bhi.n	5186 <AudioPlaySdWav::update()+0x126>
    5172:	add.w	r3, r0, r3, lsl #1
    5176:	adds	r3, #2
    5178:	add.w	r5, r0, #258	; 0x102
				block_right->data[i] = 0;
    517c:	movs	r2, #0
    517e:	strh.w	r2, [r3, #2]!
		release(block_left);
		block_left = NULL;
	}
	if (block_right) {
		if (block_offset > 0) {
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    5182:	cmp	r5, r3
    5184:	bne.n	517e <AudioPlaySdWav::update()+0x11e>
				block_right->data[i] = 0;
			}
			transmit(block_right, 1);
    5186:	mov	r1, r0
    5188:	movs	r2, #1
    518a:	mov	r0, r4
    518c:	bl	aa24 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    5190:	ldr	r0, [r4, #112]	; 0x70
		}
		release(block_right);
    5192:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
		block_right = NULL;
    5196:	movs	r3, #0
    5198:	str	r3, [r4, #112]	; 0x70
    519a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
		if (txok) {
			if (state != STATE_STOP) return;
    519e:	cmp	r3, #13
    51a0:	beq.n	5102 <AudioPlaySdWav::update()+0xa2>
    51a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (state == STATE_STOP) return;

	// allocate the audio blocks to transmit
	block_left = allocate();
	if (block_left == NULL) return;
	if (state < 8 && (state & 1) == 1) {
    51a6:	lsls	r2, r3, #31
    51a8:	bpl.w	5086 <AudioPlaySdWav::update()+0x26>
		// if we're playing stereo, allocate another
		// block for the right channel output
		block_right = allocate();
    51ac:	bl	a928 <AudioStream::allocate()>
    51b0:	str	r0, [r4, #112]	; 0x70
		if (block_right == NULL) {
    51b2:	cmp	r0, #0
    51b4:	bne.w	508a <AudioPlaySdWav::update()+0x2a>
			release(block_left);
    51b8:	ldr	r0, [r4, #108]	; 0x6c
			transmit(block_right, 1);
		}
		release(block_right);
		block_right = NULL;
	}
}
    51ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (state < 8 && (state & 1) == 1) {
		// if we're playing stereo, allocate another
		// block for the right channel output
		block_right = allocate();
		if (block_right == NULL) {
			release(block_left);
    51be:	b.w	a9d0 <AudioStream::release(audio_block_struct*)>
    51c2:	bx	lr
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    51c4:	subs	r3, #1
    51c6:	uxth	r3, r3
    51c8:	strh	r3, [r2, #0]
    51ca:	cmp	r3, #0
    51cc:	beq.n	5110 <AudioPlaySdWav::update()+0xb0>
    51ce:	b.n	5118 <AudioPlaySdWav::update()+0xb8>
    51d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
				block_left->data[i] = 0;
			}
			transmit(block_left, 0);
			if (state < 8 && (state & 1) == 0) {
				transmit(block_left, 1);
    51d4:	movs	r2, #1
    51d6:	ldr	r1, [r4, #108]	; 0x6c
    51d8:	mov	r0, r4
    51da:	bl	aa24 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    51de:	b.n	515a <AudioPlaySdWav::update()+0xfa>
    51e0:	.word	0x1fffb838
    51e4:	.word	0x1fff9460

000051e8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
//audio_block_t * AudioOutputI2SQuad::inputQueueArray[4];
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    51e8:	ldr	r2, [pc, #8]	; (51f4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    51ea:	ldr	r1, [pc, #12]	; (51f8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    51ec:	ldr	r0, [pc, #12]	; (51fc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    51ee:	b.w	b6a8 <__aeabi_atexit>
    51f2:	nop
    51f4:	.word	0x1fff93fc
    51f8:	.word	0x000046d5
    51fc:	.word	0x1fffb830

00005200 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    5200:	ldr	r2, [pc, #8]	; (520c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    5202:	ldr	r1, [pc, #12]	; (5210 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    5204:	ldr	r0, [pc, #12]	; (5214 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    5206:	b.w	b6a8 <__aeabi_atexit>
    520a:	nop
    520c:	.word	0x1fff93fc
    5210:	.word	0x000046d5
    5214:	.word	0x1fffb83c

00005218 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    5218:	ldr	r2, [pc, #8]	; (5224 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    521a:	ldr	r1, [pc, #12]	; (5228 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    521c:	ldr	r0, [pc, #12]	; (522c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    521e:	b.w	b6a8 <__aeabi_atexit>
    5222:	nop
    5224:	.word	0x1fff93fc
    5228:	.word	0x000046d5
    522c:	.word	0x1fffb844

00005230 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    5230:	ldr	r2, [pc, #8]	; (523c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    5232:	ldr	r1, [pc, #12]	; (5240 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    5234:	ldr	r0, [pc, #12]	; (5244 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    5236:	b.w	b6a8 <__aeabi_atexit>
    523a:	nop
    523c:	.word	0x1fff93fc
    5240:	.word	0x000046d5
    5244:	.word	0x1fffb84c

00005248 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    5248:	ldr	r2, [pc, #8]	; (5254 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    524a:	ldr	r1, [pc, #12]	; (5258 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    524c:	ldr	r0, [pc, #12]	; (525c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    524e:	b.w	b6a8 <__aeabi_atexit>
    5252:	nop
    5254:	.word	0x1fff93fc
    5258:	.word	0x000046d5
    525c:	.word	0x1fffb854

00005260 <AudioOutputI2S::isr()>:
	dma.enable();
}


void AudioOutputI2S::isr(void)
{
    5260:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    5264:	ldr	r3, [pc, #208]	; (5338 <AudioOutputI2S::isr()+0xd8>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    5266:	ldr	r0, [pc, #212]	; (533c <AudioOutputI2S::isr()+0xdc>)
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    5268:	ldr	r2, [r3, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    526a:	ldr	r1, [pc, #212]	; (5340 <AudioOutputI2S::isr()+0xe0>)
    526c:	ldr	r2, [r2, #0]
    526e:	ldrb	r3, [r3, #4]
    5270:	strb	r3, [r1, #0]
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    5272:	cmp	r2, r0
    5274:	bcs.n	52ca <AudioOutputI2S::isr()+0x6a>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    5276:	ldr	r3, [pc, #204]	; (5344 <AudioOutputI2S::isr()+0xe4>)
    5278:	ldrb	r3, [r3, #0]
    527a:	cbnz	r3, 52d0 <AudioOutputI2S::isr()+0x70>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    527c:	ldr.w	sl, [pc, #212]	; 5354 <AudioOutputI2S::isr()+0xf4>
	blockR = AudioOutputI2S::block_right_1st;
    5280:	ldr.w	r9, [pc, #212]	; 5358 <AudioOutputI2S::isr()+0xf8>
	offsetL = AudioOutputI2S::block_left_offset;
    5284:	ldr.w	r8, [pc, #212]	; 535c <AudioOutputI2S::isr()+0xfc>
	offsetR = AudioOutputI2S::block_right_offset;
    5288:	ldr.w	fp, [pc, #212]	; 5360 <AudioOutputI2S::isr()+0x100>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    528c:	ldr.w	r6, [sl]
	blockR = AudioOutputI2S::block_right_1st;
    5290:	ldr.w	r7, [r9]
	offsetL = AudioOutputI2S::block_left_offset;
    5294:	ldrh.w	r4, [r8]
	offsetR = AudioOutputI2S::block_right_offset;
    5298:	ldrh.w	r5, [fp]

	if (blockL && blockR) {
    529c:	cmp	r6, #0
    529e:	beq.n	531a <AudioOutputI2S::isr()+0xba>
    52a0:	cbz	r7, 530c <AudioOutputI2S::isr()+0xac>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    52a2:	adds	r2, r7, #4
    52a4:	adds	r1, r6, #4
    52a6:	add.w	r2, r2, r5, lsl #1
    52aa:	add.w	r1, r1, r4, lsl #1
    52ae:	bl	8af4 <memcpy_tointerleaveLR>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    52b2:	adds	r5, #64	; 0x40
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    52b4:	adds	r4, #64	; 0x40
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    52b6:	cmp	r4, #127	; 0x7f
    52b8:	bhi.n	52f4 <AudioOutputI2S::isr()+0x94>
		AudioOutputI2S::block_left_offset = offsetL;
    52ba:	strh.w	r4, [r8]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    52be:	cmp	r5, #127	; 0x7f
    52c0:	bhi.n	52da <AudioOutputI2S::isr()+0x7a>
		AudioOutputI2S::block_right_offset = offsetR;
    52c2:	strh.w	r5, [fp]
    52c6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
    52ca:	sub.w	r0, r0, #256	; 0x100
    52ce:	b.n	527c <AudioOutputI2S::isr()+0x1c>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    52d0:	ldr	r3, [pc, #116]	; (5348 <AudioOutputI2S::isr()+0xe8>)
    52d2:	mov.w	r2, #1073741824	; 0x40000000
    52d6:	str	r2, [r3, #0]
    52d8:	b.n	527c <AudioOutputI2S::isr()+0x1c>
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    52da:	movs	r4, #0
		AudioStream::release(blockR);
    52dc:	mov	r0, r7
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    52de:	strh.w	r4, [fp]
		AudioStream::release(blockR);
    52e2:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    52e6:	ldr	r3, [pc, #100]	; (534c <AudioOutputI2S::isr()+0xec>)
    52e8:	ldr	r2, [r3, #0]
    52ea:	str.w	r2, [r9]
		AudioOutputI2S::block_right_2nd = NULL;
    52ee:	str	r4, [r3, #0]
    52f0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    52f4:	movs	r4, #0
		AudioStream::release(blockL);
    52f6:	mov	r0, r6
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    52f8:	strh.w	r4, [r8]
		AudioStream::release(blockL);
    52fc:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    5300:	ldr	r3, [pc, #76]	; (5350 <AudioOutputI2S::isr()+0xf0>)
    5302:	ldr	r2, [r3, #0]
    5304:	str.w	r2, [sl]
		AudioOutputI2S::block_left_2nd = NULL;
    5308:	str	r4, [r3, #0]
    530a:	b.n	52be <AudioOutputI2S::isr()+0x5e>
	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    530c:	adds	r1, r6, #4
    530e:	add.w	r1, r1, r4, lsl #1
    5312:	bl	8b32 <memcpy_tointerleaveL>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    5316:	adds	r4, #64	; 0x40
    5318:	b.n	52b6 <AudioOutputI2S::isr()+0x56>
	} else if (blockR) {
    531a:	cbz	r7, 532a <AudioOutputI2S::isr()+0xca>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    531c:	adds	r1, r7, #4
    531e:	add.w	r1, r1, r5, lsl #1
    5322:	bl	8b72 <memcpy_tointerleaveR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    5326:	adds	r5, #64	; 0x40
    5328:	b.n	52b6 <AudioOutputI2S::isr()+0x56>
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    532a:	mov.w	r2, #256	; 0x100
    532e:	mov	r1, r7
    5330:	bl	bd10 <memset>
    5334:	b.n	52b6 <AudioOutputI2S::isr()+0x56>
    5336:	nop
    5338:	.word	0x1fffb860
    533c:	.word	0x1fff8b20
    5340:	.word	0x4000801f
    5344:	.word	0x1fffb878
    5348:	.word	0xe000e208
    534c:	.word	0x1fffb874
    5350:	.word	0x1fffb87c
    5354:	.word	0x1fffb870
    5358:	.word	0x1fffb868
    535c:	.word	0x1fffb85c
    5360:	.word	0x1fffb86c

00005364 <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    5364:	push	{r4, r5, r6, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    5366:	movs	r1, #0




void AudioOutputI2S::update(void)
{
    5368:	mov	r4, r0
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    536a:	bl	aa58 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    536e:	cbz	r0, 5392 <AudioOutputI2S::update()+0x2e>
		__disable_irq();
    5370:	cpsid	i
		if (block_left_1st == NULL) {
    5372:	ldr	r2, [pc, #112]	; (53e4 <AudioOutputI2S::update()+0x80>)
    5374:	ldr	r3, [r2, #0]
    5376:	cmp	r3, #0
    5378:	beq.n	53ce <AudioOutputI2S::update()+0x6a>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    537a:	ldr	r1, [pc, #108]	; (53e8 <AudioOutputI2S::update()+0x84>)
    537c:	ldr	r5, [r1, #0]
    537e:	cbz	r5, 53c2 <AudioOutputI2S::update()+0x5e>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
			block_left_offset = 0;
    5380:	ldr	r6, [pc, #104]	; (53ec <AudioOutputI2S::update()+0x88>)
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    5382:	str	r5, [r2, #0]
			block_left_2nd = block;
			block_left_offset = 0;
    5384:	movs	r2, #0
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
    5386:	str	r0, [r1, #0]
			block_left_offset = 0;
    5388:	strh	r2, [r6, #0]
			__enable_irq();
    538a:	cpsie	i
			release(tmp);
    538c:	mov	r0, r3
    538e:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    5392:	mov	r0, r4
    5394:	movs	r1, #1
    5396:	bl	aa58 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    539a:	cbz	r0, 53c0 <AudioOutputI2S::update()+0x5c>
		__disable_irq();
    539c:	cpsid	i
		if (block_right_1st == NULL) {
    539e:	ldr	r2, [pc, #80]	; (53f0 <AudioOutputI2S::update()+0x8c>)
    53a0:	ldr	r3, [r2, #0]
    53a2:	cbz	r3, 53d8 <AudioOutputI2S::update()+0x74>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    53a4:	ldr	r1, [pc, #76]	; (53f4 <AudioOutputI2S::update()+0x90>)
    53a6:	ldr	r4, [r1, #0]
    53a8:	cbz	r4, 53c8 <AudioOutputI2S::update()+0x64>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
    53aa:	ldr	r5, [pc, #76]	; (53f8 <AudioOutputI2S::update()+0x94>)
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    53ac:	str	r4, [r2, #0]
			block_right_2nd = block;
			block_right_offset = 0;
    53ae:	movs	r2, #0
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
    53b0:	str	r0, [r1, #0]
			block_right_offset = 0;
    53b2:	strh	r2, [r5, #0]
			__enable_irq();
    53b4:	cpsie	i
			release(tmp);
    53b6:	mov	r0, r3
		}
	}
}
    53b8:	ldmia.w	sp!, {r4, r5, r6, lr}
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
			__enable_irq();
			release(tmp);
    53bc:	b.w	a9d0 <AudioStream::release(audio_block_struct*)>
    53c0:	pop	{r4, r5, r6, pc}
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
    53c2:	str	r0, [r1, #0]
			__enable_irq();
    53c4:	cpsie	i
    53c6:	b.n	5392 <AudioOutputI2S::update()+0x2e>
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
    53c8:	str	r0, [r1, #0]
			__enable_irq();
    53ca:	cpsie	i
    53cc:	pop	{r4, r5, r6, pc}
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
    53ce:	ldr	r1, [pc, #28]	; (53ec <AudioOutputI2S::update()+0x88>)
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
    53d0:	str	r0, [r2, #0]
			block_left_offset = 0;
    53d2:	strh	r3, [r1, #0]
			__enable_irq();
    53d4:	cpsie	i
    53d6:	b.n	5392 <AudioOutputI2S::update()+0x2e>
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
    53d8:	ldr	r1, [pc, #28]	; (53f8 <AudioOutputI2S::update()+0x94>)
	}
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
    53da:	str	r0, [r2, #0]
			block_right_offset = 0;
    53dc:	strh	r3, [r1, #0]
			__enable_irq();
    53de:	cpsie	i
    53e0:	pop	{r4, r5, r6, pc}
    53e2:	nop
    53e4:	.word	0x1fffb870
    53e8:	.word	0x1fffb87c
    53ec:	.word	0x1fffb85c
    53f0:	.word	0x1fffb868
    53f4:	.word	0x1fffb874
    53f8:	.word	0x1fffb86c

000053fc <AudioOutputI2S::config_i2s()>:


void AudioOutputI2S::config_i2s(void)
{
#if defined(KINETISK) || defined(KINETISL)
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    53fc:	ldr	r3, [pc, #160]	; (54a0 <AudioOutputI2S::config_i2s()+0xa4>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    53fe:	ldr	r1, [pc, #164]	; (54a4 <AudioOutputI2S::config_i2s()+0xa8>)


void AudioOutputI2S::config_i2s(void)
{
#if defined(KINETISK) || defined(KINETISL)
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    5400:	ldr	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    5402:	ldr	r0, [pc, #164]	; (54a8 <AudioOutputI2S::config_i2s()+0xac>)


void AudioOutputI2S::config_i2s(void)
{
#if defined(KINETISK) || defined(KINETISL)
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    5404:	orr.w	r2, r2, #32768	; 0x8000
    5408:	str	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    540a:	ldr	r2, [r1, #0]
    540c:	orr.w	r2, r2, #2
    5410:	str	r2, [r1, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    5412:	ldr	r2, [r3, #0]
    5414:	orr.w	r2, r2, #2
    5418:	str	r2, [r3, #0]

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    541a:	ldr	r3, [r0, #0]
    541c:	cmp	r3, #0
    541e:	blt.n	549e <AudioOutputI2S::config_i2s()+0xa2>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
    5420:	ldr	r3, [pc, #136]	; (54ac <AudioOutputI2S::config_i2s()+0xb0>)
    5422:	ldr	r3, [r3, #0]
    5424:	cmp	r3, #0
    5426:	blt.n	549e <AudioOutputI2S::config_i2s()+0xa2>

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    5428:	ldr	r2, [pc, #132]	; (54b0 <AudioOutputI2S::config_i2s()+0xb4>)
    542a:	mov.w	r3, #1124073472	; 0x43000000
    542e:	str	r3, [r2, #0]
	while (I2S0_MCR & I2S_MCR_DUF) ;
    5430:	ldr	r3, [r2, #0]
    5432:	cmp	r3, #0
    5434:	blt.n	5430 <AudioOutputI2S::config_i2s()+0x34>
#endif
#endif


void AudioOutputI2S::config_i2s(void)
{
    5436:	push	{r4, r5, r6, r7, lr}
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    5438:	ldr	r4, [pc, #120]	; (54b4 <AudioOutputI2S::config_i2s()+0xb8>)

	// configure transmitter
	I2S0_TMR = 0;
    543a:	ldr	r0, [pc, #124]	; (54b8 <AudioOutputI2S::config_i2s()+0xbc>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    543c:	ldr.w	lr, [pc, #168]	; 54e8 <AudioOutputI2S::config_i2s()+0xec>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    5440:	ldr	r1, [pc, #120]	; (54bc <AudioOutputI2S::config_i2s()+0xc0>)
	I2S0_TCR3 = I2S_TCR3_TCE;
    5442:	ldr	r3, [pc, #124]	; (54c0 <AudioOutputI2S::config_i2s()+0xc4>)
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    5444:	ldr	r2, [pc, #124]	; (54c4 <AudioOutputI2S::config_i2s()+0xc8>)
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    5446:	ldr	r7, [pc, #128]	; (54c8 <AudioOutputI2S::config_i2s()+0xcc>)

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    5448:	ldr	r6, [pc, #128]	; (54cc <AudioOutputI2S::config_i2s()+0xd0>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    544a:	ldr	r5, [pc, #132]	; (54d0 <AudioOutputI2S::config_i2s()+0xd4>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    544c:	movw	ip, #4112	; 0x1010
    5450:	str.w	ip, [r4]

	// configure transmitter
	I2S0_TMR = 0;
    5454:	movs	r4, #0
    5456:	str	r4, [r0, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    5458:	movs	r0, #1
    545a:	str.w	r0, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    545e:	ldr.w	lr, [pc, #140]	; 54ec <AudioOutputI2S::config_i2s()+0xf0>
    5462:	str.w	lr, [r1]
	I2S0_TCR3 = I2S_TCR3_TCE;
    5466:	mov.w	r1, #65536	; 0x10000
    546a:	str	r1, [r3, #0]
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    546c:	ldr	r3, [pc, #100]	; (54d4 <AudioOutputI2S::config_i2s()+0xd8>)
    546e:	str	r3, [r2, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    5470:	ldr.w	lr, [pc, #124]	; 54f0 <AudioOutputI2S::config_i2s()+0xf4>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
	I2S0_TCR3 = I2S_TCR3_TCE;
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    5474:	ldr	r2, [pc, #96]	; (54d8 <AudioOutputI2S::config_i2s()+0xdc>)
    5476:	str	r2, [r7, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    5478:	str	r4, [r6, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    547a:	str	r0, [r5, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    547c:	add.w	r0, r0, #1191182336	; 0x47000000
    5480:	str.w	r0, [lr]
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    5484:	ldr	r4, [pc, #84]	; (54dc <AudioOutputI2S::config_i2s()+0xe0>)
	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
    5486:	str	r1, [r7, #120]	; 0x78
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    5488:	ldr	r0, [pc, #84]	; (54e0 <AudioOutputI2S::config_i2s()+0xe4>)
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    548a:	ldr	r1, [pc, #88]	; (54e4 <AudioOutputI2S::config_i2s()+0xe8>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    548c:	str.w	r3, [r6, #-80]
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    5490:	mov.w	r3, #1536	; 0x600
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    5494:	str	r2, [r5, #16]

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    5496:	str	r3, [r4, #0]
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    5498:	str	r3, [r0, #0]
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    549a:	str	r3, [r1, #0]
    549c:	pop	{r4, r5, r6, r7, pc}
    549e:	bx	lr
    54a0:	.word	0x4004803c
    54a4:	.word	0x40048040
    54a8:	.word	0x4002f000
    54ac:	.word	0x4002f080
    54b0:	.word	0x4002f100
    54b4:	.word	0x4002f104
    54b8:	.word	0x4002f060
    54bc:	.word	0x4002f008
    54c0:	.word	0x4002f00c
    54c4:	.word	0x4002f010
    54c8:	.word	0x4002f014
    54cc:	.word	0x4002f0e0
    54d0:	.word	0x4002f084
    54d4:	.word	0x00011f1b
    54d8:	.word	0x1f1f1f00
    54dc:	.word	0x4004b008
    54e0:	.word	0x4004b00c
    54e4:	.word	0x4004b018
    54e8:	.word	0x4002f004
    54ec:	.word	0x07000001
    54f0:	.word	0x4002f088

000054f4 <AudioOutputI2S::begin()>:
#if defined(__IMXRT1062__)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
    54f4:	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    54f6:	ldr	r4, [pc, #160]	; (5598 <AudioOutputI2S::begin()+0xa4>)
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    54f8:	ldr	r7, [pc, #160]	; (559c <AudioOutputI2S::begin()+0xa8>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    54fa:	movs	r1, #1
    54fc:	mov	r0, r4
    54fe:	bl	a3b8 <DMAChannel::begin(bool)>

	block_left_1st = NULL;
    5502:	ldr	r2, [pc, #156]	; (55a0 <AudioOutputI2S::begin()+0xac>)
	block_right_1st = NULL;
    5504:	ldr	r3, [pc, #156]	; (55a4 <AudioOutputI2S::begin()+0xb0>)

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_left_1st = NULL;
    5506:	movs	r5, #0
    5508:	str	r5, [r2, #0]
	block_right_1st = NULL;
    550a:	str	r5, [r3, #0]

	config_i2s();
    550c:	bl	53fc <AudioOutputI2S::config_i2s()>

#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0
    5510:	ldr	r3, [pc, #148]	; (55a8 <AudioOutputI2S::begin()+0xb4>)

	dma.TCD->SADDR = i2s_tx_buffer;
    5512:	ldr	r2, [pc, #152]	; (55ac <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
    5514:	ldr.w	lr, [pc, #176]	; 55c8 <AudioOutputI2S::begin()+0xd4>

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    5518:	ldr	r0, [pc, #148]	; (55b0 <AudioOutputI2S::begin()+0xbc>)
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);

	I2S0_TCSR = I2S_TCSR_SR;
    551a:	ldr	r1, [pc, #152]	; (55b4 <AudioOutputI2S::begin()+0xc0>)
	block_right_1st = NULL;

	config_i2s();

#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0
    551c:	mov.w	r6, #1536	; 0x600
    5520:	str	r6, [r3, #0]

	dma.TCD->SADDR = i2s_tx_buffer;
    5522:	ldr	r3, [r4, #0]
	dma.TCD->SOFF = 2;
    5524:	movs	r6, #2
	config_i2s();

#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
    5526:	str	r2, [r3, #0]
	dma.TCD->SOFF = 2;
    5528:	strh	r6, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    552a:	ldrb	r2, [r4, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
    552c:	str.w	lr, [r3, #16]
    5530:	add.w	r2, r2, #1073741824	; 0x40000000

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    5534:	str	r0, [r3, #12]
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    5536:	str	r6, [r3, #8]
    5538:	add.w	r2, r2, #135168	; 0x21000
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    553c:	mov.w	r0, #256	; 0x100
#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    5540:	movw	lr, #257	; 0x101
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    5544:	movs	r6, #6
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    5546:	strh	r0, [r3, #22]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
    5548:	strh	r5, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    554a:	strh	r0, [r3, #30]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
    554c:	str	r5, [r3, #24]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    554e:	strh	r6, [r3, #28]
#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    5550:	strh.w	lr, [r3, #6]
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    5554:	movs	r0, #143	; 0x8f
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);

	I2S0_TCSR = I2S_TCSR_SR;
    5556:	mov.w	r3, #16777216	; 0x1000000

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    555a:	strb	r5, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    555c:	strb	r0, [r2, #0]
    555e:	str	r3, [r1, #0]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    5560:	str	r7, [r1, #0]
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
#endif
	update_responsibility = update_setup();
    5562:	bl	ab98 <AudioStream::update_setup()>
    5566:	ldrb	r2, [r4, #4]
    5568:	ldr	r3, [pc, #76]	; (55b8 <AudioOutputI2S::begin()+0xc4>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    556a:	ldr	r5, [pc, #80]	; (55bc <AudioOutputI2S::begin()+0xc8>)
    556c:	strb	r0, [r3, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    556e:	asrs	r3, r2, #5
    5570:	lsls	r3, r3, #2
    5572:	add.w	r3, r3, #3758096384	; 0xe0000000
    5576:	add.w	r3, r3, #57600	; 0xe100

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    557a:	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    557e:	movs	r1, #1
    5580:	and.w	r2, r2, #31
    5584:	lsl.w	r2, r1, r2

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    5588:	ldr	r6, [pc, #52]	; (55c0 <AudioOutputI2S::begin()+0xcc>)
    558a:	str.w	r6, [r5, r0, lsl #2]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    558e:	ldr	r1, [pc, #52]	; (55c4 <AudioOutputI2S::begin()+0xd0>)
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    5590:	str	r2, [r3, #0]
    5592:	ldrb	r3, [r4, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    5594:	strb	r3, [r1, #0]
    5596:	pop	{r3, r4, r5, r6, r7, pc}
    5598:	.word	0x1fffb860
    559c:	.word	0x90000001
    55a0:	.word	0x1fffb870
    55a4:	.word	0x1fffb868
    55a8:	.word	0x4004b004
    55ac:	.word	0x1fff8a20
    55b0:	.word	0xfffffe00
    55b4:	.word	0x4002f000
    55b8:	.word	0x1fffb878
    55bc:	.word	0x1fff8e00
    55c0:	.word	0x00005261
    55c4:	.word	0x4000801b
    55c8:	.word	0x4002f022

000055cc <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    55cc:	ldr	r2, [pc, #8]	; (55d8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    55ce:	ldr	r1, [pc, #12]	; (55dc <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    55d0:	ldr	r0, [pc, #12]	; (55e0 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    55d2:	b.w	b6a8 <__aeabi_atexit>
    55d6:	nop
    55d8:	.word	0x1fff93fc
    55dc:	.word	0x000046d5
    55e0:	.word	0x1fffb860

000055e4 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    55e4:	ldr	r2, [pc, #8]	; (55f0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    55e6:	ldr	r1, [pc, #12]	; (55f4 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    55e8:	ldr	r0, [pc, #12]	; (55f8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    55ea:	b.w	b6a8 <__aeabi_atexit>
    55ee:	nop
    55f0:	.word	0x1fff93fc
    55f4:	.word	0x000046d5
    55f8:	.word	0x1fffb880

000055fc <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    55fc:	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    55fe:	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    5600:	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    5602:	mov	r4, r0
    5604:	ite	gt
    5606:	addgt.w	r5, r2, r2, lsl #1
    560a:	movle	r5, #0
    560c:	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    560e:	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    5610:	it	le
    5612:	movle	r6, r2

	pLed->init();
    5614:	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    5616:	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    5618:	ldr	r3, [r4, #0]
    561a:	str	r2, [r4, #4]
    561c:	ldr	r3, [r3, #20]
    561e:	ldr	r2, [pc, #40]	; (5648 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    5620:	str	r6, [r4, #20]
    5622:	cmp	r3, r2
    5624:	bne.n	562a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    5626:	mov	r0, r4
    5628:	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    562a:	mov	r0, r4
    562c:	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    562e:	cmp	r0, #0
    5630:	beq.n	5626 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    5632:	ldr	r2, [pc, #24]	; (564c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    5634:	ldr	r3, [pc, #24]	; (5650 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    5636:	ldr	r1, [r2, #4]
    5638:	sdiv	r0, r3, r0
    563c:	cmp	r0, r1
    563e:	it	cc
    5640:	movcc	r0, r1
    5642:	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    5644:	mov	r0, r4
    5646:	pop	{r3, r4, r5, r6, r7, pc}
    5648:	.word	0x00000471
    564c:	.word	0x1fffb888
    5650:	.word	0x000f4240

00005654 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    5654:	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    5656:	ldr	r4, [pc, #60]	; (5694 <CFastLED::countFPS(int)+0x40>)
    5658:	ldr	r2, [r4, #0]
    565a:	adds	r3, r2, #1
    565c:	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    565e:	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    5660:	str	r3, [r4, #0]
    5662:	blt.n	568c <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5664:	ldr	r5, [pc, #48]	; (5698 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    5666:	ldr	r2, [pc, #52]	; (569c <CFastLED::countFPS(int)+0x48>)
    5668:	ldr	r1, [r5, #0]
    566a:	str	r1, [sp, #4]
	return ret;
    566c:	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    566e:	ldr	r5, [r5, #0]
    5670:	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    5672:	ldr	r6, [r2, #0]
	return ret;
    5674:	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    5676:	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    5678:	mov.w	r2, #1000	; 0x3e8
    br = 0;
    567c:	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    567e:	subs	r1, r1, r6
    5680:	mul.w	r3, r2, r3
    br = 0;
    5684:	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    5686:	udiv	r3, r3, r1
    568a:	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    568c:	add	sp, #12
    568e:	pop	{r4, r5, r6}
    5690:	bx	lr
    5692:	nop
    5694:	.word	0x1fffb89c
    5698:	.word	0x1fffbccc
    569c:	.word	0x1fffb8a4

000056a0 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    56a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56a4:	ldr	r3, [r0, #4]
    56a6:	ldr	r4, [pc, #180]	; (575c <CFastLED::show(unsigned char)+0xbc>)
    56a8:	sub	sp, #12
    56aa:	mov	r6, r0
    56ac:	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    56ae:	cmp	r3, #0
    56b0:	bne.n	574a <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    56b2:	bl	9410 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    56b6:	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    56b8:	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    56ba:	cbz	r3, 56c4 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    56bc:	mov	r0, r9
    56be:	ldr	r1, [r6, #8]
    56c0:	blx	r3
    56c2:	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    56c4:	ldr	r3, [pc, #152]	; (5760 <CFastLED::show(unsigned char)+0xc0>)
    56c6:	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    56c8:	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    56ca:	cmp	r4, #0
    56cc:	beq.n	573c <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    56ce:	ldrh	r3, [r6, #2]
    56d0:	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    56d2:	ldr	r1, [r4, #4]
    56d4:	ldr	r2, [r4, #20]
    56d6:	cmp	r3, #99	; 0x63
    56d8:	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    56da:	it	ls
    56dc:	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    56de:	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    56e2:	strb.w	r5, [sp, #4]
    56e6:	strb.w	r5, [sp, #5]
    56ea:	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    56ee:	cmp.w	r9, #0
    56f2:	beq.n	572e <CFastLED::show(unsigned char)+0x8e>
    56f4:	add.w	r3, r4, #11
    56f8:	add.w	lr, sp, #4
    56fc:	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    5700:	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5704:	cmp.w	fp, #0
    5708:	beq.n	5726 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    570a:	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    570e:	add.w	r0, sl, #1
    5712:	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    5716:	cmp.w	sl, #0
    571a:	beq.n	5726 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    571c:	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    5720:	lsrs	r0, r0, #16
    5722:	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    5726:	cmp	r3, ip
    5728:	add.w	lr, lr, #1
    572c:	bne.n	5700 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    572e:	mov	r0, r4
    5730:	add	r3, sp, #4
    5732:	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    5734:	strb	r7, [r4, #18]
    5736:	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    5738:	cmp	r4, #0
    573a:	bne.n	56ce <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    573c:	mov	r0, r6
    573e:	movs	r1, #25
    5740:	bl	5654 <CFastLED::countFPS(int)>
}
    5744:	add	sp, #12
    5746:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    574a:	bl	9410 <micros>
    574e:	ldr	r2, [r4, #0]
    5750:	ldr	r3, [r6, #4]
    5752:	subs	r0, r0, r2
    5754:	cmp	r0, r3
    5756:	bcc.n	56ae <CFastLED::show(unsigned char)+0xe>
    5758:	b.n	56b2 <CFastLED::show(unsigned char)+0x12>
    575a:	nop
    575c:	.word	0x1fffb8a0
    5760:	.word	0x1fffb898

00005764 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    5764:	movs	r0, #0
    5766:	bx	lr

00005768 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    5768:	ldr	r3, [pc, #16]	; (577c <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    576a:	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    576c:	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    576e:	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    5772:	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    5774:	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    5776:	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    5778:	str	r2, [r3, #12]
    577a:	bx	lr
    577c:	.word	0x1fffb888

00005780 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    5780:	cmp	r1, #0
    5782:	ble.n	579c <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    5784:	add.w	r1, r1, r1, lsl #1
    5788:	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    578a:	ldrb	r3, [r2, #0]
    578c:	strb	r3, [r0, #0]
        g = rhs.g;
    578e:	ldrb	r3, [r2, #1]
    5790:	strb	r3, [r0, #1]
        b = rhs.b;
    5792:	ldrb	r3, [r2, #2]
    5794:	strb	r3, [r0, #2]
    5796:	adds	r0, #3
    5798:	cmp	r0, r1
    579a:	bne.n	578a <fill_solid(CRGB*, int, CRGB const&)+0xa>
    579c:	bx	lr
    579e:	nop

000057a0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    57a0:	push	{r4, r5, r6, lr}
    57a2:	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    57a4:	movs	r5, #255	; 0xff
    hsv.sat = 240;
    57a6:	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    57a8:	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    57aa:	strb.w	r2, [sp, #4]
    hsv.val = 255;
    57ae:	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    57b2:	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    57b6:	ble.n	57da <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    57b8:	add.w	r1, r1, r1, lsl #1
    57bc:	mov	r6, r3
    57be:	mov	r4, r0
    57c0:	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    57c2:	mov	r1, r4
    57c4:	add	r0, sp, #4
    57c6:	bl	57e0 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    57ca:	ldrb.w	r2, [sp, #4]
    57ce:	adds	r4, #3
    57d0:	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    57d2:	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    57d4:	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    57d8:	bne.n	57c2 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    57da:	add	sp, #8
    57dc:	pop	{r4, r5, r6, pc}
    57de:	nop

000057e0 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    57e0:	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    57e2:	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    57e4:	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    57e6:	ldrb	r2, [r0, #2]
    57e8:	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    57ea:	and.w	r0, r0, #248	; 0xf8
    57ee:	add.w	r3, r0, r0, lsl #2
    57f2:	add.w	r3, r3, r3, lsl #4
    57f6:	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    57f8:	lsls	r5, r4, #24
    57fa:	ubfx	r3, r3, #8, #8
    57fe:	bmi.n	58c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    5800:	and.w	r5, r4, #64	; 0x40
    5804:	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    5808:	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    580c:	cmp	r5, #0
    580e:	bne.n	589e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    5810:	and.w	r0, r4, #255	; 0xff
    5814:	cmp	r4, #0
    5816:	beq.n	58f2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    5818:	adds	r3, #85	; 0x55
    581a:	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    581c:	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    581e:	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    5820:	cmp	r6, #255	; 0xff
    5822:	beq.n	585e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    5824:	cmp	r6, #0
    5826:	beq.n	591c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    5828:	cbz	r4, 5832 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    582a:	mla	r4, r6, r4, r4
    582e:	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    5832:	cbz	r5, 583c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    5834:	mla	r5, r6, r5, r5
    5838:	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    583c:	cbz	r3, 5846 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    583e:	mla	r3, r6, r3, r3
    5842:	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    5846:	mvns	r0, r6
    5848:	uxtb	r0, r0
    584a:	mla	r0, r0, r0, r0
    584e:	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    5852:	add	r4, r0
            g += brightness_floor;
    5854:	add	r5, r0
            b += brightness_floor;
    5856:	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    5858:	uxtb	r4, r4
            g += brightness_floor;
    585a:	uxtb	r5, r5
            b += brightness_floor;
    585c:	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    585e:	cmp	r2, #255	; 0xff
    5860:	beq.n	5894 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    5862:	smulbb	r0, r2, r2
    5866:	adds	r2, #0
    5868:	it	ne
    586a:	movne	r2, #1
    586c:	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    5870:	ands.w	r2, r2, #255	; 0xff
    5874:	beq.n	5924 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    5876:	cbz	r4, 5880 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5878:	mla	r4, r2, r4, r4
    587c:	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    5880:	cbz	r5, 588a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    5882:	mla	r5, r2, r5, r5
    5886:	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    588a:	cbz	r3, 5894 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    588c:	mla	r3, r2, r3, r3
    5890:	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    5894:	strb	r4, [r1, #0]
    rgb.g = g;
    5896:	strb	r5, [r1, #1]
    rgb.b = b;
    5898:	strb	r3, [r1, #2]
}
    589a:	pop	{r4, r5, r6, r7}
    589c:	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    589e:	and.w	r7, r4, #255	; 0xff
    58a2:	cbnz	r4, 58fc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    58a4:	add.w	r4, r0, r0, lsl #3
    58a8:	add.w	r0, r0, r4, lsl #1
    58ac:	add.w	r0, r0, r0, lsl #3
    58b0:	asrs	r4, r0, #8
                    g = K170 + third;
    58b2:	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    58b4:	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    58b8:	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    58ba:	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    58bc:	mov	r3, r7
    58be:	b.n	5820 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    58c0:	and.w	r7, r4, #64	; 0x40
    58c4:	and.w	r5, r7, #255	; 0xff
    58c8:	cbnz	r7, 5904 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    58ca:	and.w	r7, r4, #32
    58ce:	and.w	r4, r7, #255	; 0xff
    58d2:	cmp	r7, #0
    58d4:	bne.n	5944 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    58d6:	add.w	r3, r0, r0, lsl #3
    58da:	add.w	r0, r0, r3, lsl #1
    58de:	add.w	r0, r0, r0, lsl #3
    58e2:	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    58e6:	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    58ea:	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    58ec:	uxtb	r5, r5
                b = K85  + twothirds;
    58ee:	uxtb	r3, r0
    58f0:	b.n	5820 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    58f2:	mvns	r4, r3
    58f4:	uxtb	r4, r4
                g = third;
    58f6:	mov	r5, r3
                b = 0;
    58f8:	mov	r3, r0
    58fa:	b.n	5820 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    58fc:	movs	r4, #0
                g = K255 - third;
    58fe:	mvns	r5, r3
    5900:	uxtb	r5, r5
    5902:	b.n	5820 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    5904:	and.w	r4, r4, #32
    5908:	and.w	r5, r4, #255	; 0xff
    590c:	cbnz	r4, 5934 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    590e:	add.w	r4, r3, #85	; 0x55
    5912:	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    5914:	rsb	r3, r3, #171	; 0xab
    5918:	uxtb	r3, r3
    591a:	b.n	5820 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    591c:	movs	r3, #255	; 0xff
    591e:	mov	r5, r3
    5920:	mov	r4, r3
    5922:	b.n	585e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    5924:	mov	r5, r2
    5926:	mov	r4, r2
    5928:	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    592a:	strb	r4, [r1, #0]
    rgb.g = g;
    592c:	strb	r5, [r1, #1]
    rgb.b = b;
    592e:	strb	r3, [r1, #2]
}
    5930:	pop	{r4, r5, r6, r7}
    5932:	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    5934:	sub.w	r4, r3, #86	; 0x56
    5938:	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    593a:	movs	r5, #0
                b = K85 - third;
    593c:	rsb	r3, r3, #85	; 0x55
    5940:	uxtb	r3, r3
    5942:	b.n	5820 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    5944:	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    5946:	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    5948:	uxtb	r3, r0
    594a:	b.n	5820 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

0000594c <rgb2hsv_approximate(CRGB const&)>:

// This function is only an approximation, and it is not
// nearly as fast as the normal HSV-to-RGB conversion.
// See extended notes in the .h file.
CHSV rgb2hsv_approximate( const CRGB& rgb)
{
    594c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t r = rgb.r;
    uint8_t g = rgb.g;
    5950:	ldrb	r7, [r1, #1]
// This function is only an approximation, and it is not
// nearly as fast as the normal HSV-to-RGB conversion.
// See extended notes in the .h file.
CHSV rgb2hsv_approximate( const CRGB& rgb)
{
    uint8_t r = rgb.r;
    5952:	ldrb	r6, [r1, #0]
    uint8_t g = rgb.g;
    uint8_t b = rgb.b;
    5954:	ldrb.w	lr, [r1, #2]
    5958:	cmp	r6, r7
    595a:	mov	r1, r6
    595c:	it	cs
    595e:	movcs	r1, r7
    5960:	cmp	r1, lr
    5962:	it	cs
    5964:	movcs	r1, lr
    
    //uint8_t orig_desat = sqrt16( desat * 256);
    //Serial.print("orig_desat="); Serial.print(orig_desat); Serial.println("");
    
    // saturation is opposite of desaturation
    s = 255 - desat;
    5966:	mvns	r4, r1
    5968:	uxtb	r4, r4
    if( r < desat) desat = r;
    if( g < desat) desat = g;
    if( b < desat) desat = b;
    
    // remove saturation from all channels
    r -= desat;
    596a:	subs	r6, r6, r1
    g -= desat;
    596c:	subs	r7, r7, r1
    b -= desat;
    596e:	rsb	lr, r1, lr
    
    // saturation is opposite of desaturation
    s = 255 - desat;
    //Serial.print("s.1="); Serial.print(s); Serial.println("");
    
    if( s != 255 ) {
    5972:	cmp	r4, #255	; 0xff
    if( r < desat) desat = r;
    if( g < desat) desat = g;
    if( b < desat) desat = b;
    
    // remove saturation from all channels
    r -= desat;
    5974:	uxtb	r6, r6
    g -= desat;
    5976:	uxtb	r7, r7
    b -= desat;
    5978:	uxtb.w	lr, lr
    
    // saturation is opposite of desaturation
    s = 255 - desat;
    //Serial.print("s.1="); Serial.print(s); Serial.println("");
    
    if( s != 255 ) {
    597c:	bne.w	5aa2 <rgb2hsv_approximate(CRGB const&)+0x156>
    
    
    // at least one channel is now zero
    // if all three channels are zero, we had a
    // shade of gray.
    if( (r + g + b) == 0) {
    5980:	adds	r2, r7, r6
    5982:	adds.w	r3, r2, lr
    5986:	bne.n	59d0 <rgb2hsv_approximate(CRGB const&)+0x84>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5988:	movs	r2, #0
    598a:	strb	r3, [r0, #2]
    598c:	strb	r2, [r0, #0]
    598e:	strb	r2, [r0, #1]
    5990:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
            low = mid + 1;
        }
    } while (hi >= low);

    return low - 1;
    5994:	subs	r3, r5, #1
    5996:	uxtb	r3, r3
    5998:	adds	r2, r6, r7
    s = 255 - desat;
    //Serial.print("s.1="); Serial.print(s); Serial.println("");
    
    if( s != 255 ) {
        // undo 'dimming' of saturation
        s = 255 - sqrt16( (255-s) * 256);
    599a:	mvns	r4, r3
    
    
    // at least one channel is now zero
    // if all three channels are zero, we had a
    // shade of gray.
    if( (r + g + b) == 0) {
    599c:	cmn.w	r2, lr
    s = 255 - desat;
    //Serial.print("s.1="); Serial.print(s); Serial.println("");
    
    if( s != 255 ) {
        // undo 'dimming' of saturation
        s = 255 - sqrt16( (255-s) * 256);
    59a0:	uxtb	r4, r4
    
    
    // at least one channel is now zero
    // if all three channels are zero, we had a
    // shade of gray.
    if( (r + g + b) == 0) {
    59a2:	beq.n	5988 <rgb2hsv_approximate(CRGB const&)+0x3c>
        // we pick hue zero for no special reason
        return CHSV( 0, 0, 255 - s);
    }
    
    // scale all channels up to compensate for desaturation
    if( s < 255) {
    59a4:	cmp	r4, #255	; 0xff
    59a6:	beq.n	59d0 <rgb2hsv_approximate(CRGB const&)+0x84>
    59a8:	movw	r3, #65535	; 0xffff
        if( s == 0) s = 1;
    59ac:	cmp	r4, #0
    59ae:	beq.w	5b80 <rgb2hsv_approximate(CRGB const&)+0x234>
    59b2:	sdiv	r3, r3, r4
        uint32_t scaleup = 65535 / (s);
        r = ((uint32_t)(r) * scaleup) / 256;
    59b6:	mul.w	r6, r3, r6
        g = ((uint32_t)(g) * scaleup) / 256;
    59ba:	mul.w	r7, r3, r7
    
    // scale all channels up to compensate for desaturation
    if( s < 255) {
        if( s == 0) s = 1;
        uint32_t scaleup = 65535 / (s);
        r = ((uint32_t)(r) * scaleup) / 256;
    59be:	ubfx	r6, r6, #8, #8
        g = ((uint32_t)(g) * scaleup) / 256;
    59c2:	ubfx	r7, r7, #8, #8
        b = ((uint32_t)(b) * scaleup) / 256;
    59c6:	mul.w	lr, r3, lr
    59ca:	ubfx	lr, lr, #8, #8
    59ce:	adds	r2, r6, r7
    }
    //Serial.print("r.2="); Serial.print(r); Serial.println("");
    //Serial.print("g.2="); Serial.print(g); Serial.println("");
    //Serial.print("b.2="); Serial.print(b); Serial.println("");
    
    uint16_t total = r + g + b;
    59d0:	add	r2, lr
    59d2:	uxth	r2, r2
    
    //Serial.print("total="); Serial.print(total); Serial.println("");
    
    // scale all channels up to compensate for low values
    if( total < 255) {
    59d4:	cmp	r2, #254	; 0xfe
    59d6:	bls.n	5a22 <rgb2hsv_approximate(CRGB const&)+0xd6>
    }
    //Serial.print("r.3="); Serial.print(r); Serial.println("");
    //Serial.print("g.3="); Serial.print(g); Serial.println("");
    //Serial.print("b.3="); Serial.print(b); Serial.println("");
    
    if( total > 255 ) {
    59d8:	cmp	r2, #255	; 0xff
        v = 255;
    59da:	it	ne
    59dc:	movne	r3, #255	; 0xff
    }
    //Serial.print("r.3="); Serial.print(r); Serial.println("");
    //Serial.print("g.3="); Serial.print(g); Serial.println("");
    //Serial.print("b.3="); Serial.print(b); Serial.println("");
    
    if( total > 255 ) {
    59de:	beq.n	5a48 <rgb2hsv_approximate(CRGB const&)+0xfc>
    59e0:	cmp	lr, r7
    59e2:	mov	r2, lr
    59e4:	it	cc
    59e6:	movcc	r2, r7
    59e8:	cmp	r2, r6
    59ea:	it	cc
    59ec:	movcc	r2, r6
    // (ties don't matter)
    uint8_t highest = r;
    if( g > highest) highest = g;
    if( b > highest) highest = b;
    
    if( highest == r ) {
    59ee:	cmp	r2, r6
    59f0:	beq.w	5b1e <rgb2hsv_approximate(CRGB const&)+0x1d2>
            // R-G < G, we're in Orange-Yellow
            h = HUE_ORANGE;
            h += scale8( qsub8((g - 85) + (171 - r), 4), FIXFRAC8(32,85)); //221
        }
        
    } else if ( highest == g) {
    59f4:	cmp	r2, r7
    59f6:	beq.w	5b4c <rgb2hsv_approximate(CRGB const&)+0x200>
        }
        
    } else /* highest == b */ {
        // Blue is highest
        // Hue could be Aqua/Blue-Blue, Blue-Purple, Purple-Pink
        if( r == 0) {
    59fa:	cmp	r6, #0
    59fc:	beq.n	5af4 <rgb2hsv_approximate(CRGB const&)+0x1a8>
            // if red is zero, we're in Aqua/Blue-Blue
            h = HUE_AQUA + ((HUE_BLUE - HUE_AQUA) / 4);
            h += scale8( qsub8(b, 128), FIXFRAC8(24,128));
        } else if ( (b-r) > r) {
    59fe:	rsb	lr, r6, lr
    5a02:	cmp	r6, lr
    5a04:	bge.w	5ba0 <rgb2hsv_approximate(CRGB const&)+0x254>
            // B-R > R, we're in Blue-Purple
            h = HUE_BLUE;
            h += scale8( r, FIXFRAC8(32,85));
    5a08:	add.w	r2, r6, r6, lsl #1
    5a0c:	add.w	r2, r6, r2, lsl #5
    5a10:	asrs	r2, r2, #8
    5a12:	subs	r2, #96	; 0x60
    5a14:	uxtb	r2, r2
    5a16:	adds	r2, #1
    5a18:	strb	r2, [r0, #0]
    5a1a:	strb	r4, [r0, #1]
    5a1c:	strb	r3, [r0, #2]
    5a1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    //Serial.print("total="); Serial.print(total); Serial.println("");
    
    // scale all channels up to compensate for low values
    if( total < 255) {
        if( total == 0) total = 1;
    5a22:	cmp	r2, #0
    5a24:	beq.n	5b16 <rgb2hsv_approximate(CRGB const&)+0x1ca>
    5a26:	movw	r3, #65535	; 0xffff
    5a2a:	sdiv	r3, r3, r2
    5a2e:	uxtb	r2, r2
        uint32_t scaleup = 65535 / (total);
        r = ((uint32_t)(r) * scaleup) / 256;
    5a30:	mul.w	r6, r3, r6
        g = ((uint32_t)(g) * scaleup) / 256;
    5a34:	mul.w	r7, r3, r7
        b = ((uint32_t)(b) * scaleup) / 256;
    5a38:	mul.w	lr, r3, lr
    
    // scale all channels up to compensate for low values
    if( total < 255) {
        if( total == 0) total = 1;
        uint32_t scaleup = 65535 / (total);
        r = ((uint32_t)(r) * scaleup) / 256;
    5a3c:	ubfx	r6, r6, #8, #8
        g = ((uint32_t)(g) * scaleup) / 256;
    5a40:	ubfx	r7, r7, #8, #8
        b = ((uint32_t)(b) * scaleup) / 256;
    5a44:	ubfx	lr, lr, #8, #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    5a48:	uqadd8	r1, r1, r2
    5a4c:	uxtb	r3, r1
    if( total > 255 ) {
        v = 255;
    } else {
        v = qadd8(desat,total);
        // undo 'dimming' of brightness
        if( v != 255) v = sqrt16( v * 256);
    5a4e:	cmp	r3, #255	; 0xff
    5a50:	beq.n	59e0 <rgb2hsv_approximate(CRGB const&)+0x94>
    5a52:	lsls	r1, r3, #8
///         square root for 16-bit integers
///         About three times faster and five times smaller
///         than Arduino's general sqrt on AVR.
LIB8STATIC uint8_t sqrt16(uint16_t x)
{
    if( x <= 1) {
    5a54:	cmp	r1, #1
    5a56:	bls.w	5c08 <rgb2hsv_approximate(CRGB const&)+0x2bc>
    }

    uint8_t low = 1; // lower bound
    uint8_t hi, mid;

    if( x > 7904) {
    5a5a:	cmp.w	r1, #7904	; 0x1ee0
        hi = 255;
    } else {
        hi = (x >> 5) + 8; // initial estimate for upper bound
    5a5e:	ittte	ls
    5a60:	movls.w	ip, r1, asr #5
    5a64:	addls.w	ip, ip, #8
    5a68:	uxtbls.w	ip, ip

    uint8_t low = 1; // lower bound
    uint8_t hi, mid;

    if( x > 7904) {
        hi = 255;
    5a6c:	movhi.w	ip, #255	; 0xff
    5a70:	mov.w	r8, #1
    5a74:	b.n	5a80 <rgb2hsv_approximate(CRGB const&)+0x134>
    }

    do {
        mid = (low + hi) >> 1;
        if ((uint16_t)(mid * mid) > x) {
            hi = mid - 1;
    5a76:	uxtb.w	ip, r2
            if( mid == 255) {
                return 255;
            }
            low = mid + 1;
        }
    } while (hi >= low);
    5a7a:	cmp	r8, ip
    5a7c:	bhi.w	5b98 <rgb2hsv_approximate(CRGB const&)+0x24c>
    } else {
        hi = (x >> 5) + 8; // initial estimate for upper bound
    }

    do {
        mid = (low + hi) >> 1;
    5a80:	add.w	r3, r8, ip
    5a84:	asrs	r3, r3, #1
        if ((uint16_t)(mid * mid) > x) {
    5a86:	mul.w	r2, r3, r3
    5a8a:	uxth	r2, r2
    } else {
        hi = (x >> 5) + 8; // initial estimate for upper bound
    }

    do {
        mid = (low + hi) >> 1;
    5a8c:	uxtb	r5, r3
        if ((uint16_t)(mid * mid) > x) {
    5a8e:	cmp	r2, r1
            hi = mid - 1;
    5a90:	add.w	r2, r5, #4294967295
        hi = (x >> 5) + 8; // initial estimate for upper bound
    }

    do {
        mid = (low + hi) >> 1;
        if ((uint16_t)(mid * mid) > x) {
    5a94:	bhi.n	5a76 <rgb2hsv_approximate(CRGB const&)+0x12a>
            hi = mid - 1;
        } else {
            if( mid == 255) {
    5a96:	cmp	r3, #255	; 0xff
    5a98:	beq.n	59e0 <rgb2hsv_approximate(CRGB const&)+0x94>
                return 255;
            }
            low = mid + 1;
    5a9a:	adds	r5, #1
    5a9c:	uxtb.w	r8, r5
    5aa0:	b.n	5a7a <rgb2hsv_approximate(CRGB const&)+0x12e>
    s = 255 - desat;
    //Serial.print("s.1="); Serial.print(s); Serial.println("");
    
    if( s != 255 ) {
        // undo 'dimming' of saturation
        s = 255 - sqrt16( (255-s) * 256);
    5aa2:	rsb	r8, r4, #255	; 0xff
    5aa6:	mov.w	r8, r8, lsl #8
    5aaa:	uxth.w	r8, r8
    }

    uint8_t low = 1; // lower bound
    uint8_t hi, mid;

    if( x > 7904) {
    5aae:	cmp.w	r8, #7904	; 0x1ee0
    5ab2:	bls.n	5ae6 <rgb2hsv_approximate(CRGB const&)+0x19a>
        hi = 255;
    5ab4:	mov.w	ip, #255	; 0xff
    5ab8:	movs	r5, #1
    5aba:	b.n	5ac6 <rgb2hsv_approximate(CRGB const&)+0x17a>
    }

    do {
        mid = (low + hi) >> 1;
        if ((uint16_t)(mid * mid) > x) {
            hi = mid - 1;
    5abc:	uxtb.w	ip, r2
            if( mid == 255) {
                return 255;
            }
            low = mid + 1;
        }
    } while (hi >= low);
    5ac0:	cmp	r5, ip
    5ac2:	bhi.w	5994 <rgb2hsv_approximate(CRGB const&)+0x48>
    } else {
        hi = (x >> 5) + 8; // initial estimate for upper bound
    }

    do {
        mid = (low + hi) >> 1;
    5ac6:	add.w	r3, r5, ip
    5aca:	asrs	r3, r3, #1
        if ((uint16_t)(mid * mid) > x) {
    5acc:	mul.w	r2, r3, r3
    5ad0:	uxth	r2, r2
    } else {
        hi = (x >> 5) + 8; // initial estimate for upper bound
    }

    do {
        mid = (low + hi) >> 1;
    5ad2:	uxtb	r4, r3
        if ((uint16_t)(mid * mid) > x) {
    5ad4:	cmp	r2, r8
            hi = mid - 1;
    5ad6:	add.w	r2, r4, #4294967295
        hi = (x >> 5) + 8; // initial estimate for upper bound
    }

    do {
        mid = (low + hi) >> 1;
        if ((uint16_t)(mid * mid) > x) {
    5ada:	bhi.n	5abc <rgb2hsv_approximate(CRGB const&)+0x170>
            hi = mid - 1;
        } else {
            if( mid == 255) {
    5adc:	cmp	r3, #255	; 0xff
    5ade:	beq.n	5b3a <rgb2hsv_approximate(CRGB const&)+0x1ee>
                return 255;
            }
            low = mid + 1;
    5ae0:	adds	r4, #1
    5ae2:	uxtb	r5, r4
    5ae4:	b.n	5ac0 <rgb2hsv_approximate(CRGB const&)+0x174>
    uint8_t hi, mid;

    if( x > 7904) {
        hi = 255;
    } else {
        hi = (x >> 5) + 8; // initial estimate for upper bound
    5ae6:	mov.w	ip, r8, asr #5
    5aea:	add.w	ip, ip, #8
    5aee:	uxtb.w	ip, ip
    5af2:	b.n	5ab8 <rgb2hsv_approximate(CRGB const&)+0x16c>
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    5af4:	sub.w	r2, lr, #128	; 0x80
        // Blue is highest
        // Hue could be Aqua/Blue-Blue, Blue-Purple, Purple-Pink
        if( r == 0) {
            // if red is zero, we're in Aqua/Blue-Blue
            h = HUE_AQUA + ((HUE_BLUE - HUE_AQUA) / 4);
            h += scale8( qsub8(b, 128), FIXFRAC8(24,128));
    5af8:	bic.w	r2, r2, r2, asr #31
    5afc:	rsb	r2, r2, r2, lsl #3
    5b00:	rsb	r2, r2, r2, lsl #3
    5b04:	asrs	r2, r2, #8
    5b06:	subs	r2, #120	; 0x78
    5b08:	uxtb	r2, r2
    5b0a:	adds	r2, #1
    5b0c:	strb	r2, [r0, #0]
    5b0e:	strb	r4, [r0, #1]
    5b10:	strb	r3, [r0, #2]
    5b12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b16:	movs	r2, #1
    5b18:	movw	r3, #65535	; 0xffff
    5b1c:	b.n	5a30 <rgb2hsv_approximate(CRGB const&)+0xe4>
    if( b > highest) highest = b;
    
    if( highest == r ) {
        // Red is highest.
        // Hue could be Purple/Pink-Red,Red-Orange,Orange-Yellow
        if( g == 0 ) {
    5b1e:	cbnz	r7, 5b84 <rgb2hsv_approximate(CRGB const&)+0x238>
    5b20:	sub.w	r2, r6, #128	; 0x80
            // if green is zero, we're in Purple/Pink-Red
            h = (HUE_PURPLE + HUE_PINK) / 2;
            h += scale8( qsub8(r, 128), FIXFRAC8(48,128));
    5b24:	bic.w	r2, r2, r2, asr #31
    5b28:	uxtb	r2, r2
    5b2a:	add.w	r1, r2, r2, lsl #1
    5b2e:	add.w	r2, r2, r1, lsl #5
    5b32:	asrs	r2, r2, #8
    5b34:	subs	r2, #48	; 0x30
    5b36:	uxtb	r2, r2
    5b38:	b.n	5a16 <rgb2hsv_approximate(CRGB const&)+0xca>
    
    
    // at least one channel is now zero
    // if all three channels are zero, we had a
    // shade of gray.
    if( (r + g + b) == 0) {
    5b3a:	adds	r2, r7, r6
    5b3c:	cmn.w	r2, lr
    5b40:	beq.w	5988 <rgb2hsv_approximate(CRGB const&)+0x3c>
    5b44:	movw	r3, #65535	; 0xffff
        return CHSV( 0, 0, 255 - s);
    }
    
    // scale all channels up to compensate for desaturation
    if( s < 255) {
        if( s == 0) s = 1;
    5b48:	movs	r4, #1
    5b4a:	b.n	59b6 <rgb2hsv_approximate(CRGB const&)+0x6a>
        }
        
    } else if ( highest == g) {
        // Green is highest
        // Hue could be Yellow-Green, Green-Aqua
        if( b == 0) {
    5b4c:	cmp.w	lr, #0
    5b50:	bne.n	5bb8 <rgb2hsv_approximate(CRGB const&)+0x26c>
    5b52:	sub.w	r1, r7, #171	; 0xab
            h = HUE_YELLOW;
            uint8_t radj = scale8( qsub8(171,r),   47); //171..0 -> 0..171 -> 0..31
            uint8_t gadj = scale8( qsub8(g,171),   96); //171..255 -> 0..84 -> 0..31;
            uint8_t rgadj = radj + gadj;
            uint8_t hueadv = rgadj / 2;
            h += hueadv;
    5b56:	bic.w	r1, r1, r1, asr #31
    5b5a:	rsb	r2, r6, #171	; 0xab
    5b5e:	uxtb	r1, r1
    5b60:	bic.w	r2, r2, r2, asr #31
    5b64:	add.w	r2, r2, r2, lsl #1
    5b68:	add.w	r5, r1, r1, lsl #1
    5b6c:	sbfx	r2, r2, #4, #24
    5b70:	add.w	r1, r1, r5, lsl #5
    5b74:	add.w	r2, r2, r1, asr #8
    5b78:	ubfx	r2, r2, #1, #7
    5b7c:	adds	r2, #64	; 0x40
    5b7e:	b.n	5a16 <rgb2hsv_approximate(CRGB const&)+0xca>
        return CHSV( 0, 0, 255 - s);
    }
    
    // scale all channels up to compensate for desaturation
    if( s < 255) {
        if( s == 0) s = 1;
    5b80:	movs	r4, #1
    5b82:	b.n	59b6 <rgb2hsv_approximate(CRGB const&)+0x6a>
        // Hue could be Purple/Pink-Red,Red-Orange,Orange-Yellow
        if( g == 0 ) {
            // if green is zero, we're in Purple/Pink-Red
            h = (HUE_PURPLE + HUE_PINK) / 2;
            h += scale8( qsub8(r, 128), FIXFRAC8(48,128));
        } else if ( (r - g) > g) {
    5b84:	subs	r2, r6, r7
    5b86:	cmp	r7, r2
    5b88:	bge.n	5bd0 <rgb2hsv_approximate(CRGB const&)+0x284>
    5b8a:	add.w	r2, r7, r7, lsl #1
    5b8e:	add.w	r2, r7, r2, lsl #5
    5b92:	ubfx	r2, r2, #8, #8
    5b96:	b.n	5a16 <rgb2hsv_approximate(CRGB const&)+0xca>
            }
            low = mid + 1;
        }
    } while (hi >= low);

    return low - 1;
    5b98:	add.w	r3, r8, #4294967295
    5b9c:	uxtb	r3, r3
    5b9e:	b.n	59e0 <rgb2hsv_approximate(CRGB const&)+0x94>
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    5ba0:	sub.w	r2, r6, #85	; 0x55
            h = HUE_BLUE;
            h += scale8( r, FIXFRAC8(32,85));
        } else {
            // B-R < R, we're in Purple-Pink
            h = HUE_PURPLE;
            h += scale8( qsub8(r, 85), FIXFRAC8(32,85));
    5ba4:	bic.w	r2, r2, r2, asr #31
    5ba8:	add.w	r1, r2, r2, lsl #1
    5bac:	add.w	r2, r2, r1, lsl #5
    5bb0:	asrs	r2, r2, #8
    5bb2:	subs	r2, #64	; 0x40
    5bb4:	uxtb	r2, r2
    5bb6:	b.n	5a16 <rgb2hsv_approximate(CRGB const&)+0xca>
            h += hueadv;
            //h += scale8( qadd8( 4, qadd8((g - 128), (128 - r))),
            //             FIXFRAC8(32,255)); //
        } else {
            // if Blue is nonzero we're in Green-Aqua
            if( (g-b) > b) {
    5bb8:	rsb	r7, lr, r7
    5bbc:	cmp	lr, r7
    5bbe:	bge.n	5bee <rgb2hsv_approximate(CRGB const&)+0x2a2>
                h = HUE_GREEN;
                h += scale8( b, FIXFRAC8(32,85));
    5bc0:	add.w	r2, lr, lr, lsl #1
    5bc4:	add.w	r2, lr, r2, lsl #5
    5bc8:	asrs	r2, r2, #8
    5bca:	adds	r2, #96	; 0x60
    5bcc:	uxtb	r2, r2
    5bce:	b.n	5a16 <rgb2hsv_approximate(CRGB const&)+0xca>
    5bd0:	add.w	r2, r7, #86	; 0x56
    5bd4:	subs	r2, r2, r6
    5bd6:	uxtb	r2, r2
    5bd8:	subs	r2, #4
            h = HUE_RED;
            h += scale8( g, FIXFRAC8(32,85));
        } else {
            // R-G < G, we're in Orange-Yellow
            h = HUE_ORANGE;
            h += scale8( qsub8((g - 85) + (171 - r), 4), FIXFRAC8(32,85)); //221
    5bda:	bic.w	r2, r2, r2, asr #31
    5bde:	add.w	r1, r2, r2, lsl #1
    5be2:	add.w	r2, r2, r1, lsl #5
    5be6:	asrs	r2, r2, #8
    5be8:	adds	r2, #32
    5bea:	uxtb	r2, r2
    5bec:	b.n	5a16 <rgb2hsv_approximate(CRGB const&)+0xca>
    5bee:	sub.w	r2, lr, #85	; 0x55
            if( (g-b) > b) {
                h = HUE_GREEN;
                h += scale8( b, FIXFRAC8(32,85));
            } else {
                h = HUE_AQUA;
                h += scale8( qsub8(b, 85), FIXFRAC8(8,42));
    5bf2:	bic.w	r2, r2, r2, asr #31
    5bf6:	rsb	r2, r2, r2, lsl #3
    5bfa:	rsb	r2, r2, r2, lsl #3
    5bfe:	ubfx	r2, r2, #8, #8
    5c02:	eor.w	r2, r2, #128	; 0x80
    5c06:	b.n	5a16 <rgb2hsv_approximate(CRGB const&)+0xca>
///         About three times faster and five times smaller
///         than Arduino's general sqrt on AVR.
LIB8STATIC uint8_t sqrt16(uint16_t x)
{
    if( x <= 1) {
        return x;
    5c08:	movs	r3, #0
    5c0a:	b.n	59e0 <rgb2hsv_approximate(CRGB const&)+0x94>

00005c0c <IRrecv::decodeAiwaRCT501(decode_results*)>:
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
bool  IRrecv::decodeAiwaRCT501 (decode_results *results)
{
    5c0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int  data   = 0;
	int  offset = 1;

	// Check SIZE
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
    5c10:	ldr.w	r8, [pc, #172]	; 5cc0 <IRrecv::decodeAiwaRCT501(decode_results*)+0xb4>
    5c14:	ldrb.w	r3, [r8, #4]
    5c18:	cmp	r3, #87	; 0x57
    5c1a:	bhi.n	5c22 <IRrecv::decodeAiwaRCT501(decode_results*)+0x16>
		else                                                                     break ;  // End of one & zero detected
		offset++;
	}

	results->bits = (offset - 1) / 2;
	if (results->bits < 42)  return false ;
    5c1c:	movs	r0, #0

	results->value       = data;
	results->decode_type = AIWA_RC_T501;
	return true;
}
    5c1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	// Check SIZE
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;

	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
    5c22:	ldr	r3, [r1, #16]
    5c24:	mov	r5, r1
    5c26:	ldr	r0, [r3, #4]
    5c28:	movw	r1, #8800	; 0x2260
    5c2c:	bl	66a0 <MATCH_MARK(int, int)>
    5c30:	cmp	r0, #0
    5c32:	beq.n	5c1c <IRrecv::decodeAiwaRCT501(decode_results*)+0x10>
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;
    5c34:	ldr	r3, [r5, #16]
    5c36:	movw	r1, #4500	; 0x1194
    5c3a:	ldr	r0, [r3, #8]
    5c3c:	bl	66f4 <MATCH_SPACE(int, int)>
    5c40:	cmp	r0, #0
    5c42:	beq.n	5c1c <IRrecv::decodeAiwaRCT501(decode_results*)+0x10>

	offset += 26;  // skip pre-data - optional
	while(offset < irparams.rawlen - 4) {
    5c44:	ldrb.w	r3, [r8, #4]
    5c48:	cmp	r3, #33	; 0x21
    5c4a:	ble.n	5cba <IRrecv::decodeAiwaRCT501(decode_results*)+0xae>
    5c4c:	movs	r6, #30
    5c4e:	movs	r4, #29
    5c50:	movs	r7, #0
    5c52:	b.n	5c68 <IRrecv::decodeAiwaRCT501(decode_results*)+0x5c>
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
		else                                                             return false ;

		// ONE & ZERO
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
    5c54:	orr.w	r7, r3, #1
	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;

	offset += 26;  // skip pre-data - optional
	while(offset < irparams.rawlen - 4) {
    5c58:	ldrb.w	r3, [r8, #4]

		// ONE & ZERO
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
		else                                                                     break ;  // End of one & zero detected
		offset++;
    5c5c:	adds	r4, #2
	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;

	offset += 26;  // skip pre-data - optional
	while(offset < irparams.rawlen - 4) {
    5c5e:	subs	r3, #4
    5c60:	cmp	r3, r4
    5c62:	add.w	r6, r6, #2
    5c66:	ble.n	5ca4 <IRrecv::decodeAiwaRCT501(decode_results*)+0x98>
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
    5c68:	ldr	r3, [r5, #16]
    5c6a:	mov.w	r1, #500	; 0x1f4
    5c6e:	ldr.w	r0, [r3, r4, lsl #2]
    5c72:	bl	66a0 <MATCH_MARK(int, int)>
		else                                                             return false ;

		// ONE & ZERO
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
    5c76:	mov.w	r1, #600	; 0x258
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;

	offset += 26;  // skip pre-data - optional
	while(offset < irparams.rawlen - 4) {
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
    5c7a:	cmp	r0, #0
    5c7c:	beq.n	5c1c <IRrecv::decodeAiwaRCT501(decode_results*)+0x10>
		else                                                             return false ;

		// ONE & ZERO
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
    5c7e:	ldr	r3, [r5, #16]
    5c80:	ldr.w	r0, [r3, r6, lsl #2]
    5c84:	bl	66f4 <MATCH_SPACE(int, int)>
    5c88:	lsls	r3, r7, #1
    5c8a:	cmp	r0, #0
    5c8c:	bne.n	5c54 <IRrecv::decodeAiwaRCT501(decode_results*)+0x48>
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
    5c8e:	ldr	r3, [r5, #16]
    5c90:	movw	r1, #1700	; 0x6a4
    5c94:	ldr.w	r0, [r3, r6, lsl #2]
    5c98:	bl	66f4 <MATCH_SPACE(int, int)>
    5c9c:	cbz	r0, 5ca2 <IRrecv::decodeAiwaRCT501(decode_results*)+0x96>
    5c9e:	lsls	r7, r7, #1
    5ca0:	b.n	5c58 <IRrecv::decodeAiwaRCT501(decode_results*)+0x4c>
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;

	offset += 26;  // skip pre-data - optional
	while(offset < irparams.rawlen - 4) {
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
    5ca2:	mov	r4, r6
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
		else                                                                     break ;  // End of one & zero detected
		offset++;
	}

	results->bits = (offset - 1) / 2;
    5ca4:	subs	r4, #1
    5ca6:	asrs	r4, r4, #1
	if (results->bits < 42)  return false ;
    5ca8:	cmp	r4, #41	; 0x29
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
		else                                                                     break ;  // End of one & zero detected
		offset++;
	}

	results->bits = (offset - 1) / 2;
    5caa:	str	r4, [r5, #12]
	if (results->bits < 42)  return false ;
    5cac:	ble.n	5c1c <IRrecv::decodeAiwaRCT501(decode_results*)+0x10>

	results->value       = data;
	results->decode_type = AIWA_RC_T501;
    5cae:	movs	r3, #9
	}

	results->bits = (offset - 1) / 2;
	if (results->bits < 42)  return false ;

	results->value       = data;
    5cb0:	str	r7, [r5, #8]
	results->decode_type = AIWA_RC_T501;
    5cb2:	strb	r3, [r5, #0]
	return true;
    5cb4:	movs	r0, #1
    5cb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
		else                                                                     break ;  // End of one & zero detected
		offset++;
	}

	results->bits = (offset - 1) / 2;
    5cba:	movs	r3, #14
    5cbc:	str	r3, [r5, #12]
    5cbe:	b.n	5c1c <IRrecv::decodeAiwaRCT501(decode_results*)+0x10>
    5cc0:	.word	0x1fffb8ac

00005cc4 <IRrecv::decodeJVC(decode_results*)>:
#endif

//+=============================================================================
#if DECODE_JVC
bool  IRrecv::decodeJVC (decode_results *results)
{
    5cc4:	push	{r3, r4, r5, r6, r7, lr}
	long  data   = 0;
	int   offset = 1; // Skip first space

	// Check for repeat
	if (  (irparams.rawlen - 1 == 33)
    5cc6:	ldr	r5, [pc, #220]	; (5da4 <IRrecv::decodeJVC(decode_results*)+0xe0>)
    5cc8:	ldrb	r3, [r5, #4]
	    && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)
	    && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)
    5cca:	cmp	r3, #34	; 0x22
#endif

//+=============================================================================
#if DECODE_JVC
bool  IRrecv::decodeJVC (decode_results *results)
{
    5ccc:	mov	r4, r1
	int   offset = 1; // Skip first space

	// Check for repeat
	if (  (irparams.rawlen - 1 == 33)
	    && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)
	    && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)
    5cce:	beq.n	5d46 <IRrecv::decodeJVC(decode_results*)+0x82>
		results->decode_type = JVC;
		return true;
	}

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], JVC_HDR_MARK))  return false ;
    5cd0:	ldr	r3, [r4, #16]
    5cd2:	mov.w	r1, #8000	; 0x1f40
    5cd6:	ldr	r0, [r3, #4]
    5cd8:	bl	66a0 <MATCH_MARK(int, int)>
    5cdc:	cbz	r0, 5ce4 <IRrecv::decodeJVC(decode_results*)+0x20>

	if (irparams.rawlen < (2 * JVC_BITS) + 1 )  return false ;
    5cde:	ldrb	r3, [r5, #4]
    5ce0:	cmp	r3, #32
    5ce2:	bhi.n	5ce8 <IRrecv::decodeJVC(decode_results*)+0x24>
    5ce4:	movs	r0, #0
    5ce6:	pop	{r3, r4, r5, r6, r7, pc}

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false ;
    5ce8:	ldr	r3, [r4, #16]
    5cea:	mov.w	r1, #4000	; 0xfa0
    5cee:	ldr	r0, [r3, #8]
    5cf0:	bl	66f4 <MATCH_SPACE(int, int)>
    5cf4:	cmp	r0, #0
    5cf6:	beq.n	5ce4 <IRrecv::decodeJVC(decode_results*)+0x20>
    5cf8:	movs	r6, #16
    5cfa:	movs	r5, #3
    5cfc:	movs	r7, #0
    5cfe:	b.n	5d0e <IRrecv::decodeJVC(decode_results*)+0x4a>

	for (int i = 0;  i < JVC_BITS;  i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK))  return false ;

		if      (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1 ;
    5d00:	orr.w	r7, r3, #1
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))  data = (data << 1) | 0 ;
		else                                                            return false ;
		offset++;
    5d04:	adds	r5, #2
	if (irparams.rawlen < (2 * JVC_BITS) + 1 )  return false ;

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false ;

	for (int i = 0;  i < JVC_BITS;  i++) {
    5d06:	cmp	r5, #35	; 0x23
    5d08:	add.w	r6, r6, #8
    5d0c:	beq.n	5d82 <IRrecv::decodeJVC(decode_results*)+0xbe>
		if (!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK))  return false ;
    5d0e:	ldr	r3, [r4, #16]
    5d10:	mov.w	r1, #600	; 0x258
    5d14:	ldr.w	r0, [r3, r5, lsl #2]
    5d18:	bl	66a0 <MATCH_MARK(int, int)>

		if      (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1 ;
    5d1c:	mov.w	r1, #1600	; 0x640

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false ;

	for (int i = 0;  i < JVC_BITS;  i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK))  return false ;
    5d20:	cmp	r0, #0
    5d22:	beq.n	5ce4 <IRrecv::decodeJVC(decode_results*)+0x20>

		if      (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1 ;
    5d24:	ldr	r3, [r4, #16]
    5d26:	ldr	r0, [r3, r6]
    5d28:	bl	66f4 <MATCH_SPACE(int, int)>
    5d2c:	lsls	r3, r7, #1
    5d2e:	cmp	r0, #0
    5d30:	bne.n	5d00 <IRrecv::decodeJVC(decode_results*)+0x3c>
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))  data = (data << 1) | 0 ;
    5d32:	ldr	r3, [r4, #16]
    5d34:	movw	r1, #550	; 0x226
    5d38:	ldr	r0, [r3, r6]
    5d3a:	bl	66f4 <MATCH_SPACE(int, int)>
    5d3e:	cmp	r0, #0
    5d40:	beq.n	5ce4 <IRrecv::decodeJVC(decode_results*)+0x20>
    5d42:	lsls	r7, r7, #1
    5d44:	b.n	5d04 <IRrecv::decodeJVC(decode_results*)+0x40>
	long  data   = 0;
	int   offset = 1; // Skip first space

	// Check for repeat
	if (  (irparams.rawlen - 1 == 33)
	    && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)
    5d46:	ldr	r3, [r1, #16]
    5d48:	mov.w	r1, #600	; 0x258
    5d4c:	ldr	r0, [r3, #4]
    5d4e:	bl	66a0 <MATCH_MARK(int, int)>
    5d52:	cmp	r0, #0
    5d54:	beq.n	5cd0 <IRrecv::decodeJVC(decode_results*)+0xc>
	    && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)
    5d56:	ldrb	r3, [r5, #4]
    5d58:	ldr	r2, [r4, #16]
    5d5a:	add.w	r3, r3, #1073741824	; 0x40000000
    5d5e:	subs	r3, #1
    5d60:	mov.w	r1, #600	; 0x258
    5d64:	ldr.w	r0, [r2, r3, lsl #2]
    5d68:	bl	66a0 <MATCH_MARK(int, int)>
    5d6c:	cmp	r0, #0
    5d6e:	beq.n	5cd0 <IRrecv::decodeJVC(decode_results*)+0xc>
	   ) {
		results->bits        = 0;
    5d70:	movs	r1, #0
		results->value       = REPEAT;
    5d72:	mov.w	r2, #4294967295
		results->decode_type = JVC;
    5d76:	movs	r3, #6
	// Check for repeat
	if (  (irparams.rawlen - 1 == 33)
	    && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)
	    && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)
	   ) {
		results->bits        = 0;
    5d78:	str	r1, [r4, #12]
		results->value       = REPEAT;
    5d7a:	str	r2, [r4, #8]
		results->decode_type = JVC;
    5d7c:	strb	r3, [r4, #0]
		return true;
    5d7e:	movs	r0, #1
    5d80:	pop	{r3, r4, r5, r6, r7, pc}
		else                                                            return false ;
		offset++;
	}

	// Stop bit
	if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK))  return false ;
    5d82:	ldr	r3, [r4, #16]
    5d84:	mov.w	r1, #600	; 0x258
    5d88:	ldr.w	r0, [r3, #140]	; 0x8c
    5d8c:	bl	66a0 <MATCH_MARK(int, int)>
    5d90:	cmp	r0, #0
    5d92:	beq.n	5ce4 <IRrecv::decodeJVC(decode_results*)+0x20>

	// Success
	results->bits        = JVC_BITS;
    5d94:	movs	r2, #16
	results->value       = data;
	results->decode_type = JVC;
    5d96:	movs	r3, #6
	// Stop bit
	if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK))  return false ;

	// Success
	results->bits        = JVC_BITS;
	results->value       = data;
    5d98:	str	r7, [r4, #8]

	// Stop bit
	if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK))  return false ;

	// Success
	results->bits        = JVC_BITS;
    5d9a:	str	r2, [r4, #12]
	results->value       = data;
	results->decode_type = JVC;
    5d9c:	strb	r3, [r4, #0]

	return true;
    5d9e:	movs	r0, #1
    5da0:	pop	{r3, r4, r5, r6, r7, pc}
    5da2:	nop
    5da4:	.word	0x1fffb8ac

00005da8 <IRrecv::decodeMitsubishi(decode_results*)>:
// #define MITSUBISHI_RPT_LENGTH 45000

//+=============================================================================
#if DECODE_MITSUBISHI
bool  IRrecv::decodeMitsubishi (decode_results *results)
{
    5da8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
    5dac:	ldr.w	r8, [pc, #156]	; 5e4c <IRrecv::decodeMitsubishi(decode_results*)+0xa4>
    5db0:	ldrb.w	r3, [r8, #4]
    5db4:	cmp	r3, #33	; 0x21
    5db6:	bhi.n	5dbe <IRrecv::decodeMitsubishi(decode_results*)+0x16>
    5db8:	movs	r0, #0
    5dba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
    5dbe:	ldr	r3, [r1, #16]
    5dc0:	mov	r6, r1
    5dc2:	ldr	r0, [r3, #4]
    5dc4:	mov.w	r1, #350	; 0x15e
    5dc8:	bl	66a0 <MATCH_MARK(int, int)>
    5dcc:	cmp	r0, #0
    5dce:	beq.n	5db8 <IRrecv::decodeMitsubishi(decode_results*)+0x10>
  offset++;

  while (offset + 1 < irparams.rawlen) {
    5dd0:	ldrb.w	r3, [r8, #4]
    5dd4:	cmp	r3, #3
    5dd6:	ble.n	5e42 <IRrecv::decodeMitsubishi(decode_results*)+0x9a>
    5dd8:	movs	r4, #3
    5dda:	movs	r5, #2
    5ddc:	movs	r7, #0
    5dde:	b.n	5e00 <IRrecv::decodeMitsubishi(decode_results*)+0x58>
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
    5de0:	orr.w	r7, r3, #1
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
    else                                                                 return false ;
    offset++;

    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
    5de4:	ldr	r3, [r6, #16]
    5de6:	mov.w	r1, #350	; 0x15e
    5dea:	ldr.w	r0, [r3, r4, lsl #2]
    5dee:	bl	66f4 <MATCH_SPACE(int, int)>
    offset++;
    5df2:	adds	r5, #2
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
    else                                                                 return false ;
    offset++;

    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
    5df4:	cbz	r0, 5e2c <IRrecv::decodeMitsubishi(decode_results*)+0x84>

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
  offset++;

  while (offset + 1 < irparams.rawlen) {
    5df6:	ldrb.w	r3, [r8, #4]
    5dfa:	adds	r4, #2
    5dfc:	cmp	r3, r4
    5dfe:	ble.n	5e2a <IRrecv::decodeMitsubishi(decode_results*)+0x82>
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
    5e00:	ldr	r3, [r6, #16]
    5e02:	movw	r1, #1950	; 0x79e
    5e06:	ldr.w	r0, [r3, r5, lsl #2]
    5e0a:	bl	66a0 <MATCH_MARK(int, int)>
    5e0e:	lsls	r3, r7, #1
    5e10:	cmp	r0, #0
    5e12:	bne.n	5de0 <IRrecv::decodeMitsubishi(decode_results*)+0x38>
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
    5e14:	ldr	r3, [r6, #16]
    5e16:	movw	r1, #750	; 0x2ee
    5e1a:	ldr.w	r0, [r3, r5, lsl #2]
    5e1e:	bl	66a0 <MATCH_MARK(int, int)>
    5e22:	cmp	r0, #0
    5e24:	beq.n	5db8 <IRrecv::decodeMitsubishi(decode_results*)+0x10>
    5e26:	lsls	r7, r7, #1
    5e28:	b.n	5de4 <IRrecv::decodeMitsubishi(decode_results*)+0x3c>
    else                                                                 return false ;
    offset++;

    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
    offset++;
    5e2a:	mov	r4, r5
  }

  // Success
  results->bits = (offset - 1) / 2;
    5e2c:	subs	r4, #1
    5e2e:	asrs	r4, r4, #1
  if (results->bits < MITSUBISHI_BITS) {
    5e30:	cmp	r4, #15
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
    5e32:	str	r4, [r6, #12]
  if (results->bits < MITSUBISHI_BITS) {
    5e34:	ble.n	5e42 <IRrecv::decodeMitsubishi(decode_results*)+0x9a>
    results->bits = 0;
    return false;
  }

  results->value       = data;
  results->decode_type = MITSUBISHI;
    5e36:	movs	r3, #12
  if (results->bits < MITSUBISHI_BITS) {
    results->bits = 0;
    return false;
  }

  results->value       = data;
    5e38:	str	r7, [r6, #8]
  results->decode_type = MITSUBISHI;
    5e3a:	strb	r3, [r6, #0]
  return true;
    5e3c:	movs	r0, #1
}
    5e3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  // Success
  results->bits = (offset - 1) / 2;
  if (results->bits < MITSUBISHI_BITS) {
    results->bits = 0;
    5e42:	movs	r0, #0
    5e44:	str	r0, [r6, #12]
    return false;
    5e46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e4a:	nop
    5e4c:	.word	0x1fffb8ac

00005e50 <IRrecv::decodeDenon(decode_results*)>:

//+=============================================================================
//
#if DECODE_DENON
bool  IRrecv::decodeDenon (decode_results *results)
{
    5e50:	push	{r3, r4, r5, r6, r7, lr}
	unsigned long  data   = 0;  // Somewhere to build our code
	int            offset = 1;  // Skip the Gap reading

	// Check we have the right amount of data
	if (irparams.rawlen != 1 + 2 + (2 * BITS) + 1)  return false ;
    5e52:	ldr	r3, [pc, #132]	; (5ed8 <IRrecv::decodeDenon(decode_results*)+0x88>)
    5e54:	ldrb	r3, [r3, #4]
    5e56:	cmp	r3, #32
    5e58:	beq.n	5e5e <IRrecv::decodeDenon(decode_results*)+0xe>
    5e5a:	movs	r0, #0
    5e5c:	pop	{r3, r4, r5, r6, r7, pc}

	// Check initial Mark+Space match
	if (!MATCH_MARK (results->rawbuf[offset++], HDR_MARK ))  return false ;
    5e5e:	ldr	r3, [r1, #16]
    5e60:	mov	r4, r1
    5e62:	ldr	r0, [r3, #4]
    5e64:	mov.w	r1, #300	; 0x12c
    5e68:	bl	66a0 <MATCH_MARK(int, int)>
    5e6c:	cmp	r0, #0
    5e6e:	beq.n	5e5a <IRrecv::decodeDenon(decode_results*)+0xa>
	if (!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE))  return false ;
    5e70:	ldr	r3, [r4, #16]
    5e72:	movw	r1, #750	; 0x2ee
    5e76:	ldr	r0, [r3, #8]
    5e78:	bl	66f4 <MATCH_SPACE(int, int)>
    5e7c:	cmp	r0, #0
    5e7e:	beq.n	5e5a <IRrecv::decodeDenon(decode_results*)+0xa>
    5e80:	movs	r5, #12
    5e82:	movs	r6, #0
    5e84:	b.n	5e90 <IRrecv::decodeDenon(decode_results*)+0x40>
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK))  return false ;

		// IR data is big-endian, so we shuffle it in from the right:
		if      (MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1 ;
    5e86:	orr.w	r6, r3, #1
    5e8a:	adds	r5, #8
	// Check initial Mark+Space match
	if (!MATCH_MARK (results->rawbuf[offset++], HDR_MARK ))  return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE))  return false ;

	// Read the bits in
	for (int i = 0;  i < BITS;  i++) {
    5e8c:	cmp	r5, #124	; 0x7c
    5e8e:	beq.n	5ec8 <IRrecv::decodeDenon(decode_results*)+0x78>
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK))  return false ;
    5e90:	ldr	r3, [r4, #16]
    5e92:	mov.w	r1, #300	; 0x12c
    5e96:	ldr	r0, [r3, r5]
    5e98:	bl	66a0 <MATCH_MARK(int, int)>

		// IR data is big-endian, so we shuffle it in from the right:
		if      (MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1 ;
    5e9c:	adds	r7, r5, #4
    5e9e:	mov.w	r1, #1800	; 0x708

	// Read the bits in
	for (int i = 0;  i < BITS;  i++) {
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK))  return false ;
    5ea2:	cmp	r0, #0
    5ea4:	beq.n	5e5a <IRrecv::decodeDenon(decode_results*)+0xa>

		// IR data is big-endian, so we shuffle it in from the right:
		if      (MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1 ;
    5ea6:	ldr	r3, [r4, #16]
    5ea8:	ldr	r0, [r3, r7]
    5eaa:	bl	66f4 <MATCH_SPACE(int, int)>
    5eae:	lsls	r3, r6, #1
    5eb0:	cmp	r0, #0
    5eb2:	bne.n	5e86 <IRrecv::decodeDenon(decode_results*)+0x36>
		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0 ;
    5eb4:	ldr	r3, [r4, #16]
    5eb6:	movw	r1, #750	; 0x2ee
    5eba:	ldr	r0, [r3, r7]
    5ebc:	bl	66f4 <MATCH_SPACE(int, int)>
    5ec0:	cmp	r0, #0
    5ec2:	beq.n	5e5a <IRrecv::decodeDenon(decode_results*)+0xa>
    5ec4:	lsls	r6, r6, #1
    5ec6:	b.n	5e8a <IRrecv::decodeDenon(decode_results*)+0x3a>
		else                                                        return false ;
		offset++;
	}

	// Success
	results->bits        = BITS;
    5ec8:	movs	r2, #14
	results->value       = data;
	results->decode_type = DENON;
    5eca:	movs	r3, #15
		offset++;
	}

	// Success
	results->bits        = BITS;
	results->value       = data;
    5ecc:	str	r6, [r4, #8]
		else                                                        return false ;
		offset++;
	}

	// Success
	results->bits        = BITS;
    5ece:	str	r2, [r4, #12]
	results->value       = data;
	results->decode_type = DENON;
    5ed0:	strb	r3, [r4, #0]
	return true;
    5ed2:	movs	r0, #1
}
    5ed4:	pop	{r3, r4, r5, r6, r7, pc}
    5ed6:	nop
    5ed8:	.word	0x1fffb8ac

00005edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>:
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
//
#if (DECODE_RC5 || DECODE_RC6)
int  IRrecv::getRClevel (decode_results *results,  int *offset,  int *used,  int t1)
{
    5edc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int  width;
	int  val;
	int  correction;
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
    5ee0:	ldr	r0, [r1, #20]
    5ee2:	ldr	r4, [r2, #0]
    5ee4:	cmp	r4, r0
    5ee6:	bge.n	5f2c <IRrecv::getRClevel(decode_results*, int*, int*, int)+0x50>
    5ee8:	mov	r5, r2
	width      = results->rawbuf[*offset];
    5eea:	ldr	r2, [r1, #16]
    5eec:	mov	r6, r3
	val        = ((*offset) % 2) ? MARK : SPACE;
    5eee:	and.w	r3, r4, #1
	int  val;
	int  correction;
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
	width      = results->rawbuf[*offset];
    5ef2:	ldr.w	r8, [r2, r4, lsl #2]
	val        = ((*offset) % 2) ? MARK : SPACE;
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;

	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
    5ef6:	ldr	r2, [sp, #24]
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
	width      = results->rawbuf[*offset];
	val        = ((*offset) % 2) ? MARK : SPACE;
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
    5ef8:	cmp	r3, #0
    5efa:	ite	ne
    5efc:	movne	r4, #100	; 0x64
    5efe:	mvneq.w	r4, #99	; 0x63

	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
    5f02:	add	r4, r2
    5f04:	mov	r1, r4
    5f06:	mov	r0, r8
    5f08:	eor.w	r7, r3, #1
    5f0c:	bl	664c <MATCH(int, int)>
    5f10:	cbz	r0, 5f3a <IRrecv::getRClevel(decode_results*, int*, int*, int)+0x5e>
    5f12:	movs	r2, #1
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
	else if (MATCH(width, (3*t1) + correction))  avail = 3 ;
	else                                         return -1 ;

	(*used)++;
    5f14:	ldr	r3, [r6, #0]
    5f16:	adds	r3, #1
	if (*used >= avail) {
    5f18:	cmp	r2, r3
    5f1a:	bgt.n	5f32 <IRrecv::getRClevel(decode_results*, int*, int*, int)+0x56>
		*used = 0;
    5f1c:	movs	r3, #0
    5f1e:	str	r3, [r6, #0]
		(*offset)++;
    5f20:	ldr	r3, [r5, #0]
    5f22:	adds	r3, #1
	}

	DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
    5f24:	mov	r0, r7
	else                                         return -1 ;

	(*used)++;
	if (*used >= avail) {
		*used = 0;
		(*offset)++;
    5f26:	str	r3, [r5, #0]
    5f28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int  width;
	int  val;
	int  correction;
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
    5f2c:	movs	r0, #1
    5f2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
	else if (MATCH(width, (3*t1) + correction))  avail = 3 ;
	else                                         return -1 ;

	(*used)++;
    5f32:	str	r3, [r6, #0]
		(*offset)++;
	}

	DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
    5f34:	mov	r0, r7
    5f36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	width      = results->rawbuf[*offset];
	val        = ((*offset) % 2) ? MARK : SPACE;
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;

	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
    5f3a:	ldr	r3, [sp, #24]
    5f3c:	add	r4, r3
    5f3e:	mov	r1, r4
    5f40:	mov	r0, r8
    5f42:	bl	664c <MATCH(int, int)>
    5f46:	cbz	r0, 5f4c <IRrecv::getRClevel(decode_results*, int*, int*, int)+0x70>
    5f48:	movs	r2, #2
    5f4a:	b.n	5f14 <IRrecv::getRClevel(decode_results*, int*, int*, int)+0x38>
	else if (MATCH(width, (3*t1) + correction))  avail = 3 ;
    5f4c:	ldr	r3, [sp, #24]
    5f4e:	mov	r0, r8
    5f50:	adds	r1, r3, r4
    5f52:	bl	664c <MATCH(int, int)>
    5f56:	cbz	r0, 5f5c <IRrecv::getRClevel(decode_results*, int*, int*, int)+0x80>
    5f58:	movs	r2, #3
    5f5a:	b.n	5f14 <IRrecv::getRClevel(decode_results*, int*, int*, int)+0x38>
	else                                         return -1 ;
    5f5c:	mov.w	r0, #4294967295
	}

	DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
}
    5f60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005f64 <IRrecv::decodeRC5(decode_results*)>:
#endif

//+=============================================================================
#if DECODE_RC5
bool  IRrecv::decodeRC5 (decode_results *results)
{
    5f64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int   nbits;
	long  data   = 0;
	int   used   = 0;
	int   offset = 1;  // Skip gap space

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
    5f68:	ldr	r6, [pc, #184]	; (6024 <IRrecv::decodeRC5(decode_results*)+0xc0>)
    5f6a:	ldrb	r3, [r6, #4]
#endif

//+=============================================================================
#if DECODE_RC5
bool  IRrecv::decodeRC5 (decode_results *results)
{
    5f6c:	sub	sp, #16
	int   nbits;
	long  data   = 0;
	int   used   = 0;
    5f6e:	movs	r4, #0
	int   offset = 1;  // Skip gap space
    5f70:	movs	r2, #1

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
    5f72:	cmp	r3, #12
#if DECODE_RC5
bool  IRrecv::decodeRC5 (decode_results *results)
{
	int   nbits;
	long  data   = 0;
	int   used   = 0;
    5f74:	str	r4, [sp, #8]
	int   offset = 1;  // Skip gap space
    5f76:	str	r2, [sp, #12]

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
    5f78:	bhi.n	5f82 <IRrecv::decodeRC5(decode_results*)+0x1e>
    5f7a:	movs	r0, #0
	// Success
	results->bits        = nbits;
	results->value       = data;
	results->decode_type = RC5;
	return true;
}
    5f7c:	add	sp, #16
    5f7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int   offset = 1;  // Skip gap space

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;

	// Get start bits
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
    5f82:	movw	r7, #889	; 0x379
    5f86:	add	r3, sp, #8
    5f88:	add	r2, sp, #12
    5f8a:	str	r7, [sp, #0]
    5f8c:	mov	r5, r1
    5f8e:	mov	r4, r0
    5f90:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
    5f94:	cmp	r0, #0
    5f96:	bne.n	5f7a <IRrecv::decodeRC5(decode_results*)+0x16>
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)  return false ;
    5f98:	str	r7, [sp, #0]
    5f9a:	add	r3, sp, #8
    5f9c:	add	r2, sp, #12
    5f9e:	mov	r1, r5
    5fa0:	mov	r0, r4
    5fa2:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
    5fa6:	cmp	r0, #1
    5fa8:	bne.n	5f7a <IRrecv::decodeRC5(decode_results*)+0x16>
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
    5faa:	str	r7, [sp, #0]
    5fac:	add	r3, sp, #8
    5fae:	add	r2, sp, #12
    5fb0:	mov	r1, r5
    5fb2:	mov	r0, r4
    5fb4:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
    5fb8:	cmp	r0, #0
    5fba:	bne.n	5f7a <IRrecv::decodeRC5(decode_results*)+0x16>

	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
    5fbc:	ldrb	r2, [r6, #4]
    5fbe:	ldr	r3, [sp, #12]
    5fc0:	cmp	r2, r3
    5fc2:	mov	r8, r0
    5fc4:	mov	sl, r0
    5fc6:	bgt.n	5fe4 <IRrecv::decodeRC5(decode_results*)+0x80>
    5fc8:	b.n	6016 <IRrecv::decodeRC5(decode_results*)+0xb2>
		int  levelA = getRClevel(results, &offset, &used, RC5_T1);
		int  levelB = getRClevel(results, &offset, &used, RC5_T1);

		if      ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 1 ;
		else if ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 0 ;
    5fca:	cmp.w	r9, #0
    5fce:	bne.n	5f7a <IRrecv::decodeRC5(decode_results*)+0x16>
    5fd0:	cmp	r0, #1
    5fd2:	bne.n	5f7a <IRrecv::decodeRC5(decode_results*)+0x16>
    5fd4:	mov.w	r8, r8, lsl #1
	// Get start bits
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)  return false ;
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;

	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
    5fd8:	ldrb	r2, [r6, #4]
    5fda:	ldr	r3, [sp, #12]
    5fdc:	cmp	r2, r3
    5fde:	add.w	sl, sl, #1
    5fe2:	ble.n	6016 <IRrecv::decodeRC5(decode_results*)+0xb2>
		int  levelA = getRClevel(results, &offset, &used, RC5_T1);
    5fe4:	add	r3, sp, #8
    5fe6:	add	r2, sp, #12
    5fe8:	mov	r1, r5
    5fea:	str	r7, [sp, #0]
    5fec:	mov	r0, r4
    5fee:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
		int  levelB = getRClevel(results, &offset, &used, RC5_T1);
    5ff2:	str	r7, [sp, #0]
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)  return false ;
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;

	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
		int  levelA = getRClevel(results, &offset, &used, RC5_T1);
    5ff4:	mov	r9, r0
		int  levelB = getRClevel(results, &offset, &used, RC5_T1);
    5ff6:	add	r3, sp, #8
    5ff8:	add	r2, sp, #12
    5ffa:	mov	r1, r5
    5ffc:	mov	r0, r4
    5ffe:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>

		if      ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 1 ;
    6002:	cmp.w	r9, #1
    6006:	bne.n	5fca <IRrecv::decodeRC5(decode_results*)+0x66>
    6008:	mov.w	r8, r8, lsl #1
    600c:	cmp	r0, #0
    600e:	bne.n	5f7a <IRrecv::decodeRC5(decode_results*)+0x16>
    6010:	orr.w	r8, r8, #1
    6014:	b.n	5fd8 <IRrecv::decodeRC5(decode_results*)+0x74>
	}

	// Success
	results->bits        = nbits;
	results->value       = data;
	results->decode_type = RC5;
    6016:	movs	r0, #1
		else if ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 0 ;
		else                                              return false ;
	}

	// Success
	results->bits        = nbits;
    6018:	str.w	sl, [r5, #12]
	results->value       = data;
    601c:	str.w	r8, [r5, #8]
	results->decode_type = RC5;
    6020:	strb	r0, [r5, #0]
	return true;
    6022:	b.n	5f7c <IRrecv::decodeRC5(decode_results*)+0x18>
    6024:	.word	0x1fffb8ac

00006028 <IRrecv::decodeRC6(decode_results*)>:
#endif

//+=============================================================================
#if DECODE_RC6
bool  IRrecv::decodeRC6 (decode_results *results)
{
    6028:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int   nbits;
	long  data   = 0;
	int   used   = 0;
	int   offset = 1;  // Skip first space

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
    602c:	ldr	r3, [r1, #20]
#if DECODE_RC6
bool  IRrecv::decodeRC6 (decode_results *results)
{
	int   nbits;
	long  data   = 0;
	int   used   = 0;
    602e:	movs	r2, #0
#endif

//+=============================================================================
#if DECODE_RC6
bool  IRrecv::decodeRC6 (decode_results *results)
{
    6030:	sub	sp, #16
	int   nbits;
	long  data   = 0;
	int   used   = 0;
	int   offset = 1;  // Skip first space

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
    6032:	cmp	r3, r2
#if DECODE_RC6
bool  IRrecv::decodeRC6 (decode_results *results)
{
	int   nbits;
	long  data   = 0;
	int   used   = 0;
    6034:	str	r2, [sp, #8]
	int   offset = 1;  // Skip first space

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
    6036:	ble.n	604e <IRrecv::decodeRC6(decode_results*)+0x26>

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++],  RC6_HDR_MARK))   return false ;
    6038:	ldr	r3, [r1, #16]
    603a:	mov	r5, r0
    603c:	mov	r4, r1
    603e:	ldr	r0, [r3, #4]
    6040:	movw	r1, #2666	; 0xa6a
    6044:	movs	r3, #2
    6046:	str	r3, [sp, #12]
    6048:	bl	66a0 <MATCH_MARK(int, int)>
    604c:	cbnz	r0, 6056 <IRrecv::decodeRC6(decode_results*)+0x2e>
	int   nbits;
	long  data   = 0;
	int   used   = 0;
	int   offset = 1;  // Skip first space

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
    604e:	movs	r0, #0
	// Success
	results->bits        = nbits;
	results->value       = data;
	results->decode_type = RC6;
	return true;
}
    6050:	add	sp, #16
    6052:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++],  RC6_HDR_MARK))   return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], RC6_HDR_SPACE))  return false ;
    6056:	ldr	r3, [sp, #12]
    6058:	ldr	r2, [r4, #16]
    605a:	adds	r1, r3, #1
    605c:	str	r1, [sp, #12]
    605e:	ldr.w	r0, [r2, r3, lsl #2]
    6062:	movw	r1, #889	; 0x379
    6066:	bl	66f4 <MATCH_SPACE(int, int)>
    606a:	cmp	r0, #0
    606c:	beq.n	604e <IRrecv::decodeRC6(decode_results*)+0x26>

	// Get start bit (1)
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
    606e:	mov.w	r6, #444	; 0x1bc
    6072:	add	r3, sp, #8
    6074:	add	r2, sp, #12
    6076:	str	r6, [sp, #0]
    6078:	mov	r1, r4
    607a:	mov	r0, r5
    607c:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
    6080:	mov	r7, r0
    6082:	cmp	r0, #0
    6084:	bne.n	604e <IRrecv::decodeRC6(decode_results*)+0x26>
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;
    6086:	str	r6, [sp, #0]
    6088:	add	r3, sp, #8
    608a:	add	r2, sp, #12
    608c:	mov	r1, r4
    608e:	mov	r0, r5
    6090:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
    6094:	cmp	r0, #1
    6096:	bne.n	604e <IRrecv::decodeRC6(decode_results*)+0x26>

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
    6098:	ldr	r2, [sp, #12]
    609a:	ldr	r3, [r4, #20]
    609c:	cmp	r2, r3
    609e:	mov	r8, r7
    60a0:	bge.n	60e6 <IRrecv::decodeRC6(decode_results*)+0xbe>
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
    60a2:	add	r3, sp, #8
    60a4:	add	r2, sp, #12
    60a6:	mov	r1, r4
    60a8:	str	r6, [sp, #0]
    60aa:	mov	r0, r5
    60ac:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
		if (nbits == 3) {
    60b0:	cmp.w	r8, #3
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
    60b4:	mov	r9, r0
		if (nbits == 3) {
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
    60b6:	str	r6, [sp, #0]
    60b8:	add	r3, sp, #8
    60ba:	add	r2, sp, #12
    60bc:	mov	r1, r4
    60be:	mov	r0, r5

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
		if (nbits == 3) {
    60c0:	beq.n	6104 <IRrecv::decodeRC6(decode_results*)+0xdc>
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
    60c2:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
    60c6:	mov	sl, r0
		if (nbits == 3) {
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
		}

		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
    60c8:	cmp.w	r9, #0
    60cc:	bne.n	60f4 <IRrecv::decodeRC6(decode_results*)+0xcc>
    60ce:	cmp.w	sl, #1
    60d2:	bne.n	604e <IRrecv::decodeRC6(decode_results*)+0x26>
    60d4:	lsls	r7, r7, #1
    60d6:	orr.w	r7, r7, #1

	// Get start bit (1)
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
    60da:	ldr	r2, [r4, #20]
    60dc:	ldr	r3, [sp, #12]
    60de:	cmp	r2, r3
    60e0:	add.w	r8, r8, #1
    60e4:	bgt.n	60a2 <IRrecv::decodeRC6(decode_results*)+0x7a>
	}

	// Success
	results->bits        = nbits;
	results->value       = data;
	results->decode_type = RC6;
    60e6:	movs	r3, #2
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
		else                                              return false ;            // Error
	}

	// Success
	results->bits        = nbits;
    60e8:	str.w	r8, [r4, #12]
	results->value       = data;
    60ec:	str	r7, [r4, #8]
	results->decode_type = RC6;
    60ee:	strb	r3, [r4, #0]
	return true;
    60f0:	movs	r0, #1
    60f2:	b.n	6050 <IRrecv::decodeRC6(decode_results*)+0x28>
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
		}

		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
    60f4:	cmp.w	r9, #1
    60f8:	bne.n	604e <IRrecv::decodeRC6(decode_results*)+0x26>
    60fa:	cmp.w	sl, #0
    60fe:	bne.n	604e <IRrecv::decodeRC6(decode_results*)+0x26>
    6100:	lsls	r7, r7, #1
    6102:	b.n	60da <IRrecv::decodeRC6(decode_results*)+0xb2>
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
		if (nbits == 3) {
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
    6104:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
    6108:	cmp	r9, r0
    610a:	bne.n	604e <IRrecv::decodeRC6(decode_results*)+0x26>
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
    610c:	add	r3, sp, #8
    610e:	add	r2, sp, #12
    6110:	mov	r1, r4
    6112:	str	r6, [sp, #0]
    6114:	mov	r0, r5
    6116:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
		if (nbits == 3) {
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
    611a:	str	r6, [sp, #0]
		if (nbits == 3) {
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
    611c:	mov	sl, r0
		if (nbits == 3) {
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
    611e:	add	r3, sp, #8
    6120:	add	r2, sp, #12
    6122:	mov	r1, r4
    6124:	mov	r0, r5
    6126:	bl	5edc <IRrecv::getRClevel(decode_results*, int*, int*, int)>
    612a:	cmp	r0, sl
    612c:	beq.n	60c8 <IRrecv::decodeRC6(decode_results*)+0xa0>
    612e:	b.n	604e <IRrecv::decodeRC6(decode_results*)+0x26>

00006130 <IRrecv::decodeNEC(decode_results*)>:
//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
bool  IRrecv::decodeNEC (decode_results *results)
{
    6130:	push	{r3, r4, r5, r6, r7, lr}
    6132:	mov	r5, r1
	long  data   = 0;  // We decode in to here; Start with nothing
	int   offset = 1;  // Index in to results; Skip first entry!?

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
    6134:	movw	r1, #9000	; 0x2328
    6138:	ldr	r3, [r5, #16]
    613a:	ldr	r0, [r3, #4]
    613c:	bl	66a0 <MATCH_MARK(int, int)>
    6140:	cbz	r0, 6150 <IRrecv::decodeNEC(decode_results*)+0x20>
	offset++;

	// Check for repeat
	if ( (irparams.rawlen == 4)
    6142:	ldr	r4, [pc, #172]	; (61f0 <IRrecv::decodeNEC(decode_results*)+0xc0>)
    6144:	ldrb	r3, [r4, #4]
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
    6146:	cmp	r3, #4
    6148:	beq.n	61ae <IRrecv::decodeNEC(decode_results*)+0x7e>
		results->decode_type = NEC;
		return true;
	}

	// Check we have enough data
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;
    614a:	ldrb	r3, [r4, #4]
    614c:	cmp	r3, #67	; 0x43
    614e:	bhi.n	6154 <IRrecv::decodeNEC(decode_results*)+0x24>
{
	long  data   = 0;  // We decode in to here; Start with nothing
	int   offset = 1;  // Index in to results; Skip first entry!?

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
    6150:	movs	r0, #0
    6152:	pop	{r3, r4, r5, r6, r7, pc}

	// Check we have enough data
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;

	// Check header "space"
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
    6154:	ldr	r3, [r5, #16]
    6156:	movw	r1, #4500	; 0x1194
    615a:	ldr	r0, [r3, #8]
    615c:	bl	66f4 <MATCH_SPACE(int, int)>
    6160:	cmp	r0, #0
    6162:	beq.n	6150 <IRrecv::decodeNEC(decode_results*)+0x20>
    6164:	movs	r4, #12
    6166:	movs	r6, #0
    6168:	b.n	6176 <IRrecv::decodeNEC(decode_results*)+0x46>
	for (int i = 0;  i < NEC_BITS;  i++) {
		// Check data "mark"
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
		offset++;
        // Suppend this bit
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
    616a:	orr.w	r6, r3, #1
    616e:	adds	r4, #8
	// Check header "space"
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
	offset++;

	// Build the data
	for (int i = 0;  i < NEC_BITS;  i++) {
    6170:	cmp.w	r4, #268	; 0x10c
    6174:	beq.n	61e0 <IRrecv::decodeNEC(decode_results*)+0xb0>
		// Check data "mark"
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
    6176:	ldr	r3, [r5, #16]
    6178:	mov.w	r1, #560	; 0x230
    617c:	ldr	r0, [r3, r4]
    617e:	bl	66a0 <MATCH_MARK(int, int)>
		offset++;
        // Suppend this bit
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
    6182:	adds	r7, r4, #4
    6184:	movw	r1, #1690	; 0x69a
	offset++;

	// Build the data
	for (int i = 0;  i < NEC_BITS;  i++) {
		// Check data "mark"
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
    6188:	cmp	r0, #0
    618a:	beq.n	6150 <IRrecv::decodeNEC(decode_results*)+0x20>
		offset++;
        // Suppend this bit
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
    618c:	ldr	r3, [r5, #16]
    618e:	ldr	r0, [r3, r7]
    6190:	bl	66f4 <MATCH_SPACE(int, int)>
    6194:	lsls	r3, r6, #1
    6196:	cmp	r0, #0
    6198:	bne.n	616a <IRrecv::decodeNEC(decode_results*)+0x3a>
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE))  data = (data << 1) | 0 ;
    619a:	ldr	r3, [r5, #16]
    619c:	mov.w	r1, #560	; 0x230
    61a0:	ldr	r0, [r3, r7]
    61a2:	bl	66f4 <MATCH_SPACE(int, int)>
    61a6:	cmp	r0, #0
    61a8:	beq.n	6150 <IRrecv::decodeNEC(decode_results*)+0x20>
    61aa:	lsls	r6, r6, #1
    61ac:	b.n	616e <IRrecv::decodeNEC(decode_results*)+0x3e>
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
	offset++;

	// Check for repeat
	if ( (irparams.rawlen == 4)
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
    61ae:	ldr	r3, [r5, #16]
    61b0:	movw	r1, #2250	; 0x8ca
    61b4:	ldr	r0, [r3, #8]
    61b6:	bl	66f4 <MATCH_SPACE(int, int)>
    61ba:	cmp	r0, #0
    61bc:	beq.n	614a <IRrecv::decodeNEC(decode_results*)+0x1a>
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
    61be:	ldr	r3, [r5, #16]
    61c0:	mov.w	r1, #560	; 0x230
    61c4:	ldr	r0, [r3, #12]
    61c6:	bl	66a0 <MATCH_MARK(int, int)>
    61ca:	cmp	r0, #0
    61cc:	beq.n	614a <IRrecv::decodeNEC(decode_results*)+0x1a>
	   ) {
		results->bits        = 0;
    61ce:	movs	r1, #0
		results->value       = REPEAT;
    61d0:	mov.w	r2, #4294967295
		results->decode_type = NEC;
    61d4:	movs	r3, #3
	// Check for repeat
	if ( (irparams.rawlen == 4)
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
	   ) {
		results->bits        = 0;
    61d6:	str	r1, [r5, #12]
		results->value       = REPEAT;
    61d8:	str	r2, [r5, #8]
		results->decode_type = NEC;
    61da:	strb	r3, [r5, #0]
		return true;
    61dc:	movs	r0, #1
    61de:	pop	{r3, r4, r5, r6, r7, pc}
		else                                                            return false ;
		offset++;
	}

	// Success
	results->bits        = NEC_BITS;
    61e0:	movs	r2, #32
	results->value       = data;
	results->decode_type = NEC;
    61e2:	movs	r3, #3
		offset++;
	}

	// Success
	results->bits        = NEC_BITS;
	results->value       = data;
    61e4:	str	r6, [r5, #8]
		else                                                            return false ;
		offset++;
	}

	// Success
	results->bits        = NEC_BITS;
    61e6:	str	r2, [r5, #12]
	results->value       = data;
	results->decode_type = NEC;
    61e8:	strb	r3, [r5, #0]

	return true;
    61ea:	movs	r0, #1
    61ec:	pop	{r3, r4, r5, r6, r7, pc}
    61ee:	nop
    61f0:	.word	0x1fffb8ac

000061f4 <IRrecv::decodePanasonic(decode_results*)>:
#endif

//+=============================================================================
#if DECODE_PANASONIC
bool  IRrecv::decodePanasonic (decode_results *results)
{
    61f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61f8:	mov	r5, r1
    unsigned long long  data   = 0;
    int                 offset = 1;

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
    61fa:	movw	r1, #3502	; 0xdae
    61fe:	ldr	r3, [r5, #16]
    6200:	ldr	r0, [r3, #4]
    6202:	bl	66a0 <MATCH_MARK(int, int)>
    6206:	cbnz	r0, 620e <IRrecv::decodePanasonic(decode_results*)+0x1a>
    6208:	movs	r0, #0
    620a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;
    620e:	ldr	r3, [r5, #16]
    6210:	movw	r1, #1750	; 0x6d6
    6214:	ldr	r0, [r3, #8]
    6216:	bl	66a0 <MATCH_MARK(int, int)>
    621a:	cmp	r0, #0
    621c:	beq.n	6208 <IRrecv::decodePanasonic(decode_results*)+0x14>
    621e:	movs	r4, #12
    6220:	movs	r6, #0
    6222:	movs	r7, #0
    6224:	b.n	6234 <IRrecv::decodePanasonic(decode_results*)+0x40>

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
    6226:	orr.w	r6, r2, #1
    622a:	mov	r7, r3
    622c:	adds	r4, #8

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
    622e:	cmp.w	r4, #396	; 0x18c
    6232:	beq.n	6278 <IRrecv::decodePanasonic(decode_results*)+0x84>
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;
    6234:	ldr	r3, [r5, #16]
    6236:	mov.w	r1, #502	; 0x1f6
    623a:	ldr	r0, [r3, r4]
    623c:	bl	66a0 <MATCH_MARK(int, int)>

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
    6240:	add.w	r8, r4, #4
    6244:	movw	r1, #1244	; 0x4dc
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;
    6248:	cmp	r0, #0
    624a:	beq.n	6208 <IRrecv::decodePanasonic(decode_results*)+0x14>

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
    624c:	ldr	r3, [r5, #16]
    624e:	ldr.w	r0, [r3, r8]
    6252:	bl	66f4 <MATCH_SPACE(int, int)>
    6256:	adds	r2, r6, r6
    6258:	adc.w	r3, r7, r7
    625c:	cmp	r0, #0
    625e:	bne.n	6226 <IRrecv::decodePanasonic(decode_results*)+0x32>
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
    6260:	ldr	r3, [r5, #16]
    6262:	mov.w	r1, #400	; 0x190
    6266:	ldr.w	r0, [r3, r8]
    626a:	bl	66f4 <MATCH_SPACE(int, int)>
    626e:	cmp	r0, #0
    6270:	beq.n	6208 <IRrecv::decodePanasonic(decode_results*)+0x14>
    6272:	adds	r6, r6, r6
    6274:	adcs	r7, r7
    6276:	b.n	622c <IRrecv::decodePanasonic(decode_results*)+0x38>
        offset++;
    }

    results->value       = (unsigned long)data;
    results->address     = (unsigned int)(data >> 32);
    results->decode_type = PANASONIC;
    6278:	movs	r2, #5
    results->bits        = PANASONIC_BITS;
    627a:	movs	r3, #48	; 0x30
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
        else                                                                 return false ;
        offset++;
    }

    results->value       = (unsigned long)data;
    627c:	str	r6, [r5, #8]
    results->address     = (unsigned int)(data >> 32);
    627e:	str	r7, [r5, #4]
    results->decode_type = PANASONIC;
    6280:	strb	r2, [r5, #0]
    results->bits        = PANASONIC_BITS;
    6282:	str	r3, [r5, #12]

    return true;
    6284:	movs	r0, #1
}
    6286:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    628a:	nop

0000628c <IRrecv::decodeSanyo(decode_results*)>:
#define SANYO_RPT_LENGTH          45000

//+=============================================================================
#if DECODE_SANYO
bool  IRrecv::decodeSanyo (decode_results *results)
{
    628c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	long  data   = 0;
	int   offset = 0;  // Skip first space  <-- CHECK THIS!

	if (irparams.rawlen < (2 * SANYO_BITS) + 2)  return false ;
    6290:	ldr	r6, [pc, #200]	; (635c <IRrecv::decodeSanyo(decode_results*)+0xd0>)
    6292:	ldrb	r3, [r6, #4]
    6294:	cmp	r3, #25
    6296:	bls.n	62c4 <IRrecv::decodeSanyo(decode_results*)+0x38>
	Serial.println( "test against:");
	Serial.println(results->rawbuf[offset]);
#endif

	// Initial space
	if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
    6298:	ldr	r3, [r1, #16]
    629a:	ldr	r2, [r3, #0]
    629c:	cmp.w	r2, #800	; 0x320
    62a0:	bcs.n	62b6 <IRrecv::decodeSanyo(decode_results*)+0x2a>
		//Serial.print("IR Gap found: ");
		results->bits        = 0;
    62a2:	movs	r0, #0
		results->value       = REPEAT;
    62a4:	mov.w	r2, #4294967295
		results->decode_type = SANYO;
    62a8:	movs	r3, #11
#endif

	// Initial space
	if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
		//Serial.print("IR Gap found: ");
		results->bits        = 0;
    62aa:	str	r0, [r1, #12]
		results->value       = REPEAT;
    62ac:	str	r2, [r1, #8]
		results->decode_type = SANYO;
    62ae:	strb	r3, [r1, #0]
		return true;
    62b0:	movs	r0, #1
    62b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    62b6:	mov	r5, r1
	}
	offset++;

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
    62b8:	ldr	r0, [r3, #4]
    62ba:	movw	r1, #3500	; 0xdac
    62be:	bl	66a0 <MATCH_MARK(int, int)>
    62c2:	cbnz	r0, 62ca <IRrecv::decodeSanyo(decode_results*)+0x3e>
bool  IRrecv::decodeSanyo (decode_results *results)
{
	long  data   = 0;
	int   offset = 0;  // Skip first space  <-- CHECK THIS!

	if (irparams.rawlen < (2 * SANYO_BITS) + 2)  return false ;
    62c4:	movs	r0, #0
    62c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;

	// Skip Second Mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
    62ca:	ldr	r3, [r5, #16]
    62cc:	movw	r1, #3500	; 0xdac
    62d0:	ldr	r0, [r3, #8]
    62d2:	bl	66a0 <MATCH_MARK(int, int)>
    62d6:	cmp	r0, #0
    62d8:	beq.n	62c4 <IRrecv::decodeSanyo(decode_results*)+0x38>

	while (offset + 1 < irparams.rawlen) {
    62da:	ldrb	r3, [r6, #4]
    62dc:	cmp	r3, #4
    62de:	ble.n	6352 <IRrecv::decodeSanyo(decode_results*)+0xc6>
    62e0:	movs	r4, #4
    62e2:	movs	r7, #3
    62e4:	mov.w	r8, #0
    62e8:	b.n	62fa <IRrecv::decodeSanyo(decode_results*)+0x6e>
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;

		if      (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))   data = (data << 1) | 1 ;
    62ea:	orr.w	r8, r3, #1
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;

	// Skip Second Mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;

	while (offset + 1 < irparams.rawlen) {
    62ee:	ldrb	r3, [r6, #4]
    62f0:	adds	r4, #2
    62f2:	cmp	r4, r3
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;

		if      (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))   data = (data << 1) | 1 ;
		else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK))  data = (data << 1) | 0 ;
		else                                                            return false ;
		offset++;
    62f4:	add.w	r7, r7, #2
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;

	// Skip Second Mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;

	while (offset + 1 < irparams.rawlen) {
    62f8:	bge.n	6338 <IRrecv::decodeSanyo(decode_results*)+0xac>
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
    62fa:	ldr	r3, [r5, #16]
    62fc:	movw	r1, #950	; 0x3b6
    6300:	ldr.w	r0, [r3, r7, lsl #2]
    6304:	bl	66f4 <MATCH_SPACE(int, int)>

		if      (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))   data = (data << 1) | 1 ;
    6308:	mov.w	r1, #2400	; 0x960

	// Skip Second Mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
    630c:	cbz	r0, 633a <IRrecv::decodeSanyo(decode_results*)+0xae>

		if      (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))   data = (data << 1) | 1 ;
    630e:	ldr	r3, [r5, #16]
    6310:	ldr.w	r0, [r3, r4, lsl #2]
    6314:	bl	66a0 <MATCH_MARK(int, int)>
    6318:	mov.w	r3, r8, lsl #1
    631c:	cmp	r0, #0
    631e:	bne.n	62ea <IRrecv::decodeSanyo(decode_results*)+0x5e>
		else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK))  data = (data << 1) | 0 ;
    6320:	ldr	r3, [r5, #16]
    6322:	mov.w	r1, #700	; 0x2bc
    6326:	ldr.w	r0, [r3, r4, lsl #2]
    632a:	bl	66a0 <MATCH_MARK(int, int)>
    632e:	cmp	r0, #0
    6330:	beq.n	62c4 <IRrecv::decodeSanyo(decode_results*)+0x38>
    6332:	mov.w	r8, r8, lsl #1
    6336:	b.n	62ee <IRrecv::decodeSanyo(decode_results*)+0x62>
		else                                                            return false ;
		offset++;
    6338:	mov	r4, r7
	}

	// Success
	results->bits = (offset - 1) / 2;
    633a:	subs	r4, #1
    633c:	asrs	r4, r4, #1
	if (results->bits < 12) {
    633e:	cmp	r4, #11
		else                                                            return false ;
		offset++;
	}

	// Success
	results->bits = (offset - 1) / 2;
    6340:	str	r4, [r5, #12]
	if (results->bits < 12) {
    6342:	ble.n	6352 <IRrecv::decodeSanyo(decode_results*)+0xc6>
		results->bits = 0;
		return false;
	}

	results->value       = data;
	results->decode_type = SANYO;
    6344:	movs	r3, #11
	if (results->bits < 12) {
		results->bits = 0;
		return false;
	}

	results->value       = data;
    6346:	str.w	r8, [r5, #8]
	results->decode_type = SANYO;
    634a:	strb	r3, [r5, #0]
	return true;
    634c:	movs	r0, #1
}
    634e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	// Success
	results->bits = (offset - 1) / 2;
	if (results->bits < 12) {
		results->bits = 0;
    6352:	movs	r0, #0
    6354:	str	r0, [r5, #12]
		return false;
    6356:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    635a:	nop
    635c:	.word	0x1fffb8ac

00006360 <IRrecv::IRrecv(int)>:
}

//+=============================================================================
IRrecv::IRrecv (int recvpin)
{
	irparams.recvpin = recvpin;
    6360:	ldr	r3, [pc, #8]	; (636c <IRrecv::IRrecv(int)+0xc>)
    6362:	uxtb	r1, r1
	irparams.blinkflag = 0;
    6364:	movs	r2, #0
}

//+=============================================================================
IRrecv::IRrecv (int recvpin)
{
	irparams.recvpin = recvpin;
    6366:	strb	r1, [r3, #1]
	irparams.blinkflag = 0;
    6368:	strb	r2, [r3, #3]
}
    636a:	bx	lr
    636c:	.word	0x1fffb8ac

00006370 <IRrecv::enableIRIn()>:

//+=============================================================================
// initialization
//
void  IRrecv::enableIRIn ( )
{
    6370:	push	{r4, r5, r6, r7, lr}
	timerAttachInterrupt(timer, &IRTimer, 1);
	// every 50ns, autoreload = true
	timerAlarmWrite(timer, 50, true);
	timerAlarmEnable(timer);
#else
	cli();
    6372:	cpsid	i
	// Setup pulse clock timer interrupt
	// Prescale /8 (16M/8 = 0.5 microseconds per tick)
	// Therefore, the timer interval can range from 0.5 to 128 microseconds
	// Depending on the reset value (255 to 0)
	TIMER_CONFIG_NORMAL();
    6374:	ldr	r2, [pc, #92]	; (63d4 <IRrecv::enableIRIn()+0x64>)
    6376:	ldr	r5, [pc, #96]	; (63d8 <IRrecv::enableIRIn()+0x68>)
    6378:	ldr	r3, [r2, #0]
    637a:	ldr	r4, [pc, #96]	; (63dc <IRrecv::enableIRIn()+0x6c>)
    637c:	ldr	r1, [pc, #96]	; (63e0 <IRrecv::enableIRIn()+0x70>)
    637e:	ldr	r0, [pc, #100]	; (63e4 <IRrecv::enableIRIn()+0x74>)
    6380:	ldr.w	ip, [pc, #116]	; 63f8 <IRrecv::enableIRIn()+0x88>
    6384:	ldr.w	lr, [pc, #116]	; 63fc <IRrecv::enableIRIn()+0x8c>
    6388:	ldr	r6, [pc, #92]	; (63e8 <IRrecv::enableIRIn()+0x78>)
    638a:	ldr	r7, [pc, #96]	; (63ec <IRrecv::enableIRIn()+0x7c>)
    638c:	orr.w	r3, r3, #4
    6390:	str	r3, [r2, #0]
    6392:	movs	r3, #5
    6394:	strb	r3, [r5, #0]
    6396:	movs	r3, #1
    6398:	strb	r3, [r4, #0]
    639a:	movs	r2, #19
    639c:	strb	r3, [r1, #0]
    639e:	movs	r1, #0
    63a0:	movs	r3, #30
    63a2:	strb.w	r1, [ip]

	// Timer2 Overflow Interrupt Enable
	TIMER_ENABLE_INTR;
    63a6:	ldr	r5, [pc, #72]	; (63f0 <IRrecv::enableIRIn()+0x80>)
	cli();
	// Setup pulse clock timer interrupt
	// Prescale /8 (16M/8 = 0.5 microseconds per tick)
	// Therefore, the timer interval can range from 0.5 to 128 microseconds
	// Depending on the reset value (255 to 0)
	TIMER_CONFIG_NORMAL();
    63a8:	strb	r3, [r0, #0]
    63aa:	strb.w	r1, [lr]
    63ae:	strb	r2, [r6, #0]
    63b0:	movs	r6, #3
    63b2:	strb	r1, [r7, #0]

	// Timer2 Overflow Interrupt Enable
	TIMER_ENABLE_INTR;
    63b4:	movs	r2, #2
	cli();
	// Setup pulse clock timer interrupt
	// Prescale /8 (16M/8 = 0.5 microseconds per tick)
	// Therefore, the timer interval can range from 0.5 to 128 microseconds
	// Depending on the reset value (255 to 0)
	TIMER_CONFIG_NORMAL();
    63b6:	strb	r6, [r4, #5]
    63b8:	adds	r4, #5

	// Timer2 Overflow Interrupt Enable
	TIMER_ENABLE_INTR;
    63ba:	str	r2, [r5, #0]

	TIMER_RESET;
    63bc:	ldrb	r4, [r4, #0]
    63be:	strb	r3, [r0, #0]

	sei();  // enable interrupts
    63c0:	cpsie	i
#endif

	// Initialize state machine variables
	irparams.rcvstate = STATE_IDLE;
    63c2:	ldr	r3, [pc, #48]	; (63f4 <IRrecv::enableIRIn()+0x84>)
    63c4:	strb	r2, [r3, #0]
	irparams.rawlen = 0;
    63c6:	strb	r1, [r3, #4]

	// Set pin modes
	pinMode(irparams.recvpin, INPUT);
    63c8:	ldrb	r0, [r3, #1]
}
    63ca:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	// Initialize state machine variables
	irparams.rcvstate = STATE_IDLE;
	irparams.rawlen = 0;

	// Set pin modes
	pinMode(irparams.recvpin, INPUT);
    63ce:	b.w	9404 <pinMode>
    63d2:	nop
    63d4:	.word	0x40048034
    63d8:	.word	0x4006200a
    63dc:	.word	0x40062000
    63e0:	.word	0x40062001
    63e4:	.word	0x40062007
    63e8:	.word	0x40062009
    63ec:	.word	0x40062004
    63f0:	.word	0xe000e108
    63f4:	.word	0x1fffb8ac
    63f8:	.word	0x40062006
    63fc:	.word	0x40062008

00006400 <IRrecv::resume()>:
//+=============================================================================
// Restart the ISR state machine
//
void  IRrecv::resume ( )
{
	irparams.rcvstate = STATE_IDLE;
    6400:	ldr	r3, [pc, #8]	; (640c <IRrecv::resume()+0xc>)
    6402:	movs	r1, #2
	irparams.rawlen = 0;
    6404:	movs	r2, #0
//+=============================================================================
// Restart the ISR state machine
//
void  IRrecv::resume ( )
{
	irparams.rcvstate = STATE_IDLE;
    6406:	strb	r1, [r3, #0]
	irparams.rawlen = 0;
    6408:	strb	r2, [r3, #4]
    640a:	bx	lr
    640c:	.word	0x1fffb8ac

00006410 <IRrecv::decodeHash(decode_results*)>:
//
#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

long  IRrecv::decodeHash (decode_results *results)
{
    6410:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	long  hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if (results->rawlen < 6)  return false ;
    6414:	ldr	r7, [r1, #20]
    6416:	cmp	r7, #5
    6418:	ble.n	649e <IRrecv::decodeHash(decode_results*)+0x8e>
    641a:	ldr	r4, [r1, #16]
    641c:	ldr	r5, [pc, #132]	; (64a4 <IRrecv::decodeHash(decode_results*)+0x94>)

	for (int i = 1;  (i + 2) < results->rawlen;  i++) {
		int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
		// Add value into the hash
		hash = (hash * FNV_PRIME_32) ^ value;
    641e:	ldr.w	r8, [pc, #140]	; 64ac <IRrecv::decodeHash(decode_results*)+0x9c>
    6422:	add.w	r7, r4, r7, lsl #2
    6426:	mov	r9, r1
    6428:	adds	r4, #12
    642a:	b.n	6450 <IRrecv::decodeHash(decode_results*)+0x40>
// Use a tolerance of 20%
//
int  IRrecv::compare (unsigned int oldval,  unsigned int newval)
{
	if      (newval < oldval * .8)  return 0 ;
	else if (oldval < newval * .8)  return 2 ;
    642c:	mov	r0, r6
    642e:	bl	b290 <__aeabi_fmul>
    6432:	mov	r1, r0
    6434:	mov	r0, sl
    6436:	bl	b5cc <__aeabi_fcmplt>
    643a:	adds	r4, #4
	else                            return 1 ;
    643c:	cmp	r0, #0
    643e:	ite	ne
    6440:	movne	r3, #2
    6442:	moveq	r3, #1
	if (results->rawlen < 6)  return false ;

	for (int i = 1;  (i + 2) < results->rawlen;  i++) {
		int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
		// Add value into the hash
		hash = (hash * FNV_PRIME_32) ^ value;
    6444:	mul.w	r5, r8, r5
	long  hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if (results->rawlen < 6)  return false ;

	for (int i = 1;  (i + 2) < results->rawlen;  i++) {
    6448:	cmp	r4, r7
		int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
		// Add value into the hash
		hash = (hash * FNV_PRIME_32) ^ value;
    644a:	eor.w	r5, r5, r3
	long  hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if (results->rawlen < 6)  return false ;

	for (int i = 1;  (i + 2) < results->rawlen;  i++) {
    644e:	beq.n	6488 <IRrecv::decodeHash(decode_results*)+0x78>
		int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    6450:	ldr.w	sl, [r4, #-8]
    6454:	ldr	r0, [r4, #0]
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
//
int  IRrecv::compare (unsigned int oldval,  unsigned int newval)
{
	if      (newval < oldval * .8)  return 0 ;
    6456:	bl	b1e0 <__aeabi_ui2f>
    645a:	mov	r6, r0
    645c:	mov	r0, sl
    645e:	bl	b1e0 <__aeabi_ui2f>
    6462:	ldr	r1, [pc, #68]	; (64a8 <IRrecv::decodeHash(decode_results*)+0x98>)
    6464:	mov	sl, r0
    6466:	bl	b290 <__aeabi_fmul>
    646a:	mov	r1, r0
    646c:	mov	r0, r6
    646e:	bl	b5cc <__aeabi_fcmplt>
	else if (oldval < newval * .8)  return 2 ;
    6472:	ldr	r1, [pc, #52]	; (64a8 <IRrecv::decodeHash(decode_results*)+0x98>)
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
//
int  IRrecv::compare (unsigned int oldval,  unsigned int newval)
{
	if      (newval < oldval * .8)  return 0 ;
    6474:	cmp	r0, #0
    6476:	beq.n	642c <IRrecv::decodeHash(decode_results*)+0x1c>
    6478:	adds	r4, #4
    647a:	movs	r3, #0
	if (results->rawlen < 6)  return false ;

	for (int i = 1;  (i + 2) < results->rawlen;  i++) {
		int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
		// Add value into the hash
		hash = (hash * FNV_PRIME_32) ^ value;
    647c:	mul.w	r5, r8, r5
	long  hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if (results->rawlen < 6)  return false ;

	for (int i = 1;  (i + 2) < results->rawlen;  i++) {
    6480:	cmp	r4, r7
		int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
		// Add value into the hash
		hash = (hash * FNV_PRIME_32) ^ value;
    6482:	eor.w	r5, r5, r3
	long  hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if (results->rawlen < 6)  return false ;

	for (int i = 1;  (i + 2) < results->rawlen;  i++) {
    6486:	bne.n	6450 <IRrecv::decodeHash(decode_results*)+0x40>
		// Add value into the hash
		hash = (hash * FNV_PRIME_32) ^ value;
	}

	results->value       = hash;
	results->bits        = 32;
    6488:	movs	r2, #32
	results->decode_type = UNKNOWN;
    648a:	movs	r3, #255	; 0xff
		int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
		// Add value into the hash
		hash = (hash * FNV_PRIME_32) ^ value;
	}

	results->value       = hash;
    648c:	str.w	r5, [r9, #8]
	results->bits        = 32;
    6490:	str.w	r2, [r9, #12]
	results->decode_type = UNKNOWN;
    6494:	strb.w	r3, [r9]

	return true;
    6498:	movs	r0, #1
    649a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
long  IRrecv::decodeHash (decode_results *results)
{
	long  hash = FNV_BASIS_32;

	// Require at least 6 samples to prevent triggering on noise
	if (results->rawlen < 6)  return false ;
    649e:	movs	r0, #0
	results->value       = hash;
	results->bits        = 32;
	results->decode_type = UNKNOWN;

	return true;
}
    64a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    64a4:	.word	0x811c9dc5
    64a8:	.word	0x3f4ccccd
    64ac:	.word	0x01000193

000064b0 <IRrecv::decode(decode_results*)>:
// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
//
int  IRrecv::decode (decode_results *results)
{
    64b0:	push	{r4, r5, r6, lr}
	results->rawbuf   = irparams.rawbuf;
    64b2:	ldr	r2, [pc, #208]	; (6584 <IRrecv::decode(decode_results*)+0xd4>)
    64b4:	str	r2, [r1, #16]
	results->rawlen   = irparams.rawlen;
    64b6:	sub.w	r5, r2, #12
    64ba:	ldrb	r4, [r5, #4]
    64bc:	str	r4, [r1, #20]

	results->overflow = irparams.overflow;
    64be:	ldrb.w	r4, [r5, #416]	; 0x1a0

	if (irparams.rcvstate != STATE_STOP)  return false ;
    64c2:	ldrb.w	r2, [r2, #-12]
int  IRrecv::decode (decode_results *results)
{
	results->rawbuf   = irparams.rawbuf;
	results->rawlen   = irparams.rawlen;

	results->overflow = irparams.overflow;
    64c6:	str	r4, [r1, #24]

	if (irparams.rcvstate != STATE_STOP)  return false ;
    64c8:	cmp	r2, #5
    64ca:	beq.n	64d0 <IRrecv::decode(decode_results*)+0x20>
    64cc:	movs	r0, #0
	if (decodeHash(results))  return true ;

	// Throw away and start over
	resume();
	return false;
}
    64ce:	pop	{r4, r5, r6, pc}
    64d0:	mov	r6, r0
    64d2:	mov	r4, r1

	if (irparams.rcvstate != STATE_STOP)  return false ;

#if DECODE_NEC
	DBG_PRINTLN("Attempting NEC decode");
	if (decodeNEC(results))  return true ;
    64d4:	bl	6130 <IRrecv::decodeNEC(decode_results*)>
    64d8:	cbz	r0, 64de <IRrecv::decode(decode_results*)+0x2e>
    64da:	movs	r0, #1
    64dc:	pop	{r4, r5, r6, pc}
#endif

#if DECODE_SONY
	DBG_PRINTLN("Attempting Sony decode");
	if (decodeSony(results))  return true ;
    64de:	mov	r1, r4
    64e0:	mov	r0, r6
    64e2:	bl	6940 <IRrecv::decodeSony(decode_results*)>
    64e6:	cmp	r0, #0
    64e8:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_SANYO
	DBG_PRINTLN("Attempting Sanyo decode");
	if (decodeSanyo(results))  return true ;
    64ea:	mov	r1, r4
    64ec:	mov	r0, r6
    64ee:	bl	628c <IRrecv::decodeSanyo(decode_results*)>
    64f2:	cmp	r0, #0
    64f4:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_MITSUBISHI
	DBG_PRINTLN("Attempting Mitsubishi decode");
	if (decodeMitsubishi(results))  return true ;
    64f6:	mov	r1, r4
    64f8:	mov	r0, r6
    64fa:	bl	5da8 <IRrecv::decodeMitsubishi(decode_results*)>
    64fe:	cmp	r0, #0
    6500:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_RC5
	DBG_PRINTLN("Attempting RC5 decode");
	if (decodeRC5(results))  return true ;
    6502:	mov	r1, r4
    6504:	mov	r0, r6
    6506:	bl	5f64 <IRrecv::decodeRC5(decode_results*)>
    650a:	cmp	r0, #0
    650c:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_RC6
	DBG_PRINTLN("Attempting RC6 decode");
	if (decodeRC6(results))  return true ;
    650e:	mov	r1, r4
    6510:	mov	r0, r6
    6512:	bl	6028 <IRrecv::decodeRC6(decode_results*)>
    6516:	cmp	r0, #0
    6518:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_PANASONIC
	DBG_PRINTLN("Attempting Panasonic decode");
	if (decodePanasonic(results))  return true ;
    651a:	mov	r1, r4
    651c:	mov	r0, r6
    651e:	bl	61f4 <IRrecv::decodePanasonic(decode_results*)>
    6522:	cmp	r0, #0
    6524:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_LG
	DBG_PRINTLN("Attempting LG decode");
	if (decodeLG(results))  return true ;
    6526:	mov	r1, r4
    6528:	mov	r0, r6
    652a:	bl	689c <IRrecv::decodeLG(decode_results*)>
    652e:	cmp	r0, #0
    6530:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_JVC
	DBG_PRINTLN("Attempting JVC decode");
	if (decodeJVC(results))  return true ;
    6532:	mov	r1, r4
    6534:	mov	r0, r6
    6536:	bl	5cc4 <IRrecv::decodeJVC(decode_results*)>
    653a:	cmp	r0, #0
    653c:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_SAMSUNG
	DBG_PRINTLN("Attempting SAMSUNG decode");
	if (decodeSAMSUNG(results))  return true ;
    653e:	mov	r1, r4
    6540:	mov	r0, r6
    6542:	bl	6a04 <IRrecv::decodeSAMSUNG(decode_results*)>
    6546:	cmp	r0, #0
    6548:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_WHYNTER
	DBG_PRINTLN("Attempting Whynter decode");
	if (decodeWhynter(results))  return true ;
    654a:	mov	r1, r4
    654c:	mov	r0, r6
    654e:	bl	6588 <IRrecv::decodeWhynter(decode_results*)>
    6552:	cmp	r0, #0
    6554:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_AIWA_RC_T501
	DBG_PRINTLN("Attempting Aiwa RC-T501 decode");
	if (decodeAiwaRCT501(results))  return true ;
    6556:	mov	r1, r4
    6558:	mov	r0, r6
    655a:	bl	5c0c <IRrecv::decodeAiwaRCT501(decode_results*)>
    655e:	cmp	r0, #0
    6560:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

#if DECODE_DENON
	DBG_PRINTLN("Attempting Denon decode");
	if (decodeDenon(results))  return true ;
    6562:	mov	r1, r4
    6564:	mov	r0, r6
    6566:	bl	5e50 <IRrecv::decodeDenon(decode_results*)>
    656a:	cmp	r0, #0
    656c:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
#endif

	// decodeHash returns a hash on any input.
	// Thus, it needs to be last in the list.
	// If you add any decodes, add them before this.
	if (decodeHash(results))  return true ;
    656e:	mov	r1, r4
    6570:	mov	r0, r6
    6572:	bl	6410 <IRrecv::decodeHash(decode_results*)>
    6576:	cmp	r0, #0
    6578:	bne.n	64da <IRrecv::decode(decode_results*)+0x2a>
//+=============================================================================
// Restart the ISR state machine
//
void  IRrecv::resume ( )
{
	irparams.rcvstate = STATE_IDLE;
    657a:	movs	r2, #2
    657c:	strb	r2, [r5, #0]
	irparams.rawlen = 0;
    657e:	strb	r0, [r5, #4]
	// If you add any decodes, add them before this.
	if (decodeHash(results))  return true ;

	// Throw away and start over
	resume();
	return false;
    6580:	pop	{r4, r5, r6, pc}
    6582:	nop
    6584:	.word	0x1fffb8b8

00006588 <IRrecv::decodeWhynter(decode_results*)>:
#endif

//+=============================================================================
#if DECODE_WHYNTER
bool  IRrecv::decodeWhynter (decode_results *results)
{
    6588:	push	{r3, r4, r5, r6, r7, lr}
	long  data   = 0;
	int   offset = 1;  // skip initial space

	// Check we have the right amount of data
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)  return false ;
    658a:	ldr	r3, [pc, #188]	; (6648 <IRrecv::decodeWhynter(decode_results*)+0xc0>)
    658c:	ldrb	r3, [r3, #4]
    658e:	cmp	r3, #69	; 0x45
    6590:	bhi.n	6596 <IRrecv::decodeWhynter(decode_results*)+0xe>
    6592:	movs	r0, #0
    6594:	pop	{r3, r4, r5, r6, r7, pc}

	// Sequence begins with a bit mark and a zero space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_BIT_MARK  ))  return false ;
    6596:	ldr	r3, [r1, #16]
    6598:	mov	r4, r1
    659a:	ldr	r0, [r3, #4]
    659c:	movw	r1, #750	; 0x2ee
    65a0:	bl	66a0 <MATCH_MARK(int, int)>
    65a4:	cmp	r0, #0
    65a6:	beq.n	6592 <IRrecv::decodeWhynter(decode_results*)+0xa>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_ZERO_SPACE))  return false ;
    65a8:	ldr	r3, [r4, #16]
    65aa:	movw	r1, #750	; 0x2ee
    65ae:	ldr	r0, [r3, #8]
    65b0:	bl	66f4 <MATCH_SPACE(int, int)>
    65b4:	cmp	r0, #0
    65b6:	beq.n	6592 <IRrecv::decodeWhynter(decode_results*)+0xa>

	// header mark and space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
    65b8:	ldr	r3, [r4, #16]
    65ba:	movw	r1, #2850	; 0xb22
    65be:	ldr	r0, [r3, #12]
    65c0:	bl	66a0 <MATCH_MARK(int, int)>
    65c4:	cmp	r0, #0
    65c6:	beq.n	6592 <IRrecv::decodeWhynter(decode_results*)+0xa>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;
    65c8:	ldr	r3, [r4, #16]
    65ca:	movw	r1, #2850	; 0xb22
    65ce:	ldr	r0, [r3, #16]
    65d0:	bl	66f4 <MATCH_SPACE(int, int)>
    65d4:	cmp	r0, #0
    65d6:	beq.n	6592 <IRrecv::decodeWhynter(decode_results*)+0xa>
    65d8:	movs	r6, #24
    65da:	movs	r5, #5
    65dc:	movs	r7, #0
    65de:	b.n	65ee <IRrecv::decodeWhynter(decode_results*)+0x66>

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))  return false ;

		if      (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE ))  data = (data << 1) | 1 ;
    65e0:	orr.w	r7, r3, #1
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))  data = (data << 1) | 0 ;
		else                                                                return false ;
		offset++;
    65e4:	adds	r5, #2
	// header mark and space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
    65e6:	cmp	r5, #69	; 0x45
    65e8:	add.w	r6, r6, #8
    65ec:	beq.n	6626 <IRrecv::decodeWhynter(decode_results*)+0x9e>
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))  return false ;
    65ee:	ldr	r3, [r4, #16]
    65f0:	movw	r1, #750	; 0x2ee
    65f4:	ldr.w	r0, [r3, r5, lsl #2]
    65f8:	bl	66a0 <MATCH_MARK(int, int)>

		if      (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE ))  data = (data << 1) | 1 ;
    65fc:	movw	r1, #2150	; 0x866
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))  return false ;
    6600:	cmp	r0, #0
    6602:	beq.n	6592 <IRrecv::decodeWhynter(decode_results*)+0xa>

		if      (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE ))  data = (data << 1) | 1 ;
    6604:	ldr	r3, [r4, #16]
    6606:	ldr	r0, [r3, r6]
    6608:	bl	66f4 <MATCH_SPACE(int, int)>
    660c:	lsls	r3, r7, #1
    660e:	cmp	r0, #0
    6610:	bne.n	65e0 <IRrecv::decodeWhynter(decode_results*)+0x58>
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))  data = (data << 1) | 0 ;
    6612:	ldr	r3, [r4, #16]
    6614:	movw	r1, #750	; 0x2ee
    6618:	ldr	r0, [r3, r6]
    661a:	bl	66f4 <MATCH_SPACE(int, int)>
    661e:	cmp	r0, #0
    6620:	beq.n	6592 <IRrecv::decodeWhynter(decode_results*)+0xa>
    6622:	lsls	r7, r7, #1
    6624:	b.n	65e4 <IRrecv::decodeWhynter(decode_results*)+0x5c>
		else                                                                return false ;
		offset++;
	}

	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))  return false ;
    6626:	ldr	r3, [r4, #16]
    6628:	movw	r1, #750	; 0x2ee
    662c:	ldr.w	r0, [r3, #276]	; 0x114
    6630:	bl	66a0 <MATCH_MARK(int, int)>
    6634:	cmp	r0, #0
    6636:	beq.n	6592 <IRrecv::decodeWhynter(decode_results*)+0xa>

	// Success
	results->bits = WHYNTER_BITS;
    6638:	movs	r2, #32
	results->value = data;
	results->decode_type = WHYNTER;
    663a:	movs	r3, #8
	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))  return false ;

	// Success
	results->bits = WHYNTER_BITS;
	results->value = data;
    663c:	str	r7, [r4, #8]

	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))  return false ;

	// Success
	results->bits = WHYNTER_BITS;
    663e:	str	r2, [r4, #12]
	results->value = data;
	results->decode_type = WHYNTER;
    6640:	strb	r3, [r4, #0]
	return true;
    6642:	movs	r0, #1
}
    6644:	pop	{r3, r4, r5, r6, r7, pc}
    6646:	nop
    6648:	.word	0x1fffb8ac

0000664c <MATCH(int, int)>:
// I may revisit this code at a later date and look at the assembler produced
//   in a hope of finding out what is going on, but for now they will remain as
//   functions even in non-DEBUG mode
//
int  MATCH (int measured,  int desired)
{
    664c:	push	{r3, r4, r5, lr}
    664e:	mov	r4, r0
 	DBG_PRINT(F(" <= "));
 	DBG_PRINT(measured, DEC);
 	DBG_PRINT(F(" <= "));
 	DBG_PRINT(TICKS_HIGH(desired), DEC);

  bool passed = ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
    6650:	mov	r0, r1
    6652:	bl	b1e8 <__aeabi_i2f>
    6656:	mov.w	r1, #1061158912	; 0x3f400000
    665a:	mov	r5, r0
    665c:	bl	b290 <__aeabi_fmul>
    6660:	ldr	r1, [pc, #52]	; (6698 <MATCH(int, int)+0x4c>)
    6662:	bl	b3f8 <__aeabi_fdiv>
    6666:	bl	b61c <__aeabi_f2iz>
    666a:	cmp	r0, r4
    666c:	bgt.n	6692 <MATCH(int, int)+0x46>
    666e:	mov	r0, r5
    6670:	ldr	r1, [pc, #40]	; (669c <MATCH(int, int)+0x50>)
    6672:	bl	b290 <__aeabi_fmul>
    6676:	ldr	r1, [pc, #32]	; (6698 <MATCH(int, int)+0x4c>)
    6678:	bl	b3f8 <__aeabi_fdiv>
    667c:	mov.w	r1, #1065353216	; 0x3f800000
    6680:	bl	b080 <__addsf3>
    6684:	bl	b61c <__aeabi_f2iz>
    6688:	cmp	r4, r0
    668a:	ite	gt
    668c:	movgt	r0, #0
    668e:	movle	r0, #1
    6690:	pop	{r3, r4, r5, pc}
    6692:	movs	r0, #0
  if (passed)
    DBG_PRINTLN(F("?; passed"));
  else
    DBG_PRINTLN(F("?; FAILED")); 
 	return passed;
}
    6694:	pop	{r3, r4, r5, pc}
    6696:	nop
    6698:	.word	0x42480000
    669c:	.word	0x3fa00000

000066a0 <MATCH_MARK(int, int)>:

//+========================================================
// Due to sensor lag, when received, Marks tend to be 100us too long
//
int  MATCH_MARK (int measured_ticks,  int desired_us)
{
    66a0:	push	{r3, r4, r5, lr}
    66a2:	mov	r4, r0
	DBG_PRINT(F(" <= "));
	DBG_PRINT(measured_ticks * USECPERTICK, DEC);
	DBG_PRINT(F(" <= "));
	DBG_PRINT(TICKS_HIGH(desired_us + MARK_EXCESS) * USECPERTICK, DEC);

  bool passed = ((measured_ticks >= TICKS_LOW (desired_us + MARK_EXCESS))
    66a4:	add.w	r0, r1, #100	; 0x64
    66a8:	bl	b1e8 <__aeabi_i2f>
                && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
    66ac:	mov.w	r1, #1061158912	; 0x3f400000
	DBG_PRINT(F(" <= "));
	DBG_PRINT(measured_ticks * USECPERTICK, DEC);
	DBG_PRINT(F(" <= "));
	DBG_PRINT(TICKS_HIGH(desired_us + MARK_EXCESS) * USECPERTICK, DEC);

  bool passed = ((measured_ticks >= TICKS_LOW (desired_us + MARK_EXCESS))
    66b0:	mov	r5, r0
                && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
    66b2:	bl	b290 <__aeabi_fmul>
    66b6:	ldr	r1, [pc, #52]	; (66ec <MATCH_MARK(int, int)+0x4c>)
    66b8:	bl	b3f8 <__aeabi_fdiv>
    66bc:	bl	b61c <__aeabi_f2iz>
    66c0:	cmp	r0, r4
    66c2:	bgt.n	66e8 <MATCH_MARK(int, int)+0x48>
    66c4:	mov	r0, r5
    66c6:	ldr	r1, [pc, #40]	; (66f0 <MATCH_MARK(int, int)+0x50>)
    66c8:	bl	b290 <__aeabi_fmul>
    66cc:	ldr	r1, [pc, #28]	; (66ec <MATCH_MARK(int, int)+0x4c>)
    66ce:	bl	b3f8 <__aeabi_fdiv>
    66d2:	mov.w	r1, #1065353216	; 0x3f800000
    66d6:	bl	b080 <__addsf3>
    66da:	bl	b61c <__aeabi_f2iz>
    66de:	cmp	r4, r0
    66e0:	ite	gt
    66e2:	movgt	r0, #0
    66e4:	movle	r0, #1
    66e6:	pop	{r3, r4, r5, pc}
    66e8:	movs	r0, #0
  if (passed)
    DBG_PRINTLN(F("?; passed"));
  else
    DBG_PRINTLN(F("?; FAILED")); 
 	return passed;
}
    66ea:	pop	{r3, r4, r5, pc}
    66ec:	.word	0x42480000
    66f0:	.word	0x3fa00000

000066f4 <MATCH_SPACE(int, int)>:

//+========================================================
// Due to sensor lag, when received, Spaces tend to be 100us too short
//
int  MATCH_SPACE (int measured_ticks,  int desired_us)
{
    66f4:	push	{r3, r4, r5, lr}
    66f6:	mov	r4, r0
	DBG_PRINT(F(" <= "));
	DBG_PRINT(measured_ticks * USECPERTICK, DEC);
	DBG_PRINT(F(" <= "));
	DBG_PRINT(TICKS_HIGH(desired_us - MARK_EXCESS) * USECPERTICK, DEC);

  bool passed = ((measured_ticks >= TICKS_LOW (desired_us - MARK_EXCESS))
    66f8:	sub.w	r0, r1, #100	; 0x64
    66fc:	bl	b1e8 <__aeabi_i2f>
                && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
    6700:	mov.w	r1, #1061158912	; 0x3f400000
	DBG_PRINT(F(" <= "));
	DBG_PRINT(measured_ticks * USECPERTICK, DEC);
	DBG_PRINT(F(" <= "));
	DBG_PRINT(TICKS_HIGH(desired_us - MARK_EXCESS) * USECPERTICK, DEC);

  bool passed = ((measured_ticks >= TICKS_LOW (desired_us - MARK_EXCESS))
    6704:	mov	r5, r0
                && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
    6706:	bl	b290 <__aeabi_fmul>
    670a:	ldr	r1, [pc, #52]	; (6740 <MATCH_SPACE(int, int)+0x4c>)
    670c:	bl	b3f8 <__aeabi_fdiv>
    6710:	bl	b61c <__aeabi_f2iz>
    6714:	cmp	r0, r4
    6716:	bgt.n	673c <MATCH_SPACE(int, int)+0x48>
    6718:	mov	r0, r5
    671a:	ldr	r1, [pc, #40]	; (6744 <MATCH_SPACE(int, int)+0x50>)
    671c:	bl	b290 <__aeabi_fmul>
    6720:	ldr	r1, [pc, #28]	; (6740 <MATCH_SPACE(int, int)+0x4c>)
    6722:	bl	b3f8 <__aeabi_fdiv>
    6726:	mov.w	r1, #1065353216	; 0x3f800000
    672a:	bl	b080 <__addsf3>
    672e:	bl	b61c <__aeabi_f2iz>
    6732:	cmp	r4, r0
    6734:	ite	gt
    6736:	movgt	r0, #0
    6738:	movle	r0, #1
    673a:	pop	{r3, r4, r5, pc}
    673c:	movs	r0, #0
  if (passed)
    DBG_PRINTLN(F("?; passed"));
  else
    DBG_PRINTLN(F("?; FAILED")); 
 	return passed;
}
    673e:	pop	{r3, r4, r5, pc}
    6740:	.word	0x42480000
    6744:	.word	0x3fa00000

00006748 <cmt_isr>:
#ifdef IR_TIMER_USE_ESP32
void IRTimer()
#else
ISR (TIMER_INTR_NAME)
#endif
{
    6748:	push	{r4, lr}
	TIMER_RESET;
    674a:	ldr	r2, [pc, #308]	; (6880 <cmt_isr+0x138>)
    674c:	ldr	r3, [pc, #308]	; (6884 <cmt_isr+0x13c>)

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	// digitalRead() is very slow. Optimisation is possible, but makes the code unportable
	uint8_t  irdata = (uint8_t)digitalRead(irparams.recvpin);
    674e:	ldr	r4, [pc, #312]	; (6888 <cmt_isr+0x140>)
void IRTimer()
#else
ISR (TIMER_INTR_NAME)
#endif
{
	TIMER_RESET;
    6750:	ldrb	r2, [r2, #0]
    6752:	movs	r2, #30
    6754:	strb	r2, [r3, #0]

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	// digitalRead() is very slow. Optimisation is possible, but makes the code unportable
	uint8_t  irdata = (uint8_t)digitalRead(irparams.recvpin);
    6756:	ldrb	r0, [r4, #1]
    6758:	bl	93e8 <digitalRead>

	irparams.timer++;  // One more 50uS tick
    675c:	ldr	r3, [r4, #8]
    675e:	adds	r3, #1
    6760:	str	r3, [r4, #8]
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
    6762:	ldrb	r3, [r4, #4]
    6764:	cmp	r3, #100	; 0x64
    6766:	itt	hi
    6768:	movhi	r3, #6
    676a:	strbhi	r3, [r4, #0]

	switch(irparams.rcvstate) {
    676c:	ldrb	r3, [r4, #0]
    676e:	subs	r3, #2
    6770:	cmp	r3, #4
    6772:	bhi.n	6788 <cmt_isr+0x40>
    6774:	tbb	[pc, r3]
    6778:	.word	0x5b1c4740
    677c:	.byte	0x03
    677d:	.byte	0x00
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
    677e:	movs	r2, #1
			irparams.rcvstate = STATE_STOP;
    6780:	movs	r3, #5
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
    6782:	strb.w	r2, [r4, #416]	; 0x1a0
			irparams.rcvstate = STATE_STOP;
    6786:	strb	r3, [r4, #0]
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
    6788:	ldrb	r3, [r4, #3]
    678a:	cbz	r3, 67d4 <cmt_isr+0x8c>
		if (irdata == MARK)
    678c:	cbnz	r0, 67d6 <cmt_isr+0x8e>
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    678e:	ldrb	r3, [r4, #2]
    6790:	ldr	r2, [pc, #244]	; (6888 <cmt_isr+0x140>)
    6792:	cmp	r3, #0
    6794:	bne.n	6850 <cmt_isr+0x108>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    6796:	ldr	r2, [pc, #244]	; (688c <cmt_isr+0x144>)
			digitalWriteFast(12, HIGH);
			if (!(CORE_PIN12_DDRREG & CORE_PIN12_BIT)) CORE_PIN12_CONFIG = CONFIG_PULLUP;
		}
		if (val & (1<<5)) {
			digitalWriteFast(13, HIGH);
			if (!(CORE_PIN13_DDRREG & CORE_PIN13_BIT)) CORE_PIN13_CONFIG = CONFIG_PULLUP;
    6798:	ldr	r3, [pc, #244]	; (6890 <cmt_isr+0x148>)
    679a:	movs	r1, #32
    679c:	str	r1, [r2, #0]
    679e:	ldr	r3, [r3, #0]
    67a0:	tst.w	r3, #5
    67a4:	bne.n	67d4 <cmt_isr+0x8c>
    67a6:	ldr	r3, [pc, #236]	; (6894 <cmt_isr+0x14c>)
    67a8:	movw	r2, #259	; 0x103
    67ac:	str	r2, [r3, #0]
    67ae:	pop	{r4, pc}
				irparams.rcvstate                  = STATE_SPACE;
			}
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
    67b0:	cmp	r0, #0
    67b2:	bne.n	6836 <cmt_isr+0xee>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    67b4:	ldrb	r3, [r4, #4]
    67b6:	uxtb	r3, r3
    67b8:	adds	r2, r3, #1
    67ba:	uxtb	r2, r2
    67bc:	adds	r3, #2
    67be:	strb	r2, [r4, #4]
    67c0:	add.w	r3, r4, r3, lsl #2
    67c4:	ldr	r2, [r4, #8]
    67c6:	str	r2, [r3, #4]
				irparams.timer                     = 0;
				irparams.rcvstate                  = STATE_MARK;
    67c8:	movs	r3, #3
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
				irparams.timer                     = 0;
    67ca:	str	r0, [r4, #8]
				irparams.rcvstate                  = STATE_MARK;
    67cc:	strb	r3, [r4, #0]
			irparams.rcvstate = STATE_STOP;
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
    67ce:	ldrb	r3, [r4, #3]
    67d0:	cmp	r3, #0
    67d2:	bne.n	678e <cmt_isr+0x46>
    67d4:	pop	{r4, pc}
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    67d6:	ldrb	r3, [r4, #2]
    67d8:	ldr	r2, [pc, #172]	; (6888 <cmt_isr+0x140>)
    67da:	cmp	r3, #0
    67dc:	bne.n	6844 <cmt_isr+0xfc>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    67de:	ldr	r2, [pc, #184]	; (6898 <cmt_isr+0x150>)
			digitalWriteFast(12, LOW);
			if (!(CORE_PIN12_DDRREG & CORE_PIN12_BIT)) CORE_PIN12_CONFIG = CONFIG_NOPULLUP;
		}
		if (!(val & (1<<5))) {
			digitalWriteFast(13, LOW);
			if (!(CORE_PIN13_DDRREG & CORE_PIN13_BIT)) CORE_PIN13_CONFIG = CONFIG_NOPULLUP;
    67e0:	ldr	r3, [pc, #172]	; (6890 <cmt_isr+0x148>)
    67e2:	movs	r1, #32
    67e4:	str	r1, [r2, #0]
    67e6:	ldr	r3, [r3, #0]
    67e8:	tst.w	r3, #5
    67ec:	bne.n	67d4 <cmt_isr+0x8c>
    67ee:	ldr	r3, [pc, #164]	; (6894 <cmt_isr+0x14c>)
    67f0:	mov.w	r2, #256	; 0x100
    67f4:	str	r2, [r3, #0]
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
	}
}
    67f6:	pop	{r4, pc}
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow

	switch(irparams.rcvstate) {
		//......................................................................
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
    67f8:	cbnz	r0, 6826 <cmt_isr+0xde>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
    67fa:	ldr	r2, [r4, #8]
    67fc:	ldr	r3, [pc, #136]	; (6888 <cmt_isr+0x140>)
    67fe:	cmp	r2, #99	; 0x63
    6800:	bhi.n	685c <cmt_isr+0x114>
					irparams.timer = 0;
    6802:	str	r0, [r3, #8]
    6804:	b.n	67ce <cmt_isr+0x86>
				}
			}
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
    6806:	cmp	r0, #1
    6808:	bne.n	6788 <cmt_isr+0x40>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    680a:	ldrb	r3, [r4, #4]
    680c:	uxtb	r3, r3
    680e:	adds	r2, r3, #1
    6810:	uxtb	r2, r2
    6812:	adds	r3, #2
    6814:	strb	r2, [r4, #4]
    6816:	add.w	r3, r4, r3, lsl #2
    681a:	ldr	r2, [r4, #8]
    681c:	str	r2, [r3, #4]
				irparams.timer                     = 0;
    681e:	movs	r2, #0
				irparams.rcvstate                  = STATE_SPACE;
    6820:	movs	r3, #4
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
				irparams.timer                     = 0;
    6822:	str	r2, [r4, #8]
				irparams.rcvstate                  = STATE_SPACE;
    6824:	strb	r3, [r4, #0]
			irparams.rcvstate = STATE_STOP;
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
    6826:	ldrb	r3, [r4, #3]
    6828:	cmp	r3, #0
    682a:	bne.n	67d6 <cmt_isr+0x8e>
    682c:	pop	{r4, pc}
					irparams.rcvstate = STATE_STOP;
			}
			break;
		//......................................................................
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
    682e:	cmp	r0, #0
    6830:	bne.n	6826 <cmt_isr+0xde>
    6832:	str	r0, [r4, #8]
    6834:	b.n	67ce <cmt_isr+0x86>
			if (irdata == MARK) {  // Space just ended; Record time
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
				irparams.timer                     = 0;
				irparams.rcvstate                  = STATE_MARK;

			} else if (irparams.timer > GAP_TICKS) {  // Space
    6836:	ldr	r3, [r4, #8]
    6838:	ldr	r2, [pc, #76]	; (6888 <cmt_isr+0x140>)
    683a:	cmp	r3, #100	; 0x64
    683c:	bls.n	6826 <cmt_isr+0xde>
					// A long Space, indicates gap between codes
					// Flag the current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting Space width
					irparams.rcvstate = STATE_STOP;
    683e:	movs	r3, #5
    6840:	strb	r3, [r2, #0]
    6842:	b.n	6826 <cmt_isr+0xde>
	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    6844:	ldrb	r0, [r2, #2]
    6846:	movs	r1, #0
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
	}
}
    6848:	ldmia.w	sp!, {r4, lr}
	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    684c:	b.w	93dc <digitalWrite>
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    6850:	ldrb	r0, [r2, #2]
    6852:	movs	r1, #1
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
	}
}
    6854:	ldmia.w	sp!, {r4, lr}
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    6858:	b.w	93dc <digitalWrite>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
					irparams.timer = 0;

				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
    685c:	strb.w	r0, [r3, #416]	; 0x1a0
					irparams.rawlen                    = 0;
    6860:	strb	r0, [r3, #4]
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    6862:	ldrb	r2, [r3, #4]
    6864:	uxtb	r2, r2
    6866:	adds	r1, r2, #1
    6868:	uxtb	r1, r1
    686a:	adds	r2, #2
    686c:	strb	r1, [r3, #4]
    686e:	add.w	r2, r3, r2, lsl #2
    6872:	ldr	r1, [r3, #8]
    6874:	str	r1, [r2, #4]
					irparams.timer                     = 0;
					irparams.rcvstate                  = STATE_MARK;
    6876:	movs	r2, #3
				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
					irparams.rawlen                    = 0;
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
					irparams.timer                     = 0;
    6878:	str	r0, [r3, #8]
					irparams.rcvstate                  = STATE_MARK;
    687a:	strb	r2, [r3, #0]
    687c:	b.n	67ce <cmt_isr+0x86>
    687e:	nop
    6880:	.word	0x40062005
    6884:	.word	0x40062007
    6888:	.word	0x1fffb8ac
    688c:	.word	0x400ff084
    6890:	.word	0x400ff094
    6894:	.word	0x4004b014
    6898:	.word	0x400ff088

0000689c <IRrecv::decodeLG(decode_results*)>:
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
bool  IRrecv::decodeLG (decode_results *results)
{
    689c:	push	{r3, r4, r5, r6, r7, lr}
    long  data   = 0;
    int   offset = 1; // Skip first space

	// Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1 )  return false ;
    689e:	ldr	r3, [pc, #156]	; (693c <IRrecv::decodeLG(decode_results*)+0xa0>)
    68a0:	ldrb	r3, [r3, #4]
    68a2:	cmp	r3, #56	; 0x38
    68a4:	bhi.n	68aa <IRrecv::decodeLG(decode_results*)+0xe>
    68a6:	movs	r0, #0
    68a8:	pop	{r3, r4, r5, r6, r7, pc}

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
    68aa:	ldr	r3, [r1, #16]
    68ac:	mov	r4, r1
    68ae:	ldr	r0, [r3, #4]
    68b0:	mov.w	r1, #8000	; 0x1f40
    68b4:	bl	66a0 <MATCH_MARK(int, int)>
    68b8:	cmp	r0, #0
    68ba:	beq.n	68a6 <IRrecv::decodeLG(decode_results*)+0xa>
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;
    68bc:	ldr	r3, [r4, #16]
    68be:	mov.w	r1, #4000	; 0xfa0
    68c2:	ldr	r0, [r3, #8]
    68c4:	bl	66f4 <MATCH_SPACE(int, int)>
    68c8:	cmp	r0, #0
    68ca:	beq.n	68a6 <IRrecv::decodeLG(decode_results*)+0xa>
    68cc:	movs	r6, #16
    68ce:	movs	r5, #3
    68d0:	movs	r7, #0
    68d2:	b.n	68e2 <IRrecv::decodeLG(decode_results*)+0x46>

    for (int i = 0;  i < LG_BITS;  i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
    68d4:	orr.w	r7, r3, #1
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
        else                                                           return false ;
        offset++;
    68d8:	adds	r5, #2

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;

    for (int i = 0;  i < LG_BITS;  i++) {
    68da:	cmp	r5, #59	; 0x3b
    68dc:	add.w	r6, r6, #8
    68e0:	beq.n	691a <IRrecv::decodeLG(decode_results*)+0x7e>
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;
    68e2:	ldr	r3, [r4, #16]
    68e4:	mov.w	r1, #600	; 0x258
    68e8:	ldr.w	r0, [r3, r5, lsl #2]
    68ec:	bl	66a0 <MATCH_MARK(int, int)>

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
    68f0:	mov.w	r1, #1600	; 0x640
    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;

    for (int i = 0;  i < LG_BITS;  i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;
    68f4:	cmp	r0, #0
    68f6:	beq.n	68a6 <IRrecv::decodeLG(decode_results*)+0xa>

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
    68f8:	ldr	r3, [r4, #16]
    68fa:	ldr	r0, [r3, r6]
    68fc:	bl	66f4 <MATCH_SPACE(int, int)>
    6900:	lsls	r3, r7, #1
    6902:	cmp	r0, #0
    6904:	bne.n	68d4 <IRrecv::decodeLG(decode_results*)+0x38>
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
    6906:	ldr	r3, [r4, #16]
    6908:	movw	r1, #550	; 0x226
    690c:	ldr	r0, [r3, r6]
    690e:	bl	66f4 <MATCH_SPACE(int, int)>
    6912:	cmp	r0, #0
    6914:	beq.n	68a6 <IRrecv::decodeLG(decode_results*)+0xa>
    6916:	lsls	r7, r7, #1
    6918:	b.n	68d8 <IRrecv::decodeLG(decode_results*)+0x3c>
        else                                                           return false ;
        offset++;
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;
    691a:	ldr	r3, [r4, #16]
    691c:	mov.w	r1, #600	; 0x258
    6920:	ldr.w	r0, [r3, #236]	; 0xec
    6924:	bl	66a0 <MATCH_MARK(int, int)>
    6928:	cmp	r0, #0
    692a:	beq.n	68a6 <IRrecv::decodeLG(decode_results*)+0xa>

    // Success
    results->bits        = LG_BITS;
    692c:	movs	r2, #28
    results->value       = data;
    results->decode_type = LG;
    692e:	movs	r3, #10
    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;

    // Success
    results->bits        = LG_BITS;
    results->value       = data;
    6930:	str	r7, [r4, #8]

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;

    // Success
    results->bits        = LG_BITS;
    6932:	str	r2, [r4, #12]
    results->value       = data;
    results->decode_type = LG;
    6934:	strb	r3, [r4, #0]
    return true;
    6936:	movs	r0, #1
}
    6938:	pop	{r3, r4, r5, r6, r7, pc}
    693a:	nop
    693c:	.word	0x1fffb8ac

00006940 <IRrecv::decodeSony(decode_results*)>:
#endif

//+=============================================================================
#if DECODE_SONY
bool  IRrecv::decodeSony (decode_results *results)
{
    6940:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	long  data   = 0;
	int   offset = 0;  // Dont skip first space, check its size

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
    6944:	ldr.w	r8, [pc, #184]	; 6a00 <IRrecv::decodeSony(decode_results*)+0xc0>
    6948:	ldrb.w	r3, [r8, #4]
    694c:	cmp	r3, #25
    694e:	bls.n	697c <IRrecv::decodeSony(decode_results*)+0x3c>

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
    6950:	ldr	r3, [r1, #16]
    6952:	ldr	r2, [r3, #0]
    6954:	cmp.w	r2, #500	; 0x1f4
    6958:	bcs.n	696e <IRrecv::decodeSony(decode_results*)+0x2e>
		// Serial.print("IR Gap found: ");
		results->bits = 0;
    695a:	movs	r0, #0
		results->value = REPEAT;
    695c:	mov.w	r2, #4294967295

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
    6960:	movs	r3, #11

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
		// Serial.print("IR Gap found: ");
		results->bits = 0;
    6962:	str	r0, [r1, #12]
		results->value = REPEAT;
    6964:	str	r2, [r1, #8]

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
    6966:	strb	r3, [r1, #0]
#	else
		results->decode_type = UNKNOWN;
#	endif

	    return true;
    6968:	movs	r0, #1
    696a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    696e:	mov	r5, r1
	}
	offset++;

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;
    6970:	ldr	r0, [r3, #4]
    6972:	mov.w	r1, #2400	; 0x960
    6976:	bl	66a0 <MATCH_MARK(int, int)>
    697a:	cbnz	r0, 6982 <IRrecv::decodeSony(decode_results*)+0x42>
bool  IRrecv::decodeSony (decode_results *results)
{
	long  data   = 0;
	int   offset = 0;  // Dont skip first space, check its size

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
    697c:	movs	r0, #0
    697e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	offset++;

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;

	while (offset + 1 < irparams.rawlen) {
    6982:	ldrb.w	r3, [r8, #4]
    6986:	cmp	r3, #3
    6988:	ble.n	69f6 <IRrecv::decodeSony(decode_results*)+0xb6>
    698a:	movs	r4, #3
    698c:	movs	r6, #2
    698e:	movs	r7, #0
    6990:	b.n	69a4 <IRrecv::decodeSony(decode_results*)+0x64>
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
    6992:	orr.w	r7, r3, #1
	offset++;

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;

	while (offset + 1 < irparams.rawlen) {
    6996:	ldrb.w	r3, [r8, #4]
    699a:	adds	r4, #2
    699c:	cmp	r4, r3
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
		else                                                           return false ;
		offset++;
    699e:	add.w	r6, r6, #2
	offset++;

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;

	while (offset + 1 < irparams.rawlen) {
    69a2:	bge.n	69de <IRrecv::decodeSony(decode_results*)+0x9e>
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
    69a4:	ldr	r3, [r5, #16]
    69a6:	mov.w	r1, #600	; 0x258
    69aa:	ldr.w	r0, [r3, r6, lsl #2]
    69ae:	bl	66f4 <MATCH_SPACE(int, int)>

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
    69b2:	mov.w	r1, #1200	; 0x4b0

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
    69b6:	cbz	r0, 69e0 <IRrecv::decodeSony(decode_results*)+0xa0>

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
    69b8:	ldr	r3, [r5, #16]
    69ba:	ldr.w	r0, [r3, r4, lsl #2]
    69be:	bl	66a0 <MATCH_MARK(int, int)>
    69c2:	lsls	r3, r7, #1
    69c4:	cmp	r0, #0
    69c6:	bne.n	6992 <IRrecv::decodeSony(decode_results*)+0x52>
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
    69c8:	ldr	r3, [r5, #16]
    69ca:	mov.w	r1, #600	; 0x258
    69ce:	ldr.w	r0, [r3, r4, lsl #2]
    69d2:	bl	66a0 <MATCH_MARK(int, int)>
    69d6:	cmp	r0, #0
    69d8:	beq.n	697c <IRrecv::decodeSony(decode_results*)+0x3c>
    69da:	lsls	r7, r7, #1
    69dc:	b.n	6996 <IRrecv::decodeSony(decode_results*)+0x56>
		else                                                           return false ;
		offset++;
    69de:	mov	r4, r6
	}

	// Success
	results->bits = (offset - 1) / 2;
    69e0:	subs	r4, #1
    69e2:	asrs	r4, r4, #1
	if (results->bits < 12) {
    69e4:	cmp	r4, #11
		else                                                           return false ;
		offset++;
	}

	// Success
	results->bits = (offset - 1) / 2;
    69e6:	str	r4, [r5, #12]
	if (results->bits < 12) {
    69e8:	ble.n	69f6 <IRrecv::decodeSony(decode_results*)+0xb6>
		results->bits = 0;
		return false;
	}
	results->value       = data;
	results->decode_type = SONY;
    69ea:	movs	r3, #4
	results->bits = (offset - 1) / 2;
	if (results->bits < 12) {
		results->bits = 0;
		return false;
	}
	results->value       = data;
    69ec:	str	r7, [r5, #8]
	results->decode_type = SONY;
    69ee:	strb	r3, [r5, #0]
	return true;
    69f0:	movs	r0, #1
}
    69f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	// Success
	results->bits = (offset - 1) / 2;
	if (results->bits < 12) {
		results->bits = 0;
    69f6:	movs	r0, #0
    69f8:	str	r0, [r5, #12]
		return false;
    69fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69fe:	nop
    6a00:	.word	0x1fffb8ac

00006a04 <IRrecv::decodeSAMSUNG(decode_results*)>:
//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
bool  IRrecv::decodeSAMSUNG (decode_results *results)
{
    6a04:	push	{r3, r4, r5, r6, r7, lr}
    6a06:	mov	r5, r1
	long  data   = 0;
	int   offset = 1;  // Skip first space

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
    6a08:	movw	r1, #5000	; 0x1388
    6a0c:	ldr	r3, [r5, #16]
    6a0e:	ldr	r0, [r3, #4]
    6a10:	bl	66a0 <MATCH_MARK(int, int)>
    6a14:	cbz	r0, 6a24 <IRrecv::decodeSAMSUNG(decode_results*)+0x20>
	offset++;

	// Check for repeat
	if (    (irparams.rawlen == 4)
    6a16:	ldr	r4, [pc, #172]	; (6ac4 <IRrecv::decodeSAMSUNG(decode_results*)+0xc0>)
    6a18:	ldrb	r3, [r4, #4]
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
    6a1a:	cmp	r3, #4
    6a1c:	beq.n	6a82 <IRrecv::decodeSAMSUNG(decode_results*)+0x7e>
		results->bits        = 0;
		results->value       = REPEAT;
		results->decode_type = SAMSUNG;
		return true;
	}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;
    6a1e:	ldrb	r3, [r4, #4]
    6a20:	cmp	r3, #67	; 0x43
    6a22:	bhi.n	6a28 <IRrecv::decodeSAMSUNG(decode_results*)+0x24>
{
	long  data   = 0;
	int   offset = 1;  // Skip first space

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
    6a24:	movs	r0, #0
    6a26:	pop	{r3, r4, r5, r6, r7, pc}
		return true;
	}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;
    6a28:	ldr	r3, [r5, #16]
    6a2a:	movw	r1, #5000	; 0x1388
    6a2e:	ldr	r0, [r3, #8]
    6a30:	bl	66f4 <MATCH_SPACE(int, int)>
    6a34:	cmp	r0, #0
    6a36:	beq.n	6a24 <IRrecv::decodeSAMSUNG(decode_results*)+0x20>
    6a38:	movs	r4, #12
    6a3a:	movs	r6, #0
    6a3c:	b.n	6a4a <IRrecv::decodeSAMSUNG(decode_results*)+0x46>

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;

		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
    6a3e:	orr.w	r6, r3, #1
    6a42:	adds	r4, #8
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
    6a44:	cmp.w	r4, #268	; 0x10c
    6a48:	beq.n	6ab4 <IRrecv::decodeSAMSUNG(decode_results*)+0xb0>
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
    6a4a:	ldr	r3, [r5, #16]
    6a4c:	mov.w	r1, #560	; 0x230
    6a50:	ldr	r0, [r3, r4]
    6a52:	bl	66a0 <MATCH_MARK(int, int)>

		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
    6a56:	adds	r7, r4, #4
    6a58:	mov.w	r1, #1600	; 0x640

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
    6a5c:	cmp	r0, #0
    6a5e:	beq.n	6a24 <IRrecv::decodeSAMSUNG(decode_results*)+0x20>

		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
    6a60:	ldr	r3, [r5, #16]
    6a62:	ldr	r0, [r3, r7]
    6a64:	bl	66f4 <MATCH_SPACE(int, int)>
    6a68:	lsls	r3, r6, #1
    6a6a:	cmp	r0, #0
    6a6c:	bne.n	6a3e <IRrecv::decodeSAMSUNG(decode_results*)+0x3a>
		else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE))  data = (data << 1) | 0 ;
    6a6e:	ldr	r3, [r5, #16]
    6a70:	mov.w	r1, #560	; 0x230
    6a74:	ldr	r0, [r3, r7]
    6a76:	bl	66f4 <MATCH_SPACE(int, int)>
    6a7a:	cmp	r0, #0
    6a7c:	beq.n	6a24 <IRrecv::decodeSAMSUNG(decode_results*)+0x20>
    6a7e:	lsls	r6, r6, #1
    6a80:	b.n	6a42 <IRrecv::decodeSAMSUNG(decode_results*)+0x3e>
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
	offset++;

	// Check for repeat
	if (    (irparams.rawlen == 4)
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
    6a82:	ldr	r3, [r5, #16]
    6a84:	movw	r1, #2250	; 0x8ca
    6a88:	ldr	r0, [r3, #8]
    6a8a:	bl	66f4 <MATCH_SPACE(int, int)>
    6a8e:	cmp	r0, #0
    6a90:	beq.n	6a1e <IRrecv::decodeSAMSUNG(decode_results*)+0x1a>
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
    6a92:	ldr	r3, [r5, #16]
    6a94:	mov.w	r1, #560	; 0x230
    6a98:	ldr	r0, [r3, #12]
    6a9a:	bl	66a0 <MATCH_MARK(int, int)>
    6a9e:	cmp	r0, #0
    6aa0:	beq.n	6a1e <IRrecv::decodeSAMSUNG(decode_results*)+0x1a>
	   ) {
		results->bits        = 0;
    6aa2:	movs	r1, #0
		results->value       = REPEAT;
    6aa4:	mov.w	r2, #4294967295
		results->decode_type = SAMSUNG;
    6aa8:	movs	r3, #7
	// Check for repeat
	if (    (irparams.rawlen == 4)
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
	   ) {
		results->bits        = 0;
    6aaa:	str	r1, [r5, #12]
		results->value       = REPEAT;
    6aac:	str	r2, [r5, #8]
		results->decode_type = SAMSUNG;
    6aae:	strb	r3, [r5, #0]
		return true;
    6ab0:	movs	r0, #1
    6ab2:	pop	{r3, r4, r5, r6, r7, pc}
		else                                                                return false ;
		offset++;
	}

	// Success
	results->bits        = SAMSUNG_BITS;
    6ab4:	movs	r2, #32
	results->value       = data;
	results->decode_type = SAMSUNG;
    6ab6:	movs	r3, #7
		offset++;
	}

	// Success
	results->bits        = SAMSUNG_BITS;
	results->value       = data;
    6ab8:	str	r6, [r5, #8]
		else                                                                return false ;
		offset++;
	}

	// Success
	results->bits        = SAMSUNG_BITS;
    6aba:	str	r2, [r5, #12]
	results->value       = data;
	results->decode_type = SAMSUNG;
    6abc:	strb	r3, [r5, #0]
	return true;
    6abe:	movs	r0, #1
    6ac0:	pop	{r3, r4, r5, r6, r7, pc}
    6ac2:	nop
    6ac4:	.word	0x1fffb8ac

00006ac8 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    6ac8:	movs	r0, #0
    6aca:	bx	lr

00006acc <Print::flush()>:
	virtual void flush()				{ }
    6acc:	bx	lr
    6ace:	nop

00006ad0 <File::write(unsigned char)>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    6ad0:	push	{r4, lr}
    6ad2:	sub	sp, #8
    6ad4:	add	r3, sp, #8
  return write(&val, 1);
    6ad6:	ldr	r2, [r0, #0]
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    6ad8:	strb.w	r1, [r3, #-1]!
  return write(&val, 1);
    6adc:	ldr	r4, [r2, #4]
    6ade:	mov	r1, r3
    6ae0:	movs	r2, #1
    6ae2:	blx	r4
}
    6ae4:	add	sp, #8
    6ae6:	pop	{r4, pc}

00006ae8 <File::available()>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    6ae8:	ldr	r0, [r0, #28]
    6aea:	cbz	r0, 6afc <File::available()+0x14>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
    6aec:	ldr	r3, [r0, #24]
    6aee:	ldr	r0, [r0, #12]
    6af0:	movw	r2, #32767	; 0x7fff
    6af4:	subs	r0, r3, r0
    6af6:	cmp	r0, r2
    6af8:	it	cs
    6afa:	movcs	r0, r2
}
    6afc:	bx	lr
    6afe:	nop

00006b00 <File::write(unsigned char const*, unsigned int)>:
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    6b00:	ldr	r3, [r0, #28]

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    6b02:	push	{r4, lr}
    6b04:	mov	r4, r0
  size_t t;
  if (!_file) {
    6b06:	cbz	r3, 6b18 <File::write(unsigned char const*, unsigned int)+0x18>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    6b08:	movs	r0, #0
    6b0a:	strb	r0, [r3, #4]
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    6b0c:	ldr	r0, [r4, #28]
    6b0e:	bl	7944 <SdFile::write(void const*, unsigned int)>
    6b12:	ldr	r3, [r4, #28]
  if (_file->getWriteError()) {
    6b14:	ldrb	r3, [r3, #4]
    6b16:	cbz	r3, 6b20 <File::write(unsigned char const*, unsigned int)+0x20>
    6b18:	movs	r3, #1
    6b1a:	strb	r3, [r4, #4]

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    setWriteError();
    return 0;
    6b1c:	movs	r0, #0
    6b1e:	pop	{r4, pc}
  if (_file->getWriteError()) {
    setWriteError();
    return 0;
  }
  return t;
}
    6b20:	pop	{r4, pc}
    6b22:	nop

00006b24 <File::read()>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    6b24:	ldr	r0, [r0, #28]
    6b26:	cbz	r0, 6b48 <File::read()+0x24>
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    6b28:	push	{lr}
    6b2a:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    6b2c:	movs	r2, #1
    6b2e:	add.w	r1, sp, #7
    6b32:	bl	7500 <SdFile::read(void*, unsigned int)>
    6b36:	cmp	r0, #1
    6b38:	ite	eq
    6b3a:	ldrbeq.w	r0, [sp, #7]
    6b3e:	movne.w	r0, #4294967295
  if (_file) 
    return _file->read();
  return -1;
}
    6b42:	add	sp, #12
    6b44:	ldr.w	pc, [sp], #4
}

int File::read() {
  if (_file) 
    return _file->read();
  return -1;
    6b48:	mov.w	r0, #4294967295
    6b4c:	bx	lr
    6b4e:	nop

00006b50 <File::peek()>:
  }
  return t;
}

int File::peek() {
  if (! _file) 
    6b50:	ldr	r3, [r0, #28]
    6b52:	cbz	r3, 6b86 <File::peek()+0x36>
    return 0;
  }
  return t;
}

int File::peek() {
    6b54:	push	{r4, lr}
    6b56:	sub	sp, #8
    6b58:	mov	r4, r0
    6b5a:	movs	r2, #1
    6b5c:	mov	r0, r3
    6b5e:	add.w	r1, sp, #7
    6b62:	bl	7500 <SdFile::read(void*, unsigned int)>
    6b66:	cmp	r0, #1
    6b68:	beq.n	6b72 <File::peek()+0x22>
    6b6a:	mov.w	r0, #4294967295
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    6b6e:	add	sp, #8
    6b70:	pop	{r4, pc}
int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    6b72:	ldr	r0, [r4, #28]
    6b74:	ldrb.w	r4, [sp, #7]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    6b78:	ldr	r1, [r0, #12]
    6b7a:	subs	r1, #1
    6b7c:	bl	7664 <SdFile::seekSet(unsigned long)>

int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
    6b80:	mov	r0, r4
  if (c != -1) _file->seekCur(-1);
  return c;
}
    6b82:	add	sp, #8
    6b84:	pop	{r4, pc}
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    6b86:	mov	r0, r3

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    6b88:	bx	lr
    6b8a:	nop

00006b8c <File::flush()>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    6b8c:	ldr	r0, [r0, #28]
    6b8e:	cbz	r0, 6b94 <File::flush()+0x8>
    _file->sync();
    6b90:	b.w	76c8 <SdFile::sync()>
    6b94:	bx	lr
    6b96:	nop

00006b98 <File::File(SdFile, char const*)>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    6b98:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b9c:	mov	r5, r0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    6b9e:	mov.w	r3, #1000	; 0x3e8
    6ba2:	ldr	r0, [pc, #76]	; (6bf0 <File::File(SdFile, char const*)+0x58>)
    6ba4:	str	r3, [r5, #8]
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    6ba6:	movs	r3, #0
    6ba8:	str	r0, [r5, #0]
    6baa:	strb	r3, [r5, #4]
    6bac:	strb	r3, [r5, #12]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    6bae:	movs	r0, #36	; 0x24

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    6bb0:	mov	r4, r1
    6bb2:	mov	r8, r2
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    6bb4:	bl	b71c <malloc>
    6bb8:	str	r0, [r5, #28]
  if (_file) {
    6bba:	cbz	r0, 6bea <File::File(SdFile, char const*)+0x52>
    memcpy(_file, &f, sizeof(SdFile));
    6bbc:	mov	r6, r0
    6bbe:	add.w	lr, r4, #32
    6bc2:	ldr	r0, [r4, #0]
    6bc4:	ldr	r1, [r4, #4]
    6bc6:	ldr	r2, [r4, #8]
    6bc8:	ldr	r3, [r4, #12]
    6bca:	mov	r7, r6
    6bcc:	stmia	r7!, {r0, r1, r2, r3}
    6bce:	adds	r4, #16
    6bd0:	cmp	r4, lr
    6bd2:	mov	r6, r7
    6bd4:	bne.n	6bc2 <File::File(SdFile, char const*)+0x2a>
    6bd6:	ldr	r0, [r4, #0]
    6bd8:	str	r0, [r7, #0]
    
    strncpy(_name, n, 12);
    6bda:	mov	r1, r8
    6bdc:	movs	r2, #12
    6bde:	add.w	r0, r5, #13
    6be2:	bl	c29c <strncpy>
    _name[12] = 0;
    6be6:	movs	r3, #0
    6be8:	strb	r3, [r5, #25]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    6bea:	mov	r0, r5
    6bec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bf0:	.word	0x0000ca4c

00006bf4 <File::File()>:
    6bf4:	mov.w	r2, #1000	; 0x3e8

File::File(void) {
    6bf8:	ldr	r1, [pc, #16]	; (6c0c <File::File()+0x18>)
    6bfa:	str	r2, [r0, #8]
    6bfc:	movs	r2, #0
    6bfe:	str	r1, [r0, #0]
    6c00:	strb	r2, [r0, #4]
    6c02:	strb	r2, [r0, #12]
  _file = 0;
    6c04:	str	r2, [r0, #28]
  _name[0] = 0;
    6c06:	strb	r2, [r0, #13]
  //Serial.print("Created empty file object");
}
    6c08:	bx	lr
    6c0a:	nop
    6c0c:	.word	0x0000ca4c

00006c10 <File::~File()>:

File::~File(void) {
  //  Serial.print("Deleted file object");
}
    6c10:	bx	lr
    6c12:	nop

00006c14 <File::read(void*, unsigned short)>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    6c14:	ldr	r0, [r0, #28]
    6c16:	cbz	r0, 6c1c <File::read(void*, unsigned short)+0x8>
    return _file->read(buf, nbyte);
    6c18:	b.w	7500 <SdFile::read(void*, unsigned int)>
  return 0;
}
    6c1c:	bx	lr
    6c1e:	nop

00006c20 <File::close()>:
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
  if (_file) {
    6c20:	ldr	r3, [r0, #28]
    6c22:	cbz	r3, 6c3a <File::close()+0x1a>
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    6c24:	push	{r4, lr}
    6c26:	mov	r4, r0
  if (_file) {
    _file->close();
    6c28:	mov	r0, r3
    6c2a:	bl	7410 <SdFile::close()>
    free(_file); 
    6c2e:	ldr	r0, [r4, #28]
    6c30:	bl	b72c <free>
    _file = 0;
    6c34:	movs	r3, #0
    6c36:	str	r3, [r4, #28]
    6c38:	pop	{r4, pc}
    6c3a:	bx	lr

00006c3c <File::operator bool()>:
    */
  }
}

File::operator bool() {
  if (_file) 
    6c3c:	ldr	r0, [r0, #28]
    6c3e:	cbz	r0, 6c48 <File::operator bool()+0xc>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    6c40:	ldrb	r0, [r0, #6]
    6c42:	adds	r0, #0
    6c44:	it	ne
    6c46:	movne	r0, #1
    return  _file->isOpen();
  return false;
}
    6c48:	bx	lr
    6c4a:	nop

00006c4c <SDClass::begin(unsigned char)>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    6c4c:	push	{r3, r4, r5, lr}
      uint8_t ret = SDHC_CardInit();
      type_ = SDHC_CardGetType();
      return (ret == 0) ? true : false;
    }
    #endif
    return SD_init(sckRateID, chipSelectPin);
    6c4e:	mov	r2, r1
    6c50:	movs	r1, #1
    6c52:	mov	r4, r0
    6c54:	bl	7da8 <Sd2Card::SD_init(unsigned char, unsigned char)>

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
    6c58:	cbnz	r0, 6c5e <SDClass::begin(unsigned char)+0x12>
    6c5a:	movs	r0, #0
    6c5c:	pop	{r3, r4, r5, pc}
    6c5e:	adds	r5, r4, #4
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    6c60:	mov	r0, r5
    6c62:	movs	r2, #1
    6c64:	mov	r1, r4
    6c66:	bl	7228 <SdVolume::init(Sd2Card*, unsigned char)>
    6c6a:	cbz	r0, 6c7e <SDClass::begin(unsigned char)+0x32>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    6c6c:	mov	r1, r5
    6c6e:	add.w	r0, r4, #44	; 0x2c
    6c72:	bl	74b0 <SdFile::openRoot(SdVolume*)>
    6c76:	adds	r0, #0
    6c78:	it	ne
    6c7a:	movne	r0, #1
    6c7c:	pop	{r3, r4, r5, pc}
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    6c7e:	mov	r2, r0
    6c80:	mov	r1, r4
    6c82:	mov	r0, r5
    6c84:	bl	7228 <SdVolume::init(Sd2Card*, unsigned char)>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    6c88:	cmp	r0, #0
    6c8a:	bne.n	6c6c <SDClass::begin(unsigned char)+0x20>
         volume.init(card) &&
    6c8c:	movs	r0, #0
    6c8e:	pop	{r3, r4, r5, pc}

00006c90 <SDClass::getParentDir(char const*, int*)>:
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    6c90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c94:	sub	sp, #100	; 0x64
    6c96:	mov.w	r8, #0
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6c9a:	ldr.w	sl, [pc, #232]	; 6d84 <SDClass::getParentDir(char const*, int*)+0xf4>
    6c9e:	strb.w	r8, [sp, #28]
    6ca2:	mov	r9, r0
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    6ca4:	adds	r1, #4
    6ca6:	add	r0, sp, #24
    6ca8:	mov	fp, r2
    6caa:	str	r3, [sp, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6cac:	strb.w	r8, [sp, #30]
    6cb0:	strb.w	r8, [sp, #64]	; 0x40
    6cb4:	strb.w	r8, [sp, #66]	; 0x42
    6cb8:	str.w	sl, [sp, #24]
    6cbc:	str.w	sl, [sp, #60]	; 0x3c
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    6cc0:	bl	74b0 <SdFile::openRoot(SdVolume*)>
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    6cc4:	add	r6, sp, #24
    6cc6:	mov	r5, fp
  SdFile *subdir = &d2;
    6cc8:	add	r7, sp, #60	; 0x3c
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    6cca:	movs	r1, #47	; 0x2f
    6ccc:	mov	r0, r5
    6cce:	bl	bdd8 <strchr>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    6cd2:	subs	r4, r0, r5
    6cd4:	uxtb	r4, r4
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    6cd6:	mov	r1, r5
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    6cd8:	cbz	r0, 6d1e <SDClass::getParentDir(char const*, int*)+0x8e>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    6cda:	ldrb	r3, [r5, #0]
    6cdc:	cmp	r3, #47	; 0x2f
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    6cde:	add	r0, sp, #8
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    6ce0:	beq.n	6d1a <SDClass::getParentDir(char const*, int*)+0x8a>
    6ce2:	cmp	r4, #12
    6ce4:	it	cs
    6ce6:	movcs	r4, #12
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    6ce8:	mov	r2, r4
    6cea:	bl	c29c <strncpy>
    subdirname[idx] = 0;
    6cee:	add	r3, sp, #96	; 0x60
    6cf0:	add	r3, r4

    // close the subdir (we reuse them) if open
    subdir->close();
    6cf2:	mov	r0, r7
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    6cf4:	strb.w	r8, [r3, #-88]

    // close the subdir (we reuse them) if open
    subdir->close();
    6cf8:	bl	7410 <SdFile::close()>
    if (! subdir->open(parent, subdirname, O_READ)) {
    6cfc:	movs	r3, #1
    6cfe:	add	r2, sp, #8
    6d00:	mov	r1, r6
    6d02:	mov	r0, r7
    6d04:	bl	7930 <SdFile::open(SdFile*, char const*, unsigned char)>
    6d08:	cbz	r0, 6d6e <SDClass::getParentDir(char const*, int*)+0xde>
    }
    // move forward to the next subdirectory
    filepath += idx;

    // we reuse the objects, close it.
    parent->close();
    6d0a:	mov	r0, r6
    6d0c:	bl	7410 <SdFile::close()>
    6d10:	mov	r3, r6
    if (! subdir->open(parent, subdirname, O_READ)) {
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    6d12:	add	r5, r4
    // we reuse the objects, close it.
    parent->close();

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    6d14:	mov	r6, r7
    6d16:	mov	r7, r3
    6d18:	b.n	6cca <SDClass::getParentDir(char const*, int*)+0x3a>

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
      filepath++;
    6d1a:	adds	r5, #1
    6d1c:	b.n	6cca <SDClass::getParentDir(char const*, int*)+0x3a>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    6d1e:	ldr	r0, [sp, #4]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    6d20:	ldrb	r1, [r6, #4]
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    6d22:	ldrb	r2, [r6, #5]
    6d24:	ldrb	r3, [r6, #6]
    6d26:	ldr	r4, [r6, #8]
    6d28:	ldrb	r7, [r6, #20]
    6d2a:	rsb	r5, fp, r5
    6d2e:	str	r5, [r0, #0]
    6d30:	ldr	r0, [r6, #12]
    6d32:	ldr	r5, [r6, #16]
    6d34:	strb.w	r1, [r9, #4]
    6d38:	strb.w	r2, [r9, #5]
    6d3c:	ldr	r1, [r6, #24]
    6d3e:	strb.w	r3, [r9, #6]
    6d42:	ldr	r2, [r6, #28]
    6d44:	ldr	r3, [r6, #32]
    6d46:	str.w	r0, [r9, #12]
  // parent is now the parent diretory of the file!
  return *parent;
}
    6d4a:	mov	r0, r9
    6d4c:	str.w	sl, [r9]
    6d50:	str.w	r4, [r9, #8]
    6d54:	str.w	r5, [r9, #16]
    6d58:	strb.w	r7, [r9, #20]
    6d5c:	str.w	r1, [r9, #24]
    6d60:	str.w	r2, [r9, #28]
    6d64:	str.w	r3, [r9, #32]
    6d68:	add	sp, #100	; 0x64
    6d6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  public:
	constexpr Print() : write_error(0) {}
    6d6e:	strb.w	r0, [r9, #4]
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6d72:	strb.w	r0, [r9, #6]
    6d76:	mov	r0, r9
    6d78:	str.w	sl, [r9]
    6d7c:	add	sp, #100	; 0x64
    6d7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d82:	nop
    6d84:	.word	0x0000ca74

00006d88 <SDClass::open(char const*, unsigned char)>:


File SDClass::open(const char *filepath, uint8_t mode) {
    6d88:	push	{r4, r5, r6, r7, lr}
    6d8a:	sub	sp, #116	; 0x74
    6d8c:	mov	r5, r0
    6d8e:	mov	r7, r3
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    6d90:	add	r0, sp, #4
    6d92:	mov	r3, sp
  // parent is now the parent diretory of the file!
  return *parent;
}


File SDClass::open(const char *filepath, uint8_t mode) {
    6d94:	mov	r4, r2
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    6d96:	bl	6c90 <SDClass::getParentDir(char const*, int*)>
  // no more subdirs!

  filepath += pathidx;
    6d9a:	ldr	r2, [sp, #0]

  if (! filepath[0]) {
    6d9c:	ldrb	r3, [r4, r2]

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
  // no more subdirs!

  filepath += pathidx;
    6d9e:	add	r4, r2

  if (! filepath[0]) {
    6da0:	cmp	r3, #0
    6da2:	beq.n	6e2a <SDClass::open(char const*, unsigned char)+0xa2>

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    6da4:	ldrb.w	r2, [sp, #10]
    6da8:	ldr	r6, [pc, #188]	; (6e68 <SDClass::open(char const*, unsigned char)+0xe0>)
    6daa:	str	r6, [sp, #40]	; 0x28
    6dac:	movs	r3, #0
    6dae:	strb.w	r3, [sp, #44]	; 0x2c
    6db2:	strb.w	r3, [sp, #46]	; 0x2e
    6db6:	cmp	r2, #0
    6db8:	beq.n	6e1e <SDClass::open(char const*, unsigned char)+0x96>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    6dba:	add	r0, sp, #40	; 0x28
    6dbc:	mov	r3, r7
    6dbe:	mov	r2, r4
    6dc0:	add	r1, sp, #4
    6dc2:	bl	7930 <SdFile::open(SdFile*, char const*, unsigned char)>
    return File();

  if ( ! file.open(parentdir, filepath, mode)) {
    6dc6:	cbz	r0, 6e1e <SDClass::open(char const*, unsigned char)+0x96>
    return File();
  }
  // close the parent
  parentdir.close();
    6dc8:	add	r0, sp, #4
    6dca:	bl	7410 <SdFile::close()>

  if (mode & (O_APPEND | O_WRITE)) 
    6dce:	tst.w	r7, #6
    6dd2:	bne.n	6e5c <SDClass::open(char const*, unsigned char)+0xd4>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    6dd4:	ldrb.w	r7, [sp, #44]	; 0x2c
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    6dd8:	ldr	r3, [sp, #48]	; 0x30
    6dda:	ldrb.w	lr, [sp, #45]	; 0x2d
    6dde:	str	r6, [sp, #76]	; 0x4c
    file.seekSet(file.fileSize());
  return File(file, filepath);
    6de0:	mov	r2, r4
    6de2:	ldrb.w	r4, [sp, #46]	; 0x2e
    6de6:	strb.w	r7, [sp, #80]	; 0x50
    6dea:	strb.w	r4, [sp, #82]	; 0x52
    6dee:	str	r3, [sp, #84]	; 0x54
    6df0:	ldr	r1, [sp, #52]	; 0x34
    6df2:	ldr	r0, [sp, #56]	; 0x38
    6df4:	ldrb.w	r7, [sp, #60]	; 0x3c
    6df8:	ldr	r6, [sp, #64]	; 0x40
    6dfa:	ldr	r4, [sp, #68]	; 0x44
    6dfc:	ldr	r3, [sp, #72]	; 0x48
    6dfe:	strb.w	lr, [sp, #81]	; 0x51
    6e02:	str	r1, [sp, #88]	; 0x58
    6e04:	str	r0, [sp, #92]	; 0x5c
    6e06:	add	r1, sp, #76	; 0x4c
    6e08:	mov	r0, r5
    6e0a:	strb.w	r7, [sp, #96]	; 0x60
    6e0e:	str	r6, [sp, #100]	; 0x64
    6e10:	str	r4, [sp, #104]	; 0x68
    6e12:	str	r3, [sp, #108]	; 0x6c
    6e14:	bl	6b98 <File::File(SdFile, char const*)>
}
    6e18:	mov	r0, r5
    6e1a:	add	sp, #116	; 0x74
    6e1c:	pop	{r4, r5, r6, r7, pc}
  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    return File();
    6e1e:	mov	r0, r5
    6e20:	bl	6bf4 <File::File()>
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
  return File(file, filepath);
}
    6e24:	mov	r0, r5
    6e26:	add	sp, #116	; 0x74
    6e28:	pop	{r4, r5, r6, r7, pc}
    6e2a:	ldrb.w	r7, [sp, #8]
    6e2e:	ldr	r6, [pc, #56]	; (6e68 <SDClass::open(char const*, unsigned char)+0xe0>)
    6e30:	ldrb.w	r4, [sp, #9]
    6e34:	ldrb.w	r3, [sp, #10]
    6e38:	ldr	r2, [sp, #12]
    6e3a:	strb.w	r7, [sp, #80]	; 0x50
    6e3e:	str	r6, [sp, #76]	; 0x4c
    6e40:	strb.w	r4, [sp, #81]	; 0x51
    6e44:	strb.w	r3, [sp, #82]	; 0x52
    6e48:	str	r2, [sp, #84]	; 0x54
    6e4a:	ldr	r1, [sp, #16]
    6e4c:	ldr	r0, [sp, #20]
    6e4e:	ldrb.w	r7, [sp, #24]
    6e52:	ldr	r6, [sp, #28]
    6e54:	ldr	r4, [sp, #32]
    6e56:	ldr	r3, [sp, #36]	; 0x24

  filepath += pathidx;

  if (! filepath[0]) {
    // it was the directory itself!
    return File(parentdir, "/");
    6e58:	ldr	r2, [pc, #16]	; (6e6c <SDClass::open(char const*, unsigned char)+0xe4>)
    6e5a:	b.n	6e02 <SDClass::open(char const*, unsigned char)+0x7a>
  }
  // close the parent
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
    6e5c:	add	r0, sp, #40	; 0x28
    6e5e:	ldr	r1, [sp, #64]	; 0x40
    6e60:	bl	7664 <SdFile::seekSet(unsigned long)>
    6e64:	b.n	6dd4 <SDClass::open(char const*, unsigned char)+0x4c>
    6e66:	nop
    6e68:	.word	0x0000ca74
    6e6c:	.word	0x0000ca68

00006e70 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    6e70:	ldr	r3, [pc, #24]	; (6e8c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6e72:	ldr	r2, [pc, #28]	; (6e90 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    6e74:	str	r2, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    6e76:	movs	r1, #2
    6e78:	movs	r2, #0
    6e7a:	str	r1, [r3, #4]
    6e7c:	strb	r2, [r3, #2]
    6e7e:	strb.w	r2, [r3, #36]	; 0x24
{
  public:
	constexpr Print() : write_error(0) {}
    6e82:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    6e86:	strb.w	r2, [r3, #50]	; 0x32
    6e8a:	bx	lr
    6e8c:	.word	0x1fffba50
    6e90:	.word	0x0000ca74

00006e94 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    6e94:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    6e96:	ldr	r4, [pc, #60]	; (6ed4 <SdVolume::cacheFlush()+0x40>)
    6e98:	ldrb	r3, [r4, #0]
    6e9a:	cbnz	r3, 6ea0 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    6e9c:	movs	r0, #1
}
    6e9e:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    6ea0:	ldr	r3, [pc, #52]	; (6ed8 <SdVolume::cacheFlush()+0x44>)
    6ea2:	ldr	r5, [pc, #56]	; (6edc <SdVolume::cacheFlush()+0x48>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    6ea4:	ldr	r1, [r3, #0]
    6ea6:	ldr	r0, [r5, #0]
    6ea8:	ldr	r2, [pc, #52]	; (6ee0 <SdVolume::cacheFlush()+0x4c>)
    6eaa:	bl	821c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    6eae:	cbz	r0, 6ece <SdVolume::cacheFlush()+0x3a>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    6eb0:	ldr	r6, [pc, #48]	; (6ee4 <SdVolume::cacheFlush()+0x50>)
    6eb2:	ldr	r1, [r6, #0]
    6eb4:	cbnz	r1, 6ebe <SdVolume::cacheFlush()+0x2a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    6eb6:	movs	r3, #0
    6eb8:	strb	r3, [r4, #0]
  }
  return true;
    6eba:	movs	r0, #1
    6ebc:	pop	{r4, r5, r6, pc}
    6ebe:	ldr	r0, [r5, #0]
    6ec0:	ldr	r2, [pc, #28]	; (6ee0 <SdVolume::cacheFlush()+0x4c>)
    6ec2:	bl	821c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    6ec6:	cbz	r0, 6ece <SdVolume::cacheFlush()+0x3a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    6ec8:	movs	r3, #0
    6eca:	str	r3, [r6, #0]
    6ecc:	b.n	6eb6 <SdVolume::cacheFlush()+0x22>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    6ece:	movs	r0, #0
    6ed0:	pop	{r4, r5, r6, pc}
    6ed2:	nop
    6ed4:	.word	0x1fffbcac
    6ed8:	.word	0x1fff945c
    6edc:	.word	0x1fffbaa8
    6ee0:	.word	0x1fffbaac
    6ee4:	.word	0x1fffbaa4

00006ee8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    6ee8:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    6eea:	ldr	r5, [pc, #52]	; (6f20 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x38>)
    6eec:	ldr	r3, [r5, #0]
    6eee:	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    6ef0:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    6ef2:	beq.n	6f12 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    6ef4:	mov	r4, r0
    if (!cacheFlush()) return false;
    6ef6:	bl	6e94 <SdVolume::cacheFlush()>
    6efa:	cbnz	r0, 6f00 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    6efc:	movs	r0, #0
    6efe:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    6f00:	ldr	r3, [pc, #32]	; (6f24 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    6f02:	ldr	r2, [pc, #36]	; (6f28 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x40>)
    6f04:	ldr	r0, [r3, #0]
    6f06:	mov	r1, r4
    6f08:	bl	8090 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    6f0c:	cmp	r0, #0
    6f0e:	beq.n	6efc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    6f10:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    6f12:	ldr	r3, [pc, #24]	; (6f2c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x44>)
    6f14:	ldrb	r1, [r3, #0]
    6f16:	orrs	r1, r6
    6f18:	strb	r1, [r3, #0]
  return true;
    6f1a:	movs	r0, #1
}
    6f1c:	pop	{r4, r5, r6, pc}
    6f1e:	nop
    6f20:	.word	0x1fff945c
    6f24:	.word	0x1fffbaa8
    6f28:	.word	0x1fffbaac
    6f2c:	.word	0x1fffbcac

00006f30 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    6f30:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    6f32:	ldrb.w	r3, [r0, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    6f36:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    6f38:	cmp	r3, #16

  if (lba != cacheBlockNumber_) {
    6f3a:	ldr	r3, [pc, #104]	; (6fa4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    6f3c:	mov	r5, r0
    6f3e:	mov	r6, r1
    6f40:	mov	r7, r2

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    6f42:	ldr	r3, [r3, #0]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    6f44:	beq.n	6f74 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    6f46:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    6f4a:	cmp	r4, r3
    6f4c:	bne.n	6f7c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    6f4e:	and.w	r6, r6, #127	; 0x7f
    6f52:	ldr	r2, [pc, #84]	; (6fa8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    6f54:	str.w	r7, [r2, r6, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    6f58:	ldr	r1, [pc, #80]	; (6fac <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    6f5a:	ldrb	r0, [r5, #24]
    6f5c:	ldrb	r2, [r1, #0]
    6f5e:	cmp	r0, #1
    6f60:	orr.w	r2, r2, #1
    6f64:	strb	r2, [r1, #0]
    6f66:	bls.n	6f9a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6a>
    6f68:	ldr	r1, [r5, #8]
    6f6a:	ldr	r2, [pc, #68]	; (6fb0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    6f6c:	add	r3, r1
    6f6e:	str	r3, [r2, #0]
  return true;
    6f70:	movs	r0, #1
    6f72:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    6f74:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    6f78:	cmp	r4, r3
    6f7a:	beq.n	6f8e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x5e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    6f7c:	movs	r1, #0
    6f7e:	mov	r0, r4
    6f80:	bl	6ee8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    6f84:	cbz	r0, 6f9c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
  }
  // store entry
  if (fatType_ == 16) {
    6f86:	ldrb.w	r3, [r5, #32]
    6f8a:	cmp	r3, #16
    6f8c:	bne.n	6f9e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    6f8e:	uxtb	r6, r6
    6f90:	ldr	r2, [pc, #20]	; (6fa8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    6f92:	mov	r3, r4
    6f94:	strh.w	r7, [r2, r6, lsl #1]
    6f98:	b.n	6f58 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    6f9a:	movs	r0, #1
}
    6f9c:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    6f9e:	mov	r3, r4
    6fa0:	b.n	6f4e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    6fa2:	nop
    6fa4:	.word	0x1fff945c
    6fa8:	.word	0x1fffbaac
    6fac:	.word	0x1fffbcac
    6fb0:	.word	0x1fffbaa4

00006fb4 <SdVolume::cacheZeroBlock(unsigned long)>:
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    6fb4:	push	{r4, lr}
    6fb6:	mov	r4, r0
  if (!cacheFlush()) return false;
    6fb8:	bl	6e94 <SdVolume::cacheFlush()>
    6fbc:	cbz	r0, 6fde <SdVolume::cacheZeroBlock(unsigned long)+0x2a>
    6fbe:	ldr	r3, [pc, #32]	; (6fe0 <SdVolume::cacheZeroBlock(unsigned long)+0x2c>)

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    6fc0:	movs	r1, #0
    6fc2:	add.w	r2, r3, #512	; 0x200
    6fc6:	strb.w	r1, [r3, #1]!
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    6fca:	cmp	r3, r2
    6fcc:	bne.n	6fc6 <SdVolume::cacheZeroBlock(unsigned long)+0x12>
    6fce:	ldr	r2, [pc, #20]	; (6fe4 <SdVolume::cacheZeroBlock(unsigned long)+0x30>)
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    6fd0:	ldr	r1, [pc, #20]	; (6fe8 <SdVolume::cacheZeroBlock(unsigned long)+0x34>)
    6fd2:	ldrb	r3, [r2, #0]
    6fd4:	str	r4, [r1, #0]
    6fd6:	orr.w	r3, r3, #1
    6fda:	strb	r3, [r2, #0]
  cacheSetDirty();
  return true;
    6fdc:	movs	r0, #1
}
    6fde:	pop	{r4, pc}
    6fe0:	.word	0x1fffbaab
    6fe4:	.word	0x1fffbcac
    6fe8:	.word	0x1fff945c

00006fec <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    6fec:	ldr	r3, [r0, #12]
    6fee:	adds	r3, #1
    6ff0:	cmp	r3, r1
    6ff2:	bcc.n	7026 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    6ff4:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    6ff6:	ldrb.w	r3, [r0, #32]
    6ffa:	cmp	r3, #16
  if (lba != cacheBlockNumber_) {
    6ffc:	ldr	r3, [pc, #84]	; (7054 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x68>)
    6ffe:	mov	r4, r0
    7000:	mov	r6, r2
    7002:	mov	r5, r1
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    7004:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    7006:	ldr	r3, [r3, #0]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    7008:	beq.n	702a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    700a:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    700e:	cmp	r0, r3
    7010:	bne.n	7032 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x46>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    7012:	and.w	r1, r5, #127	; 0x7f
    7016:	ldr	r3, [pc, #64]	; (7058 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    7018:	ldr.w	r3, [r3, r1, lsl #2]
    701c:	bic.w	r3, r3, #4026531840	; 0xf0000000
    7020:	str	r3, [r6, #0]
    7022:	movs	r0, #1
  }
  return true;
}
    7024:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    7026:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    7028:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    702a:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    702e:	cmp	r0, r3
    7030:	beq.n	7042 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x56>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    7032:	movs	r1, #0
    7034:	bl	6ee8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    7038:	cbz	r0, 7050 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
  }
  if (fatType_ == 16) {
    703a:	ldrb.w	r3, [r4, #32]
    703e:	cmp	r3, #16
    7040:	bne.n	7012 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    7042:	uxtb	r1, r5
    7044:	ldr	r3, [pc, #16]	; (7058 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    7046:	ldrh.w	r3, [r3, r1, lsl #1]
    704a:	str	r3, [r6, #0]
    704c:	movs	r0, #1
    704e:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    7050:	movs	r0, #0
    7052:	pop	{r4, r5, r6, pc}
    7054:	.word	0x1fff945c
    7058:	.word	0x1fffbaac

0000705c <SdVolume::chainSize(unsigned long, unsigned long*) const>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    705c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7060:	sub	sp, #8
    7062:	add	r5, sp, #8
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    7064:	ldr.w	r8, [pc, #80]	; 70b8 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x5c>
    7068:	str.w	r1, [r5, #-4]!
    706c:	mov	r4, r0
    706e:	mov	r9, r2
  uint32_t s = 0;
    7070:	mov.w	sl, #0
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    7074:	mov.w	r7, #512	; 0x200
    7078:	movw	r6, #65528	; 0xfff8
    707c:	b.n	7098 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x3c>
    707e:	ldrb.w	r3, [r4, #32]
    7082:	ldrb	r2, [r4, #16]
  } while (!isEOC(cluster));
    7084:	ldr	r1, [sp, #4]
    7086:	cmp	r3, #16
    7088:	ite	ne
    708a:	movne	r3, r8
    708c:	moveq	r3, r6
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    708e:	lsl.w	r2, r7, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    7092:	cmp	r1, r3
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    7094:	add	sl, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    7096:	bcs.n	70aa <SdVolume::chainSize(unsigned long, unsigned long*) const+0x4e>
    if (!fatGet(cluster, &cluster)) return false;
    7098:	mov	r2, r5
    709a:	mov	r0, r4
    709c:	bl	6fec <SdVolume::fatGet(unsigned long, unsigned long*) const>
    70a0:	cmp	r0, #0
    70a2:	bne.n	707e <SdVolume::chainSize(unsigned long, unsigned long*) const+0x22>
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    70a4:	add	sp, #8
    70a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
    70aa:	movs	r0, #1
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    70ac:	str.w	sl, [r9]
  return true;
}
    70b0:	add	sp, #8
    70b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70b6:	nop
    70b8:	.word	0x0ffffff8

000070bc <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    70bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    70c0:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    70c2:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    70c4:	cbz	r7, 7122 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    70c6:	adds	r7, #1

    // don't save new start location
    setStart = false;
    70c8:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    70cc:	ldr	r3, [r0, #12]
    70ce:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    70d2:	cbz	r3, 711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    70d4:	mov	fp, r1
    70d6:	mov	r6, r0
    70d8:	mov	r9, r2
    70da:	mov	r4, r7
    70dc:	movs	r5, #0
    70de:	b.n	70ec <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    70e0:	mov	r4, r3
    70e2:	mov	r7, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    70e4:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    70e6:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    70e8:	cmp	r3, r5
    70ea:	bls.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    70ec:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    70ee:	it	cc
    70f0:	movcc	r4, #2
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    70f2:	mov	r1, r4
    70f4:	add	r2, sp, #4
    70f6:	mov	r0, r6
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    70f8:	it	cc
    70fa:	movcc	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    70fc:	bl	6fec <SdVolume::fatGet(unsigned long, unsigned long*) const>
    7100:	adds	r3, r4, #1

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    7102:	subs	r1, r3, r7
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    7104:	cbz	r0, 711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    if (f != 0) {
    7106:	ldr	r2, [sp, #4]
    7108:	cmp	r2, #0
    710a:	bne.n	70e0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    710c:	cmp	fp, r1
    710e:	beq.n	7132 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x76>
    7110:	mov	r4, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    7112:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    7114:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    7116:	cmp	r3, r5
    7118:	bhi.n	70ec <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    711a:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    711c:	add	sp, #12
    711e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    7122:	sub.w	sl, r1, #1
    7126:	clz	sl, sl

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    712a:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    712c:	mov.w	sl, sl, lsr #5
    7130:	b.n	70cc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    7132:	cmp	r4, #1
    7134:	bls.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    7136:	ldr	r3, [r6, #12]
    7138:	adds	r3, #1
    713a:	cmp	r4, r3
    713c:	bhi.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    713e:	mvn.w	r2, #4026531840	; 0xf0000000
    7142:	mov	r1, r4
    7144:	mov	r0, r6
    7146:	bl	6f30 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    714a:	cmp	r0, #0
    714c:	beq.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // link clusters
  while (endCluster > bgnCluster) {
    714e:	cmp	r7, r4
    7150:	bcs.n	717c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    7152:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    7154:	cmp	r4, #1
    7156:	bls.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    7158:	ldr	r3, [r6, #12]
    715a:	adds	r3, #1
    715c:	cmp	r4, r3
    715e:	bhi.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    7160:	adds	r2, r4, #1
    7162:	mov	r1, r4
    7164:	mov	r0, r6
    7166:	bl	6f30 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    716a:	cmp	r0, #0
    716c:	beq.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    716e:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    7170:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    7174:	beq.n	717c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    7176:	cmp	r4, #1
    7178:	bne.n	7158 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9c>
    717a:	b.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    717c:	ldr.w	r1, [r9]
    7180:	cbz	r1, 719a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xde>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    7182:	cmp	r1, #1
    7184:	bls.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    7186:	ldr	r3, [r6, #12]
    7188:	adds	r3, #1
    718a:	cmp	r1, r3
    718c:	bhi.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    718e:	mov	r2, r7
    7190:	mov	r0, r6
    7192:	bl	6f30 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    7196:	cmp	r0, #0
    7198:	beq.n	711a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    719a:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    719e:	cmp.w	sl, #0
    71a2:	beq.n	71a8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xec>
    71a4:	adds	r7, #1
    71a6:	str	r7, [r6, #0]

  return true;
    71a8:	movs	r0, #1
    71aa:	b.n	711c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

000071ac <SdVolume::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    71ac:	cmp	r1, #1
    71ae:	bls.n	71c6 <SdVolume::fatPut(unsigned long, unsigned long)+0x1a>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    71b0:	ldr	r3, [r0, #12]
    71b2:	adds	r3, #1
    71b4:	cmp	r1, r3
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    71b6:	push	{r4}
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    71b8:	bhi.n	71c0 <SdVolume::fatPut(unsigned long, unsigned long)+0x14>
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    71ba:	pop	{r4}
    71bc:	b.w	6f30 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    71c0:	movs	r0, #0
    71c2:	pop	{r4}
    71c4:	bx	lr
    71c6:	movs	r0, #0
    71c8:	bx	lr
    71ca:	nop

000071cc <SdVolume::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    71cc:	push	{r4, r5, r6, r7, lr}
  // clear free cluster location
  allocSearchStart_ = 2;
    71ce:	movs	r3, #2
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    71d0:	sub	sp, #12
    71d2:	mov	r5, r0
    71d4:	ldr	r7, [pc, #76]	; (7224 <SdVolume::freeChain(unsigned long)+0x58>)
  // clear free cluster location
  allocSearchStart_ = 2;
    71d6:	str	r3, [r0, #0]
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    71d8:	mov	r4, r1
    71da:	movw	r6, #65528	; 0xfff8
    71de:	b.n	7200 <SdVolume::freeChain(unsigned long)+0x34>
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    71e0:	ldr	r3, [r5, #12]
    71e2:	adds	r3, #1
    71e4:	cmp	r4, r3
    71e6:	bhi.n	7216 <SdVolume::freeChain(unsigned long)+0x4a>
    71e8:	bl	6f30 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    71ec:	cbz	r0, 7216 <SdVolume::freeChain(unsigned long)+0x4a>
    71ee:	ldrb.w	r3, [r5, #32]

    cluster = next;
    71f2:	ldr	r4, [sp, #4]
    71f4:	cmp	r3, #16
    71f6:	ite	eq
    71f8:	moveq	r3, r6
    71fa:	movne	r3, r7
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    71fc:	cmp	r4, r3
    71fe:	bcs.n	721c <SdVolume::freeChain(unsigned long)+0x50>
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    7200:	add	r2, sp, #4
    7202:	mov	r1, r4
    7204:	mov	r0, r5
    7206:	bl	6fec <SdVolume::fatGet(unsigned long, unsigned long*) const>
    720a:	mov	r1, r4
    720c:	movs	r2, #0
    720e:	cbz	r0, 7216 <SdVolume::freeChain(unsigned long)+0x4a>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    7210:	cmp	r4, #1
    7212:	mov	r0, r5
    7214:	bhi.n	71e0 <SdVolume::freeChain(unsigned long)+0x14>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    7216:	movs	r0, #0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    7218:	add	sp, #12
    721a:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    721c:	movs	r0, #1
}
    721e:	add	sp, #12
    7220:	pop	{r4, r5, r6, r7, pc}
    7222:	nop
    7224:	.word	0x0ffffff8

00007228 <SdVolume::init(Sd2Card*, unsigned char)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    7228:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    722a:	ldr	r3, [pc, #248]	; (7324 <SdVolume::init(Sd2Card*, unsigned char)+0xfc>)
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    722c:	mov	r5, r0
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    722e:	str	r1, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    7230:	mov	r4, r2
    7232:	cbz	r2, 726c <SdVolume::init(Sd2Card*, unsigned char)+0x44>
    if (part > 4)return false;
    7234:	cmp	r2, #4
    7236:	bls.n	723c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    7238:	movs	r0, #0
    723a:	pop	{r3, r4, r5, r6, r7, pc}
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    723c:	movs	r1, #0
    723e:	mov	r0, r1
    7240:	bl	6ee8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    7244:	cmp	r0, #0
    7246:	beq.n	7238 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    7248:	ldr	r3, [pc, #220]	; (7328 <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
    724a:	add.w	r2, r3, r4, lsl #4
    724e:	ldrb.w	r2, [r2, #430]	; 0x1ae
    7252:	lsls	r2, r2, #25
    7254:	bne.n	7238 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
    7256:	adds	r4, #27
    7258:	add.w	r4, r3, r4, lsl #4
    725c:	ldr.w	r3, [r4, #10]
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    7260:	cmp	r3, #99	; 0x63
    7262:	bls.n	7238 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    7264:	ldr.w	r4, [r4, #6]
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    7268:	cmp	r4, #0
    726a:	beq.n	7238 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    726c:	movs	r1, #0
    726e:	mov	r0, r4
    7270:	bl	6ee8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    7274:	cmp	r0, #0
    7276:	beq.n	7238 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    7278:	ldr	r2, [pc, #172]	; (7328 <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
    727a:	ldrh.w	r3, [r2, #11]
    727e:	cmp.w	r3, #512	; 0x200
    7282:	bne.n	7238 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    7284:	ldrb	r1, [r2, #16]
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    7286:	cmp	r1, #0
    7288:	beq.n	7238 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    728a:	ldrh	r3, [r2, #14]
    728c:	cmp	r3, #0
    728e:	beq.n	7238 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    7290:	ldrb	r6, [r2, #13]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    7292:	cmp	r6, #0
    7294:	beq.n	7238 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    7296:	movs	r3, #0
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    7298:	strb	r1, [r5, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;
    729a:	strb	r6, [r5, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    729c:	strb	r3, [r5, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    729e:	movs	r7, #1
    72a0:	b.n	72aa <SdVolume::init(Sd2Card*, unsigned char)+0x82>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    72a2:	cmp	r1, #9
    72a4:	mov	r3, r1
    72a6:	strb	r1, [r5, #16]
    72a8:	beq.n	7238 <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    72aa:	lsl.w	r0, r7, r3
    72ae:	cmp	r0, r6
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    72b0:	add.w	r1, r3, #1
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    72b4:	bne.n	72a2 <SdVolume::init(Sd2Card*, unsigned char)+0x7a>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    72b6:	ldrh	r6, [r2, #22]
    72b8:	ldr	r1, [pc, #108]	; (7328 <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    72ba:	cbnz	r6, 72be <SdVolume::init(Sd2Card*, unsigned char)+0x96>
    72bc:	ldr	r6, [r1, #36]	; 0x24

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    72be:	ldrh.w	lr, [r2, #14]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    72c2:	str	r6, [r5, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    72c4:	add	lr, r4
    72c6:	str.w	lr, [r5, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    72ca:	ldrh.w	r1, [r2, #17]

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    72ce:	ldrb	r7, [r2, #16]
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    72d0:	strh	r1, [r5, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    72d2:	lsls	r0, r1, #5

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    72d4:	mla	r6, r6, r7, lr

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    72d8:	addw	r0, r0, #511	; 0x1ff
    72dc:	add.w	r0, r6, r0, asr #9

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    72e0:	str	r6, [r5, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    72e2:	str	r0, [r5, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    72e4:	ldrh.w	r1, [r2, #19]
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    72e8:	ldr	r6, [pc, #60]	; (7328 <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    72ea:	cbnz	r1, 72ee <SdVolume::init(Sd2Card*, unsigned char)+0xc6>
    72ec:	ldr	r1, [r6, #32]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    72ee:	subs	r4, r4, r0
    72f0:	add	r4, r1
    72f2:	lsr.w	r3, r4, r3

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    72f6:	movw	r1, #4084	; 0xff4
    72fa:	cmp	r3, r1
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    72fc:	str	r3, [r5, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    72fe:	bls.n	7318 <SdVolume::init(Sd2Card*, unsigned char)+0xf0>
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    7300:	movw	r1, #65524	; 0xfff4
    7304:	cmp	r3, r1
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    7306:	ittet	hi
    7308:	ldrhi	r3, [r2, #44]	; 0x2c
    730a:	strhi	r3, [r5, #36]	; 0x24

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
    730c:	movls	r3, #16
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
    730e:	movhi	r3, #32
    7310:	strb.w	r3, [r5, #32]
  }
  return true;
    7314:	movs	r0, #1
}
    7316:	pop	{r3, r4, r5, r6, r7, pc}
  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    7318:	movs	r3, #12
    731a:	strb.w	r3, [r5, #32]
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    731e:	movs	r0, #1
    7320:	pop	{r3, r4, r5, r6, r7, pc}
    7322:	nop
    7324:	.word	0x1fffbaa8
    7328:	.word	0x1fffbaac

0000732c <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    732c:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    732e:	ldrsb.w	r3, [r0, #5]
    7332:	cmp	r3, #0
    7334:	blt.n	733e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    7336:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    733a:	b.w	6e94 <SdVolume::cacheFlush()>
    733e:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    7340:	movs	r1, #1
    7342:	ldr	r0, [r0, #16]
    7344:	bl	6ee8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    7348:	cbz	r0, 738a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    734a:	ldrb	r5, [r4, #20]
    734c:	ldr	r3, [pc, #64]	; (7390 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    734e:	adds.w	r5, r3, r5, lsl #5
    7352:	beq.n	738a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    7354:	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    7356:	ldr	r2, [pc, #60]	; (7394 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    7358:	cmp	r3, #1
    735a:	itt	ls
    735c:	ldrls	r3, [r4, #24]
    735e:	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    7360:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    7362:	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    7364:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    7366:	lsrs	r3, r3, #16
    7368:	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    736a:	cbz	r2, 737a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4e>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    736c:	add.w	r1, r5, #22
    7370:	add.w	r0, r5, #24
    7374:	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    7376:	ldrh	r3, [r5, #24]
    7378:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    737a:	ldrb	r3, [r4, #5]
    737c:	and.w	r3, r3, #127	; 0x7f
    7380:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    7382:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    7386:	b.w	6e94 <SdVolume::cacheFlush()>
}
    738a:	movs	r0, #0
    738c:	pop	{r3, r4, r5, pc}
    738e:	nop
    7390:	.word	0x1fffbaac
    7394:	.word	0x1fffbcb0

00007398 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    7398:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    739a:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    739e:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    73a0:	movs	r1, #1
    73a2:	ldr	r0, [r0, #32]
    73a4:	bl	70bc <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    73a8:	cbz	r0, 73c0 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    73aa:	ldr	r3, [r4, #28]
    73ac:	cbnz	r3, 73be <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    73ae:	ldrb	r3, [r4, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    73b0:	ldr	r2, [r4, #8]
    73b2:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    73b4:	orn	r3, r3, #127	; 0x7f
    73b8:	strb	r3, [r4, #5]
    73ba:	movs	r0, #1
    73bc:	pop	{r4, pc}
  }
  return true;
    73be:	movs	r0, #1
}
    73c0:	pop	{r4, pc}
    73c2:	nop

000073c4 <SdFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    73c4:	push	{r4, r5, r6, lr}
    73c6:	mov	r6, r0
  if (!addCluster()) return false;
    73c8:	bl	7398 <SdFile::addCluster()>
    73cc:	cbz	r0, 73f6 <SdFile::addDirCluster()+0x32>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    73ce:	ldr	r2, [r6, #32]
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    73d0:	ldr	r5, [r6, #8]
    73d2:	ldrb	r1, [r2, #16]
    73d4:	ldr	r3, [r2, #20]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    73d6:	ldrb	r4, [r2, #4]
    73d8:	subs	r5, #2
    73da:	lsls	r5, r1
    73dc:	subs	r3, #1
    73de:	cbz	r4, 73fe <SdFile::addDirCluster()+0x3a>
    73e0:	add	r5, r3
    73e2:	b.n	73ea <SdFile::addDirCluster()+0x26>
    73e4:	ands.w	r4, r4, #255	; 0xff
    73e8:	beq.n	73fa <SdFile::addDirCluster()+0x36>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    73ea:	adds	r0, r4, r5
    73ec:	bl	6fb4 <SdVolume::cacheZeroBlock(unsigned long)>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    73f0:	subs	r4, #1
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    73f2:	cmp	r0, #0
    73f4:	bne.n	73e4 <SdFile::addDirCluster()+0x20>
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;
    73f6:	movs	r0, #0
    73f8:	pop	{r4, r5, r6, pc}
    73fa:	ldr	r3, [r6, #32]
    73fc:	ldrb	r1, [r3, #16]
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    73fe:	ldr	r0, [r6, #24]
    7400:	mov.w	r2, #512	; 0x200
    7404:	lsl.w	r3, r2, r1
    7408:	add	r3, r0
    740a:	str	r3, [r6, #24]
    740c:	movs	r0, #1
  return true;
}
    740e:	pop	{r4, r5, r6, pc}

00007410 <SdFile::close()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    7410:	ldrb	r2, [r0, #6]
    7412:	cbnz	r2, 7418 <SdFile::close()+0x8>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    7414:	movs	r0, #0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    7416:	bx	lr
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    7418:	push	{r4, lr}
    741a:	mov	r4, r0
    741c:	bl	732c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  if (!sync())return false;
    7420:	cbz	r0, 742a <SdFile::close()+0x1a>
  type_ = FAT_FILE_TYPE_CLOSED;
    7422:	movs	r3, #0
    7424:	strb	r3, [r4, #6]
  return true;
    7426:	movs	r0, #1
}
    7428:	pop	{r4, pc}
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    742a:	movs	r0, #0
    742c:	pop	{r4, pc}
    742e:	nop

00007430 <SdFile::make83Name(char const*, unsigned char*)>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    7430:	push	{r4, r5, r6}
    7432:	subs	r3, r1, #1
    7434:	add.w	r4, r1, #10
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    7438:	movs	r2, #32
    743a:	strb.w	r2, [r3, #1]!
    743e:	cmp	r3, r4
    7440:	bne.n	743a <SdFile::make83Name(char const*, unsigned char*)+0xa>
    7442:	subs	r0, #1
    7444:	movs	r5, #0
    7446:	movs	r6, #7
  i = 0;
  while ((c = *str++) != '\0') {
    7448:	ldrb.w	r4, [r0, #1]!
    744c:	cbz	r4, 749a <SdFile::make83Name(char const*, unsigned char*)+0x6a>
    if (c == '.') {
    744e:	cmp	r4, #46	; 0x2e
    7450:	beq.n	7490 <SdFile::make83Name(char const*, unsigned char*)+0x60>
    7452:	ldr	r2, [pc, #88]	; (74ac <SdFile::make83Name(char const*, unsigned char*)+0x7c>)
    7454:	b.n	745a <SdFile::make83Name(char const*, unsigned char*)+0x2a>
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    7456:	cmp	r4, r3
    7458:	beq.n	748a <SdFile::make83Name(char const*, unsigned char*)+0x5a>
    745a:	ldrb.w	r3, [r2], #1
    745e:	cmp	r3, #0
    7460:	bne.n	7456 <SdFile::make83Name(char const*, unsigned char*)+0x26>
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    7462:	cmp	r6, r5
    7464:	bcc.n	74a6 <SdFile::make83Name(char const*, unsigned char*)+0x76>
    7466:	sub.w	r2, r4, #33	; 0x21
    746a:	cmp	r2, #93	; 0x5d
    746c:	bhi.n	74a6 <SdFile::make83Name(char const*, unsigned char*)+0x76>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    746e:	sub.w	r2, r4, #97	; 0x61
    7472:	cmp	r2, #25
    7474:	add.w	r3, r5, #1
    7478:	it	ls
    747a:	subls	r4, #32
    747c:	add	r5, r1
    747e:	uxtb	r3, r3
    7480:	it	ls
    7482:	uxtbls	r4, r4
    7484:	strb	r4, [r5, #0]
    7486:	mov	r5, r3
    7488:	b.n	7448 <SdFile::make83Name(char const*, unsigned char*)+0x18>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    748a:	movs	r0, #0
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
}
    748c:	pop	{r4, r5, r6}
    748e:	bx	lr
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    7490:	cmp	r6, #10
    7492:	beq.n	748a <SdFile::make83Name(char const*, unsigned char*)+0x5a>
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    7494:	movs	r5, #8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    7496:	movs	r6, #10
    7498:	b.n	7448 <SdFile::make83Name(char const*, unsigned char*)+0x18>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    749a:	ldrb	r3, [r1, #0]
    749c:	subs.w	r0, r3, #32
    74a0:	it	ne
    74a2:	movne	r0, #1
    74a4:	b.n	748c <SdFile::make83Name(char const*, unsigned char*)+0x5c>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    74a6:	mov	r0, r3
    74a8:	b.n	748c <SdFile::make83Name(char const*, unsigned char*)+0x5c>
    74aa:	nop
    74ac:	.word	0x0000ca84

000074b0 <SdFile::openRoot(SdVolume*)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    74b0:	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) return false;
    74b2:	ldrb	r3, [r0, #6]
    74b4:	cbnz	r3, 74c6 <SdFile::openRoot(SdVolume*)+0x16>
    74b6:	ldrb.w	r2, [r1, #32]

  if (vol->fatType() == 16) {
    74ba:	cmp	r2, #16
    74bc:	mov	r5, r1
    74be:	mov	r4, r0
    74c0:	beq.n	74ca <SdFile::openRoot(SdVolume*)+0x1a>
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    74c2:	cmp	r2, #32
    74c4:	beq.n	74e8 <SdFile::openRoot(SdVolume*)+0x38>
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;
    74c6:	movs	r0, #0
    74c8:	pop	{r3, r4, r5, pc}

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    74ca:	movs	r2, #2
    74cc:	strb	r2, [r0, #6]
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
    74ce:	ldrh	r2, [r1, #34]	; 0x22
  // error if file is already open
  if (isOpen()) return false;

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    74d0:	str	r3, [r0, #28]
    fileSize_ = 32 * vol->rootDirEntryCount();
    74d2:	lsls	r3, r2, #5
    74d4:	str	r3, [r0, #24]
  vol_ = vol;
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    74d6:	movs	r3, #0
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    74d8:	movs	r0, #1
    74da:	strb	r0, [r4, #5]
  curCluster_ = 0;
  curPosition_ = 0;

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
    74dc:	strb	r3, [r4, #20]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    74de:	str	r5, [r4, #32]
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    74e0:	str	r3, [r4, #8]
  curPosition_ = 0;
    74e2:	str	r3, [r4, #12]

  // root has no directory entry
  dirBlock_ = 0;
    74e4:	str	r3, [r4, #16]
  dirIndex_ = 0;
  return true;
}
    74e6:	pop	{r3, r4, r5, pc}
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    74e8:	movs	r3, #3
    74ea:	strb	r3, [r0, #6]
    74ec:	ldr	r1, [r1, #36]	; 0x24
    firstCluster_ = vol->rootDirStart();
    74ee:	str	r1, [r0, #28]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    74f0:	add.w	r2, r0, #24
    74f4:	mov	r0, r5
    74f6:	bl	705c <SdVolume::chainSize(unsigned long, unsigned long*) const>
    74fa:	cmp	r0, #0
    74fc:	bne.n	74d6 <SdFile::openRoot(SdVolume*)+0x26>
    74fe:	b.n	74c6 <SdFile::openRoot(SdVolume*)+0x16>

00007500 <SdFile::read(void*, unsigned int)>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    7500:	ldrb	r3, [r0, #6]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    7502:	cbnz	r3, 750a <SdFile::read(void*, unsigned int)+0xa>
    7504:	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    7508:	bx	lr
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    750a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    750e:	mov	fp, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    7510:	ldrb	r1, [r0, #5]
    7512:	lsls	r1, r1, #31
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    7514:	sub	sp, #12
    7516:	mov	r5, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    7518:	bpl.n	75cc <SdFile::read(void*, unsigned int)+0xcc>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    751a:	ldr	r1, [r0, #12]
    751c:	ldr	r4, [r0, #24]
    751e:	subs	r4, r4, r1
    7520:	cmp	r4, r2
    7522:	it	cs
    7524:	movcs	r4, r2
    7526:	mov	r6, r4
    7528:	str	r4, [sp, #4]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    752a:	cmp	r4, #0
    752c:	beq.n	75f8 <SdFile::read(void*, unsigned int)+0xf8>
    752e:	mov	r2, r3
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    7530:	cmp	r2, #2
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    7532:	ldr.w	r9, [pc, #232]	; 761c <SdFile::read(void*, unsigned int)+0x11c>

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    7536:	ldr	r7, [pc, #224]	; (7618 <SdFile::read(void*, unsigned int)+0x118>)
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    7538:	ldr.w	r8, [pc, #228]	; 7620 <SdFile::read(void*, unsigned int)+0x120>
    753c:	ldr	r2, [r5, #32]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    753e:	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    7542:	beq.n	75c4 <SdFile::read(void*, unsigned int)+0xc4>
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    7544:	ldrb	r4, [r2, #4]
    7546:	subs	r4, #1
    7548:	and.w	r4, r4, r1, lsr #9
    754c:	uxtb	r4, r4
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
    754e:	cmp.w	sl, #0
    7552:	bne.n	7612 <SdFile::read(void*, unsigned int)+0x112>
    7554:	cmp	r4, #0
    7556:	bne.n	7612 <SdFile::read(void*, unsigned int)+0x112>
        // start of new cluster
        if (curPosition_ == 0) {
    7558:	cmp	r1, #0
    755a:	bne.n	7600 <SdFile::read(void*, unsigned int)+0x100>
          // use first cluster in file
          curCluster_ = firstCluster_;
    755c:	ldr	r1, [r5, #28]
    755e:	str	r1, [r5, #8]
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    7560:	ldrb	r0, [r2, #16]
    7562:	ldr	r2, [r2, #20]
    7564:	subs	r1, #2
    7566:	lsls	r1, r0
    7568:	add	r4, r2
    756a:	adds	r0, r1, r4
    }
    int32_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    756c:	rsb	r4, sl, #512	; 0x200

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    7570:	ldrb	r2, [r5, #5]
    7572:	cmp	r4, r6
    7574:	it	ge
    7576:	movge	r4, r6
    7578:	lsls	r3, r2, #25
    757a:	bmi.n	75d6 <SdFile::read(void*, unsigned int)+0xd6>
    757c:	cmp.w	r4, #512	; 0x200
    7580:	beq.n	75d6 <SdFile::read(void*, unsigned int)+0xd6>
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    7582:	movs	r1, #0
    7584:	bl	6ee8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    7588:	cbz	r0, 75cc <SdFile::read(void*, unsigned int)+0xcc>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    758a:	add.w	lr, sl, r9
      uint8_t* end = src + n;
    758e:	add.w	r0, lr, r4
      while (src != end) *dst++ = *src++;
    7592:	cmp	lr, r0
    7594:	beq.n	75ae <SdFile::read(void*, unsigned int)+0xae>
    7596:	add.w	r2, fp, #4294967295
    759a:	mov	r3, lr
    759c:	ldrb.w	r1, [r3], #1
    75a0:	strb.w	r1, [r2, #1]!
    75a4:	cmp	r0, r3
    75a6:	bne.n	759c <SdFile::read(void*, unsigned int)+0x9c>
    75a8:	rsb	r0, lr, r0
    75ac:	add	fp, r0
    }
    curPosition_ += n;
    75ae:	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    75b0:	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    75b2:	add	r1, r4
    75b4:	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    75b6:	beq.n	75f8 <SdFile::read(void*, unsigned int)+0xf8>
    75b8:	ldrb	r2, [r5, #6]
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    75ba:	cmp	r2, #2

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    75bc:	ubfx	sl, r1, #0, #9
    75c0:	ldr	r2, [r5, #32]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    75c2:	bne.n	7544 <SdFile::read(void*, unsigned int)+0x44>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    75c4:	ldr	r0, [r2, #36]	; 0x24
    75c6:	add.w	r0, r0, r1, lsr #9
    75ca:	b.n	756c <SdFile::read(void*, unsigned int)+0x6c>
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    75cc:	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    75d0:	add	sp, #12
    75d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    75d6:	ldr	r2, [r7, #0]
    75d8:	cmp	r0, r2
    75da:	beq.n	7582 <SdFile::read(void*, unsigned int)+0x82>
    75dc:	mov	r1, r0
    75de:	mov	r2, fp
    75e0:	ldr.w	r0, [r8]
    75e4:	bl	8090 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
      if (!vol_->readBlock(block, dst)) return -1;
    75e8:	cmp	r0, #0
    75ea:	beq.n	75cc <SdFile::read(void*, unsigned int)+0xcc>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    75ec:	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    75ee:	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    75f0:	add	r1, r4
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    75f2:	add	fp, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    75f4:	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    75f6:	bne.n	75b8 <SdFile::read(void*, unsigned int)+0xb8>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    75f8:	ldr	r0, [sp, #4]
}
    75fa:	add	sp, #12
    75fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    7600:	mov	r0, r2
    7602:	ldr	r1, [r5, #8]
    7604:	add.w	r2, r5, #8
    7608:	bl	6fec <SdVolume::fatGet(unsigned long, unsigned long*) const>
    760c:	cmp	r0, #0
    760e:	beq.n	75cc <SdFile::read(void*, unsigned int)+0xcc>
    7610:	ldr	r2, [r5, #32]
    7612:	ldr	r1, [r5, #8]
    7614:	b.n	7560 <SdFile::read(void*, unsigned int)+0x60>
    7616:	nop
    7618:	.word	0x1fff945c
    761c:	.word	0x1fffbaac
    7620:	.word	0x1fffbaa8

00007624 <SdFile::readDirCache()>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    7624:	ldrb	r3, [r0, #6]
    7626:	cmp	r3, #1
    7628:	bls.n	765a <SdFile::readDirCache()+0x36>
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    762a:	push	{r4, r5, lr}
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    762c:	ldr	r3, [r0, #12]
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    762e:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    7630:	movs	r2, #1
    7632:	add.w	r1, sp, #7
    7636:	mov	r4, r0
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    7638:	ubfx	r5, r3, #5, #4
    763c:	bl	7500 <SdFile::read(void*, unsigned int)>
    7640:	cmp	r0, #1
    7642:	beq.n	764a <SdFile::readDirCache()+0x26>

  // use read to locate and cache block
  if (read() < 0) return NULL;
    7644:	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    7646:	add	sp, #12
    7648:	pop	{r4, r5, pc}

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    764a:	ldr	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    764c:	ldr	r0, [pc, #16]	; (7660 <SdFile::readDirCache()+0x3c>)

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    764e:	adds	r3, #31

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    7650:	add.w	r0, r0, r5, lsl #5

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    7654:	str	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    7656:	add	sp, #12
    7658:	pop	{r4, r5, pc}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    765a:	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    765c:	bx	lr
    765e:	nop
    7660:	.word	0x1fffbaac

00007664 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    7664:	push	{r3, r4, r5, r6, r7, lr}
    7666:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    7668:	cbz	r3, 7670 <SdFile::seekSet(unsigned long)+0xc>
    766a:	ldr	r2, [r0, #24]
    766c:	cmp	r2, r1
    766e:	bcs.n	7674 <SdFile::seekSet(unsigned long)+0x10>
    7670:	movs	r0, #0
    7672:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    7674:	cmp	r3, #2
    7676:	mov	r7, r1
    7678:	mov	r5, r0
    767a:	beq.n	76b2 <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    767c:	cbz	r7, 76c0 <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    767e:	ldr	r3, [r5, #32]
    7680:	ldr	r1, [r5, #12]
    7682:	ldrb	r4, [r3, #16]
    7684:	subs	r2, r1, #1
    7686:	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    768a:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    768c:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    768e:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    7690:	cmp	r2, r4
    7692:	bls.n	76b8 <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    7694:	ldr	r3, [r5, #28]
    7696:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    7698:	add.w	r6, r5, #8
    769c:	b.n	76ac <SdFile::seekSet(unsigned long)+0x48>
    769e:	ldr	r1, [r5, #8]
    76a0:	ldr	r0, [r5, #32]
    76a2:	bl	6fec <SdVolume::fatGet(unsigned long, unsigned long*) const>
    76a6:	subs	r4, #1
    76a8:	cmp	r0, #0
    76aa:	beq.n	7670 <SdFile::seekSet(unsigned long)+0xc>
    76ac:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    76ae:	cmp	r4, #0
    76b0:	bne.n	769e <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    76b2:	str	r7, [r5, #12]
    return true;
    76b4:	movs	r0, #1
    76b6:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    76b8:	cmp	r1, #0
    76ba:	beq.n	7694 <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    76bc:	subs	r4, r4, r2
    76be:	b.n	7698 <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    76c0:	str	r7, [r5, #8]
    curPosition_ = 0;
    76c2:	str	r7, [r5, #12]
    return true;
    76c4:	movs	r0, #1
    76c6:	pop	{r3, r4, r5, r6, r7, pc}

000076c8 <SdFile::sync()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    76c8:	ldrb	r3, [r0, #6]
    76ca:	cbz	r3, 76d0 <SdFile::sync()+0x8>
    76cc:	b.w	732c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    76d0:	mov	r0, r3
    76d2:	bx	lr

000076d4 <SdFile::truncate(unsigned long)>:
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    76d4:	ldrb	r3, [r0, #6]
    76d6:	cmp	r3, #1
    76d8:	beq.n	76de <SdFile::truncate(unsigned long)+0xa>
    76da:	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    76dc:	bx	lr
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    76de:	push	{r4, r5, r6, r7, lr}
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    76e0:	ldrb	r5, [r0, #5]
    76e2:	lsls	r4, r5, #30
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    76e4:	sub	sp, #12
    76e6:	mov	r2, r0
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    76e8:	bpl.n	7724 <SdFile::truncate(unsigned long)+0x50>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    76ea:	ldr	r5, [r0, #24]
    76ec:	cmp	r5, r1
    76ee:	mov	r4, r1
    76f0:	bcc.n	7724 <SdFile::truncate(unsigned long)+0x50>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    76f2:	cbz	r5, 772a <SdFile::truncate(unsigned long)+0x56>
    76f4:	mov	r5, r4

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    76f6:	ldr	r6, [r2, #12]
    76f8:	mov	r4, r2

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    76fa:	bl	7664 <SdFile::seekSet(unsigned long)>
    76fe:	cbz	r0, 7724 <SdFile::truncate(unsigned long)+0x50>

  if (length == 0) {
    7700:	cbnz	r5, 7730 <SdFile::truncate(unsigned long)+0x5c>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    7702:	ldr	r1, [r4, #28]
    7704:	ldr	r0, [r4, #32]
    7706:	bl	71cc <SdVolume::freeChain(unsigned long)>
    770a:	cbz	r0, 7724 <SdFile::truncate(unsigned long)+0x50>
    firstCluster_ = 0;
    770c:	str	r5, [r4, #28]
    770e:	b.n	7756 <SdFile::truncate(unsigned long)+0x82>
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;

    if (!vol_->isEOC(toFree)) {
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    7710:	bl	71cc <SdVolume::freeChain(unsigned long)>
    7714:	cbz	r0, 7724 <SdFile::truncate(unsigned long)+0x50>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    7716:	mvn.w	r2, #4026531840	; 0xf0000000
    771a:	ldr	r1, [r4, #8]
    771c:	ldr	r0, [r4, #32]
    771e:	bl	71ac <SdVolume::fatPut(unsigned long, unsigned long)>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    7722:	cbnz	r0, 7756 <SdFile::truncate(unsigned long)+0x82>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    7724:	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    7726:	add	sp, #12
    7728:	pop	{r4, r5, r6, r7, pc}

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    772a:	mov	r0, r3

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    772c:	add	sp, #12
    772e:	pop	{r4, r5, r6, r7, pc}
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    7730:	add	r2, sp, #4
    7732:	ldr	r1, [r4, #8]
    7734:	ldr	r0, [r4, #32]
    7736:	bl	6fec <SdVolume::fatGet(unsigned long, unsigned long*) const>
    773a:	cmp	r0, #0
    773c:	beq.n	7724 <SdFile::truncate(unsigned long)+0x50>

    if (!vol_->isEOC(toFree)) {
    773e:	ldr	r0, [r4, #32]
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    7740:	ldr	r3, [pc, #60]	; (7780 <SdFile::truncate(unsigned long)+0xac>)
    7742:	ldrb.w	r7, [r0, #32]
    7746:	ldr	r1, [sp, #4]
    7748:	movw	r2, #65528	; 0xfff8
    774c:	cmp	r7, #16
    774e:	it	eq
    7750:	moveq	r3, r2
    7752:	cmp	r1, r3
    7754:	bcc.n	7710 <SdFile::truncate(unsigned long)+0x3c>
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    7756:	ldrb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    7758:	ldrb	r2, [r4, #6]

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    }
  }
  fileSize_ = length;
    775a:	str	r5, [r4, #24]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    775c:	orn	r3, r3, #127	; 0x7f
    7760:	strb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    7762:	cmp	r2, #0
    7764:	beq.n	7724 <SdFile::truncate(unsigned long)+0x50>
    7766:	mov	r0, r4
    7768:	bl	732c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;

  if (!sync()) return false;
    776c:	cmp	r0, #0
    776e:	beq.n	7724 <SdFile::truncate(unsigned long)+0x50>

  // set file to correct position
  return seekSet(newPos);
    7770:	cmp	r5, r6
    7772:	mov	r1, r5
    7774:	mov	r0, r4
    7776:	it	cs
    7778:	movcs	r1, r6
    777a:	bl	7664 <SdFile::seekSet(unsigned long)>
    777e:	b.n	7726 <SdFile::truncate(unsigned long)+0x52>
    7780:	.word	0x0ffffff8

00007784 <SdFile::openCachedEntry(unsigned char, unsigned char)>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    7784:	push	{r4, r5, r6, lr}
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    7786:	ldr	r3, [pc, #116]	; (77fc <SdFile::openCachedEntry(unsigned char, unsigned char)+0x78>)
    7788:	add.w	r6, r3, r1, lsl #5

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    778c:	ldrb	r3, [r6, #11]
    778e:	tst.w	r3, #17
    7792:	beq.n	779a <SdFile::openCachedEntry(unsigned char, unsigned char)+0x16>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    7794:	tst.w	r2, #66	; 0x42
    7798:	bne.n	77d8 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
  dirBlock_ = SdVolume::cacheBlockNumber_;
    779a:	ldr	r3, [pc, #100]	; (7800 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x7c>)
  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    779c:	strb	r1, [r0, #20]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    779e:	ldr	r3, [r3, #0]
    77a0:	str	r3, [r0, #16]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;
    77a2:	ldrh	r3, [r6, #26]
    77a4:	ldrh	r1, [r6, #20]
    77a6:	orr.w	r1, r3, r1, lsl #16
    77aa:	str	r1, [r0, #28]
    77ac:	ldrb	r3, [r6, #11]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    77ae:	ands.w	r3, r3, #24
    77b2:	mov	r5, r2
    77b4:	mov	r4, r0
    77b6:	bne.n	77d4 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x50>
    fileSize_ = p->fileSize;
    77b8:	ldr	r3, [r6, #28]
    77ba:	str	r3, [r0, #24]
    type_ = FAT_FILE_TYPE_NORMAL;
    77bc:	movs	r3, #1
    77be:	strb	r3, [r0, #6]
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    77c0:	and.w	r3, r5, #15

  // set to start of file
  curCluster_ = 0;
    77c4:	movs	r1, #0
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    77c6:	strb	r3, [r4, #5]
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    77c8:	lsls	r3, r5, #25
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);

  // set to start of file
  curCluster_ = 0;
    77ca:	str	r1, [r4, #8]
  curPosition_ = 0;
    77cc:	str	r1, [r4, #12]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    77ce:	bmi.n	77f0 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x6c>
  return true;
    77d0:	movs	r0, #1
}
    77d2:	pop	{r4, r5, r6, pc}

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    77d4:	cmp	r3, #16
    77d6:	beq.n	77dc <SdFile::openCachedEntry(unsigned char, unsigned char)+0x58>
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    77d8:	movs	r0, #0
    77da:	pop	{r4, r5, r6, pc}
  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    77dc:	add.w	r2, r0, #24
    77e0:	ldr	r0, [r0, #32]
    77e2:	bl	705c <SdVolume::chainSize(unsigned long, unsigned long*) const>
    77e6:	cmp	r0, #0
    77e8:	beq.n	77d8 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
    type_ = FAT_FILE_TYPE_SUBDIR;
    77ea:	movs	r3, #4
    77ec:	strb	r3, [r4, #6]
    77ee:	b.n	77c0 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x3c>
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    77f0:	mov	r0, r4
  return true;
}
    77f2:	ldmia.w	sp!, {r4, r5, r6, lr}
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    77f6:	b.w	76d4 <SdFile::truncate(unsigned long)>
    77fa:	nop
    77fc:	.word	0x1fffbaac
    7800:	.word	0x1fff945c

00007804 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    7804:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7808:	sub	sp, #16
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    780a:	add	r7, sp, #4
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    780c:	mov	r6, r0
    780e:	mov	r4, r1
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    7810:	mov	r0, r2
    7812:	mov	r1, r7
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    7814:	mov	r9, r3
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    7816:	bl	7430 <SdFile::make83Name(char const*, unsigned char*)>
    781a:	cbz	r0, 787c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    781c:	movs	r2, #0
  vol_ = dirFile->vol_;
    781e:	ldr	r1, [r4, #32]
    7820:	str	r1, [r6, #32]
    7822:	mov	r3, r2
  dirFile->rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;
    7824:	mov	r5, r2
    7826:	str	r2, [r4, #8]
    7828:	str	r2, [r4, #12]
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    782a:	ldr.w	r8, [pc, #256]	; 792c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x128>
    782e:	b.n	7842 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3e>
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    7830:	cmp	r3, #229	; 0xe5
    7832:	beq.n	786e <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x6a>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    7834:	mov	r1, r0
    7836:	movs	r2, #11
    7838:	mov	r0, r7
    783a:	bl	bcac <memcmp>
    783e:	cbz	r0, 78a4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xa0>
    7840:	ldr	r3, [r4, #12]

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    7842:	ldr	r2, [r4, #24]
    7844:	cmp	r2, r3
    7846:	bls.n	7884 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x80>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    7848:	mov	r0, r4
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    784a:	ubfx	sl, r3, #5, #4
    p = dirFile->readDirCache();
    784e:	bl	7624 <SdFile::readDirCache()>
    if (p == NULL) return false;
    7852:	cbz	r0, 787c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    7854:	ldrb	r3, [r0, #0]
    7856:	cmp	r3, #0
    7858:	bne.n	7830 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x2c>
      // remember first empty slot
      if (!emptyFound) {
    785a:	cbnz	r5, 7874 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x70>
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    785c:	ldr.w	r3, [r8]

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
    7860:	strb.w	sl, [r6, #20]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    7864:	str	r3, [r6, #16]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    7866:	ldrb	r3, [r0, #0]
    7868:	cbz	r3, 7874 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x70>
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
    786a:	movs	r5, #1
    786c:	b.n	7840 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3c>
    786e:	cmp	r5, #0
    7870:	bne.n	786a <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x66>
    7872:	b.n	785c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x58>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    7874:	and.w	r3, r9, #18
    7878:	cmp	r3, #18
    787a:	beq.n	78b8 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xb4>
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    787c:	movs	r0, #0
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    787e:	add	sp, #16
    7880:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    7884:	and.w	r3, r9, #18
    7888:	cmp	r3, #18
    788a:	bne.n	787c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    788c:	cbnz	r5, 78b8 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xb4>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    788e:	ldrb	r3, [r4, #6]
    7890:	cmp	r3, #2
    7892:	beq.n	787c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    7894:	mov	r0, r4
    7896:	bl	73c4 <SdFile::addDirCluster()>
    789a:	cmp	r0, #0
    789c:	beq.n	787c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
    789e:	ldr	r4, [pc, #132]	; (7924 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x120>)

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;

    // use first entry in cluster
    dirIndex_ = 0;
    78a0:	strb	r5, [r6, #20]
    78a2:	b.n	78ce <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xca>
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    78a4:	and.w	r3, r9, #48	; 0x30
    78a8:	cmp	r3, #48	; 0x30
    78aa:	beq.n	787c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    78ac:	mov	r2, r9
    78ae:	mov	r1, sl
    78b0:	mov	r0, r6
    78b2:	bl	7784 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    78b6:	b.n	787e <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x7a>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    78b8:	movs	r1, #1
    78ba:	ldr	r0, [r6, #16]
    78bc:	bl	6ee8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    78c0:	cmp	r0, #0
    78c2:	beq.n	787c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    78c4:	ldrb	r4, [r6, #20]
    78c6:	ldr	r3, [pc, #92]	; (7924 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x120>)
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
    78c8:	adds.w	r4, r3, r4, lsl #5
    78cc:	beq.n	787c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>
    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    78ce:	movs	r2, #32
    78d0:	movs	r1, #0
    78d2:	mov	r0, r4
    78d4:	bl	bd10 <memset>
  memcpy(p->name, dname, 11);
    78d8:	ldmia.w	r7, {r0, r1, r2}
    78dc:	mov	r3, r4
    78de:	stmia	r3!, {r0, r1}

  // set timestamps
  if (dateTime_) {
    78e0:	ldr	r1, [pc, #68]	; (7928 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x124>)
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    78e2:	strh.w	r2, [r3], #2

  // set timestamps
  if (dateTime_) {
    78e6:	ldr	r5, [r1, #0]
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    78e8:	lsrs	r2, r2, #16
    78ea:	strb	r2, [r3, #0]

  // set timestamps
  if (dateTime_) {
    78ec:	cbz	r5, 7916 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x112>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    78ee:	add.w	r1, r4, #14
    78f2:	add.w	r0, r4, #16
    78f6:	blx	r5
    78f8:	ldrh	r3, [r4, #16]
    78fa:	ldrh	r2, [r4, #14]
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    p->creationTime = FAT_DEFAULT_TIME;
  }
  p->lastAccessDate = p->creationDate;
    78fc:	strh	r3, [r4, #18]
  p->lastWriteDate = p->creationDate;
    78fe:	strh	r3, [r4, #24]
  p->lastWriteTime = p->creationTime;
    7900:	strh	r2, [r4, #22]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    7902:	bl	6e94 <SdVolume::cacheFlush()>
    7906:	cmp	r0, #0
    7908:	beq.n	787c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    790a:	mov	r2, r9
    790c:	ldrb	r1, [r6, #20]
    790e:	mov	r0, r6
    7910:	bl	7784 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    7914:	b.n	787e <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x7a>
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    7916:	movw	r3, #10273	; 0x2821
    p->creationTime = FAT_DEFAULT_TIME;
    791a:	mov.w	r2, #2048	; 0x800
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    791e:	strh	r3, [r4, #16]
    p->creationTime = FAT_DEFAULT_TIME;
    7920:	strh	r2, [r4, #14]
    7922:	b.n	78fc <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xf8>
    7924:	.word	0x1fffbaac
    7928:	.word	0x1fffbcb0
    792c:	.word	0x1fff945c

00007930 <SdFile::open(SdFile*, char const*, unsigned char)>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    7930:	push	{r4}
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    7932:	ldrb	r4, [r0, #6]
    7934:	cbz	r4, 793c <SdFile::open(SdFile*, char const*, unsigned char)+0xc>
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    7936:	movs	r0, #0
    7938:	pop	{r4}
    793a:	bx	lr
    793c:	pop	{r4}
    793e:	b.w	7804 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
    7942:	nop

00007944 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    7944:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7948:	mov	fp, r1

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    794a:	ldrb	r1, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    794c:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    794e:	cmp	r1, #1
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    7950:	mov	r7, r0
    7952:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    7954:	beq.n	7962 <SdFile::write(void const*, unsigned int)+0x1e>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    7956:	movs	r3, #1
    7958:	strb	r3, [r7, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    795a:	movs	r0, #0
}
    795c:	add	sp, #20
    795e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    7962:	ldrb	r2, [r0, #5]
    7964:	lsls	r1, r2, #30
    7966:	bpl.n	7956 <SdFile::write(void const*, unsigned int)+0x12>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    7968:	lsls	r3, r2, #29
    796a:	bpl.n	797e <SdFile::write(void const*, unsigned int)+0x3a>
    796c:	ldr	r4, [r7, #12]
    796e:	ldr	r1, [r7, #24]
    7970:	cmp	r4, r1
    7972:	beq.w	7ac6 <SdFile::write(void const*, unsigned int)+0x182>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    7976:	bl	7664 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    797a:	cmp	r0, #0
    797c:	beq.n	7956 <SdFile::write(void const*, unsigned int)+0x12>
  }

  while (nToWrite > 0) {
    797e:	ldr	r3, [sp, #4]
    7980:	ldr	r4, [r7, #12]
    7982:	cmp	r3, #0
    7984:	beq.n	7a1a <SdFile::write(void const*, unsigned int)+0xd6>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    7986:	ldr.w	r9, [pc, #396]	; 7b14 <SdFile::write(void const*, unsigned int)+0x1d0>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    798a:	ldr.w	sl, [pc, #396]	; 7b18 <SdFile::write(void const*, unsigned int)+0x1d4>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    798e:	ldr.w	r8, [sp, #4]
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    7992:	ldr	r0, [r7, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    7994:	ldrb	r6, [r0, #4]
    7996:	subs	r6, #1
    7998:	and.w	r6, r6, r4, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    799c:	ands.w	r6, r6, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    79a0:	ubfx	r4, r4, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    79a4:	bne.n	7a2c <SdFile::write(void const*, unsigned int)+0xe8>
    79a6:	cmp	r4, #0
    79a8:	bne.n	7a2c <SdFile::write(void const*, unsigned int)+0xe8>
      // start of new cluster
      if (curCluster_ == 0) {
    79aa:	ldr	r1, [r7, #8]
    79ac:	cmp	r1, #0
    79ae:	bne.n	7a90 <SdFile::write(void const*, unsigned int)+0x14c>
        if (firstCluster_ == 0) {
    79b0:	ldr	r2, [r7, #28]
    79b2:	cmp	r2, #0
    79b4:	beq.n	7ab4 <SdFile::write(void const*, unsigned int)+0x170>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    79b6:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    79b8:	rsb	r5, r4, #512	; 0x200
    79bc:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    79be:	cmp	r5, r8
    79c0:	bls.n	7a38 <SdFile::write(void const*, unsigned int)+0xf4>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    79c2:	ldrb	r5, [r0, #16]
    79c4:	ldr	r1, [r0, #20]
    79c6:	subs	r2, #2
    79c8:	lsls	r2, r5
    79ca:	add	r6, r1
    79cc:	add	r6, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    79ce:	uxth.w	r5, r8
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    79d2:	cbnz	r4, 79dc <SdFile::write(void const*, unsigned int)+0x98>
    79d4:	ldr	r0, [r7, #12]
    79d6:	ldr	r2, [r7, #24]
    79d8:	cmp	r0, r2
    79da:	bcs.n	7a76 <SdFile::write(void const*, unsigned int)+0x132>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    79dc:	mov	r0, r6
    79de:	movs	r1, #1
    79e0:	bl	6ee8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    79e4:	cmp	r0, #0
    79e6:	beq.n	7956 <SdFile::write(void const*, unsigned int)+0x12>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    79e8:	add	r4, r9
      uint8_t* end = dst + n;
    79ea:	add.w	lr, r4, r5
      while (dst != end) *dst++ = *src++;
    79ee:	cmp	r4, lr
    79f0:	beq.n	7a0e <SdFile::write(void const*, unsigned int)+0xca>
    79f2:	add.w	r1, fp, #4294967295
    79f6:	subs	r2, r4, #1
    79f8:	add.w	r6, lr, #4294967295
    79fc:	ldrb.w	r0, [r1, #1]!
    7a00:	strb.w	r0, [r2, #1]!
    7a04:	cmp	r6, r2
    7a06:	bne.n	79fc <SdFile::write(void const*, unsigned int)+0xb8>
    7a08:	rsb	r4, r4, lr
    7a0c:	add	fp, r4
    }
    nToWrite -= n;
    curPosition_ += n;
    7a0e:	ldr	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    7a10:	subs.w	r8, r8, r5
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    7a14:	add	r4, r5
    7a16:	str	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    7a18:	bne.n	7992 <SdFile::write(void const*, unsigned int)+0x4e>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    7a1a:	ldr	r3, [r7, #24]
    7a1c:	cmp	r3, r4
    7a1e:	bcs.n	7ad0 <SdFile::write(void const*, unsigned int)+0x18c>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    7a20:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    7a22:	str	r4, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    7a24:	orr.w	r2, r2, #128	; 0x80
    7a28:	strb	r2, [r7, #5]
    7a2a:	b.n	7ae2 <SdFile::write(void const*, unsigned int)+0x19e>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    7a2c:	rsb	r5, r4, #512	; 0x200
    7a30:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    7a32:	cmp	r5, r8
    7a34:	ldr	r2, [r7, #8]
    7a36:	bhi.n	79c2 <SdFile::write(void const*, unsigned int)+0x7e>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    7a38:	ldrb	r1, [r0, #16]
    7a3a:	ldr	r0, [r0, #20]
    7a3c:	subs	r2, #2
    7a3e:	lsls	r2, r1
    7a40:	add	r6, r0
    if (n == 512) {
    7a42:	cmp.w	r5, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    7a46:	add	r6, r2
    if (n == 512) {
    7a48:	bne.n	79d2 <SdFile::write(void const*, unsigned int)+0x8e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    7a4a:	ldr.w	r2, [sl]
    7a4e:	cmp	r6, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    7a50:	itt	eq
    7a52:	moveq.w	r2, #4294967295
    7a56:	streq.w	r2, [sl]
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    7a5a:	ldr	r2, [pc, #168]	; (7b04 <SdFile::write(void const*, unsigned int)+0x1c0>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    7a5c:	mov	r1, r6
    7a5e:	ldr	r0, [r2, #0]
    7a60:	mov	r2, fp
    7a62:	bl	821c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    7a66:	cmp	r0, #0
    7a68:	beq.w	7956 <SdFile::write(void const*, unsigned int)+0x12>
      src += 512;
    7a6c:	add.w	fp, fp, #512	; 0x200
    7a70:	mov.w	r5, #512	; 0x200
    7a74:	b.n	7a0e <SdFile::write(void const*, unsigned int)+0xca>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    7a76:	bl	6e94 <SdVolume::cacheFlush()>
    7a7a:	cmp	r0, #0
    7a7c:	beq.w	7956 <SdFile::write(void const*, unsigned int)+0x12>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    7a80:	ldr	r1, [pc, #132]	; (7b08 <SdFile::write(void const*, unsigned int)+0x1c4>)
        SdVolume::cacheBlockNumber_ = block;
    7a82:	str.w	r6, [sl]
    7a86:	ldrb	r2, [r1, #0]
    7a88:	orr.w	r2, r2, #1
    7a8c:	strb	r2, [r1, #0]
    7a8e:	b.n	79e8 <SdFile::write(void const*, unsigned int)+0xa4>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    7a90:	add	r2, sp, #12
    7a92:	bl	6fec <SdVolume::fatGet(unsigned long, unsigned long*) const>
    7a96:	cmp	r0, #0
    7a98:	beq.w	795c <SdFile::write(void const*, unsigned int)+0x18>
        if (vol_->isEOC(next)) {
    7a9c:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    7a9e:	ldr	r3, [pc, #108]	; (7b0c <SdFile::write(void const*, unsigned int)+0x1c8>)
    7aa0:	ldrb.w	r5, [r0, #32]
    7aa4:	ldr	r2, [sp, #12]
    7aa6:	movw	r1, #65528	; 0xfff8
    7aaa:	cmp	r5, #16
    7aac:	it	ne
    7aae:	movne	r1, r3
    7ab0:	cmp	r2, r1
    7ab2:	bcc.n	79b6 <SdFile::write(void const*, unsigned int)+0x72>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    7ab4:	mov	r0, r7
    7ab6:	bl	7398 <SdFile::addCluster()>
    7aba:	cmp	r0, #0
    7abc:	beq.w	7956 <SdFile::write(void const*, unsigned int)+0x12>
    7ac0:	ldr	r0, [r7, #32]
    7ac2:	ldr	r2, [r7, #8]
    7ac4:	b.n	79b8 <SdFile::write(void const*, unsigned int)+0x74>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    7ac6:	ldr	r3, [sp, #4]
    7ac8:	cmp	r3, #0
    7aca:	bne.w	7986 <SdFile::write(void const*, unsigned int)+0x42>
    7ace:	b.n	7ae2 <SdFile::write(void const*, unsigned int)+0x19e>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    7ad0:	ldr	r3, [pc, #60]	; (7b10 <SdFile::write(void const*, unsigned int)+0x1cc>)
    7ad2:	ldrb	r2, [r7, #5]
    7ad4:	ldr	r3, [r3, #0]
    7ad6:	cbz	r3, 7ae2 <SdFile::write(void const*, unsigned int)+0x19e>
    7ad8:	ldr	r3, [sp, #4]
    7ada:	cbz	r3, 7ae2 <SdFile::write(void const*, unsigned int)+0x19e>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    7adc:	orr.w	r2, r2, #128	; 0x80
    7ae0:	strb	r2, [r7, #5]
  }

  if (flags_ & O_SYNC) {
    7ae2:	lsls	r2, r2, #28
    7ae4:	bpl.n	7afa <SdFile::write(void const*, unsigned int)+0x1b6>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    7ae6:	ldrb	r3, [r7, #6]
    7ae8:	cmp	r3, #0
    7aea:	beq.w	7956 <SdFile::write(void const*, unsigned int)+0x12>
    7aee:	mov	r0, r7
    7af0:	bl	732c <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    7af4:	cmp	r0, #0
    7af6:	beq.w	7956 <SdFile::write(void const*, unsigned int)+0x12>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    7afa:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    7afc:	add	sp, #20
    7afe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b02:	nop
    7b04:	.word	0x1fffbaa8
    7b08:	.word	0x1fffbcac
    7b0c:	.word	0x0ffffff8
    7b10:	.word	0x1fffbcb0
    7b14:	.word	0x1fffbaac
    7b18:	.word	0x1fff945c

00007b1c <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    7b1c:	push	{lr}
    7b1e:	sub	sp, #12
    7b20:	add	r3, sp, #8
  return write(&b, 1);
    7b22:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    7b24:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    7b28:	mov	r1, r3
    7b2a:	bl	7944 <SdFile::write(void const*, unsigned int)>
}
    7b2e:	add	sp, #12
    7b30:	ldr.w	pc, [sp], #4

00007b34 <spiInit(unsigned char)>:
static void spiBegin() {
  SIM_SCGC6 |= SIM_SCGC6_SPI0;
}

static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    7b34:	cmp	r0, #5
    7b36:	bhi.n	7b80 <spiInit(unsigned char)+0x4c>
    7b38:	tbb	[pc, r0]
    7b3c:	.word	0x16100303
    7b40:	.short	0x0a1c
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    7b42:	ldr	r3, [pc, #72]	; (7b8c <spiInit(unsigned char)+0x58>)
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    7b44:	ldr	r0, [pc, #72]	; (7b90 <spiInit(unsigned char)+0x5c>)

static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    7b46:	mov.w	r2, #3087007744	; 0xb8000000
    7b4a:	str	r2, [r3, #0]
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    7b4c:	b.w	8404 <SPIClass::begin()>
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    7b50:	ldr	r3, [pc, #56]	; (7b8c <spiInit(unsigned char)+0x58>)
    7b52:	ldr	r2, [pc, #64]	; (7b94 <spiInit(unsigned char)+0x60>)
    7b54:	str	r2, [r3, #0]
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    7b56:	ldr	r0, [pc, #56]	; (7b90 <spiInit(unsigned char)+0x5c>)
    7b58:	b.w	8404 <SPIClass::begin()>
static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    7b5c:	ldr	r3, [pc, #44]	; (7b8c <spiInit(unsigned char)+0x58>)
    7b5e:	ldr	r2, [pc, #56]	; (7b98 <spiInit(unsigned char)+0x64>)
    7b60:	str	r2, [r3, #0]
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    7b62:	ldr	r0, [pc, #44]	; (7b90 <spiInit(unsigned char)+0x5c>)
    7b64:	b.w	8404 <SPIClass::begin()>
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    7b68:	ldr	r3, [pc, #32]	; (7b8c <spiInit(unsigned char)+0x58>)
    7b6a:	ldr	r2, [pc, #48]	; (7b9c <spiInit(unsigned char)+0x68>)
    7b6c:	str	r2, [r3, #0]
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    7b6e:	ldr	r0, [pc, #32]	; (7b90 <spiInit(unsigned char)+0x5c>)
    7b70:	b.w	8404 <SPIClass::begin()>
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    7b74:	ldr	r3, [pc, #20]	; (7b8c <spiInit(unsigned char)+0x58>)
    7b76:	ldr	r2, [pc, #40]	; (7ba0 <spiInit(unsigned char)+0x6c>)
    7b78:	str	r2, [r3, #0]
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    7b7a:	ldr	r0, [pc, #20]	; (7b90 <spiInit(unsigned char)+0x5c>)
    7b7c:	b.w	8404 <SPIClass::begin()>
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    7b80:	ldr	r3, [pc, #8]	; (7b8c <spiInit(unsigned char)+0x58>)
    7b82:	ldr	r2, [pc, #32]	; (7ba4 <spiInit(unsigned char)+0x70>)
    7b84:	str	r2, [r3, #0]
  }
  SPI.begin();
    7b86:	ldr	r0, [pc, #8]	; (7b90 <spiInit(unsigned char)+0x5c>)
    7b88:	b.w	8404 <SPIClass::begin()>
    7b8c:	.word	0x1fffbcb4
    7b90:	.word	0x1fff9460
    7b94:	.word	0x38012003
    7b98:	.word	0x38010000
    7b9c:	.word	0x38011001
    7ba0:	.word	0x38002003
    7ba4:	.word	0x38005006

00007ba8 <Sd2Card::chipSelectHigh()>:
}
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    7ba8:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    7baa:	movs	r1, #1
    7bac:	ldrb	r0, [r0, #0]
    7bae:	bl	93dc <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    7bb2:	ldr	r2, [pc, #56]	; (7bec <Sd2Card::chipSelectHigh()+0x44>)
    7bb4:	ldrb	r3, [r2, #0]
    7bb6:	cbz	r3, 7bde <Sd2Card::chipSelectHigh()+0x36>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7bb8:	ldr	r1, [pc, #52]	; (7bf0 <Sd2Card::chipSelectHigh()+0x48>)
    7bba:	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    7bbc:	movs	r4, #0
    7bbe:	mov	r0, r3
    7bc0:	strb	r4, [r2, #0]
    7bc2:	cbz	r3, 7bde <Sd2Card::chipSelectHigh()+0x36>
			if (interruptMasksUsed & 0x01) {
    7bc4:	lsls	r4, r3, #31
    7bc6:	bpl.n	7bd0 <Sd2Card::chipSelectHigh()+0x28>
				NVIC_ISER0 = interruptSave[0];
    7bc8:	ldr	r2, [pc, #40]	; (7bf4 <Sd2Card::chipSelectHigh()+0x4c>)
    7bca:	ldr	r0, [r1, #24]
    7bcc:	str	r0, [r2, #0]
    7bce:	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7bd0:	lsls	r2, r3, #30
    7bd2:	bmi.n	7be0 <Sd2Card::chipSelectHigh()+0x38>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7bd4:	lsls	r3, r0, #29
    7bd6:	bpl.n	7bde <Sd2Card::chipSelectHigh()+0x36>
				NVIC_ISER2 = interruptSave[2];
    7bd8:	ldr	r3, [pc, #28]	; (7bf8 <Sd2Card::chipSelectHigh()+0x50>)
    7bda:	ldr	r2, [r1, #32]
    7bdc:	str	r2, [r3, #0]
    7bde:	pop	{r4, pc}
			if (interruptMasksUsed & 0x01) {
				NVIC_ISER0 = interruptSave[0];
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
				NVIC_ISER1 = interruptSave[1];
    7be0:	ldr	r3, [pc, #24]	; (7bfc <Sd2Card::chipSelectHigh()+0x54>)
    7be2:	ldr	r2, [r1, #28]
    7be4:	ldrb	r0, [r1, #11]
    7be6:	str	r2, [r3, #0]
    7be8:	b.n	7bd4 <Sd2Card::chipSelectHigh()+0x2c>
    7bea:	nop
    7bec:	.word	0x1fffbcb8
    7bf0:	.word	0x1fff9460
    7bf4:	.word	0xe000e100
    7bf8:	.word	0xe000e108
    7bfc:	.word	0xe000e104

00007c00 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    7c00:	ldr	r3, [pc, #120]	; (7c7c <Sd2Card::chipSelectLow()+0x7c>)
    7c02:	ldrb	r2, [r3, #0]
    7c04:	cbz	r2, 7c0e <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    7c06:	ldrb	r0, [r0, #0]
    7c08:	movs	r1, #0
    7c0a:	b.w	93dc <digitalWrite>
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    7c0e:	push	{r4, r5, r6}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7c10:	ldr	r2, [pc, #108]	; (7c80 <Sd2Card::chipSelectLow()+0x80>)
    7c12:	ldr	r1, [pc, #112]	; (7c84 <Sd2Card::chipSelectLow()+0x84>)
    7c14:	ldrb	r4, [r2, #11]
    7c16:	ldr	r1, [r1, #0]
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    7c18:	movs	r5, #1
    7c1a:	strb	r5, [r3, #0]
    7c1c:	cbz	r4, 7c5a <Sd2Card::chipSelectLow()+0x5a>
			__disable_irq();
    7c1e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7c20:	ldrb	r3, [r2, #11]
    7c22:	lsls	r6, r3, #31
    7c24:	mov	r4, r3
    7c26:	bpl.n	7c36 <Sd2Card::chipSelectLow()+0x36>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7c28:	ldr	r5, [pc, #92]	; (7c88 <Sd2Card::chipSelectLow()+0x88>)
    7c2a:	ldr	r4, [r2, #12]
    7c2c:	ldr	r6, [r5, #0]
    7c2e:	ands	r4, r6
    7c30:	str	r4, [r2, #24]
				NVIC_ICER0 = interruptSave[0];
    7c32:	str	r4, [r5, #0]
    7c34:	mov	r4, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7c36:	lsls	r5, r3, #30
    7c38:	bpl.n	7c48 <Sd2Card::chipSelectLow()+0x48>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7c3a:	ldr	r5, [pc, #80]	; (7c8c <Sd2Card::chipSelectLow()+0x8c>)
    7c3c:	ldr	r3, [r2, #16]
    7c3e:	ldr	r6, [r5, #0]
    7c40:	ldrb	r4, [r2, #11]
    7c42:	ands	r3, r6
    7c44:	str	r3, [r2, #28]
				NVIC_ICER1 = interruptSave[1];
    7c46:	str	r3, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7c48:	lsls	r3, r4, #29
    7c4a:	bpl.n	7c58 <Sd2Card::chipSelectLow()+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7c4c:	ldr	r4, [pc, #64]	; (7c90 <Sd2Card::chipSelectLow()+0x90>)
    7c4e:	ldr	r3, [r2, #20]
    7c50:	ldr	r5, [r4, #0]
    7c52:	ands	r3, r5
    7c54:	str	r3, [r2, #32]
				NVIC_ICER2 = interruptSave[2];
    7c56:	str	r3, [r4, #0]
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    7c58:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    7c5a:	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    7c5c:	ldr	r2, [r3, #12]
    7c5e:	cmp	r2, r1
    7c60:	beq.n	7c72 <Sd2Card::chipSelectLow()+0x72>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    7c62:	ldr	r4, [pc, #48]	; (7c94 <Sd2Card::chipSelectLow()+0x94>)
    7c64:	str	r4, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7c66:	ldr	r2, [pc, #48]	; (7c98 <Sd2Card::chipSelectLow()+0x98>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    7c68:	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    7c6a:	orr.w	r4, r1, #1073741824	; 0x40000000
    7c6e:	str	r4, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7c70:	str	r2, [r3, #0]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    7c72:	ldrb	r0, [r0, #0]
    7c74:	movs	r1, #0
}
    7c76:	pop	{r4, r5, r6}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    7c78:	b.w	93dc <digitalWrite>
    7c7c:	.word	0x1fffbcb8
    7c80:	.word	0x1fff9460
    7c84:	.word	0x1fffbcb4
    7c88:	.word	0xe000e180
    7c8c:	.word	0xe000e184
    7c90:	.word	0xe000e188
    7c94:	.word	0x003f4001
    7c98:	.word	0x803f0000

00007c9c <Sd2Card::waitNotBusy(unsigned int)>:
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    7c9c:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c9e:	ldr	r0, [pc, #72]	; (7ce8 <Sd2Card::waitNotBusy(unsigned int)+0x4c>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7ca0:	ldr	r2, [pc, #72]	; (7cec <Sd2Card::waitNotBusy(unsigned int)+0x50>)
    7ca2:	ldr	r3, [r0, #0]
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    7ca4:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7ca6:	mov	r6, r2
    7ca8:	str	r3, [sp, #0]
	return ret;
    7caa:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    7cac:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    7cb0:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7cb2:	ldr	r3, [r2, #0]
    7cb4:	orr.w	r3, r3, #1024	; 0x400
    7cb8:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    7cba:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    7cbc:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7cbe:	ldr	r3, [r2, #44]	; 0x2c
    7cc0:	cmp	r3, #0
    7cc2:	bge.n	7cbe <Sd2Card::waitNotBusy(unsigned int)+0x22>
  return SPI0_POPR;
    7cc4:	ldr	r3, [r6, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    7cc6:	uxtb	r3, r3
    7cc8:	cmp	r3, #255	; 0xff
    7cca:	beq.n	7ce0 <Sd2Card::waitNotBusy(unsigned int)+0x44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ccc:	ldr	r3, [r0, #0]
    7cce:	str	r3, [sp, #4]
	return ret;
    7cd0:	ldr	r3, [sp, #4]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    7cd2:	subs	r3, r3, r7
    7cd4:	cmp	r3, r1
    7cd6:	bcc.n	7cb2 <Sd2Card::waitNotBusy(unsigned int)+0x16>
  return false;
    7cd8:	movs	r0, #0
}
    7cda:	add	sp, #8
    7cdc:	pop	{r4, r5, r6, r7}
    7cde:	bx	lr
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    7ce0:	movs	r0, #1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    7ce2:	add	sp, #8
    7ce4:	pop	{r4, r5, r6, r7}
    7ce6:	bx	lr
    7ce8:	.word	0x1fffbccc
    7cec:	.word	0x4002c000

00007cf0 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    7cf0:	push	{r3, r4, r5, r6, r7, lr}
    7cf2:	mov	r5, r1
  // wait up to 300 ms if busy
  waitNotBusy(300);
    7cf4:	mov.w	r1, #300	; 0x12c


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    7cf8:	mov	r6, r2
    7cfa:	mov	r4, r0
  // wait up to 300 ms if busy
  waitNotBusy(300);
    7cfc:	bl	7c9c <Sd2Card::waitNotBusy(unsigned int)>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7d00:	ldr	r3, [pc, #160]	; (7da4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    7d02:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    7d04:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7d08:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    7d0c:	orr.w	r1, r5, #64	; 0x40
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7d10:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    7d12:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7d14:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    7d16:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7d18:	ldr	r3, [r2, #44]	; 0x2c
    7d1a:	cmp	r3, #0
    7d1c:	bge.n	7d18 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x28>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7d1e:	ldr	r1, [pc, #132]	; (7da4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7d20:	movs	r0, #24
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    7d22:	mov.w	r7, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7d26:	ldr	r2, [r1, #0]
    7d28:	lsr.w	r3, r6, r0
    7d2c:	orr.w	r2, r2, #1024	; 0x400
    7d30:	uxtb	r3, r3
    7d32:	str	r2, [r1, #0]
  SPI0_SR = SPI_SR_TCF;
    7d34:	str	r7, [r1, #44]	; 0x2c
  SPI0_PUSHR = b;
    7d36:	str	r3, [r1, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7d38:	ldr	r3, [r1, #44]	; 0x2c
    7d3a:	cmp	r3, #0
    7d3c:	bge.n	7d38 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x48>
    7d3e:	subs	r0, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    7d40:	cmn.w	r0, #8
    7d44:	bne.n	7d26 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    7d46:	cbz	r5, 7d9e <Sd2Card::cardCommand(unsigned char, unsigned long)+0xae>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    7d48:	cmp	r5, #8
    7d4a:	ite	eq
    7d4c:	moveq	r1, #135	; 0x87
    7d4e:	movne	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7d50:	ldr	r3, [pc, #80]	; (7da4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    7d52:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    7d54:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7d58:	orr.w	r2, r2, #1024	; 0x400
    7d5c:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    7d5e:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7d60:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    7d62:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7d64:	ldr	r3, [r2, #44]	; 0x2c
    7d66:	cmp	r3, #0
    7d68:	bge.n	7d64 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7d6a:	ldr	r2, [pc, #56]	; (7da4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7d6c:	movs	r7, #0
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7d6e:	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    7d70:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    7d74:	movs	r1, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7d76:	ldr	r3, [r2, #0]
    7d78:	orr.w	r3, r3, #1024	; 0x400
    7d7c:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    7d7e:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    7d80:	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7d82:	ldr	r3, [r2, #44]	; 0x2c
    7d84:	cmp	r3, #0
    7d86:	bge.n	7d82 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x92>
  return SPI0_POPR;
    7d88:	ldr	r3, [r6, #56]	; 0x38
    7d8a:	uxtb	r0, r3
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    7d8c:	lsls	r3, r3, #24
    7d8e:	strb	r0, [r4, #1]
    7d90:	bmi.n	7d94 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>
  return status_;
}
    7d92:	pop	{r3, r4, r5, r6, r7, pc}
    7d94:	adds	r7, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    7d96:	cmp.w	r7, #256	; 0x100
    7d9a:	bne.n	7d76 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x86>
  return status_;
}
    7d9c:	pop	{r3, r4, r5, r6, r7, pc}
    7d9e:	movs	r1, #149	; 0x95
    7da0:	b.n	7d50 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x60>
    7da2:	nop
    7da4:	.word	0x4002c000

00007da8 <Sd2Card::SD_init(unsigned char, unsigned char)>:
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    7da8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  type_ = 0;
    7dac:	movs	r3, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7dae:	ldr	r6, [pc, #588]	; (7ffc <Sd2Card::SD_init(unsigned char, unsigned char)+0x254>)
  chipSelectPin_ = chipSelectPin;
    7db0:	strb	r2, [r0, #0]
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    7db2:	sub	sp, #20
  type_ = 0;
    7db4:	strb	r3, [r0, #2]
    7db6:	ldr	r3, [r6, #0]
    7db8:	str	r3, [sp, #4]
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    7dba:	mov	r5, r0
    7dbc:	mov	r8, r1
  chipSelectPin_ = chipSelectPin;
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  digitalWrite(chipSelectPin_, HIGH);
    7dbe:	mov	r0, r2
    7dc0:	movs	r1, #1
	return ret;
    7dc2:	ldr	r7, [sp, #4]
    7dc4:	bl	93dc <digitalWrite>
  pinMode(chipSelectPin_, OUTPUT);
    7dc8:	ldrb	r0, [r5, #0]
    7dca:	movs	r1, #1
    7dcc:	bl	9404 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    7dd0:	ldrb	r0, [r5, #0]
    7dd2:	movs	r1, #1
    7dd4:	bl	93dc <digitalWrite>
#ifndef SPI_PUSHR_CTAS
#define SPI_PUSHR_CTAS(n) (((n) & 7) << 28)
#endif  // SPI_PUSHR_CTAS

static void spiBegin() {
  SIM_SCGC6 |= SIM_SCGC6_SPI0;
    7dd8:	ldr	r2, [pc, #548]	; (8000 <Sd2Card::SD_init(unsigned char, unsigned char)+0x258>)
    7dda:	ldr	r3, [r2, #0]
    7ddc:	orr.w	r3, r3, #4096	; 0x1000
    7de0:	str	r3, [r2, #0]
  pinMode(chipSelectPin_, OUTPUT);
  digitalWrite(chipSelectPin_, HIGH);

#if defined(USE_TEENSY3_SPI)
  spiBegin();
  spiInit(6);
    7de2:	movs	r0, #6
    7de4:	bl	7b34 <spiInit(unsigned char)>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7de8:	ldr.w	lr, [pc, #576]	; 802c <Sd2Card::SD_init(unsigned char, unsigned char)+0x284>
    7dec:	ldr	r3, [pc, #532]	; (8004 <Sd2Card::SD_init(unsigned char, unsigned char)+0x25c>)
    7dee:	ldrb.w	ip, [lr, #11]
    7df2:	ldr	r2, [r3, #0]
    7df4:	cmp.w	ip, #0
    7df8:	beq.n	7e3c <Sd2Card::SD_init(unsigned char, unsigned char)+0x94>
			__disable_irq();
    7dfa:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7dfc:	ldrb.w	r3, [lr, #11]
    7e00:	lsls	r4, r3, #31
    7e02:	mov	r1, r3
    7e04:	bpl.n	7e18 <Sd2Card::SD_init(unsigned char, unsigned char)+0x70>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7e06:	ldr	r0, [pc, #512]	; (8008 <Sd2Card::SD_init(unsigned char, unsigned char)+0x260>)
    7e08:	ldr.w	r1, [lr, #12]
    7e0c:	ldr	r4, [r0, #0]
    7e0e:	ands	r1, r4
    7e10:	str.w	r1, [lr, #24]
				NVIC_ICER0 = interruptSave[0];
    7e14:	str	r1, [r0, #0]
    7e16:	mov	r1, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7e18:	lsls	r0, r3, #30
    7e1a:	bpl.n	7e30 <Sd2Card::SD_init(unsigned char, unsigned char)+0x88>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7e1c:	ldr	r0, [pc, #492]	; (800c <Sd2Card::SD_init(unsigned char, unsigned char)+0x264>)
    7e1e:	ldr.w	r3, [lr, #16]
    7e22:	ldr	r4, [r0, #0]
    7e24:	ldrb.w	r1, [lr, #11]
    7e28:	ands	r3, r4
    7e2a:	str.w	r3, [lr, #28]
				NVIC_ICER1 = interruptSave[1];
    7e2e:	str	r3, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7e30:	lsls	r1, r1, #29
    7e32:	bmi.w	7f7a <Sd2Card::SD_init(unsigned char, unsigned char)+0x1d2>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    7e36:	cpsie	i
    7e38:	ldrb.w	ip, [lr, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    7e3c:	ldr.w	r3, [lr]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    7e40:	ldr	r1, [r3, #12]
    7e42:	cmp	r1, r2
    7e44:	beq.n	7e56 <Sd2Card::SD_init(unsigned char, unsigned char)+0xae>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    7e46:	ldr	r0, [pc, #456]	; (8010 <Sd2Card::SD_init(unsigned char, unsigned char)+0x268>)
    7e48:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7e4a:	ldr	r1, [pc, #456]	; (8014 <Sd2Card::SD_init(unsigned char, unsigned char)+0x26c>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    7e4c:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    7e4e:	orr.w	r0, r2, #1073741824	; 0x40000000
    7e52:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7e54:	str	r1, [r3, #0]
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7e56:	ldr	r2, [pc, #448]	; (8018 <Sd2Card::SD_init(unsigned char, unsigned char)+0x270>)
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    7e58:	movs	r4, #10
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    7e5a:	mov.w	r0, #2147483648	; 0x80000000
  SPI0_PUSHR = b;
    7e5e:	movs	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7e60:	ldr	r3, [r2, #0]
    7e62:	orr.w	r3, r3, #1024	; 0x400
    7e66:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    7e68:	str	r0, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    7e6a:	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7e6c:	ldr	r3, [r2, #44]	; 0x2c
    7e6e:	cmp	r3, #0
    7e70:	bge.n	7e6c <Sd2Card::SD_init(unsigned char, unsigned char)+0xc4>
    7e72:	subs	r4, #1
#endif  // not USE_TEENSY3_SPI
  // must supply min of 74 clock cycles with CS high.
#ifdef SPI_HAS_TRANSACTION
  SPI.beginTransaction(settings);
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    7e74:	ands.w	r4, r4, #255	; 0xff
    7e78:	bne.n	7e60 <Sd2Card::SD_init(unsigned char, unsigned char)+0xb8>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7e7a:	cmp.w	ip, #0
    7e7e:	beq.n	7eb2 <Sd2Card::SD_init(unsigned char, unsigned char)+0x10a>
			if (interruptMasksUsed & 0x01) {
    7e80:	tst.w	ip, #1
    7e84:	beq.n	7e92 <Sd2Card::SD_init(unsigned char, unsigned char)+0xea>
				NVIC_ISER0 = interruptSave[0];
    7e86:	ldr	r3, [pc, #404]	; (801c <Sd2Card::SD_init(unsigned char, unsigned char)+0x274>)
    7e88:	ldr.w	r2, [lr, #24]
    7e8c:	ldrb.w	ip, [lr, #11]
    7e90:	str	r2, [r3, #0]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7e92:	tst.w	ip, #2
    7e96:	beq.n	7ea4 <Sd2Card::SD_init(unsigned char, unsigned char)+0xfc>
				NVIC_ISER1 = interruptSave[1];
    7e98:	ldr	r3, [pc, #388]	; (8020 <Sd2Card::SD_init(unsigned char, unsigned char)+0x278>)
    7e9a:	ldr.w	r2, [lr, #28]
    7e9e:	ldrb.w	ip, [lr, #11]
    7ea2:	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7ea4:	tst.w	ip, #4
    7ea8:	beq.n	7eb2 <Sd2Card::SD_init(unsigned char, unsigned char)+0x10a>
				NVIC_ISER2 = interruptSave[2];
    7eaa:	ldr	r3, [pc, #376]	; (8024 <Sd2Card::SD_init(unsigned char, unsigned char)+0x27c>)
    7eac:	ldr.w	r2, [lr, #32]
    7eb0:	str	r2, [r3, #0]
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
    7eb2:	mov	r0, r5
    7eb4:	bl	7c00 <Sd2Card::chipSelectLow()>
    7eb8:	b.n	7ec8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x120>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7eba:	ldr	r3, [r6, #0]
    7ebc:	str	r3, [sp, #8]
	return ret;
    7ebe:	ldr	r3, [sp, #8]
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    7ec0:	subs	r3, r3, r7
    7ec2:	cmp.w	r3, #2000	; 0x7d0
    7ec6:	bhi.n	7f6c <Sd2Card::SD_init(unsigned char, unsigned char)+0x1c4>
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    7ec8:	movs	r2, #0
    7eca:	mov	r1, r2
    7ecc:	mov	r0, r5
    7ece:	bl	7cf0 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    7ed2:	cmp	r0, #1
    7ed4:	mov	r9, r0
    7ed6:	strb	r0, [r5, #1]
    7ed8:	bne.n	7eba <Sd2Card::SD_init(unsigned char, unsigned char)+0x112>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_CMD0
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    7eda:	mov.w	r2, #426	; 0x1aa
    7ede:	movs	r1, #8
    7ee0:	mov	r0, r5
    7ee2:	bl	7cf0 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    7ee6:	lsls	r3, r0, #29
    7ee8:	bpl.n	7f38 <Sd2Card::SD_init(unsigned char, unsigned char)+0x190>
    type_ = SD_CARD_TYPE_SD1;
    7eea:	strb.w	r9, [r5, #2]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7eee:	mov.w	r9, #0
    7ef2:	b.n	7f02 <Sd2Card::SD_init(unsigned char, unsigned char)+0x15a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ef4:	ldr	r3, [r6, #0]
    7ef6:	str	r3, [sp, #12]
	return ret;
    7ef8:	ldr	r3, [sp, #12]
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    7efa:	subs	r3, r3, r7
    7efc:	cmp.w	r3, #2000	; 0x7d0
    7f00:	bhi.n	7f6c <Sd2Card::SD_init(unsigned char, unsigned char)+0x1c4>
  // private functions
  uint8_t SD_init(uint8_t sckRateID, uint8_t chipSelectPin);
  uint8_t SD_readBlock(uint32_t block, uint8_t* dst);
  uint8_t SD_writeBlock(uint32_t blockNumber, const uint8_t* src);
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    7f02:	movs	r2, #0
    7f04:	movs	r1, #55	; 0x37
    7f06:	mov	r0, r5
    7f08:	bl	7cf0 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    7f0c:	mov	r2, r9
    7f0e:	movs	r1, #41	; 0x29
    7f10:	mov	r0, r5
    7f12:	bl	7cf0 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    7f16:	strb	r0, [r5, #1]
    7f18:	cmp	r0, #0
    7f1a:	bne.n	7ef4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x14c>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    7f1c:	ldrb	r3, [r5, #2]
    7f1e:	cmp	r3, #2
    7f20:	beq.n	7f96 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1ee>
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
    7f22:	mov	r0, r5
    7f24:	bl	7ba8 <Sd2Card::chipSelectHigh()>
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
#if defined(USE_TEENSY3_SPI) || defined(USE_TEENSY4_SPI)
  spiInit(sckRateID);
    7f28:	mov	r0, r8
    7f2a:	bl	7b34 <spiInit(unsigned char)>
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
  return setSckRate(sckRateID);
    7f2e:	movs	r4, #1

fail:
  chipSelectHigh();
  return false;
}
    7f30:	mov	r0, r4
    7f32:	add	sp, #20
    7f34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7f38:	ldr	r2, [pc, #220]	; (8018 <Sd2Card::SD_init(unsigned char, unsigned char)+0x270>)
    7f3a:	movs	r1, #4
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7f3c:	mov	ip, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    7f3e:	mov.w	lr, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    7f42:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7f44:	ldr	r3, [r2, #0]
    7f46:	orr.w	r3, r3, #1024	; 0x400
    7f4a:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    7f4c:	str.w	lr, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    7f50:	str	r0, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7f52:	ldr	r3, [r2, #44]	; 0x2c
    7f54:	cmp	r3, #0
    7f56:	bge.n	7f52 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1aa>
  return SPI0_POPR;
    7f58:	ldr.w	r3, [ip, #56]	; 0x38
    7f5c:	subs	r1, #1
    7f5e:	uxtb	r3, r3
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type_ = SD_CARD_TYPE_SD1;
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    7f60:	ands.w	r1, r1, #255	; 0xff
    7f64:	strb	r3, [r5, #1]
    7f66:	bne.n	7f44 <Sd2Card::SD_init(unsigned char, unsigned char)+0x19c>
    if (status_ != 0XAA) {
    7f68:	cmp	r3, #170	; 0xaa
    7f6a:	beq.n	7f8c <Sd2Card::SD_init(unsigned char, unsigned char)+0x1e4>
  }
  chipSelectHigh();
  return setSckRate(sckRateID);

fail:
  chipSelectHigh();
    7f6c:	mov	r0, r5
    7f6e:	bl	7ba8 <Sd2Card::chipSelectHigh()>
  return false;
}
    7f72:	mov	r0, r4
    7f74:	add	sp, #20
    7f76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7f7a:	ldr	r1, [pc, #172]	; (8028 <Sd2Card::SD_init(unsigned char, unsigned char)+0x280>)
    7f7c:	ldr.w	r3, [lr, #20]
    7f80:	ldr	r0, [r1, #0]
    7f82:	ands	r3, r0
    7f84:	str.w	r3, [lr, #32]
				NVIC_ICER2 = interruptSave[2];
    7f88:	str	r3, [r1, #0]
    7f8a:	b.n	7e36 <Sd2Card::SD_init(unsigned char, unsigned char)+0x8e>
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ != 0XAA) {
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
    7f8c:	movs	r3, #2
    7f8e:	strb	r3, [r5, #2]
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7f90:	mov.w	r9, #1073741824	; 0x40000000
    7f94:	b.n	7f02 <Sd2Card::SD_init(unsigned char, unsigned char)+0x15a>
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
    7f96:	mov	r2, r0
    7f98:	movs	r1, #58	; 0x3a
    7f9a:	mov	r0, r5
    7f9c:	bl	7cf0 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    7fa0:	cmp	r0, #0
    7fa2:	bne.n	7f6c <Sd2Card::SD_init(unsigned char, unsigned char)+0x1c4>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7fa4:	ldr	r3, [pc, #112]	; (8018 <Sd2Card::SD_init(unsigned char, unsigned char)+0x270>)
    7fa6:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    7fa8:	mov.w	r4, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7fac:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    7fb0:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7fb2:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7fb4:	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    7fb6:	str	r4, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    7fb8:	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7fba:	ldr	r3, [r1, #44]	; 0x2c
    7fbc:	ldr	r2, [pc, #88]	; (8018 <Sd2Card::SD_init(unsigned char, unsigned char)+0x270>)
    7fbe:	cmp	r3, #0
    7fc0:	bge.n	7fba <Sd2Card::SD_init(unsigned char, unsigned char)+0x212>
  return SPI0_POPR;
    7fc2:	ldr	r3, [r2, #56]	; 0x38
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7fc4:	ldr	r2, [pc, #80]	; (8018 <Sd2Card::SD_init(unsigned char, unsigned char)+0x270>)
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    7fc6:	and.w	r3, r3, #192	; 0xc0
    7fca:	cmp	r3, #192	; 0xc0
    7fcc:	itt	eq
    7fce:	moveq	r3, #3
    7fd0:	strbeq	r3, [r5, #2]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7fd2:	movs	r1, #3
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7fd4:	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    7fd6:	mov.w	r4, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    7fda:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    7fdc:	ldr	r3, [r2, #0]
    7fde:	orr.w	r3, r3, #1024	; 0x400
    7fe2:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    7fe4:	str	r4, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    7fe6:	str	r0, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    7fe8:	ldr	r3, [r2, #44]	; 0x2c
    7fea:	cmp	r3, #0
    7fec:	bge.n	7fe8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x240>
    7fee:	subs	r1, #1
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    7ff0:	ands.w	r1, r1, #255	; 0xff
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
  return SPI0_POPR;
    7ff4:	ldr	r3, [r6, #56]	; 0x38
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    7ff6:	bne.n	7fdc <Sd2Card::SD_init(unsigned char, unsigned char)+0x234>
    7ff8:	b.n	7f22 <Sd2Card::SD_init(unsigned char, unsigned char)+0x17a>
    7ffa:	nop
    7ffc:	.word	0x1fffbccc
    8000:	.word	0x4004803c
    8004:	.word	0x1fffbcb4
    8008:	.word	0xe000e180
    800c:	.word	0xe000e184
    8010:	.word	0x003f4001
    8014:	.word	0x803f0000
    8018:	.word	0x4002c000
    801c:	.word	0xe000e100
    8020:	.word	0xe000e104
    8024:	.word	0xe000e108
    8028:	.word	0xe000e188
    802c:	.word	0x1fff9460

00008030 <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    8030:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8032:	ldr	r1, [pc, #84]	; (8088 <Sd2Card::waitStartBlock()+0x58>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    8034:	ldr	r2, [pc, #84]	; (808c <Sd2Card::waitStartBlock()+0x5c>)
    8036:	ldr	r3, [r1, #0]
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    8038:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    803a:	mov	r6, r2
    803c:	str	r3, [sp, #0]
	return ret;
    803e:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    8040:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    8044:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    8046:	ldr	r3, [r2, #0]
    8048:	orr.w	r3, r3, #1024	; 0x400
    804c:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    804e:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    8050:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    8052:	ldr	r3, [r2, #44]	; 0x2c
    8054:	cmp	r3, #0
    8056:	bge.n	8052 <Sd2Card::waitStartBlock()+0x22>
  return SPI0_POPR;
    8058:	ldr	r3, [r6, #56]	; 0x38
    805a:	uxtb	r3, r3
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    805c:	cmp	r3, #255	; 0xff
    805e:	strb	r3, [r0, #1]
    8060:	bne.n	8078 <Sd2Card::waitStartBlock()+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8062:	ldr	r3, [r1, #0]
    8064:	str	r3, [sp, #4]
	return ret;
    8066:	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    8068:	subs	r3, r3, r7
    806a:	cmp.w	r3, #300	; 0x12c
    806e:	bls.n	8046 <Sd2Card::waitStartBlock()+0x16>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    8070:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    8072:	add	sp, #8
    8074:	pop	{r4, r5, r6, r7}
    8076:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    8078:	sub.w	r0, r3, #254	; 0xfe
    807c:	clz	r0, r0
    8080:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    8082:	add	sp, #8
    8084:	pop	{r4, r5, r6, r7}
    8086:	bx	lr
    8088:	.word	0x1fffbccc
    808c:	.word	0x4002c000

00008090 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    8090:	push	{r3, r4, r5, r6, r7, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    8092:	ldrb	r3, [r0, #2]
    8094:	cmp	r3, #3

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    8096:	mov	r6, r1
    8098:	mov	r4, r0
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    809a:	it	ne
    809c:	lslne	r6, r1, #9

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    809e:	mov	r5, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
  chipSelectLow();
    80a0:	bl	7c00 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    80a4:	mov	r2, r6
    80a6:	movs	r1, #17
    80a8:	mov	r0, r4
    80aa:	bl	7cf0 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    80ae:	cbnz	r0, 80b8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    80b0:	mov	r0, r4
    80b2:	bl	8030 <Sd2Card::waitStartBlock()>
    80b6:	cbnz	r0, 80c2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    80b8:	mov	r0, r4
    80ba:	bl	7ba8 <Sd2Card::chipSelectHigh()>
  return false;
    80be:	movs	r0, #0
}
    80c0:	pop	{r3, r4, r5, r6, r7, pc}
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    80c2:	ldr	r3, [pc, #128]	; (8144 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    80c4:	ldr	r1, [pc, #128]	; (8148 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    80c6:	ldr	r2, [pc, #132]	; (814c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    80c8:	str	r2, [r3, #0]
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    80ca:	mov	lr, r1
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    80cc:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    80ce:	mov	r2, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    80d0:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    80d2:	mov	r6, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    80d4:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
    80d6:	add.w	r0, r5, #506	; 0x1fa
    80da:	adds	r1, r5, #2
    80dc:	add.w	r7, r5, #508	; 0x1fc
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    80e0:	ldr	r3, [r2, #44]	; 0x2c
    80e2:	tst.w	r3, #240	; 0xf0
    80e6:	beq.n	80e0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    80e8:	str.w	lr, [r6, #52]	; 0x34
    uint16_t w = SPI0_POPR;
    80ec:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    80ee:	strb.w	r3, [r1, #-1]
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    80f2:	asrs	r3, r3, #8
    80f4:	strb.w	r3, [r1, #-2]
    80f8:	adds	r1, #2
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    80fa:	cmp	r7, r1
    80fc:	bne.n	80e0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
    80fe:	add.w	r5, r5, #512	; 0x200
  while (buf < limit) {
    8102:	cmp	r0, r5
    8104:	bcs.n	8122 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x92>
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    8106:	ldr	r2, [pc, #60]	; (8144 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    8108:	mov	r6, r2
    810a:	ldr	r3, [r2, #44]	; 0x2c
    810c:	tst.w	r3, #240	; 0xf0
    8110:	beq.n	810a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
    uint16_t w = SPI0_POPR;
    8112:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    8114:	asrs	r1, r3, #8
    8116:	strb.w	r1, [r0], #2
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    811a:	cmp	r0, r5
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    811c:	strb.w	r3, [r0, #-1]
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    8120:	bcc.n	810a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    8122:	ldr	r3, [pc, #32]	; (8144 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    8124:	ldr	r1, [pc, #36]	; (814c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    8126:	ldr	r2, [pc, #32]	; (8148 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    8128:	str	r1, [r3, #0]
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    812a:	mov	r1, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    812c:	str	r2, [r3, #52]	; 0x34
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    812e:	ldr	r3, [r1, #44]	; 0x2c
    8130:	ldr	r2, [pc, #16]	; (8144 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    8132:	tst.w	r3, #240	; 0xf0
    8136:	beq.n	812e <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x9e>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    8138:	mov	r0, r4
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_POPR;
    813a:	ldr	r3, [r2, #56]	; 0x38
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    813c:	bl	7ba8 <Sd2Card::chipSelectHigh()>
  return true;
    8140:	movs	r0, #1
    8142:	pop	{r3, r4, r5, r6, r7, pc}
    8144:	.word	0x4002c000
    8148:	.word	0x9000ffff
    814c:	.word	0x801f0400

00008150 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    8150:	push	{r4, r5, r6, r7}
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    8152:	ldr	r6, [pc, #196]	; (8218 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    8154:	ldr	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    8156:	mov.w	r7, #2147483648	; 0x80000000
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    815a:	orr.w	r3, r3, #1024	; 0x400
    815e:	str	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    8160:	mov	r5, r7
    8162:	str	r7, [r6, #44]	; 0x2c
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    8164:	mov	r4, r6
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
		SPI0_SR = SPI_SR_TCF;
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    8166:	str	r1, [r6, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    8168:	mov	r3, r6
    816a:	adds	r1, r2, #1
    816c:	addw	r7, r2, #513	; 0x201
    8170:	ldr	r2, [r4, #44]	; 0x2c
    8172:	cmp	r2, #0
    8174:	bge.n	8170 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    8176:	ldr	r2, [r3, #0]
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i];
    8178:	ldrb.w	r6, [r1, #-1]
    817c:	orr.w	r2, r2, #1024	; 0x400
    8180:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    8182:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    8184:	str	r6, [r3, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    8186:	ldr	r2, [r4, #44]	; 0x2c
    8188:	cmp	r2, #0
    818a:	bge.n	8186 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x36>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    818c:	ldr	r2, [r3, #0]
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
    818e:	ldrb.w	r6, [r1], #2
    8192:	orr.w	r2, r2, #1024	; 0x400

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    8196:	cmp	r7, r1
    8198:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    819a:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    819c:	str	r6, [r3, #52]	; 0x34
    819e:	bne.n	8170 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    81a0:	ldr	r1, [pc, #116]	; (8218 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    81a2:	ldr	r2, [r1, #44]	; 0x2c
    81a4:	ldr	r3, [pc, #112]	; (8218 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    81a6:	cmp	r2, #0
    81a8:	bge.n	81a2 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x52>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    81aa:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    81ac:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    81b0:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    81b4:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    81b6:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    81b8:	mov	r1, r3
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    81ba:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
    81bc:	str	r4, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    81be:	ldr	r3, [r1, #44]	; 0x2c
    81c0:	ldr	r2, [pc, #84]	; (8218 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    81c2:	cmp	r3, #0
    81c4:	bge.n	81be <Sd2Card::writeData(unsigned char, unsigned char const*)+0x6e>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    81c6:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    81c8:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    81cc:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    81d0:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    81d2:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    81d4:	mov	r1, r2
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    81d6:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    81d8:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    81da:	ldr	r3, [r1, #44]	; 0x2c
    81dc:	ldr	r2, [pc, #56]	; (8218 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    81de:	cmp	r3, #0
    81e0:	bge.n	81da <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8a>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    81e2:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    81e4:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    81e8:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    81ec:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    81ee:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    81f0:	mov	r1, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    81f2:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    81f4:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    81f6:	ldr	r3, [r1, #44]	; 0x2c
    81f8:	ldr	r2, [pc, #28]	; (8218 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    81fa:	cmp	r3, #0
    81fc:	bge.n	81f6 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa6>
  return SPI0_POPR;
    81fe:	ldr	r3, [r2, #56]	; 0x38
    8200:	uxtb	r3, r3
    8202:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    8206:	strb	r3, [r0, #1]
    8208:	sub.w	r0, r2, #5
    820c:	clz	r0, r0
    8210:	lsrs	r0, r0, #5
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    8212:	pop	{r4, r5, r6, r7}
    8214:	bx	lr
    8216:	nop
    8218:	.word	0x4002c000

0000821c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    821c:	push	{r4, r5, r6, lr}
    821e:	mov	r4, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    8220:	cbz	r1, 8240 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    8222:	ldrb	r3, [r0, #2]
    8224:	cmp	r3, #3
    8226:	mov	r5, r1
    8228:	it	ne
    822a:	lslne	r5, r1, #9
    822c:	mov	r6, r2
  chipSelectLow();
    822e:	bl	7c00 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    8232:	mov	r2, r5
    8234:	movs	r1, #24
    8236:	mov	r0, r4
    8238:	bl	7cf0 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    823c:	mov	r5, r0
    823e:	cbz	r0, 824a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2e>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    8240:	mov	r0, r4
    8242:	bl	7ba8 <Sd2Card::chipSelectHigh()>
  return false;
    8246:	movs	r0, #0
}
    8248:	pop	{r4, r5, r6, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    824a:	mov	r2, r6
    824c:	movs	r1, #254	; 0xfe
    824e:	mov	r0, r4
    8250:	bl	8150 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    8254:	cmp	r0, #0
    8256:	beq.n	8240 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8258:	mov.w	r1, #600	; 0x258
    825c:	mov	r0, r4
    825e:	bl	7c9c <Sd2Card::waitNotBusy(unsigned int)>
    8262:	cmp	r0, #0
    8264:	beq.n	8240 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    8266:	mov	r2, r5
    8268:	movs	r1, #13
    826a:	mov	r0, r4
    826c:	bl	7cf0 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8270:	cmp	r0, #0
    8272:	bne.n	8240 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    8274:	ldr	r3, [pc, #44]	; (82a4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    8276:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    8278:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    827c:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    8280:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    8282:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    8284:	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    8286:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    8288:	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    828a:	ldr	r3, [r1, #44]	; 0x2c
    828c:	ldr	r2, [pc, #20]	; (82a4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    828e:	cmp	r3, #0
    8290:	bge.n	828a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x6e>
  return SPI0_POPR;
    8292:	ldr	r3, [r2, #56]	; 0x38
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    8294:	tst.w	r3, #255	; 0xff
    8298:	bne.n	8240 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    829a:	mov	r0, r4
    829c:	bl	7ba8 <Sd2Card::chipSelectHigh()>
  return true;
    82a0:	movs	r0, #1
    82a2:	pop	{r4, r5, r6, pc}
    82a4:	.word	0x4002c000

000082a8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    82a8:	ldr	r3, [pc, #4]	; (82b0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    82aa:	ldr	r2, [pc, #8]	; (82b4 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    82ac:	str	r2, [r3, #0]
    82ae:	bx	lr
    82b0:	.word	0x1fffbcb4
    82b4:	.word	0x38011001

000082b8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    82b8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    82ba:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    82bc:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    82be:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    82c0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    82c2:	beq.n	82ca <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    82c4:	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    82c6:	b.w	a4b4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    82ca:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    82cc:	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    82ce:	bx	r3

000082d0 <_spi_dma_rxISR0()>:
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    82d0:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    82d2:	ldr	r3, [pc, #280]	; (83ec <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    82d4:	ldr	r2, [pc, #280]	; (83f0 <_spi_dma_rxISR0()+0x120>)
    82d6:	ldr	r0, [r3, #48]	; 0x30
    82d8:	ldr	r4, [r3, #44]	; 0x2c
    82da:	ldrb	r1, [r0, #4]
    82dc:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    82de:	ldr	r1, [pc, #276]	; (83f4 <_spi_dma_rxISR0()+0x124>)
    82e0:	ldrb	r2, [r4, #4]
    82e2:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    82e4:	ldr	r2, [r3, #40]	; 0x28
    82e6:	ldrb	r0, [r0, #4]
    82e8:	strb	r0, [r1, #0]
    82ea:	cmp	r2, #0
    82ec:	beq.n	837c <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    82ee:	ldr	r1, [r3, #4]
    82f0:	ldr	r1, [r1, #12]
    82f2:	cmp	r2, r1
    82f4:	bhi.n	8374 <_spi_dma_rxISR0()+0xa4>
    82f6:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    82f8:	ldrh	r4, [r1, #30]
    82fa:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    82fc:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8300:	bmi.n	83ce <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    8302:	ubfx	r0, r0, #0, #15
    8306:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    8308:	ldrh	r0, [r1, #30]
    830a:	uxth	r0, r0
    830c:	strh	r0, [r1, #22]
    830e:	ldr	r1, [r3, #48]	; 0x30
    8310:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8312:	ldrh	r0, [r1, #30]
    8314:	lsls	r0, r0, #16
    8316:	bmi.n	83be <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    8318:	ubfx	r0, r2, #0, #15
    831c:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    831e:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    8320:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    8322:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8324:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    8328:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    832a:	it	ne
    832c:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    832e:	str	r4, [r3, #40]	; 0x28
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8330:	ldr	r1, [r3, #44]	; 0x2c
    8332:	ldr	r0, [pc, #184]	; (83ec <_spi_dma_rxISR0()+0x11c>)
    8334:	ldr	r1, [r1, #0]
    8336:	ldr	r5, [r1, #0]
    8338:	add.w	r4, r0, #36	; 0x24
    833c:	cmp	r5, r4
    833e:	beq.n	83ae <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8340:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8342:	ldr	r4, [r0, #12]
    8344:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8348:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    834a:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    834c:	itete	ne
    834e:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    8350:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    8352:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    8354:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8356:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    835a:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    835c:	str	r4, [r0, #52]	; 0x34
    835e:	ldr	r1, [r3, #48]	; 0x30
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    8360:	ldr	r3, [pc, #148]	; (83f8 <_spi_dma_rxISR0()+0x128>)
    8362:	ldrb	r1, [r1, #4]
    8364:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    8366:	ldr	r1, [pc, #132]	; (83ec <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    8368:	cbz	r2, 8370 <_spi_dma_rxISR0()+0xa0>
    836a:	ldr	r2, [r1, #44]	; 0x2c
    836c:	ldrb	r2, [r2, #4]
    836e:	strb	r2, [r3, #0]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8370:	pop	{r4, r5, r6, r7}
    8372:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    8374:	subs	r2, r2, r1
    8376:	str	r2, [r3, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8378:	movs	r2, #1
    837a:	b.n	8330 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    837c:	ldr	r0, [r3, #52]	; 0x34
    837e:	ldr	r1, [r3, #0]
    8380:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    8382:	ldr	r4, [pc, #120]	; (83fc <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    8384:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    8386:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    8388:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    838a:	ldr	r5, [r5, #0]
    838c:	ldr	r6, [pc, #112]	; (8400 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    838e:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    8392:	movs	r7, #3
    8394:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    8396:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    8398:	strb.w	r7, [r3, #37]	; 0x25
    839c:	bne.n	83de <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    839e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    83a0:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    83a2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    83a4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    83a6:	beq.n	83e6 <_spi_dma_rxISR0()+0x116>
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    83a8:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    83aa:	b.w	a4b4 <EventResponder::triggerEventNotImmediate()>
    83ae:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    83b0:	ldrb.w	r0, [r0, #36]	; 0x24

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    83b4:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    83b6:	orr.w	r0, r0, #2147483648	; 0x80000000
    83ba:	str	r0, [r1, #52]	; 0x34
    83bc:	b.n	835e <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    83be:	ldrh	r4, [r1, #30]
    83c0:	ubfx	r0, r2, #0, #9
    83c4:	and.w	r4, r4, #65024	; 0xfe00
    83c8:	orrs	r0, r4
    83ca:	strh	r0, [r1, #30]
    83cc:	b.n	831e <_spi_dma_rxISR0()+0x4e>
    83ce:	ldrh	r4, [r1, #30]
    83d0:	ubfx	r0, r0, #0, #9
    83d4:	and.w	r4, r4, #65024	; 0xfe00
    83d8:	orrs	r0, r4
    83da:	strh	r0, [r1, #30]
    83dc:	b.n	8308 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    83de:	mov	r3, r5
    83e0:	mov	r1, r2
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    83e2:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    83e4:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    83e6:	ldr	r3, [r0, #8]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    83e8:	pop	{r4, r5, r6, r7}
    83ea:	bx	r3
    83ec:	.word	0x1fff9460
    83f0:	.word	0x4000801f
    83f4:	.word	0x4000801c
    83f8:	.word	0x4000801b
    83fc:	.word	0xff0f0000
    8400:	.word	0x000082b9

00008404 <SPIClass::begin()>:
    8404:	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    8408:	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    840a:	ldr	r4, [r3, #0]
    840c:	ldr	r1, [r3, #4]
    840e:	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    8410:	ldr	r7, [pc, #88]	; (846c <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    8412:	ldr	r6, [pc, #92]	; (8470 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    8414:	orrs	r1, r5
    8416:	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    8418:	ldr	r5, [pc, #88]	; (8474 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    841a:	ldr	r1, [pc, #92]	; (8478 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    841c:	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    841e:	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    8420:	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    8422:	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    8424:	ldrb	r1, [r0, #9]
    8426:	ldr	r2, [pc, #84]	; (847c <SPIClass::begin()+0x78>)
    8428:	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    842a:	adds	r1, #10
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    842c:	ldrb.w	r4, [r4, #36]	; 0x24
	*reg = hardware().mosi_mux[mosi_pin_index];
    8430:	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    8434:	add.w	r1, r2, r4, lsl #3
    8438:	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    843a:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    843c:	ldrb	r1, [r0, #8]
    843e:	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    8440:	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    8444:	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    8446:	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    8448:	add.w	r1, r2, r4, lsl #3
    844c:	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    844e:	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    8450:	ldrb	r1, [r0, #10]
    8452:	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    8454:	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    8458:	ldrb.w	r0, [r0, #48]	; 0x30
	*reg = hardware().sck_mux[sck_pin_index];
    845c:	ldr	r1, [r3, #52]	; 0x34
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    845e:	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    8462:	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    8464:	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    8466:	str	r1, [r3, #0]
}
    8468:	bx	lr
    846a:	nop
    846c:	.word	0x001f4001
    8470:	.word	0x38001001
    8474:	.word	0x78001001
    8478:	.word	0x801f0000
    847c:	.word	0x0000cb70

00008480 <SPIClass::usingInterrupt(IRQ_NUMBER_t)>:

void SPIClass::usingInterrupt(IRQ_NUMBER_t interruptName)
{
	uint32_t n = (uint32_t)interruptName;

	if (n >= NVIC_NUM_INTERRUPTS) return;
    8480:	cmp	r1, #94	; 0x5e
    8482:	bhi.n	84a8 <SPIClass::usingInterrupt(IRQ_NUMBER_t)+0x28>
	*reg = 0;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
}

void SPIClass::usingInterrupt(IRQ_NUMBER_t interruptName)
{
    8484:	push	{r4, r5}

	if (n >= NVIC_NUM_INTERRUPTS) return;

	//Serial.print("usingInterrupt ");
	//Serial.println(n);
	interruptMasksUsed |= (1 << (n >> 5));
    8486:	lsrs	r2, r1, #5
    8488:	ldrb	r5, [r0, #11]
    848a:	movs	r3, #1
    848c:	lsl.w	r4, r3, r2
    8490:	orrs	r4, r5
    8492:	add.w	r2, r0, r2, lsl #2
    8496:	strb	r4, [r0, #11]
	interruptMask[n >> 5] |= (1 << (n & 0x1F));
    8498:	ldr	r0, [r2, #12]
    849a:	and.w	r1, r1, #31
    849e:	lsl.w	r1, r3, r1
    84a2:	orrs	r1, r0
    84a4:	str	r1, [r2, #12]
	//Serial.printf("interruptMasksUsed = %d\n", interruptMasksUsed);
	//Serial.printf("interruptMask[0] = %08X\n", interruptMask[0]);
	//Serial.printf("interruptMask[1] = %08X\n", interruptMask[1]);
	//Serial.printf("interruptMask[2] = %08X\n", interruptMask[2]);
}
    84a6:	pop	{r4, r5}
    84a8:	bx	lr
    84aa:	nop

000084ac <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>:

void SPIClass::notUsingInterrupt(IRQ_NUMBER_t interruptName)
{
	uint32_t n = (uint32_t)interruptName;
	if (n >= NVIC_NUM_INTERRUPTS) return;
    84ac:	cmp	r1, #94	; 0x5e
    84ae:	bhi.n	84d8 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)+0x2c>
	//Serial.printf("interruptMask[1] = %08X\n", interruptMask[1]);
	//Serial.printf("interruptMask[2] = %08X\n", interruptMask[2]);
}

void SPIClass::notUsingInterrupt(IRQ_NUMBER_t interruptName)
{
    84b0:	push	{r4, r5}
	uint32_t n = (uint32_t)interruptName;
	if (n >= NVIC_NUM_INTERRUPTS) return;
	interruptMask[n >> 5] &= ~(1 << (n & 0x1F));
    84b2:	lsrs	r5, r1, #5
    84b4:	add.w	r4, r0, r5, lsl #2
    84b8:	and.w	r1, r1, #31
    84bc:	ldr	r3, [r4, #12]
    84be:	movs	r2, #1
    84c0:	lsl.w	r1, r2, r1
    84c4:	bic.w	r1, r3, r1
    84c8:	str	r1, [r4, #12]
	if (interruptMask[n >> 5] == 0) {
    84ca:	cbnz	r1, 84d6 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)+0x2a>
		interruptMasksUsed &= ~(1 << (n >> 5));
    84cc:	ldrb	r3, [r0, #11]
    84ce:	lsls	r2, r5
    84d0:	bic.w	r2, r3, r2
    84d4:	strb	r2, [r0, #11]
	}
}
    84d6:	pop	{r4, r5}
    84d8:	bx	lr
    84da:	nop

000084dc <SPIClass::setMOSI(unsigned char)>:
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    84dc:	ldr	r2, [pc, #128]	; (8560 <SPIClass::setMOSI(unsigned char)+0x84>)
    84de:	ldr	r3, [r0, #4]
    84e0:	cmp	r2, r3
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    84e2:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    84e4:	beq.n	8506 <SPIClass::setMOSI(unsigned char)+0x2a>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    84e6:	ldrb	r2, [r0, #9]
    84e8:	add	r2, r3
    84ea:	ldrb.w	r2, [r2, #36]	; 0x24
    84ee:	cmp	r1, r2
    84f0:	beq.n	8502 <SPIClass::setMOSI(unsigned char)+0x26>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    84f2:	ldrb.w	r4, [r3, #36]	; 0x24
    84f6:	cmp	r4, r1
    84f8:	beq.n	8526 <SPIClass::setMOSI(unsigned char)+0x4a>
    84fa:	ldrb.w	r4, [r3, #37]	; 0x25
    84fe:	cmp	r4, r1
    8500:	beq.n	8558 <SPIClass::setMOSI(unsigned char)+0x7c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    8502:	pop	{r4, r5, r6, r7}
    8504:	bx	lr
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
#else
		if (pin == 11) pinout &= ~1;
    8506:	cmp	r1, #11
    8508:	beq.n	851a <SPIClass::setMOSI(unsigned char)+0x3e>
		if (pin == 7)  pinout |= 1;
    850a:	cmp	r1, #7
    850c:	bne.n	84e6 <SPIClass::setMOSI(unsigned char)+0xa>
    850e:	ldr	r4, [pc, #84]	; (8564 <SPIClass::setMOSI(unsigned char)+0x88>)
    8510:	ldrb	r2, [r4, #0]
    8512:	orr.w	r2, r2, #1
    8516:	strb	r2, [r4, #0]
    8518:	b.n	84e6 <SPIClass::setMOSI(unsigned char)+0xa>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
#else
		if (pin == 11) pinout &= ~1;
    851a:	ldr	r4, [pc, #72]	; (8564 <SPIClass::setMOSI(unsigned char)+0x88>)
    851c:	ldrb	r2, [r4, #0]
    851e:	bic.w	r2, r2, #1
    8522:	strb	r2, [r4, #0]
    8524:	b.n	84e6 <SPIClass::setMOSI(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    8526:	movs	r4, #0
    8528:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    852a:	ldr	r6, [r3, #0]
    852c:	ldr	r5, [r3, #4]
    852e:	ldr	r6, [r6, #0]
    8530:	tst	r6, r5
    8532:	beq.n	8554 <SPIClass::setMOSI(unsigned char)+0x78>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    8534:	ldr	r5, [pc, #48]	; (8568 <SPIClass::setMOSI(unsigned char)+0x8c>)
    8536:	add.w	r2, r5, r2, lsl #3
					*reg = 0;
    853a:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    853c:	ldr	r6, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    853e:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    8540:	str	r7, [r6, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    8542:	ldrb.w	r2, [r2, #36]	; 0x24
    8546:	add.w	r5, r5, r2, lsl #3
					*reg = hardware().mosi_mux[i];
    854a:	adds	r1, #10
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    854c:	ldr	r2, [r5, #4]
					*reg = hardware().mosi_mux[i];
    854e:	ldr.w	r3, [r3, r1, lsl #2]
    8552:	str	r3, [r2, #0]
				}	
				mosi_pin_index = i;
    8554:	strb	r4, [r0, #9]
				return;
    8556:	b.n	8502 <SPIClass::setMOSI(unsigned char)+0x26>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    8558:	movs	r4, #1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    855a:	mov	r1, r4
    855c:	b.n	852a <SPIClass::setMOSI(unsigned char)+0x4e>
    855e:	nop
    8560:	.word	0x0000ca94
    8564:	.word	0x1fffbdd8
    8568:	.word	0x0000cb70

0000856c <SPIClass::setSCK(unsigned char)>:
	}
}

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    856c:	ldr	r2, [pc, #128]	; (85f0 <SPIClass::setSCK(unsigned char)+0x84>)
    856e:	ldr	r3, [r0, #4]
    8570:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    8572:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    8574:	beq.n	8596 <SPIClass::setSCK(unsigned char)+0x2a>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    8576:	ldrb	r2, [r0, #10]
    8578:	add	r2, r3
    857a:	ldrb.w	r2, [r2, #48]	; 0x30
    857e:	cmp	r1, r2
    8580:	beq.n	8592 <SPIClass::setSCK(unsigned char)+0x26>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    8582:	ldrb.w	r4, [r3, #48]	; 0x30
    8586:	cmp	r4, r1
    8588:	beq.n	85b6 <SPIClass::setSCK(unsigned char)+0x4a>
    858a:	ldrb.w	r4, [r3, #49]	; 0x31
    858e:	cmp	r4, r1
    8590:	beq.n	85ea <SPIClass::setSCK(unsigned char)+0x7e>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    8592:	pop	{r4, r5, r6, r7}
    8594:	bx	lr
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
#else
		if (pin == 13) pinout &= ~4;
    8596:	cmp	r1, #13
    8598:	beq.n	85aa <SPIClass::setSCK(unsigned char)+0x3e>
		if (pin == 14) pinout |= 4;
    859a:	cmp	r1, #14
    859c:	bne.n	8576 <SPIClass::setSCK(unsigned char)+0xa>
    859e:	ldr	r4, [pc, #84]	; (85f4 <SPIClass::setSCK(unsigned char)+0x88>)
    85a0:	ldrb	r2, [r4, #0]
    85a2:	orr.w	r2, r2, #4
    85a6:	strb	r2, [r4, #0]
    85a8:	b.n	8576 <SPIClass::setSCK(unsigned char)+0xa>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
#else
		if (pin == 13) pinout &= ~4;
    85aa:	ldr	r4, [pc, #72]	; (85f4 <SPIClass::setSCK(unsigned char)+0x88>)
    85ac:	ldrb	r2, [r4, #0]
    85ae:	bic.w	r2, r2, #4
    85b2:	strb	r2, [r4, #0]
    85b4:	b.n	8576 <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    85b6:	movs	r4, #0
    85b8:	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    85ba:	ldr	r6, [r3, #0]
    85bc:	ldr	r5, [r3, #4]
    85be:	ldr	r6, [r6, #0]
    85c0:	tst	r6, r5
    85c2:	beq.n	85e6 <SPIClass::setSCK(unsigned char)+0x7a>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    85c4:	ldr	r5, [pc, #48]	; (85f8 <SPIClass::setSCK(unsigned char)+0x8c>)
    85c6:	add.w	r2, r5, r2, lsl #3
					*reg = 0;
    85ca:	movs	r7, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    85cc:	ldr	r6, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    85ce:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    85d0:	str	r7, [r6, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    85d2:	ldrb.w	r2, [r2, #48]	; 0x30
					*reg = hardware().sck_mux[i];
    85d6:	adds	r1, #12
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    85d8:	add.w	r5, r5, r2, lsl #3
					*reg = hardware().sck_mux[i];
    85dc:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    85e0:	ldr	r2, [r5, #4]
					*reg = hardware().sck_mux[i];
    85e2:	ldr	r3, [r3, #4]
    85e4:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    85e6:	strb	r4, [r0, #10]
				return;
    85e8:	b.n	8592 <SPIClass::setSCK(unsigned char)+0x26>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    85ea:	movs	r4, #1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    85ec:	mov	r1, r4
    85ee:	b.n	85ba <SPIClass::setSCK(unsigned char)+0x4e>
    85f0:	.word	0x0000ca94
    85f4:	.word	0x1fffbdd8
    85f8:	.word	0x0000cb70

000085fc <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    85fc:	ldrb.w	r2, [r0, #57]	; 0x39
    8600:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    8604:	subs	r0, r2, r0
    8606:	bx	lr

00008608 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    8608:	ldrb.w	r3, [r0, #56]	; 0x38
    860c:	ldrb.w	r2, [r0, #57]	; 0x39
    8610:	cmp	r2, r3
    8612:	bls.n	8620 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    8614:	adds	r2, r3, #1
    8616:	add	r3, r0
    8618:	strb.w	r2, [r0, #56]	; 0x38
    861c:	ldrb	r0, [r3, #24]
    861e:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    8620:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    8624:	bx	lr
    8626:	nop

00008628 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    8628:	ldrb.w	r3, [r0, #56]	; 0x38
    862c:	ldrb.w	r2, [r0, #57]	; 0x39
    8630:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    8632:	itte	hi
    8634:	addhi	r3, r3, r0
    8636:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    8638:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    863c:	bx	lr
    863e:	nop

00008640 <TwoWire::flush()>:
	virtual void flush(void) {
    8640:	bx	lr
    8642:	nop

00008644 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    8644:	push	{r3, r4, r5, lr}
    8646:	mov	r5, r0
	if (transmitting || slave_mode) {
    8648:	ldrh.w	r0, [r0, #94]	; 0x5e
    864c:	cbz	r0, 8674 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    864e:	ldrb.w	r3, [r5, #93]	; 0x5d
    8652:	mov	r4, r2
    8654:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    8658:	cmp	r4, r2
    865a:	bhi.n	8676 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    865c:	add.w	r0, r5, #59	; 0x3b
    8660:	add	r0, r3
    8662:	mov	r2, r4
    8664:	bl	8bec <memcpy>
		txBufferLength += quantity;
    8668:	ldrb.w	r3, [r5, #93]	; 0x5d
    866c:	add	r3, r4
    866e:	strb.w	r3, [r5, #93]	; 0x5d
    8672:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    8674:	pop	{r3, r4, r5, pc}
    8676:	movs	r0, #1
    8678:	mov	r4, r2
    867a:	strb	r0, [r5, #4]
    867c:	b.n	865c <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    867e:	nop

00008680 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    8680:	ldrh.w	r3, [r0, #94]	; 0x5e
    8684:	cbz	r3, 86a2 <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    8686:	ldrb.w	r3, [r0, #93]	; 0x5d
    868a:	cmp	r3, #32
    868c:	bhi.n	869e <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    868e:	adds	r2, r0, r3
    8690:	adds	r3, #1
    8692:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    8696:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    8698:	strb.w	r1, [r2, #59]	; 0x3b
    869c:	bx	lr
    869e:	movs	r3, #1
    86a0:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    86a2:	movs	r0, #0
    86a4:	bx	lr
    86a6:	nop

000086a8 <TwoWire::begin()>:
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    86a8:	movs	r3, #0
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    86aa:	ldr	r2, [r0, #20]
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    86ac:	strb.w	r3, [r0, #56]	; 0x38
	rxBufferLength = 0;
    86b0:	strb.w	r3, [r0, #57]	; 0x39
	txBufferIndex = 0;
    86b4:	strb.w	r3, [r0, #92]	; 0x5c
	txBufferLength = 0;
    86b8:	strb.w	r3, [r0, #93]	; 0x5d
	transmitting = 0;
    86bc:	strb.w	r3, [r0, #94]	; 0x5e
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
    86c0:	strb.w	r3, [r0, #95]	; 0x5f
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    86c4:	ldmia	r2, {r1, r2}

void sda_rising_isr0(void);
void sda_rising_isr1(void);

void TwoWire::begin(void)
{
    86c6:	push	{r4, r5}
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    86c8:	ldr	r5, [r1, #0]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    86ca:	ldr	r4, [r0, #16]
	rxBufferIndex = 0;
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
    86cc:	str	r3, [r0, #100]	; 0x64
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    86ce:	orrs	r2, r5
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
    86d0:	str	r3, [r0, #104]	; 0x68
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    86d2:	str	r2, [r1, #0]
	port().C1 = 0;
    86d4:	strb	r3, [r4, #2]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    86d6:	ldr	r2, [r0, #20]
    86d8:	ldrb.w	r3, [r0, #97]	; 0x61
    86dc:	ldr	r1, [pc, #88]	; (8738 <TwoWire::begin()+0x90>)
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    86de:	ldr	r4, [r2, #0]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    86e0:	add	r3, r2
    86e2:	ldrb	r5, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    86e4:	ldrb	r3, [r3, #13]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    86e6:	add.w	r5, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    86ea:	lsls	r3, r3, #8
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    86ec:	ldr	r5, [r5, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    86ee:	and.w	r3, r3, #1792	; 0x700
    86f2:	orr.w	r3, r3, #100	; 0x64
    86f6:	str	r3, [r5, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    86f8:	ldrb.w	r3, [r0, #98]	; 0x62
    86fc:	add	r3, r2
    86fe:	ldrb	r5, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8700:	ldrb	r3, [r3, #23]
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8702:	add.w	r1, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8706:	lsls	r3, r3, #8
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8708:	ldr	r1, [r1, #4]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    870a:	and.w	r3, r3, #1792	; 0x700
    870e:	orr.w	r3, r3, #100	; 0x64
    8712:	str	r3, [r1, #0]
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    8714:	ldr	r1, [r4, #0]
    8716:	ldr	r3, [r2, #4]
    8718:	tst	r1, r3
    871a:	beq.n	8728 <TwoWire::begin()+0x80>
    871c:	ldr	r3, [r0, #16]
		port().F = I2C_F_DIV56; // 0.96 MHz
	}
	port().FLT = 4;
#elif F_BUS == 48000000
	if (frequency < 400000) {
		port().F = 0x27;	// 100 kHz
    871e:	movs	r2, #39	; 0x27
    8720:	strb	r2, [r3, #1]
    8722:	ldr	r3, [r0, #16]
	} else if (frequency < 1000000) {
		port().F = 0x1A; // 400 kHz
	} else {
		port().F = 0x0D; // 1 MHz
	}
	port().FLT = 4;
    8724:	movs	r2, #4
    8726:	strb	r2, [r3, #6]
    8728:	ldr	r3, [r0, #16]
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	setClock(100000);
	port().C2 = I2C_C2_HDRS;
    872a:	movs	r2, #32
    872c:	strb	r2, [r3, #5]
    872e:	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
    8730:	movs	r2, #128	; 0x80
    8732:	strb	r2, [r3, #2]
	//pinMode(3, OUTPUT);
	//pinMode(4, OUTPUT);
}
    8734:	pop	{r4, r5}
    8736:	bx	lr
    8738:	.word	0x0000cb70

0000873c <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    873c:	push	{r4, lr}
    873e:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    8740:	ldrb	r3, [r2, #3]
    8742:	uxtb	r3, r3
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    8744:	lsls	r1, r3, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    8746:	mov	r4, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    8748:	bpl.n	87c6 <TwoWire::isr()+0x8a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    874a:	movs	r1, #16
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    874c:	lsls	r0, r3, #25

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    874e:	strb	r1, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    8750:	bpl.n	87c4 <TwoWire::isr()+0x88>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    8752:	and.w	r3, r3, #4
    8756:	and.w	r2, r3, #255	; 0xff
    875a:	cmp	r3, #0
    875c:	beq.n	8802 <TwoWire::isr()+0xc6>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    875e:	ldr	r1, [pc, #244]	; (8854 <TwoWire::isr()+0x118>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    8760:	ldr	r2, [r4, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    8762:	movs	r3, #0
    8764:	strb	r3, [r1, #0]
			txBufferLength = 0;
    8766:	strb.w	r3, [r4, #93]	; 0x5d
			if (user_onRequest != NULL) {
    876a:	cmp	r2, #0
    876c:	beq.n	8826 <TwoWire::isr()+0xea>
				user_onRequest();
    876e:	blx	r2
			}
			if (txBufferLength == 0) {
    8770:	ldrb.w	r3, [r4, #93]	; 0x5d
    8774:	cmp	r3, #0
    8776:	beq.n	8826 <TwoWire::isr()+0xea>
    8778:	ldr	r3, [r4, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    877a:	movs	r2, #208	; 0xd0
    877c:	strb	r2, [r3, #2]
    877e:	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
    8780:	ldrb.w	r2, [r4, #59]	; 0x3b
    8784:	strb	r2, [r3, #4]
    8786:	ldr	r3, [r4, #16]
			txBufferIndex = 1;
    8788:	movs	r2, #1
    878a:	strb.w	r2, [r4, #92]	; 0x5c
			receiving = 1;
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
    878e:	movs	r2, #2
    8790:	strb	r2, [r3, #3]
		return;
    8792:	pop	{r4, pc}
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
    8794:	ldr	r3, [pc, #192]	; (8858 <TwoWire::isr()+0x11c>)
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    8796:	strb.w	r0, [r4, #96]	; 0x60
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
    879a:	cmp	r4, r3
    879c:	beq.n	8834 <TwoWire::isr()+0xf8>
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		} else if (this == &Wire1) {
    879e:	ldr	r3, [pc, #188]	; (885c <TwoWire::isr()+0x120>)
    87a0:	cmp	r4, r3
    87a2:	beq.n	884a <TwoWire::isr()+0x10e>
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    87a4:	ldrb.w	r1, [r4, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    87a8:	ldrb	r3, [r2, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    87aa:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    87ac:	uxtb	r3, r3
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    87ae:	bhi.n	87c0 <TwoWire::isr()+0x84>
    87b0:	ldr	r0, [pc, #160]	; (8854 <TwoWire::isr()+0x118>)
    87b2:	ldrb	r0, [r0, #0]
    87b4:	cbz	r0, 87c0 <TwoWire::isr()+0x84>
			rxBuffer[rxBufferLength++] = data;
    87b6:	adds	r0, r4, r1
    87b8:	adds	r1, #1
    87ba:	strb.w	r1, [r4, #57]	; 0x39
    87be:	strb	r3, [r0, #24]
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    87c0:	movs	r3, #2
    87c2:	strb	r3, [r2, #3]
    87c4:	pop	{r4, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    87c6:	lsls	r1, r3, #25
    87c8:	bmi.n	8752 <TwoWire::isr()+0x16>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    87ca:	ldrb	r1, [r2, #2]
	if (c1 & I2C_C1_TX) {
    87cc:	and.w	r1, r1, #16
    87d0:	and.w	r0, r1, #255	; 0xff
    87d4:	cmp	r1, #0
    87d6:	beq.n	8794 <TwoWire::isr()+0x58>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    87d8:	ands.w	r3, r3, #1
    87dc:	bne.n	881c <TwoWire::isr()+0xe0>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    87de:	ldrb.w	r1, [r4, #92]	; 0x5c
    87e2:	ldrb.w	r0, [r4, #93]	; 0x5d
    87e6:	cmp	r0, r1
				port().D = txBuffer[txBufferIndex++];
    87e8:	itttt	hi
    87ea:	addhi	r3, r1, #1
    87ec:	addhi	r1, r1, r4
    87ee:	strbhi.w	r3, [r4, #92]	; 0x5c
    87f2:	ldrbhi.w	r3, [r1, #59]	; 0x3b
			} else {
				port().D = 0;
    87f6:	strb	r3, [r2, #4]
    87f8:	ldr	r3, [r4, #16]
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    87fa:	movs	r2, #208	; 0xd0
    87fc:	strb	r2, [r3, #2]
    87fe:	ldr	r2, [r4, #16]
    8800:	b.n	87c0 <TwoWire::isr()+0x84>
    8802:	ldr	r3, [r4, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    8804:	strb.w	r2, [r4, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    8808:	movs	r2, #192	; 0xc0
    880a:	strb	r2, [r3, #2]
    880c:	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    880e:	ldr	r2, [pc, #68]	; (8854 <TwoWire::isr()+0x118>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    8810:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    8812:	movs	r1, #1
    8814:	strb	r1, [r2, #0]
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
    8816:	movs	r2, #2
    8818:	strb	r2, [r3, #3]
		return;
    881a:	pop	{r4, pc}
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    881c:	movs	r3, #192	; 0xc0
    881e:	strb	r3, [r2, #2]
    8820:	ldr	r2, [r4, #16]
			data = port().D;
    8822:	ldrb	r3, [r2, #4]
    8824:	b.n	87c0 <TwoWire::isr()+0x84>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    8826:	movs	r2, #1
				txBuffer[0] = 0;
    8828:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    882a:	strb.w	r2, [r4, #93]	; 0x5d
				txBuffer[0] = 0;
    882e:	strb.w	r3, [r4, #59]	; 0x3b
    8832:	b.n	8778 <TwoWire::isr()+0x3c>
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
    8834:	ldr	r2, [r4, #20]
    8836:	ldrb.w	r3, [r4, #97]	; 0x61
    883a:	ldr	r1, [pc, #36]	; (8860 <TwoWire::isr()+0x124>)
		} else if (this == &Wire1) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
    883c:	add	r3, r2
    883e:	movs	r2, #3
    8840:	ldrb	r0, [r3, #8]
    8842:	bl	9238 <attachInterrupt>
    8846:	ldr	r2, [r4, #16]
    8848:	b.n	87a4 <TwoWire::isr()+0x68>
    884a:	ldr	r2, [r4, #20]
    884c:	ldrb.w	r3, [r4, #97]	; 0x61
    8850:	ldr	r1, [pc, #16]	; (8864 <TwoWire::isr()+0x128>)
    8852:	b.n	883c <TwoWire::isr()+0x100>
    8854:	.word	0x1fffbcb9
    8858:	.word	0x1fff9498
    885c:	.word	0x1fff9504
    8860:	.word	0x000088c5
    8864:	.word	0x000088d1

00008868 <TwoWire::sda_rising_isr()>:
    8868:	ldr	r3, [r0, #16]
#endif

void TwoWire::sda_rising_isr(void)
{
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
    886a:	ldrb	r3, [r3, #3]
    886c:	and.w	r3, r3, #32
    8870:	cbz	r3, 8890 <TwoWire::sda_rising_isr()+0x28>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
    8872:	ldrb.w	r3, [r0, #96]	; 0x60
    8876:	adds	r3, #1
    8878:	uxtb	r3, r3
    887a:	cmp	r3, #1
    887c:	strb.w	r3, [r0, #96]	; 0x60
    8880:	bls.n	88b8 <TwoWire::sda_rising_isr()+0x50>
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
    8882:	ldr	r2, [r0, #20]
    8884:	ldrb.w	r3, [r0, #97]	; 0x61
    8888:	add	r3, r2
    888a:	ldrb	r0, [r3, #8]
    888c:	b.w	9330 <detachInterrupt>
	Wire1.sda_rising_isr();
}
#endif

void TwoWire::sda_rising_isr(void)
{
    8890:	push	{r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
    8892:	ldr	r2, [r0, #20]
    8894:	and.w	r5, r3, #255	; 0xff
    8898:	ldrb.w	r3, [r0, #97]	; 0x61
    889c:	add	r3, r2
    889e:	mov	r4, r0
    88a0:	ldrb	r0, [r3, #8]
    88a2:	bl	9330 <detachInterrupt>
		if (user_onReceive != NULL) {
    88a6:	ldr	r3, [r4, #104]	; 0x68
    88a8:	cbz	r3, 88c2 <TwoWire::sda_rising_isr()+0x5a>
			rxBufferIndex = 0;
    88aa:	strb.w	r5, [r4, #56]	; 0x38
			user_onReceive(rxBufferLength);
    88ae:	ldrb.w	r0, [r4, #57]	; 0x39
		if (++irqcount >= 2 || !slave_mode) {
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
		}
	}
	//digitalWrite(3, LOW);
}
    88b2:	ldmia.w	sp!, {r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
		if (user_onReceive != NULL) {
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
    88b6:	bx	r3
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
    88b8:	ldrb.w	r3, [r0, #95]	; 0x5f
    88bc:	cmp	r3, #0
    88be:	beq.n	8882 <TwoWire::sda_rising_isr()+0x1a>
    88c0:	bx	lr
    88c2:	pop	{r4, r5, r6, pc}

000088c4 <sda_rising_isr0()>:
#if !defined(WIRE_HAS_STOP_INTERRUPT)

#if defined(WIRE_IMPLEMENT_WIRE)
void sda_rising_isr0(void)
{
	Wire.sda_rising_isr();
    88c4:	ldr	r0, [pc, #4]	; (88cc <sda_rising_isr0()+0x8>)
    88c6:	b.w	8868 <TwoWire::sda_rising_isr()>
    88ca:	nop
    88cc:	.word	0x1fff9498

000088d0 <sda_rising_isr1()>:
}
#endif
#if defined(WIRE_IMPLEMENT_WIRE1)
void sda_rising_isr1(void)
{
	Wire1.sda_rising_isr();
    88d0:	ldr	r0, [pc, #4]	; (88d8 <sda_rising_isr1()+0x8>)
    88d2:	b.w	8868 <TwoWire::sda_rising_isr()>
    88d6:	nop
    88d8:	.word	0x1fff9504

000088dc <TwoWire::wait_idle()>:
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    88dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    88e0:	ldr	r7, [pc, #220]	; (89c0 <L_1545_delayMicroseconds+0x1a>)
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    88e2:	ldr.w	r9, [pc, #224]	; 89c4 <L_1545_delayMicroseconds+0x1e>
    88e6:	ldr	r3, [r7, #0]
    88e8:	ldr	r2, [r0, #16]
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    88ea:	sub	sp, #8
    88ec:	mov	r6, r0
    88ee:	str	r3, [sp, #0]
	return ret;
    88f0:	ldr.w	r8, [sp]
	bool reset=false;
    88f4:	movs	r1, #0
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    88f6:	movs	r5, #160	; 0xa0
	uint8_t i2c_status(void) {
		return port().S;
    88f8:	ldrb	r3, [r2, #3]
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    88fa:	lsls	r3, r3, #26
    88fc:	bpl.n	89b6 <L_1545_delayMicroseconds+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    88fe:	ldr	r3, [r7, #0]
    8900:	str	r3, [sp, #4]
	return ret;
    8902:	ldr	r3, [sp, #4]
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
    8904:	rsb	r3, r8, r3
#if 1
		if (waited > 15 && !reset) {
    8908:	cmp	r3, #15
    890a:	bls.n	88f8 <TwoWire::wait_idle()+0x1c>
    890c:	cbz	r1, 8922 <TwoWire::wait_idle()+0x46>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
    890e:	cmp	r3, #16
    8910:	beq.n	88f8 <TwoWire::wait_idle()+0x1c>
			// bus stuck busy too long
			port().C1 = 0;
    8912:	movs	r0, #0
    8914:	strb	r0, [r2, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8916:	ldr	r3, [r6, #16]
			port().C1 = I2C_C1_IICEN;
    8918:	movs	r2, #128	; 0x80
    891a:	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
    891c:	add	sp, #8
    891e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
    8922:	ldr	r2, [r6, #20]
    8924:	ldrb.w	r3, [r6, #97]	; 0x61
    8928:	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
    892a:	movs	r1, #5
    892c:	ldrb	r0, [r3, #8]
    892e:	bl	9404 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    8932:	ldr	r2, [r6, #20]
    8934:	ldrb.w	r3, [r6, #97]	; 0x61
    8938:	add	r3, r2
			pinMode(scl_pin, OUTPUT);
    893a:	movs	r1, #1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    893c:	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
    8940:	mov	r0, sl
    8942:	bl	9404 <pinMode>
    8946:	movs	r4, #9
			for (int i=0; i < 9; i++) {
				digitalWrite(scl_pin, LOW);
    8948:	movs	r1, #0
    894a:	mov	r0, sl
    894c:	bl	93dc <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    8950:	mov	r3, r5

00008952 <L_1480_delayMicroseconds>:
    8952:	subs	r3, #1
    8954:	bne.n	8952 <L_1480_delayMicroseconds>
				delayMicroseconds(5);
				digitalWrite(scl_pin, HIGH);
    8956:	movs	r1, #1
    8958:	mov	r0, sl
    895a:	bl	93dc <digitalWrite>
    895e:	mov	r3, r5

00008960 <L_1494_delayMicroseconds>:
    8960:	subs	r3, #1
    8962:	bne.n	8960 <L_1494_delayMicroseconds>
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
			pinMode(scl_pin, OUTPUT);
			for (int i=0; i < 9; i++) {
    8964:	subs	r4, #1
    8966:	bne.n	8948 <TwoWire::wait_idle()+0x6c>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8968:	ldr	r0, [r6, #20]
    896a:	ldrb.w	r1, [r6, #97]	; 0x61
    896e:	add	r1, r0
    8970:	mov.w	r2, #320	; 0x140
    8974:	ldrb	r4, [r1, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8976:	ldrb	r3, [r1, #13]
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    8978:	add.w	r1, r9, r4, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    897c:	lsls	r3, r3, #8
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    897e:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8980:	and.w	r3, r3, #1792	; 0x700
    8984:	orr.w	r3, r3, #100	; 0x64
    8988:	str	r3, [r1, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    898a:	ldrb.w	r3, [r6, #98]	; 0x62
    898e:	add	r3, r0
    8990:	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8992:	ldrb	r3, [r3, #23]
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    8994:	add.w	r1, r9, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    8998:	lsls	r3, r3, #8
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    899a:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    899c:	and.w	r3, r3, #1792	; 0x700
    89a0:	orr.w	r3, r3, #100	; 0x64
    89a4:	str	r3, [r1, #0]

000089a6 <L_1545_delayMicroseconds>:
    89a6:	subs	r2, #1
    89a8:	bne.n	89a6 <L_1545_delayMicroseconds>
    89aa:	ldr	r2, [r6, #16]
	uint8_t i2c_status(void) {
		return port().S;
    89ac:	ldrb	r3, [r2, #3]
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    89ae:	lsls	r3, r3, #26
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
    89b0:	mov.w	r1, #1
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    89b4:	bmi.n	88fe <TwoWire::wait_idle()+0x22>
			//Serial.println("abort");
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
    89b6:	movs	r0, #1
}
    89b8:	add	sp, #8
    89ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    89be:	nop
    89c0:	.word	0x1fffbccc
    89c4:	.word	0x0000cb70

000089c8 <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    89c8:	push	{r4, r5, r6, r7, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    89ca:	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    89cc:	movs	r2, #18
    89ce:	strb	r2, [r3, #3]
    89d0:	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    89d2:	ldrb	r3, [r2, #2]
    89d4:	and.w	r3, r3, #32
	}
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    89d8:	sub	sp, #20
    89da:	mov	r4, r0
    89dc:	mov	r5, r1
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    89de:	cmp	r3, #0
    89e0:	beq.n	8aa0 <TwoWire::endTransmission(unsigned char)+0xd8>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    89e2:	movs	r3, #180	; 0xb4
    89e4:	strb	r3, [r2, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    89e6:	ldr	r1, [pc, #240]	; (8ad8 <TwoWire::endTransmission(unsigned char)+0x110>)
    89e8:	ldr	r2, [r4, #16]
    89ea:	ldr	r3, [r1, #0]
    89ec:	str	r3, [sp, #0]
	return ret;
    89ee:	ldr	r6, [sp, #0]
    89f0:	b.n	89fe <TwoWire::endTransmission(unsigned char)+0x36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    89f2:	ldr	r3, [r1, #0]
    89f4:	str	r3, [sp, #4]
	return ret;
    89f6:	ldr	r3, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
    89f8:	subs	r3, r3, r6
    89fa:	cmp	r3, #4
    89fc:	bhi.n	8a84 <TwoWire::endTransmission(unsigned char)+0xbc>
	uint8_t i2c_status(void) {
		return port().S;
    89fe:	ldrb	r3, [r2, #3]
	}
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    8a00:	and.w	r3, r3, #32
    8a04:	and.w	r0, r3, #255	; 0xff
    8a08:	cmp	r3, #0
    8a0a:	beq.n	89f2 <TwoWire::endTransmission(unsigned char)+0x2a>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    8a0c:	ldrb.w	r3, [r4, #93]	; 0x5d
    8a10:	cmp	r3, #0
    8a12:	beq.n	8a78 <TwoWire::endTransmission(unsigned char)+0xb0>
    8a14:	mov.w	lr, #0
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    8a18:	mov.w	ip, #2
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
		port().D = txBuffer[i];
    8a1c:	add.w	r3, r4, lr
    8a20:	ldrb.w	r3, [r3, #59]	; 0x3b
    8a24:	strb	r3, [r2, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8a26:	ldr	r3, [r1, #0]
    8a28:	str	r3, [sp, #12]
	return ret;
    8a2a:	ldr	r7, [sp, #12]
    8a2c:	ldr	r0, [r4, #16]
    8a2e:	b.n	8a40 <TwoWire::endTransmission(unsigned char)+0x78>
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
    8a30:	lsls	r3, r3, #26
    8a32:	bpl.n	8a50 <TwoWire::endTransmission(unsigned char)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8a34:	ldr	r3, [r1, #0]
    8a36:	str	r3, [sp, #8]
	return ret;
    8a38:	ldr	r3, [sp, #8]
			if (millis() - wait_begin > 5) {
    8a3a:	subs	r3, r3, r7
    8a3c:	cmp	r3, #5
    8a3e:	bhi.n	8a92 <TwoWire::endTransmission(unsigned char)+0xca>
    8a40:	ldrb	r3, [r0, #3]
    8a42:	uxtb	r3, r3
		port().D = txBuffer[i];
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
    8a44:	and.w	r2, r3, #2
    8a48:	and.w	r6, r2, #255	; 0xff
    8a4c:	cmp	r2, #0
    8a4e:	beq.n	8a30 <TwoWire::endTransmission(unsigned char)+0x68>
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    8a50:	strb.w	ip, [r0, #3]
    8a54:	ldr	r6, [r4, #16]
    8a56:	ldrb	r3, [r6, #3]
    8a58:	uxtb	r3, r3
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
    8a5a:	lsls	r7, r3, #27
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    8a5c:	mov	r2, r6
    8a5e:	bmi.n	8abc <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
    8a60:	lsls	r7, r3, #26
    8a62:	bpl.n	8abc <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
    8a64:	lsls	r3, r3, #31
    8a66:	bmi.n	8acc <TwoWire::endTransmission(unsigned char)+0x104>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    8a68:	add.w	lr, lr, #1
    8a6c:	ldrb.w	r3, [r4, #93]	; 0x5d
    8a70:	uxtb.w	lr, lr
    8a74:	cmp	r3, lr
    8a76:	bhi.n	8a1c <TwoWire::endTransmission(unsigned char)+0x54>
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	uint8_t i, status, ret=0;
    8a78:	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
    8a7a:	cbnz	r5, 8ac4 <TwoWire::endTransmission(unsigned char)+0xfc>
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
    8a7c:	movs	r3, #0
    8a7e:	strb.w	r3, [r4, #94]	; 0x5e
    8a82:	b.n	8a8e <TwoWire::endTransmission(unsigned char)+0xc6>
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    8a84:	strb	r0, [r2, #2]
    8a86:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    8a88:	movs	r2, #128	; 0x80
    8a8a:	strb	r2, [r3, #2]
			//Serial.println("abort2");
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
    8a8c:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8a8e:	add	sp, #20
    8a90:	pop	{r4, r5, r6, r7, pc}
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    8a92:	strb	r6, [r0, #2]
    8a94:	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
    8a96:	movs	r2, #128	; 0x80
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
    8a98:	movs	r0, #4
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
				port().C1 = I2C_C1_IICEN;
    8a9a:	strb	r2, [r3, #2]
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8a9c:	add	sp, #20
    8a9e:	pop	{r4, r5, r6, r7, pc}
    8aa0:	and.w	r6, r3, #255	; 0xff
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    8aa4:	bl	88dc <TwoWire::wait_idle()>
    8aa8:	cbnz	r0, 8ab0 <TwoWire::endTransmission(unsigned char)+0xe8>
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
    8aaa:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    8aac:	add	sp, #20
    8aae:	pop	{r4, r5, r6, r7, pc}
    8ab0:	ldr	r3, [r4, #16]
		if (!wait_idle()) {
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    8ab2:	strb.w	r6, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    8ab6:	movs	r2, #176	; 0xb0
    8ab8:	strb	r2, [r3, #2]
    8aba:	b.n	89e6 <TwoWire::endTransmission(unsigned char)+0x1e>
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
			// suddenly lost control of the bus!
			port().C1 = I2C_C1_IICEN;
    8abc:	movs	r3, #128	; 0x80
    8abe:	strb	r3, [r6, #2]
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
    8ac0:	movs	r0, #4
    8ac2:	b.n	8a7a <TwoWire::endTransmission(unsigned char)+0xb2>
    8ac4:	ldr	r6, [r4, #16]
			break;
		}
	}
	if (sendStop) {
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
    8ac6:	movs	r3, #128	; 0x80
    8ac8:	strb	r3, [r6, #2]
    8aca:	b.n	8a7c <TwoWire::endTransmission(unsigned char)+0xb4>
			if (i == 0) {
				//Serial.printf("endTransmission err6\n");
				ret = 2; // 2:received NACK on transmit of address
			} else {
				//Serial.printf("endTransmission err7\n");
				ret = 3; // 3:received NACK on transmit of data 
    8acc:	cmp.w	lr, #0
    8ad0:	ite	eq
    8ad2:	moveq	r0, #2
    8ad4:	movne	r0, #3
    8ad6:	b.n	8ac6 <TwoWire::endTransmission(unsigned char)+0xfe>
    8ad8:	.word	0x1fffbccc

00008adc <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    8adc:	ldr	r0, [pc, #4]	; (8ae4 <i2c0_isr+0x8>)
    8ade:	b.w	873c <TwoWire::isr()>
    8ae2:	nop
    8ae4:	.word	0x1fff9498

00008ae8 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    8ae8:	ldr	r0, [pc, #4]	; (8af0 <i2c1_isr+0x8>)
    8aea:	b.w	873c <TwoWire::isr()>
    8aee:	nop
    8af0:	.word	0x1fff9504

00008af4 <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    8af4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    8af8:	add.w	lr, r0, #256	; 0x100

00008afc <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    8afc:	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    8b00:	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    8b04:	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    8b08:	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    8b0c:	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    8b10:	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    8b14:	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    8b18:	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    8b1c:	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    8b20:	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    8b24:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    8b28:	cmp	lr, r0
	bne .loopLR
    8b2a:	bne.n	8afc <.loopLR>

	pop	{r4-r11,r14}	
    8b2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8,r14}	
#endif
	BX lr
    8b30:	bx	lr

00008b32 <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    8b32:	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    8b36:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    8b3a:	add.w	ip, r0, #256	; 0x100
    8b3e:	nop

00008b40 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    8b40:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    8b44:	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    8b48:	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    8b4c:	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    8b50:	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    8b54:	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    8b58:	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    8b5c:	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    8b60:	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    8b64:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    8b68:	cmp	ip, r0
	bne .loopL
    8b6a:	bne.n	8b40 <.loopL>

	pop	{r4-r11}
    8b6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    8b70:	bx	lr

00008b72 <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    8b72:	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    8b76:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    8b7a:	add.w	ip, r0, #256	; 0x100
    8b7e:	nop

00008b80 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    8b80:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    8b84:	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    8b88:	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    8b8c:	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    8b90:	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    8b94:	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    8b98:	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    8b9c:	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    8ba0:	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    8ba4:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    8ba8:	cmp	ip, r0
	bne .loopR
    8baa:	bne.n	8b80 <.loopR>

	pop	{r4-r11}
    8bac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    8bb0:	bx	lr

00008bb2 <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    8bb2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    8bb6:	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    8bb8:	add.w	fp, r0, #512	; 0x200

00008bbc <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    8bbc:	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    8bc0:	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    8bc4:	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    8bc8:	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    8bcc:	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    8bd0:	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    8bd4:	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    8bd8:	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    8bdc:	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    8be0:	cmp	fp, r0
	bne .loopQuad
    8be2:	bne.n	8bbc <.loopQuad>

	pop	{r4-r11}
    8be4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    8be8:	bx	lr
    8bea:	nop

00008bec <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8bec:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8bee:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8bf2:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8bf6:	bne.n	8cd4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8bf8:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8bfa:	bcc.n	8c80 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8bfc:	ldr.w	r3, [r1], #4
    8c00:	str.w	r3, [r0], #4
    8c04:	ldr.w	r3, [r1], #4
    8c08:	str.w	r3, [r0], #4
    8c0c:	ldr.w	r3, [r1], #4
    8c10:	str.w	r3, [r0], #4
    8c14:	ldr.w	r3, [r1], #4
    8c18:	str.w	r3, [r0], #4
    8c1c:	ldr.w	r3, [r1], #4
    8c20:	str.w	r3, [r0], #4
    8c24:	ldr.w	r3, [r1], #4
    8c28:	str.w	r3, [r0], #4
    8c2c:	ldr.w	r3, [r1], #4
    8c30:	str.w	r3, [r0], #4
    8c34:	ldr.w	r3, [r1], #4
    8c38:	str.w	r3, [r0], #4
    8c3c:	ldr.w	r3, [r1], #4
    8c40:	str.w	r3, [r0], #4
    8c44:	ldr.w	r3, [r1], #4
    8c48:	str.w	r3, [r0], #4
    8c4c:	ldr.w	r3, [r1], #4
    8c50:	str.w	r3, [r0], #4
    8c54:	ldr.w	r3, [r1], #4
    8c58:	str.w	r3, [r0], #4
    8c5c:	ldr.w	r3, [r1], #4
    8c60:	str.w	r3, [r0], #4
    8c64:	ldr.w	r3, [r1], #4
    8c68:	str.w	r3, [r0], #4
    8c6c:	ldr.w	r3, [r1], #4
    8c70:	str.w	r3, [r0], #4
    8c74:	ldr.w	r3, [r1], #4
    8c78:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8c7c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8c7e:	bcs.n	8bfc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8c80:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8c82:	bcc.n	8ca8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8c84:	ldr.w	r3, [r1], #4
    8c88:	str.w	r3, [r0], #4
    8c8c:	ldr.w	r3, [r1], #4
    8c90:	str.w	r3, [r0], #4
    8c94:	ldr.w	r3, [r1], #4
    8c98:	str.w	r3, [r0], #4
    8c9c:	ldr.w	r3, [r1], #4
    8ca0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8ca4:	subs	r2, #16
	bhs	.Lmid_block_loop
    8ca6:	bcs.n	8c84 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8ca8:	adds	r2, #12
	blo	.Lcopy_less_than_4
    8caa:	bcc.n	8cb8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8cac:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8cb0:	str.w	r3, [r0], #4
	subs	r2, #4
    8cb4:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8cb6:	bcs.n	8cac <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8cb8:	adds	r2, #4
	beq	.Ldone
    8cba:	beq.n	8cce <memcpy+0xe2>

	lsls	r2, r2, #31
    8cbc:	lsls	r2, r2, #31
	itt ne
    8cbe:	itt	ne
	ldrbne  r3, [r1], #1
    8cc0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8cc4:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8cc8:	bcc.n	8cce <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8cca:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8ccc:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8cce:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8cd0:	bx	lr
    8cd2:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    8cd4:	cmp	r2, #8
	blo	.Lbyte_copy
    8cd6:	bcc.n	8d00 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8cd8:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8cda:	beq.n	8bf8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8cdc:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8ce0:	beq.n	8bf8 <memcpy+0xc>

	rsb	r3, #4
    8ce2:	rsb	r3, r3, #4
	subs	r2, r3
    8ce6:	subs	r2, r2, r3

	lsls    r3, r3, #31
    8ce8:	lsls	r3, r3, #31
	itt ne
    8cea:	itt	ne
	ldrbne  r3, [r1], #1
    8cec:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8cf0:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8cf4:	bcc.n	8bf8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8cf6:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8cfa:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8cfe:	b.n	8bf8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8d00:	subs	r2, #4
	blo	.Lcopy_less_than_4
    8d02:	bcc.n	8cb8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8d04:	subs	r2, #1
	ldrb    r3, [r1], #1
    8d06:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8d0a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8d0e:	bcs.n	8d04 <memcpy+0x118>

	ldrb	r3, [r1]
    8d10:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8d12:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8d14:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8d16:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8d18:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8d1a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8d1c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8d1e:	bx	lr

00008d20 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8d20:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    8d22:	ldr	r5, [pc, #60]	; (8d60 <usb_serial_getchar+0x40>)
    8d24:	ldr	r0, [r5, #0]
    8d26:	cbz	r0, 8d48 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    8d28:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    8d2a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    8d2c:	adds	r1, r0, r3
    8d2e:	adds	r3, #1
	if (i >= rx_packet->len) {
    8d30:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    8d32:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    8d34:	bcs.n	8d3c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    8d36:	strh	r3, [r0, #2]
	}
	return c;
    8d38:	mov	r0, r4
}
    8d3a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    8d3c:	bl	9610 <usb_free>
		rx_packet = NULL;
    8d40:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    8d42:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8d44:	str	r3, [r5, #0]
    8d46:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8d48:	ldr	r3, [pc, #24]	; (8d64 <usb_serial_getchar+0x44>)
    8d4a:	ldrb	r3, [r3, #0]
    8d4c:	cbz	r3, 8d5a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8d4e:	movs	r0, #3
    8d50:	bl	965c <usb_rx>
    8d54:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    8d56:	cmp	r0, #0
    8d58:	bne.n	8d28 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8d5a:	mov.w	r0, #4294967295
    8d5e:	pop	{r3, r4, r5, pc}
    8d60:	.word	0x1fffbcc4
    8d64:	.word	0x1fffbdb0

00008d68 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    8d68:	push	{r4, lr}
	if (!rx_packet) {
    8d6a:	ldr	r4, [pc, #36]	; (8d90 <usb_serial_peekchar+0x28>)
    8d6c:	ldr	r0, [r4, #0]
    8d6e:	cbz	r0, 8d78 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    8d70:	ldrh	r3, [r0, #2]
    8d72:	add	r0, r3
    8d74:	ldrb	r0, [r0, #8]
}
    8d76:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8d78:	ldr	r3, [pc, #24]	; (8d94 <usb_serial_peekchar+0x2c>)
    8d7a:	ldrb	r3, [r3, #0]
    8d7c:	cbz	r3, 8d8a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8d7e:	movs	r0, #3
    8d80:	bl	965c <usb_rx>
    8d84:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    8d86:	cmp	r0, #0
    8d88:	bne.n	8d70 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8d8a:	mov.w	r0, #4294967295
    8d8e:	pop	{r4, pc}
    8d90:	.word	0x1fffbcc4
    8d94:	.word	0x1fffbdb0

00008d98 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8d98:	ldr	r3, [pc, #16]	; (8dac <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    8d9a:	ldr	r2, [pc, #20]	; (8db0 <usb_serial_available+0x18>)
    8d9c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    8d9e:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8da0:	cbz	r3, 8daa <usb_serial_available+0x12>
    8da2:	ldrh	r2, [r3, #0]
    8da4:	ldrh	r3, [r3, #2]
    8da6:	subs	r3, r2, r3
    8da8:	add	r0, r3
	return count;
}
    8daa:	bx	lr
    8dac:	.word	0x1fffbcc4
    8db0:	.word	0x1fffbfdc

00008db4 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    8db4:	ldr	r3, [pc, #44]	; (8de4 <usb_serial_flush_input+0x30>)
    8db6:	ldrb	r3, [r3, #0]
    8db8:	cbz	r3, 8de2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    8dba:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    8dbc:	ldr	r4, [pc, #40]	; (8de8 <usb_serial_flush_input+0x34>)
    8dbe:	ldr	r0, [r4, #0]
    8dc0:	cbz	r0, 8dd6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    8dc2:	bl	9610 <usb_free>
		rx_packet = NULL;
    8dc6:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8dc8:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8dca:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8dcc:	bl	965c <usb_rx>
		if (!rx) break;
    8dd0:	cbz	r0, 8de0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    8dd2:	bl	9610 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8dd6:	movs	r0, #3
    8dd8:	bl	965c <usb_rx>
		if (!rx) break;
    8ddc:	cmp	r0, #0
    8dde:	bne.n	8dd2 <usb_serial_flush_input+0x1e>
    8de0:	pop	{r4, pc}
    8de2:	bx	lr
    8de4:	.word	0x1fffbdb0
    8de8:	.word	0x1fffbcc4

00008dec <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8dec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8df0:	ldr.w	r9, [pc, #248]	; 8eec <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8df4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8df6:	movs	r2, #1
    8df8:	strb.w	r2, [r9]
	while (size > 0) {
    8dfc:	str	r1, [sp, #4]
    8dfe:	cbz	r1, 8e5c <usb_serial_write+0x70>
    8e00:	ldr.w	r8, [pc, #236]	; 8ef0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8e04:	ldr	r7, [pc, #216]	; (8ee0 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8e06:	ldr	r6, [sp, #4]
    8e08:	mov	fp, r0
		if (!tx_packet) {
    8e0a:	ldr.w	r0, [r8]
    8e0e:	cbz	r0, 8e7e <usb_serial_write+0x92>
    8e10:	ldr	r5, [pc, #208]	; (8ee4 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    8e12:	ldrh	r4, [r0, #2]
    8e14:	rsb	r1, r4, #64	; 0x40
    8e18:	cmp	r1, r6
    8e1a:	it	cs
    8e1c:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8e1e:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8e22:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8e24:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8e28:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    8e2a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8e2c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    8e30:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    8e34:	cbz	r1, 8e4c <usb_serial_write+0x60>
    8e36:	subs	r4, #1
    8e38:	add	r2, r4
    8e3a:	add	r1, fp
    8e3c:	ldrb.w	r4, [fp], #1
    8e40:	strb.w	r4, [r2, #1]!
    8e44:	cmp	fp, r1
    8e46:	bne.n	8e3c <usb_serial_write+0x50>
    8e48:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    8e4c:	cmp.w	lr, #63	; 0x3f
    8e50:	bhi.n	8e6a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    8e52:	ldr	r2, [pc, #148]	; (8ee8 <usb_serial_write+0xfc>)
    8e54:	movs	r1, #5
    8e56:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8e58:	cmp	r6, #0
    8e5a:	bne.n	8e0a <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    8e5c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    8e5e:	movs	r3, #0
    8e60:	strb.w	r3, [r9]
	return ret;
}
    8e64:	add	sp, #12
    8e66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    8e6a:	movs	r2, #64	; 0x40
    8e6c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8e6e:	mov	r1, r0
    8e70:	movs	r0, #4
    8e72:	bl	978c <usb_tx>
			tx_packet = NULL;
    8e76:	movs	r2, #0
    8e78:	str.w	r2, [r8]
    8e7c:	b.n	8e52 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8e7e:	ldrb	r2, [r7, #0]
    8e80:	cbz	r2, 8ece <usb_serial_write+0xe2>
    8e82:	ldr	r5, [pc, #96]	; (8ee4 <usb_serial_write+0xf8>)
    8e84:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    8e88:	mov.w	sl, #1
    8e8c:	b.n	8e9e <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8e8e:	subs	r4, #1
    8e90:	beq.n	8ec0 <usb_serial_write+0xd4>
    8e92:	ldrb	r2, [r5, #0]
    8e94:	cbnz	r2, 8ec0 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    8e96:	bl	a68c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8e9a:	ldrb	r2, [r7, #0]
    8e9c:	cbz	r2, 8ece <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    8e9e:	movs	r0, #4
    8ea0:	bl	9698 <usb_tx_packet_count>
    8ea4:	cmp	r0, #7
    8ea6:	bhi.n	8e8e <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    8ea8:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    8eac:	bl	95d0 <usb_malloc>
    8eb0:	str.w	r0, [r8]
					if (tx_packet) break;
    8eb4:	cmp	r0, #0
    8eb6:	bne.n	8e12 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    8eb8:	ldr	r3, [pc, #48]	; (8eec <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8eba:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    8ebc:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8ebe:	bne.n	8e92 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    8ec0:	movs	r3, #1
					return -1;
    8ec2:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    8ec6:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8ec8:	add	sp, #12
    8eca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8ece:	movs	r3, #0
					return -1;
    8ed0:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8ed4:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8ed8:	add	sp, #12
    8eda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ede:	nop
    8ee0:	.word	0x1fffbdb0
    8ee4:	.word	0x1fffbcc0
    8ee8:	.word	0x1fffbcba
    8eec:	.word	0x1fffbcbb
    8ef0:	.word	0x1fffbcbc

00008ef4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8ef4:	push	{lr}
    8ef6:	sub	sp, #12
    8ef8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    8efa:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8efc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    8f00:	mov	r0, r3
    8f02:	bl	8dec <usb_serial_write>
}
    8f06:	add	sp, #12
    8f08:	ldr.w	pc, [sp], #4

00008f0c <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    8f0c:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    8f0e:	ldr	r5, [pc, #56]	; (8f48 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8f10:	ldr	r4, [pc, #56]	; (8f4c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    8f12:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8f14:	movs	r3, #1
    8f16:	strb	r3, [r4, #0]
	if (!tx_packet) {
    8f18:	cbz	r0, 8f26 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8f1a:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    8f1c:	movs	r3, #0
    8f1e:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8f20:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    8f24:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8f26:	ldr	r3, [pc, #40]	; (8f50 <usb_serial_write_buffer_free+0x44>)
    8f28:	ldrb	r3, [r3, #0]
    8f2a:	cbnz	r3, 8f32 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    8f2c:	movs	r0, #0
    8f2e:	strb	r0, [r4, #0]
			return 0;
    8f30:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8f32:	movs	r0, #4
    8f34:	bl	9698 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8f38:	cmp	r0, #7
    8f3a:	bhi.n	8f2c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    8f3c:	bl	95d0 <usb_malloc>
    8f40:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8f42:	cmp	r0, #0
    8f44:	bne.n	8f1a <usb_serial_write_buffer_free+0xe>
    8f46:	b.n	8f2c <usb_serial_write_buffer_free+0x20>
    8f48:	.word	0x1fffbcbc
    8f4c:	.word	0x1fffbcbb
    8f50:	.word	0x1fffbdb0

00008f54 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    8f54:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    8f56:	ldr	r3, [pc, #68]	; (8f9c <usb_serial_flush_output+0x48>)
    8f58:	ldrb	r3, [r3, #0]
    8f5a:	cbz	r3, 8f80 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    8f5c:	ldr	r6, [pc, #64]	; (8fa0 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8f5e:	ldr	r5, [pc, #68]	; (8fa4 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    8f60:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8f62:	movs	r7, #1
    8f64:	strb	r7, [r5, #0]
	if (tx_packet) {
    8f66:	cbz	r4, 8f82 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    8f68:	ldr	r2, [pc, #60]	; (8fa8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    8f6a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    8f6c:	movs	r7, #0
    8f6e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8f70:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    8f72:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8f74:	movs	r0, #4
    8f76:	bl	978c <usb_tx>
		tx_packet = NULL;
    8f7a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    8f7c:	movs	r3, #0
    8f7e:	strb	r3, [r5, #0]
    8f80:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8f82:	bl	95d0 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8f86:	ldr	r3, [pc, #32]	; (8fa8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    8f88:	cbz	r0, 8f96 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    8f8a:	mov	r1, r0
    8f8c:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8f8e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    8f90:	bl	978c <usb_tx>
    8f94:	b.n	8f7c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8f96:	strb	r7, [r3, #0]
    8f98:	b.n	8f7c <usb_serial_flush_output+0x28>
    8f9a:	nop
    8f9c:	.word	0x1fffbdb0
    8fa0:	.word	0x1fffbcbc
    8fa4:	.word	0x1fffbcbb
    8fa8:	.word	0x1fffbcba

00008fac <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    8fac:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    8fae:	ldr	r3, [pc, #56]	; (8fe8 <usb_serial_flush_callback+0x3c>)
    8fb0:	ldrb	r3, [r3, #0]
    8fb2:	cbnz	r3, 8fd2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    8fb4:	ldr	r4, [pc, #52]	; (8fec <usb_serial_flush_callback+0x40>)
    8fb6:	ldr	r1, [r4, #0]
    8fb8:	cbz	r1, 8fd4 <usb_serial_flush_callback+0x28>
    8fba:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    8fbe:	ldrh	r3, [r1, #2]
    8fc0:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8fc2:	movs	r0, #4
    8fc4:	bl	978c <usb_tx>
		tx_packet = NULL;
    8fc8:	str	r5, [r4, #0]
    8fca:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8fcc:	ldr	r3, [pc, #32]	; (8ff0 <usb_serial_flush_callback+0x44>)
    8fce:	movs	r2, #1
    8fd0:	strb	r2, [r3, #0]
    8fd2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8fd4:	bl	95d0 <usb_malloc>
		if (tx) {
    8fd8:	cmp	r0, #0
    8fda:	beq.n	8fcc <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    8fdc:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    8fde:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    8fe2:	movs	r0, #4
    8fe4:	b.w	978c <usb_tx>
    8fe8:	.word	0x1fffbcbb
    8fec:	.word	0x1fffbcbc
    8ff0:	.word	0x1fffbcba

00008ff4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    8ff4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8ff6:	ldr	r0, [pc, #164]	; (909c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8ff8:	ldr	r2, [pc, #164]	; (90a0 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    8ffa:	ldr	r3, [pc, #168]	; (90a4 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8ffc:	ldr	r5, [pc, #168]	; (90a8 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8ffe:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    9000:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    9002:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    9004:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    9006:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9008:	ldr	r4, [pc, #160]	; (90ac <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    900a:	cmp	r3, #8
    900c:	beq.n	9070 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    900e:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9010:	ldr	r0, [pc, #156]	; (90b0 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9012:	ldr	r1, [pc, #160]	; (90b4 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    9014:	beq.n	9086 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    9016:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    9018:	ite	eq
    901a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    901c:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    901e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    9020:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    9022:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    9024:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    9026:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    9028:	ldr	r3, [pc, #140]	; (90b8 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    902a:	ldr	r1, [pc, #144]	; (90bc <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    902c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    902e:	ldr	r2, [pc, #144]	; (90c0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    9030:	cbz	r3, 9062 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9032:	movs	r3, #1
    9034:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9036:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    9038:	ldr	r3, [pc, #136]	; (90c4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    903a:	ldr	r1, [pc, #140]	; (90c8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    903c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    903e:	ldr	r2, [pc, #140]	; (90cc <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    9040:	cmp	r3, #1
    9042:	bls.n	9092 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    9044:	cmp	r3, #4
    9046:	bls.n	9068 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    9048:	cmp	r3, #8
    904a:	bls.n	908a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    904c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    904e:	ite	ls
    9050:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    9052:	movhi	r3, #135	; 0x87
    9054:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    9056:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    9058:	ldr	r3, [pc, #116]	; (90d0 <analog_init+0xdc>)
    905a:	movs	r2, #1
    905c:	strb	r2, [r3, #0]
}
    905e:	pop	{r4, r5}
    9060:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    9062:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    9064:	str	r3, [r2, #0]
    9066:	b.n	9038 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    9068:	movs	r3, #132	; 0x84
    906a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    906c:	str	r3, [r2, #0]
    906e:	b.n	9058 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9070:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9074:	ldr	r1, [pc, #60]	; (90b4 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9076:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9078:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    907a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    907c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    907e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9080:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9082:	str	r3, [r1, #0]
    9084:	b.n	9028 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9086:	movs	r2, #57	; 0x39
    9088:	b.n	907a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    908a:	movs	r3, #133	; 0x85
    908c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    908e:	str	r3, [r2, #0]
    9090:	b.n	9058 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    9092:	movs	r3, #128	; 0x80
    9094:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    9096:	str	r3, [r2, #0]
    9098:	b.n	9058 <analog_init+0x64>
    909a:	nop
    909c:	.word	0x40074000
    90a0:	.word	0x40074001
    90a4:	.word	0x1fff9570
    90a8:	.word	0x4003b008
    90ac:	.word	0x4003b00c
    90b0:	.word	0x400bb008
    90b4:	.word	0x400bb00c
    90b8:	.word	0x1fffbcca
    90bc:	.word	0x4003b020
    90c0:	.word	0x400bb020
    90c4:	.word	0x1fff9571
    90c8:	.word	0x4003b024
    90cc:	.word	0x400bb024
    90d0:	.word	0x1fffbcc9

000090d4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    90d4:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    90d6:	ldr	r4, [pc, #64]	; (9118 <fault_isr+0x44>)
    90d8:	b.n	90ec <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    90da:	ldr	r3, [r4, #0]
    90dc:	lsls	r1, r3, #21
    90de:	bmi.n	90fc <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    90e0:	ldr	r3, [r4, #0]
    90e2:	lsls	r2, r3, #20
    90e4:	bmi.n	9106 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    90e6:	ldr	r3, [r4, #0]
    90e8:	lsls	r3, r3, #19
    90ea:	bmi.n	9110 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    90ec:	ldr	r3, [r4, #0]
    90ee:	lsls	r0, r3, #13
    90f0:	bpl.n	90da <fault_isr+0x6>
    90f2:	bl	9810 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    90f6:	ldr	r3, [r4, #0]
    90f8:	lsls	r1, r3, #21
    90fa:	bpl.n	90e0 <fault_isr+0xc>
    90fc:	bl	ad98 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9100:	ldr	r3, [r4, #0]
    9102:	lsls	r2, r3, #20
    9104:	bpl.n	90e6 <fault_isr+0x12>
    9106:	bl	ac6c <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    910a:	ldr	r3, [r4, #0]
    910c:	lsls	r3, r3, #19
    910e:	bpl.n	90ec <fault_isr+0x18>
    9110:	bl	af94 <uart2_status_isr>
    9114:	b.n	90ec <fault_isr+0x18>
    9116:	nop
    9118:	.word	0x40048034

0000911c <unused_isr>:
	}
}

void unused_isr(void)
{
    911c:	push	{r3, lr}
	fault_isr();
    911e:	bl	90d4 <fault_isr>
    9122:	nop

00009124 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9124:	ldr	r3, [pc, #4]	; (912c <startup_early_hook+0x8>)
    9126:	movs	r2, #16
    9128:	strh	r2, [r3, #0]
    912a:	bx	lr
    912c:	.word	0x40052000

00009130 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    9130:	bx	lr
    9132:	nop

00009134 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    9134:	ldr	r1, [pc, #36]	; (915c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    9136:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    9138:	ldr	r3, [r1, #0]
	if (incr != 0) {
    913a:	cbz	r0, 914a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    913c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    913e:	add	r0, r3
    9140:	sub.w	r2, r2, #4096	; 0x1000
    9144:	cmp	r0, r2
    9146:	bcs.n	914e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9148:	str	r0, [r1, #0]
	}
	return prev;
    914a:	mov	r0, r3
}
    914c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    914e:	bl	b6c0 <__errno>
    9152:	movs	r3, #12
    9154:	str	r3, [r0, #0]
			return (void *)-1;
    9156:	mov.w	r0, #4294967295
    915a:	pop	{r3, pc}
    915c:	.word	0x1fff9574

00009160 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    9160:	b.n	9160 <__cxa_pure_virtual>
    9162:	nop

00009164 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    9164:	ldrb	r0, [r0, #0]
}
    9166:	clz	r0, r0
    916a:	lsrs	r0, r0, #5
    916c:	bx	lr
    916e:	nop

00009170 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    9170:	movs	r3, #1
    9172:	strb	r3, [r0, #0]
    9174:	bx	lr
    9176:	nop

00009178 <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    9178:	bx	lr
    917a:	nop

0000917c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    917c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    917e:	ldr	r3, [pc, #60]	; (91bc <digitalWrite.part.1+0x40>)
    9180:	ldr.w	r2, [r3, r0, lsl #3]
    9184:	ldrb.w	r4, [r2, #640]	; 0x280
    9188:	cbz	r4, 9196 <digitalWrite.part.1+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    918a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    918c:	cbz	r1, 91aa <digitalWrite.part.1+0x2e>
			*portSetRegister(pin) = 1;
    918e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9192:	pop	{r4}
    9194:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    9196:	add.w	r3, r3, r0, lsl #3
    919a:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    919c:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    919e:	cbnz	r1, 91b2 <digitalWrite.part.1+0x36>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    91a0:	bic.w	r2, r2, #2
    91a4:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    91a6:	pop	{r4}
    91a8:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    91aa:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    91ae:	pop	{r4}
    91b0:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    91b2:	orr.w	r2, r2, #3
    91b6:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    91b8:	pop	{r4}
    91ba:	bx	lr
    91bc:	.word	0x0000cb70

000091c0 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    91c0:	ldr	r2, [pc, #112]	; (9234 <pinMode.part.2+0x74>)
    91c2:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    91c6:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    91c8:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    91ca:	beq.n	91f0 <pinMode.part.2+0x30>
    91cc:	cmp	r1, #4
    91ce:	beq.n	9208 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    91d0:	ldr.w	r0, [r2, r0, lsl #3]
    91d4:	movs	r2, #0
    91d6:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    91da:	cbz	r1, 91e8 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    91dc:	cmp	r1, #2
    91de:	beq.n	9222 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    91e0:	cmp	r1, #3
    91e2:	beq.n	922a <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    91e4:	str	r2, [r3, #0]
    91e6:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    91e8:	mov.w	r2, #256	; 0x100
    91ec:	str	r2, [r3, #0]
    91ee:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    91f0:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    91f4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    91f8:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    91fc:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    91fe:	ldr	r2, [r3, #0]
    9200:	bic.w	r2, r2, #32
    9204:	str	r2, [r3, #0]
    9206:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9208:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    920c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9210:	movs	r0, #1
    9212:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9216:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    9218:	ldr	r2, [r3, #0]
    921a:	orr.w	r2, r2, #32
    921e:	str	r2, [r3, #0]
    9220:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    9222:	movw	r2, #259	; 0x103
    9226:	str	r2, [r3, #0]
    9228:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    922a:	mov.w	r2, #258	; 0x102
    922e:	str	r2, [r3, #0]
    9230:	bx	lr
    9232:	nop
    9234:	.word	0x0000cb70

00009238 <attachInterrupt>:
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    9238:	cmp	r0, #33	; 0x21
    923a:	bhi.n	92ce <attachInterrupt+0x96>
{
	_VectorsRam[irq + 16] = function;
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
    923c:	push	{r3, r4, r5, r6, r7, lr}
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    923e:	cmp	r2, #4
    9240:	bhi.n	92cc <attachInterrupt+0x94>
    9242:	tbb	[pc, r2]
    9246:	.short	0x4b48
    9248:	.short	0x034e
    924a:	.byte	0x45
    924b:	.byte	0x00
    924c:	mov.w	r6, #589824	; 0x90000
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);
    9250:	ldr	r3, [pc, #172]	; (9300 <attachInterrupt+0xc8>)
    9252:	add.w	r3, r3, r0, lsl #3
    9256:	mov	r5, r1
    9258:	ldr	r4, [r3, #4]
	if ((*config & 0x00000700) == 0) {
    925a:	ldr	r1, [r4, #0]
    925c:	ands.w	r1, r1, #1792	; 0x700
    9260:	beq.n	92f4 <attachInterrupt+0xbc>
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    9262:	ldr	r3, [pc, #160]	; (9304 <attachInterrupt+0xcc>)
    9264:	ldr	r2, [pc, #160]	; (9308 <attachInterrupt+0xd0>)
    9266:	ldr	r1, [pc, #164]	; (930c <attachInterrupt+0xd4>)
    9268:	str.w	r2, [r3, #412]	; 0x19c

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    926c:	add.w	r2, r4, #3221225472	; 0xc0000000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    9270:	ldr	r0, [pc, #156]	; (9310 <attachInterrupt+0xd8>)
    9272:	str.w	r1, [r3, #420]	; 0x1a4

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    9276:	sub.w	r1, r2, #299008	; 0x49000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    927a:	ldr	r7, [pc, #152]	; (9314 <attachInterrupt+0xdc>)
    927c:	str.w	r0, [r3, #416]	; 0x1a0

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    9280:	cmp	r1, #124	; 0x7c
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    9282:	ldr	r0, [pc, #148]	; (9318 <attachInterrupt+0xe0>)
    9284:	str.w	r7, [r3, #424]	; 0x1a8
    9288:	str.w	r0, [r3, #428]	; 0x1ac

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    928c:	bls.n	92e8 <attachInterrupt+0xb0>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    928e:	sub.w	r3, r2, #303104	; 0x4a000
    9292:	cmp	r3, #124	; 0x7c
    9294:	bls.n	92ec <attachInterrupt+0xb4>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9296:	sub.w	r3, r2, #307200	; 0x4b000
    929a:	cmp	r3, #124	; 0x7c
    929c:	bls.n	92f0 <attachInterrupt+0xb8>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    929e:	sub.w	r3, r2, #311296	; 0x4c000
    92a2:	cmp	r3, #124	; 0x7c
    92a4:	bls.n	92fa <attachInterrupt+0xc2>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    92a6:	sub.w	r2, r2, #315392	; 0x4d000
    92aa:	cmp	r2, #124	; 0x7c
    92ac:	bhi.n	92fe <attachInterrupt+0xc6>
    92ae:	ldr	r0, [pc, #108]	; (931c <attachInterrupt+0xe4>)
	attachInterruptVector(IRQ_PORTD, port_D_isr);
	attachInterruptVector(IRQ_PORTE, port_E_isr);
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    92b0:	cpsid	i
	cfg = *config;
    92b2:	ldr	r3, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    92b4:	bic.w	r3, r3, #983040	; 0xf0000
    92b8:	orr.w	r2, r3, #16777216	; 0x1000000
	*config = cfg;
	isr_table[pin_index] = function;	// set the function pointer
    92bc:	ubfx	r1, r4, #2, #5
	cfg |= mask;
    92c0:	orrs	r6, r2
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
    92c2:	str	r3, [r4, #0]
	isr_table[pin_index] = function;	// set the function pointer
    92c4:	str.w	r5, [r0, r1, lsl #2]
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
    92c8:	str	r6, [r4, #0]
	__enable_irq();
    92ca:	cpsie	i
    92cc:	pop	{r3, r4, r5, r6, r7, pc}
    92ce:	bx	lr
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    92d0:	mov.w	r6, #720896	; 0xb0000
    92d4:	b.n	9250 <attachInterrupt+0x18>
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
    92d6:	mov.w	r6, #524288	; 0x80000
    92da:	b.n	9250 <attachInterrupt+0x18>
	  case HIGH:	mask = 0x0C; break;
    92dc:	mov.w	r6, #786432	; 0xc0000
    92e0:	b.n	9250 <attachInterrupt+0x18>
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    92e2:	mov.w	r6, #655360	; 0xa0000
    92e6:	b.n	9250 <attachInterrupt+0x18>

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    92e8:	ldr	r0, [pc, #52]	; (9320 <attachInterrupt+0xe8>)
    92ea:	b.n	92b0 <attachInterrupt+0x78>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    92ec:	ldr	r0, [pc, #52]	; (9324 <attachInterrupt+0xec>)
    92ee:	b.n	92b0 <attachInterrupt+0x78>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    92f0:	ldr	r0, [pc, #52]	; (9328 <attachInterrupt+0xf0>)
    92f2:	b.n	92b0 <attachInterrupt+0x78>
    92f4:	bl	91c0 <pinMode.part.2>
    92f8:	b.n	9262 <attachInterrupt+0x2a>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    92fa:	ldr	r0, [pc, #48]	; (932c <attachInterrupt+0xf4>)
    92fc:	b.n	92b0 <attachInterrupt+0x78>
    92fe:	pop	{r3, r4, r5, r6, r7, pc}
    9300:	.word	0x0000cb70
    9304:	.word	0x1fff8e00
    9308:	.word	0x1fff93d1
    930c:	.word	0x1fff9379
    9310:	.word	0x1fff93a5
    9314:	.word	0x1fff934d
    9318:	.word	0x1fff9321
    931c:	.word	0x1fff9650
    9320:	.word	0x1fff9578
    9324:	.word	0x1fff95b0
    9328:	.word	0x1fff9600
    932c:	.word	0x1fff9630

00009330 <detachInterrupt>:

void detachInterrupt(uint8_t pin)
{
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    9330:	ldr	r3, [pc, #104]	; (939c <detachInterrupt+0x6c>)
    9332:	add.w	r0, r3, r0, lsl #3
	__enable_irq();
#endif
}

void detachInterrupt(uint8_t pin)
{
    9336:	push	{r4}
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    9338:	ldr	r2, [r0, #4]

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    933a:	add.w	r3, r2, #3221225472	; 0xc0000000
    933e:	sub.w	r1, r3, #299008	; 0x49000
    9342:	cmp	r1, #124	; 0x7c
    9344:	bls.n	938e <detachInterrupt+0x5e>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    9346:	sub.w	r1, r3, #303104	; 0x4a000
    934a:	cmp	r1, #124	; 0x7c
    934c:	bls.n	936a <detachInterrupt+0x3a>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    934e:	sub.w	r1, r3, #307200	; 0x4b000
    9352:	cmp	r1, #124	; 0x7c
    9354:	bls.n	9396 <detachInterrupt+0x66>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    9356:	sub.w	r1, r3, #311296	; 0x4c000
    935a:	cmp	r1, #124	; 0x7c
    935c:	bls.n	9392 <detachInterrupt+0x62>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    935e:	sub.w	r3, r3, #315392	; 0x4d000
    9362:	cmp	r3, #124	; 0x7c
    9364:	bhi.n	938a <detachInterrupt+0x5a>
    9366:	ldr	r4, [pc, #56]	; (93a0 <detachInterrupt+0x70>)
    9368:	b.n	936c <detachInterrupt+0x3c>
// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    936a:	ldr	r4, [pc, #56]	; (93a4 <detachInterrupt+0x74>)
	config = portConfigRegister(pin);
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    936c:	cpsid	i
	*config = ((*config & ~0x000F0000) | 0x01000000);
    936e:	ldr	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    9370:	ldr	r0, [pc, #52]	; (93a8 <detachInterrupt+0x78>)
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    9372:	bic.w	r3, r3, #17694720	; 0x10e0000
	isr_table[pin_index] = dummy_isr;
    9376:	ubfx	r1, r2, #2, #5
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    937a:	bic.w	r3, r3, #65536	; 0x10000
    937e:	orr.w	r3, r3, #16777216	; 0x1000000
    9382:	str	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    9384:	str.w	r0, [r4, r1, lsl #2]
	__enable_irq();
    9388:	cpsie	i
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
	intFunc[pin] = dummy_isr;
	__enable_irq();
#endif
}
    938a:	pop	{r4}
    938c:	bx	lr

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    938e:	ldr	r4, [pc, #28]	; (93ac <detachInterrupt+0x7c>)
    9390:	b.n	936c <detachInterrupt+0x3c>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    9392:	ldr	r4, [pc, #28]	; (93b0 <detachInterrupt+0x80>)
    9394:	b.n	936c <detachInterrupt+0x3c>
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9396:	ldr	r4, [pc, #28]	; (93b4 <detachInterrupt+0x84>)
    9398:	b.n	936c <detachInterrupt+0x3c>
    939a:	nop
    939c:	.word	0x0000cb70
    93a0:	.word	0x1fff9650
    93a4:	.word	0x1fff95b0
    93a8:	.word	0x00009179
    93ac:	.word	0x1fff9578
    93b0:	.word	0x1fff9630
    93b4:	.word	0x1fff9600

000093b8 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    93b8:	push	{r4, r5}
	RTC_SR = 0;
    93ba:	ldr	r3, [pc, #20]	; (93d0 <rtc_set+0x18>)
	RTC_TPR = 0;
    93bc:	ldr	r5, [pc, #20]	; (93d4 <rtc_set+0x1c>)
	RTC_TSR = t;
    93be:	ldr	r4, [pc, #24]	; (93d8 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    93c0:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    93c2:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    93c4:	str	r2, [r3, #0]
	RTC_TPR = 0;
    93c6:	str	r2, [r5, #0]
	RTC_TSR = t;
    93c8:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    93ca:	str	r1, [r3, #0]
}
    93cc:	pop	{r4, r5}
    93ce:	bx	lr
    93d0:	.word	0x4003d014
    93d4:	.word	0x4003d004
    93d8:	.word	0x4003d000

000093dc <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    93dc:	cmp	r0, #33	; 0x21
    93de:	bhi.n	93e4 <digitalWrite+0x8>
    93e0:	b.w	917c <digitalWrite.part.1>
    93e4:	bx	lr
    93e6:	nop

000093e8 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    93e8:	cmp	r0, #33	; 0x21
    93ea:	bhi.n	93fa <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    93ec:	ldr	r3, [pc, #16]	; (9400 <digitalRead+0x18>)
    93ee:	ldr.w	r3, [r3, r0, lsl #3]
    93f2:	ldrb.w	r0, [r3, #512]	; 0x200
    93f6:	uxtb	r0, r0
    93f8:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    93fa:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    93fc:	bx	lr
    93fe:	nop
    9400:	.word	0x0000cb70

00009404 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    9404:	cmp	r0, #33	; 0x21
    9406:	bhi.n	940c <pinMode+0x8>
    9408:	b.w	91c0 <pinMode.part.2>
    940c:	bx	lr
    940e:	nop

00009410 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9410:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9412:	ldr	r1, [pc, #48]	; (9444 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9414:	ldr	r3, [pc, #48]	; (9448 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9416:	ldr	r2, [pc, #52]	; (944c <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9418:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    941a:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    941c:	ldr	r2, [r2, #0]
	__enable_irq();
    941e:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9420:	lsls	r2, r2, #5
    9422:	bpl.n	942a <micros+0x1a>
    9424:	cmp	r3, #50	; 0x32
    9426:	it	hi
    9428:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    942a:	ldr	r1, [pc, #36]	; (9450 <micros+0x40>)
    942c:	rsb	r3, r3, #95744	; 0x17600
    9430:	mov.w	r2, #1000	; 0x3e8
    9434:	adds	r3, #255	; 0xff
    9436:	umull	r1, r3, r1, r3
    943a:	mul.w	r0, r2, r0
}
    943e:	add.w	r0, r0, r3, lsr #6
    9442:	bx	lr
    9444:	.word	0x1fffbccc
    9448:	.word	0xe000e018
    944c:	.word	0xe000ed04
    9450:	.word	0xaaaaaaab

00009454 <delay>:

void delay(uint32_t ms)
{
    9454:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9458:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    945a:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    945c:	ldr	r7, [pc, #128]	; (94e0 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    945e:	ldr	r3, [pc, #132]	; (94e4 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9460:	ldr	r2, [pc, #132]	; (94e8 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9462:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9464:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9466:	ldr	r2, [r2, #0]
	__enable_irq();
    9468:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    946a:	lsls	r2, r2, #5
    946c:	bpl.n	9474 <delay+0x20>
    946e:	cmp	r3, #50	; 0x32
    9470:	it	hi
    9472:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    9474:	cbz	r5, 94dc <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9476:	rsb	r3, r3, #95744	; 0x17600
    947a:	ldr	r6, [pc, #112]	; (94ec <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    947c:	ldr.w	r9, [pc, #100]	; 94e4 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9480:	ldr.w	r8, [pc, #100]	; 94e8 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9484:	adds	r3, #255	; 0xff
    9486:	mov.w	r2, #1000	; 0x3e8
    948a:	umull	r1, r3, r6, r3
    948e:	mul.w	r4, r2, r4
    9492:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9496:	cpsid	i
	current = SYST_CVR;
    9498:	ldr.w	r1, [r9]
	count = systick_millis_count;
    949c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    949e:	ldr.w	lr, [r8]
	__enable_irq();
    94a2:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    94a4:	rsb	r3, r1, #95744	; 0x17600
    94a8:	adds	r3, #255	; 0xff
    94aa:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    94ae:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    94b2:	rsb	r3, r4, r3, lsr #6
    94b6:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    94ba:	beq.n	94c2 <delay+0x6e>
    94bc:	cmp	r1, #50	; 0x32
    94be:	it	hi
    94c0:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    94c2:	mla	r3, r0, r2, r3
    94c6:	cmp.w	r3, #1000	; 0x3e8
    94ca:	bcc.n	94d6 <delay+0x82>
				ms--;
				if (ms == 0) return;
    94cc:	subs	r5, #1
    94ce:	beq.n	94dc <delay+0x88>
				start += 1000;
    94d0:	add.w	r4, r4, #1000	; 0x3e8
    94d4:	b.n	9496 <delay+0x42>
			}
			yield();
    94d6:	bl	a68c <yield>
		}
    94da:	b.n	9496 <delay+0x42>
    94dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    94e0:	.word	0x1fffbccc
    94e4:	.word	0xe000e018
    94e8:	.word	0xe000ed04
    94ec:	.word	0xaaaaaaab

000094f0 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    94f0:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    94f2:	ldr	r3, [pc, #180]	; (95a8 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    94f4:	ldr	r1, [pc, #180]	; (95ac <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    94f6:	ldr.w	lr, [pc, #208]	; 95c8 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    94fa:	ldr.w	ip, [pc, #208]	; 95cc <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    94fe:	ldr	r6, [pc, #176]	; (95b0 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    9500:	ldr	r5, [pc, #176]	; (95b4 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    9502:	ldr	r4, [pc, #180]	; (95b8 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    9504:	ldr	r2, [pc, #180]	; (95bc <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    9506:	ldr	r7, [pc, #184]	; (95c0 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9508:	mov.w	r0, #8388608	; 0x800000
    950c:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    950e:	mov.w	r0, #16777216	; 0x1000000
    9512:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    9514:	mov.w	r0, #33554432	; 0x2000000
    9518:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    951a:	mov.w	r0, #67108864	; 0x4000000
    951e:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    9520:	mov.w	r0, #134217728	; 0x8000000
    9524:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9526:	movs	r0, #0
    9528:	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    952a:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    952c:	movw	r1, #49151	; 0xbfff
    9530:	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9534:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    9538:	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    953a:	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    953c:	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    953e:	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    9540:	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    9542:	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    9544:	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9546:	movs	r2, #9
    9548:	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    954c:	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    9550:	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    9554:	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9558:	add.w	r7, r7, #522240	; 0x7f800
    955c:	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    9560:	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    9564:	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    9566:	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    956a:	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    956e:	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    9572:	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9576:	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    9578:	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    957c:	ldr	r0, [pc, #68]	; (95c4 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    957e:	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    9580:	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    9584:	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    9588:	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    958a:	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    958c:	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    958e:	bl	8ff4 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    9592:	movs	r0, #25
    9594:	bl	9454 <delay>
	usb_init();
    9598:	bl	a2e0 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    959c:	movw	r0, #275	; 0x113
}
    95a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    95a4:	b.w	9454 <delay>
    95a8:	.word	0xe000e108
    95ac:	.word	0x40038004
    95b0:	.word	0x40038014
    95b4:	.word	0x40038024
    95b8:	.word	0x4003802c
    95bc:	.word	0x4003801c
    95c0:	.word	0x40038034
    95c4:	.word	0x400b8000
    95c8:	.word	0x4003800c
    95cc:	.word	0x40038008

000095d0 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    95d0:	cpsid	i
	avail = usb_buffer_available;
    95d2:	ldr	r0, [pc, #52]	; (9608 <usb_malloc+0x38>)
    95d4:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    95d6:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    95da:	cmp	r3, #11
    95dc:	bgt.n	9600 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    95de:	mov.w	r1, #2147483648	; 0x80000000
    95e2:	lsrs	r1, r3
    95e4:	bic.w	r2, r2, r1
    95e8:	str	r2, [r0, #0]
	__enable_irq();
    95ea:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    95ec:	ldr	r0, [pc, #28]	; (960c <usb_malloc+0x3c>)
    95ee:	add.w	r3, r3, r3, lsl #3
    95f2:	lsls	r3, r3, #3
    95f4:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    95f6:	movs	r1, #0
    95f8:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    95fa:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    95fc:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    95fe:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9600:	cpsie	i
		return NULL;
    9602:	movs	r0, #0
    9604:	bx	lr
    9606:	nop
    9608:	.word	0x1fff9658
    960c:	.word	0x1fff8fbc

00009610 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9610:	ldr	r3, [pc, #52]	; (9648 <usb_free+0x38>)
    9612:	ldr	r2, [pc, #56]	; (964c <usb_free+0x3c>)
    9614:	subs	r3, r0, r3
    9616:	umull	r2, r3, r2, r3
    961a:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    961c:	cmp	r3, #11
    961e:	bhi.n	963a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9620:	ldr	r2, [pc, #44]	; (9650 <usb_free+0x40>)
    9622:	ldrb	r2, [r2, #0]
    9624:	cbnz	r2, 963c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    9626:	cpsid	i
	usb_buffer_available |= mask;
    9628:	ldr	r0, [pc, #40]	; (9654 <usb_free+0x44>)
    962a:	mov.w	r1, #2147483648	; 0x80000000
    962e:	ldr	r2, [r0, #0]
    9630:	lsr.w	r3, r1, r3
    9634:	orrs	r2, r3
    9636:	str	r2, [r0, #0]
	__enable_irq();
    9638:	cpsie	i
    963a:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    963c:	ldr	r2, [pc, #24]	; (9658 <usb_free+0x48>)
    963e:	ldrb	r2, [r2, #0]
    9640:	cmp	r2, #0
    9642:	beq.n	9626 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    9644:	b.w	96c4 <usb_rx_memory>
    9648:	.word	0x1fff8fbc
    964c:	.word	0x38e38e39
    9650:	.word	0x1fffbda5
    9654:	.word	0x1fff9658
    9658:	.word	0x1fffbdb0

0000965c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    965c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    965e:	cmp	r3, #3
    9660:	bhi.n	968c <usb_rx+0x30>
	__disable_irq();
    9662:	cpsid	i
	ret = rx_first[endpoint];
    9664:	ldr	r1, [pc, #40]	; (9690 <usb_rx+0x34>)
    9666:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    966a:	cbz	r0, 9688 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    966c:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    966e:	ldr	r4, [pc, #36]	; (9694 <usb_rx+0x38>)
    9670:	ldrh	r5, [r0, #0]
    9672:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    9676:	ldr	r6, [r0, #4]
    9678:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    967c:	subs	r2, r2, r5
    967e:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    9682:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9684:	pop	{r4, r5, r6}
    9686:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    9688:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    968a:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    968c:	movs	r0, #0
    968e:	bx	lr
    9690:	.word	0x1fffbd28
    9694:	.word	0x1fffbfdc

00009698 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    9698:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    969a:	cmp	r0, #3
    969c:	bhi.n	96b6 <usb_tx_packet_count+0x1e>
	__disable_irq();
    969e:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    96a0:	ldr	r3, [pc, #28]	; (96c0 <usb_tx_packet_count+0x28>)
    96a2:	ldr.w	r3, [r3, r0, lsl #2]
    96a6:	cbz	r3, 96ba <usb_tx_packet_count+0x22>
    96a8:	movs	r0, #0
    96aa:	ldr	r3, [r3, #4]
    96ac:	adds	r0, #1
    96ae:	cmp	r3, #0
    96b0:	bne.n	96aa <usb_tx_packet_count+0x12>
	__enable_irq();
    96b2:	cpsie	i
	return count;
    96b4:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    96b6:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    96b8:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    96ba:	mov	r0, r3
    96bc:	b.n	96b2 <usb_tx_packet_count+0x1a>
    96be:	nop
    96c0:	.word	0x1fffbd7c

000096c4 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    96c4:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    96c6:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    96c8:	ldr	r2, [pc, #172]	; (9778 <usb_rx_memory+0xb4>)
    96ca:	ldrb	r3, [r2, #0]
    96cc:	lsls	r5, r3, #28
    96ce:	bpl.n	96de <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    96d0:	ldr	r3, [pc, #168]	; (977c <usb_rx_memory+0xb8>)
    96d2:	ldr	r1, [r3, #32]
    96d4:	cmp	r1, #0
    96d6:	beq.n	9746 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    96d8:	ldr	r1, [r3, #40]	; 0x28
    96da:	cmp	r1, #0
    96dc:	beq.n	9762 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    96de:	ldrb	r3, [r2, #1]
    96e0:	lsls	r4, r3, #28
    96e2:	bpl.n	96f2 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    96e4:	ldr	r3, [pc, #148]	; (977c <usb_rx_memory+0xb8>)
    96e6:	ldr	r1, [r3, #64]	; 0x40
    96e8:	cmp	r1, #0
    96ea:	beq.n	976a <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    96ec:	ldr	r1, [r3, #72]	; 0x48
    96ee:	cmp	r1, #0
    96f0:	beq.n	9766 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    96f2:	ldrb	r3, [r2, #2]
    96f4:	lsls	r1, r3, #28
    96f6:	bpl.n	9704 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    96f8:	ldr	r3, [pc, #128]	; (977c <usb_rx_memory+0xb8>)
    96fa:	ldr	r1, [r3, #96]	; 0x60
    96fc:	cmp	r1, #0
    96fe:	beq.n	976e <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9700:	ldr	r1, [r3, #104]	; 0x68
    9702:	cbz	r1, 9728 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9704:	ldrb	r3, [r2, #3]
    9706:	lsls	r3, r3, #28
    9708:	bpl.n	971a <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    970a:	ldr	r3, [pc, #112]	; (977c <usb_rx_memory+0xb8>)
    970c:	ldr.w	r2, [r3, #128]	; 0x80
    9710:	cbz	r2, 9772 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9712:	ldr.w	r2, [r3, #136]	; 0x88
    9716:	movs	r1, #17
    9718:	cbz	r2, 972a <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    971a:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    971c:	ldr	r3, [pc, #96]	; (9780 <usb_rx_memory+0xbc>)
    971e:	movs	r2, #0
    9720:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    9722:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    9724:	b.w	9610 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9728:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    972a:	ldr	r4, [pc, #84]	; (9780 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    972c:	ldr	r5, [pc, #84]	; (9784 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    972e:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9730:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9734:	add.w	r3, r3, r1, lsl #3
    9738:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    973a:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    973c:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    973e:	strb	r2, [r4, #0]
				__enable_irq();
    9740:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    9742:	pop	{r4, r5}
    9744:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9746:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9748:	ldr	r4, [pc, #52]	; (9780 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    974a:	ldr	r5, [pc, #60]	; (9788 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    974c:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    974e:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9752:	add.w	r3, r3, r2, lsl #3
    9756:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9758:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    975a:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    975c:	strb	r2, [r4, #0]
				__enable_irq();
    975e:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    9760:	b.n	9742 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9762:	movs	r1, #5
    9764:	b.n	972a <usb_rx_memory+0x66>
    9766:	movs	r1, #9
    9768:	b.n	972a <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    976a:	movs	r2, #8
    976c:	b.n	9748 <usb_rx_memory+0x84>
    976e:	movs	r2, #12
    9770:	b.n	9748 <usb_rx_memory+0x84>
    9772:	movs	r2, #16
    9774:	b.n	9748 <usb_rx_memory+0x84>
    9776:	nop
    9778:	.word	0x0000ccac
    977c:	.word	0x1fff8000
    9780:	.word	0x1fffbda5
    9784:	.word	0x004000c8
    9788:	.word	0x00400088

0000978c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    978c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    978e:	cmp	r3, #3
    9790:	bhi.n	97ce <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9792:	ldr	r2, [pc, #108]	; (9800 <usb_tx+0x74>)
    9794:	lsls	r0, r0, #5
    9796:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    979a:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    979c:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    979e:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    97a0:	ldr	r4, [pc, #96]	; (9804 <usb_tx+0x78>)
    97a2:	ldrb	r2, [r4, r3]
    97a4:	cmp	r2, #3
    97a6:	bhi.n	97e0 <usb_tx+0x54>
    97a8:	tbb	[pc, r2]
    97ac:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    97b0:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    97b2:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    97b4:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    97b6:	tst.w	r0, #8
    97ba:	ite	ne
    97bc:	movne	r3, #200	; 0xc8
    97be:	moveq	r3, #136	; 0x88
    97c0:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    97c4:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    97c6:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    97c8:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    97ca:	cpsie	i
}
    97cc:	pop	{r4, r5}
    97ce:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    97d0:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    97d2:	movs	r2, #2
		break;
    97d4:	b.n	97b2 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    97d6:	movs	r2, #5
    97d8:	b.n	97b2 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    97da:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    97dc:	movs	r2, #4
		break;
    97de:	b.n	97b2 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    97e0:	ldr	r2, [pc, #36]	; (9808 <usb_tx+0x7c>)
    97e2:	ldr.w	r0, [r2, r3, lsl #2]
    97e6:	cbz	r0, 97f8 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    97e8:	ldr	r2, [pc, #32]	; (980c <usb_tx+0x80>)
    97ea:	ldr.w	r0, [r2, r3, lsl #2]
    97ee:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    97f0:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    97f4:	cpsie	i
		return;
    97f6:	b.n	97cc <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    97f8:	str.w	r1, [r2, r3, lsl #2]
    97fc:	ldr	r2, [pc, #12]	; (980c <usb_tx+0x80>)
    97fe:	b.n	97f0 <usb_tx+0x64>
    9800:	.word	0x1fff8000
    9804:	.word	0x1fffbdb4
    9808:	.word	0x1fffbd7c
    980c:	.word	0x1fffbd8c

00009810 <usb_isr>:
}



void usb_isr(void)
{
    9810:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9814:	ldr.w	fp, [pc, #780]	; 9b24 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    9818:	ldr.w	sl, [pc, #780]	; 9b28 <usb_isr+0x318>
}



void usb_isr(void)
{
    981c:	sub	sp, #28
    981e:	b.n	98aa <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    9820:	ldr	r7, [pc, #684]	; (9ad0 <usb_isr+0x2c0>)
    9822:	mov.w	r8, r3, lsr #2
    9826:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    982a:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    982c:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9830:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9834:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9836:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    983a:	and.w	r4, r3, #255	; 0xff
    983e:	cmp	r3, #0
    9840:	bne.w	9a48 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    9844:	ldr.w	r3, [r7, r8, lsl #3]
    9848:	lsrs	r3, r3, #16
    984a:	uxth	r1, r3
    984c:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    9850:	cmp	r3, #0
    9852:	beq.w	9a36 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    9856:	ldr	r3, [pc, #636]	; (9ad4 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    9858:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    985c:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    9860:	ldr.w	r2, [r3, r6, lsl #2]
    9864:	cmp	r2, #0
    9866:	beq.w	9df4 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    986a:	ldr	r5, [pc, #620]	; (9ad8 <usb_isr+0x2c8>)
    986c:	ldr.w	r3, [r5, r6, lsl #2]
    9870:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    9872:	ldr	r4, [pc, #616]	; (9adc <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    9874:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    9878:	ldrh.w	r3, [r4, r6, lsl #1]
    987c:	add	r1, r3
    987e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    9882:	bl	95d0 <usb_malloc>
					if (packet) {
    9886:	cmp	r0, #0
    9888:	beq.w	9de6 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    988c:	ldr	r2, [pc, #592]	; (9ae0 <usb_isr+0x2d0>)
    988e:	ldr	r3, [pc, #596]	; (9ae4 <usb_isr+0x2d4>)
    9890:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    9894:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    9898:	it	ne
    989a:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    989c:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    98a0:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    98a4:	movs	r3, #8
    98a6:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    98aa:	ldrb.w	r4, [fp]
    98ae:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    98b0:	lsls	r1, r4, #29
    98b2:	bpl.n	98ea <usb_isr+0xda>
		if (usb_configuration) {
    98b4:	ldr	r3, [pc, #560]	; (9ae8 <usb_isr+0x2d8>)
    98b6:	ldrb	r3, [r3, #0]
    98b8:	cbz	r3, 98e4 <usb_isr+0xd4>
			t = usb_reboot_timer;
    98ba:	ldr	r1, [pc, #560]	; (9aec <usb_isr+0x2dc>)
    98bc:	ldrb	r2, [r1, #0]
			if (t) {
    98be:	and.w	r3, r2, #255	; 0xff
    98c2:	cbz	r2, 98ce <usb_isr+0xbe>
				usb_reboot_timer = --t;
    98c4:	subs	r3, #1
    98c6:	uxtb	r3, r3
    98c8:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    98ca:	cbnz	r3, 98ce <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    98cc:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    98ce:	ldr	r1, [pc, #544]	; (9af0 <usb_isr+0x2e0>)
    98d0:	ldrb	r2, [r1, #0]
			if (t) {
    98d2:	and.w	r3, r2, #255	; 0xff
    98d6:	cbz	r2, 98e4 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    98d8:	subs	r3, #1
    98da:	uxtb	r3, r3
    98dc:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    98de:	cmp	r3, #0
    98e0:	beq.w	9d92 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    98e4:	movs	r3, #4
    98e6:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    98ea:	and.w	r3, r4, #8
    98ee:	and.w	r2, r3, #255	; 0xff
    98f2:	cmp	r3, #0
    98f4:	beq.w	9a90 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    98f8:	ldrb.w	r3, [sl]
    98fc:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    98fe:	lsrs	r6, r3, #4
    9900:	bne.n	9820 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9902:	lsrs	r4, r3, #2
    9904:	ldr.w	r9, [pc, #456]	; 9ad0 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9908:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    990c:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9910:	ubfx	r2, r2, #2, #4
    9914:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    9916:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9918:	cmp	r2, #12
    991a:	bhi.w	9a2e <usb_isr+0x21e>
    991e:	tbb	[pc, r2]
    9922:	.short	0x7c7c
    9924:	.word	0x86868686
    9928:	.word	0x86478686
    992c:	.short	0x8686
    992e:	.byte	0x07
    992f:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9930:	ldr	r0, [r1, #0]
    9932:	ldr	r5, [pc, #448]	; (9af4 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    9934:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9936:	ldr	r7, [pc, #448]	; (9af8 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9938:	ldr	r6, [pc, #448]	; (9afc <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    993a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    993c:	uxth	r1, r0
    993e:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9942:	ldr	r3, [pc, #412]	; (9ae0 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    9944:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    9946:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    994a:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    994c:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    994e:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    9952:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    9954:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    9958:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    995c:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    9960:	ldr	r4, [pc, #364]	; (9ad0 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9962:	bhi.w	9b2c <usb_isr+0x31c>
    9966:	cmp.w	r1, #1664	; 0x680
    996a:	bcs.w	9ffa <usb_isr+0x7ea>
    996e:	cmp.w	r1, #258	; 0x102
    9972:	beq.w	9f6e <usb_isr+0x75e>
    9976:	bhi.w	9e94 <usb_isr+0x684>
    997a:	cmp	r1, #128	; 0x80
    997c:	beq.w	a06e <usb_isr+0x85e>
    9980:	cmp	r1, #130	; 0x82
    9982:	bne.w	9f7a <usb_isr+0x76a>
    9986:	ldrh	r1, [r5, #4]
    9988:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    998c:	cmp	r1, #4
    998e:	bhi.w	9f7a <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    9992:	ldr	r0, [pc, #364]	; (9b00 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    9994:	ldr	r4, [pc, #364]	; (9b04 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    9996:	lsls	r1, r1, #2
    9998:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    999a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    999c:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    999e:	ldrb	r2, [r0, #0]
    99a0:	lsls	r3, r2, #30
    99a2:	bpl.w	a256 <usb_isr+0xa46>
    99a6:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    99aa:	mov.w	lr, #2
    99ae:	b.n	a036 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    99b0:	ldr	r7, [pc, #324]	; (9af8 <usb_isr+0x2e8>)
    99b2:	ldr	r2, [r7, #0]
		if (data) {
    99b4:	cbz	r2, 9a04 <usb_isr+0x1f4>
			size = ep0_tx_len;
    99b6:	ldr	r3, [pc, #336]	; (9b08 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99b8:	ldr	r6, [pc, #320]	; (9afc <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99ba:	ldr	r1, [pc, #336]	; (9b0c <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    99bc:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99be:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99c0:	ldrb	r5, [r1, #0]
    99c2:	cmp	r0, #64	; 0x40
    99c4:	mov	lr, r0
    99c6:	orr.w	r8, r5, #2
    99ca:	it	cs
    99cc:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99d0:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    99d2:	eor.w	r4, r4, #1
    99d6:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    99d8:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99dc:	ite	eq
    99de:	moveq	r4, #136	; 0x88
    99e0:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99e2:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    99e6:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    99e8:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99ec:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99f0:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    99f2:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99f4:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    99f8:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    99fa:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    99fc:	cmp	r0, #0
    99fe:	beq.w	9c8c <usb_isr+0x47c>
    9a02:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    9a04:	ldr	r3, [pc, #236]	; (9af4 <usb_isr+0x2e4>)
    9a06:	ldrh	r2, [r3, #0]
    9a08:	cmp.w	r2, #1280	; 0x500
    9a0c:	bne.n	9a2e <usb_isr+0x21e>
			setup.bRequest = 0;
    9a0e:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9a10:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    9a12:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9a14:	ldr	r3, [pc, #248]	; (9b10 <usb_isr+0x300>)
    9a16:	strb	r2, [r3, #0]
    9a18:	b.n	9a2e <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    9a1a:	ldr	r2, [pc, #216]	; (9af4 <usb_isr+0x2e4>)
    9a1c:	ldrh	r0, [r2, #0]
    9a1e:	movw	r2, #8225	; 0x2021
    9a22:	cmp	r0, r2
    9a24:	beq.w	9c96 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9a28:	ldr	r2, [pc, #180]	; (9ae0 <usb_isr+0x2d0>)
    9a2a:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9a2e:	ldr	r2, [pc, #228]	; (9b14 <usb_isr+0x304>)
    9a30:	movs	r3, #1
    9a32:	strb	r3, [r2, #0]
    9a34:	b.n	98a4 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9a36:	ldr	r2, [pc, #168]	; (9ae0 <usb_isr+0x2d0>)
    9a38:	ldr	r3, [pc, #168]	; (9ae4 <usb_isr+0x2d4>)
    9a3a:	tst.w	r9, #8
    9a3e:	it	ne
    9a40:	movne	r3, r2
    9a42:	str.w	r3, [r7, r8, lsl #3]
    9a46:	b.n	98a4 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    9a48:	bl	9610 <usb_free>
				packet = tx_first[endpoint];
    9a4c:	ldr	r2, [pc, #200]	; (9b18 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9a4e:	ldr	r1, [pc, #204]	; (9b1c <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    9a50:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    9a54:	cmp	r3, #0
    9a56:	beq.w	9dfc <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9a5a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9a5c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9a5e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    9a62:	add.w	r2, r3, #8
    9a66:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    9a6a:	cmp	r4, #3
    9a6c:	bhi.n	9a7a <usb_isr+0x26a>
    9a6e:	tbb	[pc, r4]
    9a72:	.short	0x022c
    9a74:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    9a76:	movs	r2, #2
    9a78:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    9a7a:	ldrh	r2, [r3, #0]
    9a7c:	tst.w	r9, #8
    9a80:	ite	eq
    9a82:	moveq	r3, #136	; 0x88
    9a84:	movne	r3, #200	; 0xc8
    9a86:	orr.w	r3, r3, r2, lsl #16
    9a8a:	str.w	r3, [r7, r8, lsl #3]
    9a8e:	b.n	98a4 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    9a90:	lsls	r0, r4, #31
    9a92:	bmi.w	9d98 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    9a96:	lsls	r1, r4, #24
    9a98:	bmi.w	9e80 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9a9c:	lsls	r2, r4, #30
    9a9e:	bpl.n	9aae <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    9aa0:	ldr	r2, [pc, #124]	; (9b20 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9aa2:	ldr	r1, [pc, #128]	; (9b24 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    9aa4:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9aa6:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    9aa8:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    9aaa:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9aac:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    9aae:	lsls	r3, r4, #27
    9ab0:	bpl.n	9ab8 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    9ab2:	ldr	r3, [pc, #112]	; (9b24 <usb_isr+0x314>)
    9ab4:	movs	r2, #16
    9ab6:	strb	r2, [r3, #0]
	}

}
    9ab8:	add	sp, #28
    9aba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    9abe:	movs	r2, #4
    9ac0:	strb	r2, [r1, r6]
						break;
    9ac2:	b.n	9a7a <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    9ac4:	movs	r2, #5
    9ac6:	strb	r2, [r1, r6]
						break;
    9ac8:	b.n	9a7a <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    9aca:	movs	r2, #3
    9acc:	strb	r2, [r1, r6]
						break;
    9ace:	b.n	9a7a <usb_isr+0x26a>
    9ad0:	.word	0x1fff8000
    9ad4:	.word	0x1fffbd28
    9ad8:	.word	0x1fffbcd4
    9adc:	.word	0x1fffbfdc
    9ae0:	.word	0x004000c8
    9ae4:	.word	0x00400088
    9ae8:	.word	0x1fffbdb0
    9aec:	.word	0x1fffbd39
    9af0:	.word	0x1fffbcba
    9af4:	.word	0x1fffbd9c
    9af8:	.word	0x1fffbcd0
    9afc:	.word	0x1fffbd38
    9b00:	.word	0x400720c0
    9b04:	.word	0x1fffbda8
    9b08:	.word	0x1fffbce4
    9b0c:	.word	0x1fffbda4
    9b10:	.word	0x40072098
    9b14:	.word	0x40072094
    9b18:	.word	0x1fffbd7c
    9b1c:	.word	0x1fffbdb4
    9b20:	.word	0x40072088
    9b24:	.word	0x40072080
    9b28:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9b2c:	movw	r0, #8225	; 0x2021
    9b30:	cmp	r1, r0
    9b32:	beq.w	9d8a <usb_isr+0x57a>
    9b36:	bhi.w	9cea <usb_isr+0x4da>
    9b3a:	cmp.w	r1, #2176	; 0x880
    9b3e:	beq.w	a02e <usb_isr+0x81e>
    9b42:	cmp.w	r1, #2304	; 0x900
    9b46:	bne.w	9f7a <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9b4a:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    9b4c:	ldr	r1, [pc, #716]	; (9e1c <usb_isr+0x60c>)
    9b4e:	ldrb	r0, [r5, #2]
    9b50:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9b52:	lsls	r2, r2, #24
    9b54:	bmi.w	a1cc <usb_isr+0x9bc>
    9b58:	ldr.w	r2, [r9, #40]	; 0x28
    9b5c:	ldr	r1, [pc, #704]	; (9e20 <usb_isr+0x610>)
    9b5e:	lsls	r3, r2, #24
    9b60:	bmi.w	a17c <usb_isr+0x96c>
    9b64:	ldr.w	r2, [r9, #48]	; 0x30
    9b68:	ldr	r1, [pc, #692]	; (9e20 <usb_isr+0x610>)
    9b6a:	lsls	r5, r2, #24
    9b6c:	bmi.w	a172 <usb_isr+0x962>
    9b70:	ldr.w	r2, [r9, #56]	; 0x38
    9b74:	ldr	r1, [pc, #680]	; (9e20 <usb_isr+0x610>)
    9b76:	lsls	r4, r2, #24
    9b78:	bmi.w	a168 <usb_isr+0x958>
    9b7c:	ldr.w	r2, [r9, #64]	; 0x40
    9b80:	ldr	r1, [pc, #668]	; (9e20 <usb_isr+0x610>)
    9b82:	lsls	r0, r2, #24
    9b84:	bmi.w	a21c <usb_isr+0xa0c>
    9b88:	ldr.w	r2, [r9, #72]	; 0x48
    9b8c:	ldr	r1, [pc, #656]	; (9e20 <usb_isr+0x610>)
    9b8e:	lsls	r2, r2, #24
    9b90:	bmi.w	a212 <usb_isr+0xa02>
    9b94:	ldr.w	r2, [r9, #80]	; 0x50
    9b98:	ldr	r1, [pc, #644]	; (9e20 <usb_isr+0x610>)
    9b9a:	lsls	r3, r2, #24
    9b9c:	bmi.w	a208 <usb_isr+0x9f8>
    9ba0:	ldr.w	r2, [r9, #88]	; 0x58
    9ba4:	ldr	r1, [pc, #632]	; (9e20 <usb_isr+0x610>)
    9ba6:	lsls	r5, r2, #24
    9ba8:	bmi.w	a1fe <usb_isr+0x9ee>
    9bac:	ldr.w	r2, [r9, #96]	; 0x60
    9bb0:	ldr	r1, [pc, #620]	; (9e20 <usb_isr+0x610>)
    9bb2:	lsls	r4, r2, #24
    9bb4:	bmi.w	a1f4 <usb_isr+0x9e4>
    9bb8:	ldr.w	r2, [r9, #104]	; 0x68
    9bbc:	ldr	r1, [pc, #608]	; (9e20 <usb_isr+0x610>)
    9bbe:	lsls	r0, r2, #24
    9bc0:	bmi.w	a1ea <usb_isr+0x9da>
    9bc4:	ldr.w	r2, [r9, #112]	; 0x70
    9bc8:	ldr	r1, [pc, #596]	; (9e20 <usb_isr+0x610>)
    9bca:	lsls	r2, r2, #24
    9bcc:	bmi.w	a1e0 <usb_isr+0x9d0>
    9bd0:	ldr.w	r2, [r9, #120]	; 0x78
    9bd4:	ldr	r1, [pc, #584]	; (9e20 <usb_isr+0x610>)
    9bd6:	lsls	r3, r2, #24
    9bd8:	bmi.w	a1d6 <usb_isr+0x9c6>
    9bdc:	ldr.w	r2, [r9, #128]	; 0x80
    9be0:	ldr	r1, [pc, #572]	; (9e20 <usb_isr+0x610>)
    9be2:	lsls	r5, r2, #24
    9be4:	bmi.w	a24a <usb_isr+0xa3a>
    9be8:	ldr.w	r2, [r9, #136]	; 0x88
    9bec:	ldr	r1, [pc, #560]	; (9e20 <usb_isr+0x610>)
    9bee:	lsls	r4, r2, #24
    9bf0:	bmi.w	a23e <usb_isr+0xa2e>
    9bf4:	ldr.w	r2, [r9, #144]	; 0x90
    9bf8:	ldr	r1, [pc, #548]	; (9e20 <usb_isr+0x610>)
    9bfa:	lsls	r0, r2, #24
    9bfc:	bmi.w	a232 <usb_isr+0xa22>
    9c00:	ldr.w	r2, [r9, #152]	; 0x98
    9c04:	ldr	r1, [pc, #536]	; (9e20 <usb_isr+0x610>)
    9c06:	lsls	r2, r2, #24
    9c08:	bmi.w	a226 <usb_isr+0xa16>
    9c0c:	ldr	r0, [pc, #532]	; (9e24 <usb_isr+0x614>)
    9c0e:	ldr	r2, [pc, #536]	; (9e28 <usb_isr+0x618>)
    9c10:	ldr	r1, [pc, #536]	; (9e2c <usb_isr+0x61c>)
    9c12:	str	r0, [sp, #4]
    9c14:	ldr	r0, [pc, #536]	; (9e30 <usb_isr+0x620>)
    9c16:	ldr	r5, [pc, #540]	; (9e34 <usb_isr+0x624>)
    9c18:	ldr	r4, [pc, #540]	; (9e38 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9c1a:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    9c1c:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9c1e:	str	r6, [sp, #20]
    9c20:	str	r5, [sp, #8]
    9c22:	mov	r8, r0
    9c24:	mov	r7, r1
    9c26:	mov	r6, r2
    9c28:	mov	r5, r3
    9c2a:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    9c2c:	ldr	r0, [r6, #0]
			while (p) {
    9c2e:	cbz	r0, 9c3c <usb_isr+0x42c>
				n = p->next;
    9c30:	ldr	r4, [r0, #4]
				usb_free(p);
    9c32:	bl	9610 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    9c36:	mov	r0, r4
    9c38:	cmp	r4, #0
    9c3a:	bne.n	9c30 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    9c3c:	movs	r3, #0
    9c3e:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    9c40:	ldr	r3, [sp, #8]
			p = tx_first[i];
    9c42:	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    9c44:	mov	r2, r3
    9c46:	movs	r3, #0
    9c48:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    9c4c:	cbz	r0, 9c5a <usb_isr+0x44a>
				n = p->next;
    9c4e:	ldr	r4, [r0, #4]
				usb_free(p);
    9c50:	bl	9610 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    9c54:	mov	r0, r4
    9c56:	cmp	r4, #0
    9c58:	bne.n	9c4e <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    9c5a:	movs	r2, #0
    9c5c:	str	r2, [r7, #0]
			tx_last[i] = NULL;
    9c5e:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9c60:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9c64:	mov	r1, r2
    9c66:	movs	r2, #0
    9c68:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    9c6c:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9c6e:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9c70:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    9c72:	mov.w	r1, #0
    9c76:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    9c7a:	cmp	r3, #3
    9c7c:	bhi.w	9ed6 <usb_isr+0x6c6>
    9c80:	tbh	[pc, r3, lsl #1]
    9c84:	.word	0x01250170
    9c88:	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    9c8c:	cmp.w	lr, #64	; 0x40
    9c90:	it	ne
    9c92:	movne	r2, #0
    9c94:	b.n	9a02 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    9c96:	ldr	r2, [pc, #420]	; (9e3c <usb_isr+0x62c>)
    9c98:	ldrb	r5, [r1, #0]
    9c9a:	ldrb	r0, [r1, #1]
    9c9c:	strb	r5, [r2, #0]
    9c9e:	strb	r0, [r2, #1]
    9ca0:	ldrb	r5, [r1, #2]
    9ca2:	ldrb	r0, [r1, #3]
    9ca4:	strb	r5, [r2, #2]
    9ca6:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    9ca8:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    9caa:	ldrb	r5, [r1, #4]
    9cac:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    9cae:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    9cb0:	ldrb	r5, [r1, #5]
    9cb2:	ldrb	r1, [r1, #6]
    9cb4:	strb	r5, [r2, #5]
    9cb6:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    9cb8:	beq.w	9ff2 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9cbc:	ldr	r1, [pc, #384]	; (9e40 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9cbe:	ldr	r6, [pc, #388]	; (9e44 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9cc0:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9cc2:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9cc4:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9cc8:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9cca:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9cce:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9cd0:	ite	eq
    9cd2:	moveq	r1, #136	; 0x88
    9cd4:	movne	r1, #200	; 0xc8
    9cd6:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9cda:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9cde:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ce2:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9ce4:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ce6:	str	r1, [r2, #4]
    9ce8:	b.n	9a28 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9cea:	movw	r0, #8737	; 0x2221
    9cee:	cmp	r1, r0
    9cf0:	bne.w	a08a <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9cf4:	ldr	r3, [pc, #336]	; (9e48 <usb_isr+0x638>)
    9cf6:	ldr	r4, [pc, #340]	; (9e4c <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    9cf8:	ldr	r1, [pc, #340]	; (9e50 <usb_isr+0x640>)
    9cfa:	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9cfc:	ldr	r5, [r3, #0]
    9cfe:	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    9d00:	str.w	lr, [sp, #4]
    9d04:	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9d06:	movs	r0, #0
    9d08:	str	r0, [sp, #8]
    9d0a:	mov	r8, r0
    9d0c:	mov	ip, r0
    9d0e:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d10:	ldr	r1, [pc, #300]	; (9e40 <usb_isr+0x630>)
    9d12:	ldrb	r5, [r1, #0]
    9d14:	orr.w	lr, r5, #2
    9d18:	add.w	r3, r9, lr, lsl #3
    9d1c:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d1e:	ldr	r3, [sp, #4]
    9d20:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d22:	ldr	r3, [sp, #12]
    9d24:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d26:	ite	eq
    9d28:	moveq	r4, #136	; 0x88
    9d2a:	movne	r4, #200	; 0xc8
    9d2c:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9d30:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d34:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9d38:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9d3a:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d3c:	ldr.w	lr, [pc, #224]	; 9e20 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    9d40:	ldr	r3, [pc, #256]	; (9e44 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    9d42:	ldr.w	r8, [pc, #252]	; 9e40 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9d46:	cmp	r0, #0
    9d48:	bne.w	9f88 <usb_isr+0x778>
    9d4c:	cmp.w	ip, #64	; 0x40
    9d50:	bne.n	9d8a <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9d52:	orr.w	ip, r4, #2
    9d56:	add.w	r3, r9, ip, lsl #3
    9d5a:	ldr	r4, [sp, #8]
    9d5c:	ldr.w	lr, [pc, #192]	; 9e20 <usb_isr+0x610>
    9d60:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d62:	cmp	r2, #0
    9d64:	bne.w	9fb4 <usb_isr+0x7a4>
    9d68:	lsls	r2, r0, #16
    9d6a:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    9d6e:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9d72:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9d76:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9d78:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9d7a:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9d7c:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9d7e:	cmp	r0, #64	; 0x40
    9d80:	bne.n	9d8a <usb_isr+0x57a>
    9d82:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    9d84:	ldr	r2, [pc, #204]	; (9e54 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    9d86:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    9d88:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9d8a:	ldr	r2, [pc, #204]	; (9e58 <usb_isr+0x648>)
    9d8c:	movs	r3, #1
    9d8e:	strb	r3, [r2, #0]
    9d90:	b.n	9a2e <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    9d92:	bl	8fac <usb_serial_flush_callback>
    9d96:	b.n	98e4 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9d98:	ldr	r3, [pc, #132]	; (9e20 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9d9a:	ldr	r0, [pc, #188]	; (9e58 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    9d9c:	ldr	r1, [pc, #160]	; (9e40 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    9d9e:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9da0:	mov.w	lr, #2
    9da4:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9da8:	ldr	r7, [pc, #176]	; (9e5c <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    9daa:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9dac:	ldr	r1, [pc, #176]	; (9e60 <usb_isr+0x650>)
    9dae:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    9db0:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9db2:	ldr	r6, [pc, #176]	; (9e64 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    9db4:	ldr	r5, [pc, #176]	; (9e68 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9db6:	ldr	r4, [pc, #180]	; (9e6c <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    9db8:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9dba:	movs	r1, #13
    9dbc:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9dbe:	movs	r1, #255	; 0xff
    9dc0:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9dc2:	ldr.w	lr, [pc, #184]	; 9e7c <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    9dc6:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9dc8:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9dca:	ldr	r5, [pc, #164]	; (9e70 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9dcc:	ldr	r2, [pc, #164]	; (9e74 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9dce:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9dd2:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9dd4:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9dd6:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9dda:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9ddc:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9dde:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    9de0:	add	sp, #28
    9de2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    9de6:	ldr	r2, [pc, #144]	; (9e78 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    9de8:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    9dec:	ldrb	r3, [r2, #0]
    9dee:	adds	r3, #1
    9df0:	strb	r3, [r2, #0]
    9df2:	b.n	98a4 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    9df4:	str.w	r0, [r3, r6, lsl #2]
    9df8:	ldr	r5, [pc, #56]	; (9e34 <usb_isr+0x624>)
    9dfa:	b.n	9872 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    9dfc:	ldrb	r3, [r1, r6]
    9dfe:	cmp	r3, #3
    9e00:	bhi.w	9fe4 <usb_isr+0x7d4>
    9e04:	add	r2, pc, #4	; (adr r2, 9e0c <usb_isr+0x5fc>)
    9e06:	ldr.w	pc, [r2, r3, lsl #2]
    9e0a:	nop
    9e0c:	.word	0x000098a5
    9e10:	.word	0x000098a5
    9e14:	.word	0x00009ec9
    9e18:	.word	0x00009ec3
    9e1c:	.word	0x1fffbdb0
    9e20:	.word	0x1fff8000
    9e24:	.word	0x1fffbd8c
    9e28:	.word	0x1fffbd28
    9e2c:	.word	0x1fffbd7c
    9e30:	.word	0x1fffbdb4
    9e34:	.word	0x1fffbcd4
    9e38:	.word	0x1fffbfdc
    9e3c:	.word	0x1fffbfd0
    9e40:	.word	0x1fffbda4
    9e44:	.word	0x1fffbd38
    9e48:	.word	0x1fffbccc
    9e4c:	.word	0x1fffbfd8
    9e50:	.word	0x1fffbcc8
    9e54:	.word	0x1fffbce4
    9e58:	.word	0x40072094
    9e5c:	.word	0x400720c0
    9e60:	.word	0x00400088
    9e64:	.word	0x40072088
    9e68:	.word	0x40072080
    9e6c:	.word	0x40072098
    9e70:	.word	0x1fffbce8
    9e74:	.word	0x1fffbd3c
    9e78:	.word	0x1fffbda5
    9e7c:	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9e80:	ldr	r1, [pc, #772]	; (a188 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9e82:	ldr	r3, [pc, #776]	; (a18c <usb_isr+0x97c>)
    9e84:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9e86:	movs	r0, #13
    9e88:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    9e8a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9e8c:	lsls	r2, r4, #30
    9e8e:	bpl.w	9aae <usb_isr+0x29e>
    9e92:	b.n	9aa0 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9e94:	movw	r2, #770	; 0x302
    9e98:	cmp	r1, r2
    9e9a:	bne.w	a07a <usb_isr+0x86a>
    9e9e:	ldrh	r1, [r5, #4]
    9ea0:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9ea4:	cmp	r1, #4
    9ea6:	bhi.n	9f7a <usb_isr+0x76a>
    9ea8:	ldrh	r2, [r5, #2]
    9eaa:	cmp	r2, #0
    9eac:	bne.n	9f7a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    9eae:	ldr	r0, [pc, #728]	; (a188 <usb_isr+0x978>)
    9eb0:	str.w	lr, [sp, #4]
    9eb4:	lsls	r1, r1, #2
    9eb6:	add	r0, r1
    9eb8:	ldrb	r1, [r0, #0]
    9eba:	orr.w	r1, r1, #2
    9ebe:	strb	r1, [r0, #0]
    9ec0:	b.n	9d06 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9ec2:	movs	r3, #1
    9ec4:	strb	r3, [r1, r6]
						break;
    9ec6:	b.n	98a4 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9ec8:	movs	r3, #0
    9eca:	strb	r3, [r1, r6]
						break;
    9ecc:	b.n	98a4 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9ece:	mov.w	r3, #1
    9ed2:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    9ed6:	adds	r5, #1
    9ed8:	cmp	r5, #4
    9eda:	add.w	r6, r6, #4
    9ede:	add.w	r7, r7, #4
    9ee2:	add.w	r8, r8, #1
    9ee6:	bne.w	9c2c <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9eea:	ldr	r4, [pc, #676]	; (a190 <usb_isr+0x980>)
			*reg = epconf;
    9eec:	ldr	r3, [pc, #676]	; (a194 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9eee:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    9ef0:	ldr	r5, [pc, #676]	; (a198 <usb_isr+0x988>)
    9ef2:	ldr	r7, [sp, #16]
    9ef4:	ldr	r6, [sp, #20]
    9ef6:	movs	r1, #0
    9ef8:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9efa:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9efc:	lsls	r3, r2, #28
    9efe:	bmi.w	a10c <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9f02:	ldrb	r2, [r4, #1]
			*reg = epconf;
    9f04:	ldr	r1, [pc, #660]	; (a19c <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f06:	ldr.w	r8, [pc, #672]	; a1a8 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9f0a:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f0c:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f0e:	mov.w	r1, #0
    9f12:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    9f16:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f1a:	bmi.w	a0de <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9f1e:	ldr	r1, [pc, #640]	; (a1a0 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9f20:	ldrb	r2, [r4, #2]
			*reg = epconf;
    9f22:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f24:	movs	r1, #0
    9f26:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    9f2a:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f2e:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f30:	ldr.w	r8, [pc, #628]	; a1a8 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f34:	bmi.w	a13a <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9f38:	ldrb	r2, [r4, #3]
			*reg = epconf;
    9f3a:	ldr	r1, [pc, #616]	; (a1a4 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f3c:	ldr	r4, [pc, #616]	; (a1a8 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9f3e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f40:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f42:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f44:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    9f48:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f4c:	bmi.w	a0b0 <usb_isr+0x8a0>
    9f50:	ldrb	r3, [r6, #0]
    9f52:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f54:	movs	r1, #0
    9f56:	eor.w	r2, r3, #1
    9f5a:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    9f5e:	str.w	r1, [r9, #152]	; 0x98
    9f62:	b.n	9d06 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9f64:	mov.w	r3, #0
    9f68:	strb.w	r3, [r8]
    9f6c:	b.n	9ed6 <usb_isr+0x6c6>
    9f6e:	ldrh	r1, [r5, #4]
    9f70:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9f74:	cmp	r1, #4
    9f76:	bls.w	a094 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9f7a:	ldr	r2, [pc, #524]	; (a188 <usb_isr+0x978>)
    9f7c:	movs	r3, #15
    9f7e:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9f80:	ldr	r2, [pc, #552]	; (a1ac <usb_isr+0x99c>)
    9f82:	movs	r3, #1
    9f84:	strb	r3, [r2, #0]
    9f86:	b.n	9a2e <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    9f88:	cmp	r0, #64	; 0x40
    9f8a:	bls.w	9d52 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9f8e:	orr.w	r4, r4, #2
    9f92:	add.w	r1, lr, r4, lsl #3
    9f96:	ldr	r6, [sp, #8]
    9f98:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9f9a:	cbz	r2, 9fcc <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    9f9c:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9fa0:	ldr	r2, [pc, #524]	; (a1b0 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    9fa2:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9fa4:	mov	r3, r6
    9fa6:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9fa8:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9fac:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9fae:	str.w	r2, [lr, r4, lsl #3]
    9fb2:	b.n	9d84 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    9fb4:	ldrb.w	r3, [sp, #4]
    9fb8:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9fba:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9fbc:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9fbe:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9fc0:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9fc4:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9fc6:	str.w	r2, [lr, ip, lsl #3]
    9fca:	b.n	9d7e <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    9fcc:	ldrb.w	r1, [sp, #4]
    9fd0:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9fd2:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9fd4:	ldr	r2, [pc, #476]	; (a1b4 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9fd6:	strb.w	r5, [r8]
    9fda:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9fdc:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9fde:	str.w	r2, [lr, r4, lsl #3]
    9fe2:	b.n	9d84 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    9fe4:	tst.w	r9, #8
    9fe8:	ite	eq
    9fea:	moveq	r3, #2
    9fec:	movne	r3, #3
    9fee:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    9ff0:	b.n	98a4 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    9ff2:	ldr	r2, [pc, #452]	; (a1b8 <usb_isr+0x9a8>)
    9ff4:	movs	r1, #15
    9ff6:	strb	r1, [r2, #0]
    9ff8:	b.n	9cbc <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    9ffa:	ldr	r2, [pc, #448]	; (a1bc <usb_isr+0x9ac>)
    9ffc:	ldr	r4, [r2, #4]
    9ffe:	cmp	r4, #0
    a000:	beq.n	9f7a <usb_isr+0x76a>
    a002:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a004:	ldrh.w	lr, [r5, #4]
    a008:	b.n	a012 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    a00a:	adds	r2, #12
			if (list->addr == NULL) break;
    a00c:	ldr	r4, [r2, #4]
    a00e:	cmp	r4, #0
    a010:	beq.n	9f7a <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a012:	ldrh	r3, [r2, #0]
    a014:	cmp	r3, r0
    a016:	bne.n	a00a <usb_isr+0x7fa>
    a018:	ldrh	r3, [r2, #2]
    a01a:	cmp	r3, lr
    a01c:	bne.n	a00a <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    a01e:	lsrs	r0, r0, #8
    a020:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    a022:	ite	eq
    a024:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    a028:	ldrhne.w	lr, [r2, #8]
    a02c:	b.n	a036 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a02e:	ldr	r2, [pc, #400]	; (a1c0 <usb_isr+0x9b0>)
    a030:	ldr	r4, [pc, #400]	; (a1c4 <usb_isr+0x9b4>)
    a032:	ldrb	r2, [r2, #0]
    a034:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a036:	ldrh	r0, [r5, #6]
    a038:	cmp	r0, lr
    a03a:	bcs.w	a2bc <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a03e:	ldr	r1, [pc, #392]	; (a1c8 <usb_isr+0x9b8>)
    a040:	ldrb	r5, [r1, #0]
    a042:	cmp	r0, #64	; 0x40
    a044:	mov	ip, r0
    a046:	orr.w	lr, r5, #2
    a04a:	it	cs
    a04c:	movcs.w	ip, #64	; 0x40
    a050:	add.w	r3, r4, ip
    a054:	add.w	r2, r9, lr, lsl #3
    a058:	str	r3, [sp, #8]
    a05a:	movs	r3, #1
    a05c:	str	r4, [r2, #4]
    a05e:	rsb	r0, ip, r0
    a062:	mov.w	r8, ip, lsl #16
    a066:	movs	r2, #0
    a068:	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a06a:	movs	r4, #200	; 0xc8
    a06c:	b.n	9d2c <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a06e:	ldr	r4, [pc, #340]	; (a1c4 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    a070:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a074:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a076:	strb	r2, [r4, #1]
    a078:	b.n	a036 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a07a:	cmp.w	r1, #1280	; 0x500
    a07e:	bne.w	9f7a <usb_isr+0x76a>
    a082:	movs	r3, #1
    a084:	movs	r2, #0
    a086:	str	r3, [sp, #4]
    a088:	b.n	9d06 <usb_isr+0x4f6>
    a08a:	movw	r2, #8993	; 0x2321
    a08e:	cmp	r1, r2
    a090:	beq.n	a082 <usb_isr+0x872>
    a092:	b.n	9f7a <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a094:	ldrh	r2, [r5, #2]
    a096:	cmp	r2, #0
    a098:	bne.w	9f7a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    a09c:	ldr	r0, [pc, #232]	; (a188 <usb_isr+0x978>)
    a09e:	str.w	lr, [sp, #4]
    a0a2:	lsls	r1, r1, #2
    a0a4:	add	r0, r1
    a0a6:	ldrb	r1, [r0, #0]
    a0a8:	bic.w	r1, r1, #2
    a0ac:	strb	r1, [r0, #0]
    a0ae:	b.n	9d06 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a0b0:	bl	95d0 <usb_malloc>
				if (p) {
    a0b4:	cmp	r0, #0
    a0b6:	beq.w	a298 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    a0ba:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0bc:	ldr	r2, [pc, #244]	; (a1b4 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a0be:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0c2:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a0c6:	bl	95d0 <usb_malloc>
				if (p) {
    a0ca:	cmp	r0, #0
    a0cc:	beq.w	a28c <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    a0d0:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a0d2:	ldr	r2, [pc, #220]	; (a1b0 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a0d4:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a0d8:	str.w	r2, [r9, #136]	; 0x88
    a0dc:	b.n	9f50 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a0de:	bl	95d0 <usb_malloc>
				if (p) {
    a0e2:	cmp	r0, #0
    a0e4:	beq.w	a268 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    a0e8:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0ea:	ldr	r2, [pc, #200]	; (a1b4 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a0ec:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0f0:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a0f4:	bl	95d0 <usb_malloc>
				if (p) {
    a0f8:	cmp	r0, #0
    a0fa:	beq.w	a25c <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    a0fe:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a100:	ldr	r2, [pc, #172]	; (a1b0 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a102:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a106:	str.w	r2, [r9, #72]	; 0x48
    a10a:	b.n	9f1e <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a10c:	bl	95d0 <usb_malloc>
				if (p) {
    a110:	cmp	r0, #0
    a112:	beq.w	a2b0 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    a116:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a118:	ldr	r2, [pc, #152]	; (a1b4 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a11a:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a11e:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a122:	bl	95d0 <usb_malloc>
				if (p) {
    a126:	cmp	r0, #0
    a128:	beq.w	a2a4 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    a12c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a12e:	ldr	r2, [pc, #128]	; (a1b0 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a130:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a134:	str.w	r2, [r9, #40]	; 0x28
    a138:	b.n	9f02 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a13a:	bl	95d0 <usb_malloc>
				if (p) {
    a13e:	cmp	r0, #0
    a140:	beq.w	a280 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    a144:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a146:	ldr	r2, [pc, #108]	; (a1b4 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a148:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a14c:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a150:	bl	95d0 <usb_malloc>
				if (p) {
    a154:	cmp	r0, #0
    a156:	beq.w	a274 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    a15a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a15c:	ldr	r2, [pc, #80]	; (a1b0 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a15e:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a162:	str.w	r2, [r9, #104]	; 0x68
    a166:	b.n	9f38 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a168:	ldr	r0, [r1, #60]	; 0x3c
    a16a:	subs	r0, #8
    a16c:	bl	9610 <usb_free>
    a170:	b.n	9b7c <usb_isr+0x36c>
    a172:	ldr	r0, [r1, #52]	; 0x34
    a174:	subs	r0, #8
    a176:	bl	9610 <usb_free>
    a17a:	b.n	9b70 <usb_isr+0x360>
    a17c:	ldr	r0, [r1, #44]	; 0x2c
    a17e:	subs	r0, #8
    a180:	bl	9610 <usb_free>
    a184:	b.n	9b64 <usb_isr+0x354>
    a186:	nop
    a188:	.word	0x400720c0
    a18c:	.word	0x40072080
    a190:	.word	0x0000ccac
    a194:	.word	0x400720c4
    a198:	.word	0x1fffbda5
    a19c:	.word	0x400720c8
    a1a0:	.word	0x400720cc
    a1a4:	.word	0x400720d0
    a1a8:	.word	0x1fff8000
    a1ac:	.word	0x40072094
    a1b0:	.word	0x004000c8
    a1b4:	.word	0x00400088
    a1b8:	.word	0x1fffbd39
    a1bc:	.word	0x0000ccb0
    a1c0:	.word	0x1fffbdb0
    a1c4:	.word	0x1fffbda8
    a1c8:	.word	0x1fffbda4
    a1cc:	ldr	r0, [r4, #36]	; 0x24
    a1ce:	subs	r0, #8
    a1d0:	bl	9610 <usb_free>
    a1d4:	b.n	9b58 <usb_isr+0x348>
    a1d6:	ldr	r0, [r1, #124]	; 0x7c
    a1d8:	subs	r0, #8
    a1da:	bl	9610 <usb_free>
    a1de:	b.n	9bdc <usb_isr+0x3cc>
    a1e0:	ldr	r0, [r1, #116]	; 0x74
    a1e2:	subs	r0, #8
    a1e4:	bl	9610 <usb_free>
    a1e8:	b.n	9bd0 <usb_isr+0x3c0>
    a1ea:	ldr	r0, [r1, #108]	; 0x6c
    a1ec:	subs	r0, #8
    a1ee:	bl	9610 <usb_free>
    a1f2:	b.n	9bc4 <usb_isr+0x3b4>
    a1f4:	ldr	r0, [r1, #100]	; 0x64
    a1f6:	subs	r0, #8
    a1f8:	bl	9610 <usb_free>
    a1fc:	b.n	9bb8 <usb_isr+0x3a8>
    a1fe:	ldr	r0, [r1, #92]	; 0x5c
    a200:	subs	r0, #8
    a202:	bl	9610 <usb_free>
    a206:	b.n	9bac <usb_isr+0x39c>
    a208:	ldr	r0, [r1, #84]	; 0x54
    a20a:	subs	r0, #8
    a20c:	bl	9610 <usb_free>
    a210:	b.n	9ba0 <usb_isr+0x390>
    a212:	ldr	r0, [r1, #76]	; 0x4c
    a214:	subs	r0, #8
    a216:	bl	9610 <usb_free>
    a21a:	b.n	9b94 <usb_isr+0x384>
    a21c:	ldr	r0, [r1, #68]	; 0x44
    a21e:	subs	r0, #8
    a220:	bl	9610 <usb_free>
    a224:	b.n	9b88 <usb_isr+0x378>
    a226:	ldr.w	r0, [r1, #156]	; 0x9c
    a22a:	subs	r0, #8
    a22c:	bl	9610 <usb_free>
    a230:	b.n	9c0c <usb_isr+0x3fc>
    a232:	ldr.w	r0, [r1, #148]	; 0x94
    a236:	subs	r0, #8
    a238:	bl	9610 <usb_free>
    a23c:	b.n	9c00 <usb_isr+0x3f0>
    a23e:	ldr.w	r0, [r1, #140]	; 0x8c
    a242:	subs	r0, #8
    a244:	bl	9610 <usb_free>
    a248:	b.n	9bf4 <usb_isr+0x3e4>
    a24a:	ldr.w	r0, [r1, #132]	; 0x84
    a24e:	subs	r0, #8
    a250:	bl	9610 <usb_free>
    a254:	b.n	9be8 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    a256:	mov.w	lr, #2
    a25a:	b.n	a036 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a25c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a25e:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    a262:	adds	r2, #1
    a264:	strb	r2, [r5, #0]
    a266:	b.n	9f1e <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a268:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a26a:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    a26e:	adds	r2, #1
    a270:	strb	r2, [r5, #0]
    a272:	b.n	a0f4 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a274:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a276:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    a27a:	adds	r2, #1
    a27c:	strb	r2, [r5, #0]
    a27e:	b.n	9f38 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a280:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a282:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    a286:	adds	r2, #1
    a288:	strb	r2, [r5, #0]
    a28a:	b.n	a150 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a28c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a28e:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    a292:	adds	r2, #1
    a294:	strb	r2, [r5, #0]
    a296:	b.n	9f50 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a298:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a29a:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    a29e:	adds	r2, #1
    a2a0:	strb	r2, [r5, #0]
    a2a2:	b.n	a0c6 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a2a4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a2a6:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    a2aa:	adds	r2, #1
    a2ac:	strb	r2, [r5, #0]
    a2ae:	b.n	9f02 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a2b0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a2b2:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    a2b6:	adds	r2, #1
    a2b8:	strb	r2, [r5, #0]
    a2ba:	b.n	a122 <usb_isr+0x912>
    a2bc:	cmp.w	lr, #64	; 0x40
    a2c0:	mov	ip, lr
    a2c2:	it	cs
    a2c4:	movcs.w	ip, #64	; 0x40
    a2c8:	add.w	r3, r4, ip
    a2cc:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a2ce:	movs	r3, #1
    a2d0:	rsb	r0, ip, lr
    a2d4:	mov.w	r8, ip, lsl #16
    a2d8:	movs	r2, #0
    a2da:	str	r3, [sp, #4]
    a2dc:	b.n	9d10 <usb_isr+0x500>
    a2de:	nop

0000a2e0 <usb_init>:
}



void usb_init(void)
{
    a2e0:	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a2e2:	bl	aea4 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a2e6:	ldr	r3, [pc, #164]	; (a38c <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a2e8:	ldr	r0, [pc, #164]	; (a390 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a2ea:	ldr	r4, [pc, #168]	; (a394 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a2ec:	ldr	r7, [pc, #168]	; (a398 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a2ee:	ldr	r5, [pc, #172]	; (a39c <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a2f0:	ldr.w	ip, [pc, #188]	; a3b0 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    a2f4:	ldr.w	lr, [pc, #188]	; a3b4 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a2f8:	ldr	r6, [pc, #164]	; (a3a0 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a2fa:	movs	r2, #0
    a2fc:	str	r2, [r3, #0]
		table[i].addr = 0;
    a2fe:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a300:	str	r2, [r3, #8]
		table[i].addr = 0;
    a302:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a304:	str	r2, [r3, #16]
		table[i].addr = 0;
    a306:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a308:	str	r2, [r3, #24]
		table[i].addr = 0;
    a30a:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a30c:	str	r2, [r3, #32]
		table[i].addr = 0;
    a30e:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a310:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    a312:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a314:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    a316:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a318:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    a31a:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a31c:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    a31e:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a320:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    a322:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a324:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    a326:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a328:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    a32a:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a32c:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    a32e:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a330:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    a332:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a334:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    a336:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a338:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    a33a:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a33c:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a340:	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    a342:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a346:	orr.w	r1, r1, #262144	; 0x40000
    a34a:	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a34c:	ubfx	r1, r3, #8, #8
    a350:	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a352:	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    a356:	ldr	r1, [pc, #76]	; (a3a4 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a358:	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a35a:	lsrs	r3, r3, #24
    a35c:	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a35e:	movs	r3, #255	; 0xff
    a360:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a364:	ldr	r5, [pc, #64]	; (a3a8 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    a366:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a36a:	ldr	r0, [pc, #64]	; (a3ac <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    a36c:	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a36e:	movs	r3, #1
    a370:	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    a372:	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a376:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a378:	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a37c:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    a37e:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a382:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a384:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a386:	strb.w	r2, [r1, #248]	; 0xf8
    a38a:	pop	{r3, r4, r5, r6, r7, pc}
    a38c:	.word	0x1fff8000
    a390:	.word	0x40048034
    a394:	.word	0x4007209c
    a398:	.word	0x400720b0
    a39c:	.word	0x400720b4
    a3a0:	.word	0x40072094
    a3a4:	.word	0x40072010
    a3a8:	.word	0xe000e449
    a3ac:	.word	0xe000e108
    a3b0:	.word	0x40072080
    a3b4:	.word	0x40072088

0000a3b8 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    a3b8:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    a3ba:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    a3bc:	cbnz	r1, a3e6 <DMAChannel::begin(bool)+0x2e>
    a3be:	ldr	r2, [r0, #0]
    a3c0:	cbz	r2, a3e6 <DMAChannel::begin(bool)+0x2e>
    a3c2:	ldrb	r3, [r0, #4]
    a3c4:	cmp	r3, #15
    a3c6:	bhi.n	a3e6 <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    a3c8:	ldr	r4, [pc, #156]	; (a468 <DMAChannel::begin(bool)+0xb0>)
    a3ca:	ldrh	r1, [r4, #0]
    a3cc:	asr.w	r5, r1, r3
    a3d0:	lsls	r5, r5, #31
    a3d2:	bpl.n	a3ea <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    a3d4:	add.w	r3, r3, #33554432	; 0x2000000
    a3d8:	add.w	r3, r3, #1152	; 0x480
    a3dc:	cmp.w	r2, r3, lsl #5
    a3e0:	bne.n	a3ea <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    a3e2:	cpsie	i
		return;
    a3e4:	pop	{r4, r5, r6, r7, pc}
    a3e6:	ldr	r4, [pc, #128]	; (a468 <DMAChannel::begin(bool)+0xb0>)
    a3e8:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    a3ea:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    a3ec:	asr.w	r2, r1, r3
    a3f0:	ands.w	r2, r2, #1
    a3f4:	beq.n	a406 <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    a3f6:	adds	r3, #1
    a3f8:	cmp	r3, #16
    a3fa:	bne.n	a3ec <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    a3fc:	cpsie	i
			TCD = (TCD_t *)0;
    a3fe:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    a400:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    a402:	str	r2, [r0, #0]
    a404:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    a406:	movs	r5, #1
    a408:	lsls	r5, r3
    a40a:	orrs	r1, r5
    a40c:	strh	r1, [r4, #0]
			__enable_irq();
    a40e:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    a410:	ldr	r6, [pc, #88]	; (a46c <DMAChannel::begin(bool)+0xb4>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    a412:	ldr	r5, [pc, #92]	; (a470 <DMAChannel::begin(bool)+0xb8>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    a414:	ldr	r7, [pc, #92]	; (a474 <DMAChannel::begin(bool)+0xbc>)
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    a416:	ldr.w	lr, [pc, #100]	; a47c <DMAChannel::begin(bool)+0xc4>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    a41a:	uxtb	r1, r3
    a41c:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    a41e:	ldr	r4, [r6, #0]
    a420:	orr.w	r4, r4, #2
    a424:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    a426:	ldr	r4, [r5, #0]
    a428:	orr.w	r4, r4, #2
    a42c:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    a42e:	sub.w	r6, r6, #262144	; 0x40000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    a432:	movs	r4, #130	; 0x82
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    a434:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a438:	add.w	r3, r3, #33554432	; 0x2000000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    a43c:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a43e:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    a442:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    a444:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    a446:	ldr	r4, [pc, #48]	; (a478 <DMAChannel::begin(bool)+0xc0>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    a448:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a44c:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    a44e:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    a450:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    a452:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    a454:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    a456:	str	r2, [r3, #0]
	*p++ = 0;
    a458:	str	r2, [r3, #4]
	*p++ = 0;
    a45a:	str	r2, [r3, #8]
	*p++ = 0;
    a45c:	str	r2, [r3, #12]
	*p++ = 0;
    a45e:	str	r2, [r3, #16]
	*p++ = 0;
    a460:	str	r2, [r3, #20]
	*p++ = 0;
    a462:	str	r2, [r3, #24]
	*p++ = 0;
    a464:	str	r2, [r3, #28]
    a466:	pop	{r4, r5, r6, r7, pc}
    a468:	.word	0x1fffbdb8
    a46c:	.word	0x40048040
    a470:	.word	0x4004803c
    a474:	.word	0x40008000
    a478:	.word	0x4000801f
    a47c:	.word	0x4000801a

0000a480 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    a480:	ldrb	r3, [r0, #4]
    a482:	cmp	r3, #15
    a484:	bhi.n	a4aa <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    a486:	ldr	r2, [pc, #36]	; (a4ac <DMAChannel::release()+0x2c>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    a488:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    a48a:	strb	r3, [r2, #0]
	__disable_irq();
    a48c:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    a48e:	ldr	r1, [pc, #32]	; (a4b0 <DMAChannel::release()+0x30>)
    a490:	ldrb	r4, [r0, #4]
    a492:	ldrh	r2, [r1, #0]
    a494:	movs	r3, #1
    a496:	lsls	r3, r4
    a498:	bic.w	r3, r2, r3
    a49c:	strh	r3, [r1, #0]
	__enable_irq();
    a49e:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    a4a0:	movs	r2, #16
	TCD = (TCD_t *)0;
    a4a2:	movs	r3, #0
}
    a4a4:	pop	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    a4a6:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    a4a8:	str	r3, [r0, #0]
}
    a4aa:	bx	lr
    a4ac:	.word	0x4000801a
    a4b0:	.word	0x1fffbdb8

0000a4b4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    a4b4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a4b6:	mrs	r2, PRIMASK
		__disable_irq();
    a4ba:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    a4bc:	ldrb	r3, [r0, #29]
    a4be:	cbnz	r3, a4ce <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    a4c0:	ldrb	r1, [r0, #28]
    a4c2:	cmp	r1, #1
    a4c4:	beq.n	a4d6 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    a4c6:	cmp	r1, #3
    a4c8:	beq.n	a4ea <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    a4ca:	movs	r3, #1
    a4cc:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a4ce:	cbnz	r2, a4d2 <EventResponder::triggerEventNotImmediate()+0x1e>
    a4d0:	cpsie	i
	}
	enableInterrupts(irq);
}
    a4d2:	pop	{r4}
    a4d4:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    a4d6:	ldr	r4, [pc, #72]	; (a520 <EventResponder::triggerEventNotImmediate()+0x6c>)
    a4d8:	ldr	r1, [r4, #0]
    a4da:	cbz	r1, a506 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    a4dc:	ldr	r1, [pc, #68]	; (a524 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    a4de:	str	r3, [r0, #20]
				_prev = lastYield;
    a4e0:	ldr	r3, [r1, #0]
    a4e2:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    a4e4:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    a4e6:	str	r0, [r3, #20]
    a4e8:	b.n	a4ca <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    a4ea:	ldr	r4, [pc, #60]	; (a528 <EventResponder::triggerEventNotImmediate()+0x74>)
    a4ec:	ldr	r1, [r4, #0]
    a4ee:	cbz	r1, a512 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    a4f0:	ldr	r1, [pc, #56]	; (a52c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    a4f2:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    a4f4:	ldr	r3, [r1, #0]
    a4f6:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    a4f8:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    a4fa:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    a4fc:	ldr	r3, [pc, #48]	; (a530 <EventResponder::triggerEventNotImmediate()+0x7c>)
    a4fe:	mov.w	r1, #268435456	; 0x10000000
    a502:	str	r1, [r3, #0]
    a504:	b.n	a4ca <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    a506:	ldr	r3, [pc, #28]	; (a524 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    a508:	str	r1, [r0, #20]
				_prev = nullptr;
    a50a:	str	r1, [r0, #24]
				firstYield = this;
    a50c:	str	r0, [r4, #0]
				lastYield = this;
    a50e:	str	r0, [r3, #0]
    a510:	b.n	a4ca <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    a512:	ldr	r3, [pc, #24]	; (a52c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    a514:	str	r1, [r0, #20]
				_prev = nullptr;
    a516:	str	r1, [r0, #24]
				firstInterrupt = this;
    a518:	str	r0, [r4, #0]
				lastInterrupt = this;
    a51a:	str	r0, [r3, #0]
    a51c:	b.n	a4fc <EventResponder::triggerEventNotImmediate()+0x48>
    a51e:	nop
    a520:	.word	0x1fffbdcc
    a524:	.word	0x1fffbdc8
    a528:	.word	0x1fffbdbc
    a52c:	.word	0x1fffbdc0
    a530:	.word	0xe000ed04

0000a534 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a534:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a536:	mrs	r2, PRIMASK
		__disable_irq();
    a53a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a53c:	ldr	r4, [pc, #48]	; (a570 <EventResponder::runFromInterrupt()+0x3c>)
    a53e:	ldr	r0, [r4, #0]
		if (first) {
    a540:	cbz	r0, a564 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a542:	ldr	r6, [pc, #48]	; (a574 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a544:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a546:	ldr	r3, [r0, #20]
    a548:	str	r3, [r4, #0]
			if (firstInterrupt) {
    a54a:	cbz	r3, a56a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a54c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a54e:	cbnz	r2, a552 <EventResponder::runFromInterrupt()+0x1e>
    a550:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a552:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a554:	ldr	r3, [r0, #8]
    a556:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a558:	mrs	r2, PRIMASK
		__disable_irq();
    a55c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a55e:	ldr	r0, [r4, #0]
		if (first) {
    a560:	cmp	r0, #0
    a562:	bne.n	a546 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a564:	cbnz	r2, a568 <EventResponder::runFromInterrupt()+0x34>
    a566:	cpsie	i
    a568:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a56a:	str	r3, [r6, #0]
    a56c:	b.n	a54e <EventResponder::runFromInterrupt()+0x1a>
    a56e:	nop
    a570:	.word	0x1fffbdbc
    a574:	.word	0x1fffbdc0

0000a578 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a578:	b.w	a534 <EventResponder::runFromInterrupt()>

0000a57c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    a57c:	ldr	r2, [pc, #96]	; (a5e0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    a57e:	push	{r4, r5}
	if (listActive == nullptr) {
    a580:	ldr	r4, [r2, #0]
    a582:	cmp	r4, #0
    a584:	beq.n	a5d6 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    a586:	ldr	r3, [r0, #0]
    a588:	ldr	r1, [r4, #0]
    a58a:	cmp	r3, r1
    a58c:	bcs.n	a5ac <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    a58e:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    a590:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    a592:	str	r4, [r0, #8]
		_prev = nullptr;
    a594:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    a596:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    a598:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    a59a:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    a59c:	movs	r3, #2
    a59e:	strb	r3, [r0, #20]
}
    a5a0:	pop	{r4, r5}
    a5a2:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    a5a4:	ldr	r1, [r2, #0]
    a5a6:	cmp	r3, r1
    a5a8:	mov	r4, r2
    a5aa:	bcc.n	a5be <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    a5ac:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    a5ae:	subs	r3, r3, r1
    a5b0:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    a5b2:	cmp	r2, #0
    a5b4:	bne.n	a5a4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    a5b6:	str	r2, [r0, #8]
		_prev = timer;
    a5b8:	str	r4, [r0, #12]
		timer->_next = this;
    a5ba:	str	r0, [r4, #8]
    a5bc:	b.n	a59c <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    a5be:	ldr	r2, [r2, #12]
    a5c0:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    a5c2:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    a5c4:	str	r0, [r4, #12]
				_prev->_next = this;
    a5c6:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    a5c8:	subs	r3, r1, r3
				_state = TimerActive;
    a5ca:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    a5cc:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    a5ce:	str	r3, [r4, #0]
				_state = TimerActive;
    a5d0:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    a5d2:	pop	{r4, r5}
    a5d4:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    a5d6:	str	r4, [r0, #8]
		_prev = nullptr;
    a5d8:	str	r4, [r0, #12]
		listActive = this;
    a5da:	str	r0, [r2, #0]
    a5dc:	b.n	a59c <MillisTimer::addToActiveList()+0x20>
    a5de:	nop
    a5e0:	.word	0x1fffbdc4

0000a5e4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    a5e4:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    a5e6:	ldr	r6, [pc, #136]	; (a670 <MillisTimer::runFromTimer()+0x8c>)
    a5e8:	ldr	r4, [r6, #0]
	while (timer) {
    a5ea:	cbz	r4, a638 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    a5ec:	ldr	r3, [r4, #0]
    a5ee:	cmp	r3, #0
    a5f0:	bne.n	a668 <MillisTimer::runFromTimer()+0x84>
    a5f2:	ldr	r7, [pc, #128]	; (a674 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    a5f4:	mov	r5, r3
    a5f6:	b.n	a602 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    a5f8:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    a5fa:	cbz	r4, a638 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    a5fc:	ldr	r3, [r4, #0]
    a5fe:	cmp	r3, #0
    a600:	bne.n	a668 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    a602:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    a604:	cbz	r3, a608 <MillisTimer::runFromTimer()+0x24>
    a606:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    a608:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    a60a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a60c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    a60e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a610:	ldr	r3, [r3, #0]
    a612:	cmp	r3, r7
    a614:	bne.n	a65a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    a616:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    a618:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    a61a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    a61c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    a61e:	beq.n	a662 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    a620:	bl	a4b4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    a624:	ldr	r3, [r4, #4]
    a626:	cmp	r3, #0
    a628:	beq.n	a5f8 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    a62a:	str	r3, [r4, #0]
				timer->addToActiveList();
    a62c:	mov	r0, r4
    a62e:	bl	a57c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    a632:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    a634:	cmp	r4, #0
    a636:	bne.n	a5fc <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a638:	mrs	r3, PRIMASK
		__disable_irq();
    a63c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    a63e:	ldr	r2, [pc, #56]	; (a678 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    a640:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    a642:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    a644:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    a646:	cbnz	r3, a64a <MillisTimer::runFromTimer()+0x66>
    a648:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    a64a:	cbz	r0, a658 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    a64c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    a64e:	bl	a57c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    a652:	mov	r0, r4
    a654:	cmp	r0, #0
    a656:	bne.n	a64c <MillisTimer::runFromTimer()+0x68>
    a658:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a65a:	mov	r2, r4
    a65c:	movs	r1, #0
    a65e:	blx	r3
    a660:	b.n	a624 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    a662:	ldr	r3, [r0, #8]
    a664:	blx	r3
    a666:	b.n	a624 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    a668:	subs	r3, #1
    a66a:	str	r3, [r4, #0]
			break;
    a66c:	b.n	a638 <MillisTimer::runFromTimer()+0x54>
    a66e:	nop
    a670:	.word	0x1fffbdc4
    a674:	.word	0x000082b9
    a678:	.word	0x1fffbdd4

0000a67c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    a67c:	ldr	r2, [pc, #8]	; (a688 <systick_isr+0xc>)
    a67e:	ldr	r3, [r2, #0]
    a680:	adds	r3, #1
    a682:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    a684:	b.w	a5e4 <MillisTimer::runFromTimer()>
    a688:	.word	0x1fffbccc

0000a68c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a68c:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    a68e:	ldr	r4, [pc, #136]	; (a718 <yield+0x8c>)
    a690:	ldrb	r3, [r4, #0]
    a692:	cbz	r3, a696 <yield+0xa>
    a694:	pop	{r3, r4, r5, pc}
	running = 1;
    a696:	movs	r3, #1
    a698:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a69a:	bl	8d98 <usb_serial_available>
	if (Serial.available()) serialEvent();
    a69e:	cbnz	r0, a6fe <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    a6a0:	bl	ad78 <serial_available>
	if (Serial1.available()) serialEvent1();
    a6a4:	cbnz	r0, a6f8 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    a6a6:	bl	ac4c <serial2_available>
	if (Serial2.available()) serialEvent2();
    a6aa:	cbnz	r0, a6f2 <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    a6ac:	bl	af74 <serial3_available>
	if (Serial3.available()) serialEvent3();
    a6b0:	cbnz	r0, a6ec <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    a6b2:	movs	r3, #0
    a6b4:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a6b6:	mrs	r3, IPSR
		if (ipsr != 0) return;
    a6ba:	cmp	r3, #0
    a6bc:	bne.n	a694 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a6be:	mrs	r1, PRIMASK
		__disable_irq();
    a6c2:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a6c4:	ldr	r3, [pc, #84]	; (a71c <yield+0x90>)
    a6c6:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a6c8:	cbz	r0, a704 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a6ca:	ldr	r4, [pc, #84]	; (a720 <yield+0x94>)
    a6cc:	ldrb	r2, [r4, #0]
    a6ce:	cbnz	r2, a704 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    a6d0:	ldr	r5, [r0, #20]
    a6d2:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a6d4:	movs	r3, #1
    a6d6:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    a6d8:	cbz	r5, a70c <yield+0x80>
			firstYield->_prev = nullptr;
    a6da:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a6dc:	cbnz	r1, a6e0 <yield+0x54>
    a6de:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a6e0:	movs	r5, #0
    a6e2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a6e4:	ldr	r3, [r0, #8]
    a6e6:	blx	r3
		runningFromYield = false;
    a6e8:	strb	r5, [r4, #0]
    a6ea:	b.n	a694 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    a6ec:	bl	b070 <serialEvent3()>
    a6f0:	b.n	a6b2 <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    a6f2:	bl	a830 <serialEvent2()>
    a6f6:	b.n	a6ac <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    a6f8:	bl	b06c <serialEvent1()>
    a6fc:	b.n	a6a6 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    a6fe:	bl	a750 <serialEvent()>
    a702:	b.n	a6a0 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a704:	cmp	r1, #0
    a706:	bne.n	a694 <yield+0x8>
    a708:	cpsie	i
    a70a:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a70c:	ldr	r3, [pc, #20]	; (a724 <yield+0x98>)
    a70e:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a710:	cmp	r1, #0
    a712:	bne.n	a6e0 <yield+0x54>
    a714:	b.n	a6de <yield+0x52>
    a716:	nop
    a718:	.word	0x1fffbdd9
    a71c:	.word	0x1fffbdcc
    a720:	.word	0x1fffbdd0
    a724:	.word	0x1fffbdc8

0000a728 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a728:	b.w	8db4 <usb_serial_flush_input>

0000a72c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a72c:	b.w	8d68 <usb_serial_peekchar>

0000a730 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a730:	b.w	8d20 <usb_serial_getchar>

0000a734 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a734:	b.w	8d98 <usb_serial_available>

0000a738 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a738:	b.w	8f54 <usb_serial_flush_output>

0000a73c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a73c:	b.w	8f0c <usb_serial_write_buffer_free>

0000a740 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a740:	mov	r0, r1
    a742:	mov	r1, r2
    a744:	b.w	8dec <usb_serial_write>

0000a748 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a748:	mov	r0, r1
    a74a:	b.w	8ef4 <usb_serial_putchar>
    a74e:	nop

0000a750 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    a750:	bx	lr
    a752:	nop

0000a754 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    a754:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    a756:	mov	r6, r1
    a758:	cbz	r1, a778 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    a75a:	cbz	r2, a77c <Print::write(unsigned char const*, unsigned int)+0x28>
    a75c:	mov	r7, r0
    a75e:	mov	r4, r2
    a760:	movs	r5, #0
    a762:	ldr	r3, [r7, #0]
    a764:	ldrb.w	r1, [r6], #1
    a768:	ldr	r3, [r3, #0]
    a76a:	mov	r0, r7
    a76c:	blx	r3
    a76e:	subs	r4, #1
    a770:	add	r5, r0
    a772:	bne.n	a762 <Print::write(unsigned char const*, unsigned int)+0xe>
    a774:	mov	r0, r5
    a776:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    a778:	mov	r0, r1
    a77a:	pop	{r3, r4, r5, r6, r7, pc}
    a77c:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    a77e:	pop	{r3, r4, r5, r6, r7, pc}

0000a780 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a780:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    a782:	ldr	r2, [pc, #24]	; (a79c <Print::println()+0x1c>)
	return write(buf, 2);
    a784:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a786:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    a788:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a78a:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a78c:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a78e:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    a792:	movs	r2, #2
    a794:	blx	r3
}
    a796:	add	sp, #12
    a798:	ldr.w	pc, [sp], #4
    a79c:	.word	0x0000cca8

0000a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a7a0:	push	{r4, r5, r6, r7, lr}
    a7a2:	mov	r7, r0
    a7a4:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a7a6:	cmp	r2, #0
    a7a8:	beq.n	a812 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a7aa:	cmp	r2, #1
    a7ac:	it	eq
    a7ae:	moveq	r2, #10
	}


	if (n == 0) {
    a7b0:	cbz	r1, a808 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a7b2:	movs	r4, #33	; 0x21
    a7b4:	b.n	a7b8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a7b6:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a7b8:	udiv	r5, r1, r2
    a7bc:	mls	r1, r2, r5, r1
    a7c0:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a7c2:	cmp	r1, #9
    a7c4:	add.w	r1, r0, #48	; 0x30
    a7c8:	it	ls
    a7ca:	uxtbls	r0, r1
    a7cc:	add	r1, sp, #40	; 0x28
    a7ce:	it	hi
    a7d0:	addhi	r0, #55	; 0x37
    a7d2:	add	r1, r4
    a7d4:	it	hi
    a7d6:	uxtbhi	r0, r0
    a7d8:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    a7dc:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    a7de:	mov	r1, r5
    a7e0:	cmp	r5, #0
    a7e2:	bne.n	a7b6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a7e4:	cbz	r3, a7f4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a7e6:	subs	r4, #1
    a7e8:	uxtb	r4, r4
		buf[i] = '-';
    a7ea:	add	r3, sp, #40	; 0x28
    a7ec:	add	r3, r4
    a7ee:	movs	r2, #45	; 0x2d
    a7f0:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a7f4:	ldr	r3, [r7, #0]
    a7f6:	add	r2, sp, #4
    a7f8:	adds	r1, r2, r4
    a7fa:	ldr	r3, [r3, #4]
    a7fc:	mov	r0, r7
    a7fe:	rsb	r2, r4, #34	; 0x22
    a802:	blx	r3
}
    a804:	add	sp, #44	; 0x2c
    a806:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a808:	movs	r2, #48	; 0x30
    a80a:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    a80e:	movs	r4, #33	; 0x21
    a810:	b.n	a7e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a812:	ldr	r3, [r0, #0]
    a814:	uxtb	r1, r1
    a816:	ldr	r3, [r3, #0]
    a818:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a81a:	add	sp, #44	; 0x2c
    a81c:	pop	{r4, r5, r6, r7, pc}
    a81e:	nop

0000a820 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    a820:	cmp	r1, #0
		sign = '-';
		n = -n;
    a822:	itte	lt
    a824:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    a826:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    a828:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    a82a:	movs	r2, #10
    a82c:	b.w	a7a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000a830 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    a830:	bx	lr
    a832:	nop

0000a834 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a834:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a836:	bl	1f04 <setup>
	while (1) {
		loop();
    a83a:	bl	3840 <loop>
		yield();
    a83e:	bl	a68c <yield>
    a842:	b.n	a83a <main+0x6>

0000a844 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    a844:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    a846:	ldr	r5, [pc, #88]	; (a8a0 <random(unsigned long) [clone .part.0]+0x5c>)
    a848:	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    a84a:	cbz	r2, a890 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    a84c:	ldr	r1, [pc, #84]	; (a8a4 <random(unsigned long) [clone .part.0]+0x60>)
    a84e:	ldr	r3, [pc, #88]	; (a8a8 <random(unsigned long) [clone .part.0]+0x64>)
    a850:	ldr.w	lr, [pc, #92]	; a8b0 <random(unsigned long) [clone .part.0]+0x6c>
    a854:	smull	r6, r7, r2, r1
    a858:	smull	r1, r4, r1, r2
    a85c:	asrs	r6, r2, #31
    a85e:	adds	r1, r2, r7
    a860:	add	r4, r2
    a862:	rsb	r1, r6, r1, asr #16
    a866:	rsb	r4, r6, r4, asr #16
    a86a:	mul.w	r4, r3, r4
    a86e:	mls	r2, lr, r1, r2
    a872:	movw	r3, #16807	; 0x41a7
    a876:	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    a87a:	cmp	r3, #0
    a87c:	bge.n	a884 <random(unsigned long) [clone .part.0]+0x40>
    a87e:	add.w	r3, r3, #2147483648	; 0x80000000
    a882:	subs	r3, #1
    a884:	udiv	r2, r3, r0
	seed = x;
    a888:	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    a88a:	mls	r0, r0, r2, r3
    a88e:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    a890:	ldr	r3, [pc, #24]	; (a8ac <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    a892:	str	r3, [r5, #0]
    a894:	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    a898:	mls	r0, r0, r2, r3
    a89c:	pop	{r4, r5, r6, r7, pc}
    a89e:	nop
    a8a0:	.word	0x1fffbddc
    a8a4:	.word	0x834e0b5f
    a8a8:	.word	0xfffff4ec
    a8ac:	.word	0x1f0cce42
    a8b0:	.word	0x0001f31d

0000a8b4 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    a8b4:	cmp	r0, r1
    a8b6:	bge.n	a8c6 <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    a8b8:	push	{r4, lr}
    a8ba:	mov	r4, r0
    a8bc:	subs	r0, r1, r0
    a8be:	bl	a844 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    a8c2:	add	r0, r4
}
    a8c4:	pop	{r4, pc}
    a8c6:	bx	lr

0000a8c8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    a8c8:	cmp	r1, #192	; 0xc0
    a8ca:	push	{r4, r5, r6, r7}
    a8cc:	it	cs
    a8ce:	movcs	r1, #192	; 0xc0
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
    a8d0:	cpsid	i
	memory_pool = data;
    a8d2:	ldr	r3, [pc, #72]	; (a91c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x54>)
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
    a8d4:	ldr	r6, [pc, #72]	; (a920 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x58>)
	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
    a8d6:	ldr	r2, [pc, #76]	; (a924 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5c>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
    a8d8:	str	r0, [r3, #0]
	memory_pool_first_mask = 0;
    a8da:	movs	r3, #0
    a8dc:	strh	r3, [r2, #0]
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
    a8de:	str	r3, [r6, #0]
    a8e0:	str	r3, [r6, #4]
    a8e2:	str	r3, [r6, #8]
    a8e4:	str	r3, [r6, #12]
    a8e6:	str	r3, [r6, #16]
    a8e8:	str	r3, [r6, #20]
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a8ea:	movs	r7, #1
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a8ec:	cbz	r1, a916 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4e>
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a8ee:	lsrs	r5, r3, #5
    a8f0:	and.w	r4, r3, #31
    a8f4:	ldr.w	r2, [r6, r5, lsl #2]
    a8f8:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a8fc:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a8fe:	orrs	r2, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a900:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    a902:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    a906:	bne.n	a8ee <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x26>
    a908:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    a90a:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
    a90c:	adds	r3, #1
    a90e:	cmp	r3, r1
    a910:	add.w	r0, r0, #260	; 0x104
    a914:	bne.n	a90a <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x42>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
    a916:	cpsie	i

}
    a918:	pop	{r4, r5, r6, r7}
    a91a:	bx	lr
    a91c:	.word	0x1fffbde8
    a920:	.word	0x1fffbdf0
    a924:	.word	0x1fffbe0a

0000a928 <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    a928:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    a92a:	cpsid	i
	index = memory_pool_first_mask;
    a92c:	ldr	r7, [pc, #140]	; (a9bc <AudioStream::allocate()+0x94>)
	p += index;
    a92e:	ldr	r6, [pc, #144]	; (a9c0 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    a930:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    a932:	add.w	r3, r6, #24

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    a936:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    a93a:	cmp	r0, r3
    a93c:	bcs.n	a964 <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a93e:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    a942:	cbnz	r1, a96c <AudioStream::allocate()+0x44>
    a944:	adds	r2, r0, #4
    a946:	add.w	r5, r6, #27
    a94a:	adds	r3, r4, #1
    a94c:	subs	r5, r5, r2
    a94e:	add.w	r5, r3, r5, lsr #2
    a952:	b.n	a95c <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    a954:	ldr.w	r1, [r2], #4
		if (avail) break;
    a958:	cbnz	r1, a96c <AudioStream::allocate()+0x44>
    a95a:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a95c:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    a95e:	mov	r4, r3
		p++;
    a960:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    a962:	bne.n	a954 <AudioStream::allocate()+0x2c>
			__enable_irq();
    a964:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    a966:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a968:	pop	{r4, r5, r6, r7}
    a96a:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    a96c:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    a970:	mov.w	r2, #2147483648	; 0x80000000
    a974:	lsrs	r2, r3
    a976:	bic.w	r1, r1, r2
	*p = avail;
    a97a:	str	r1, [r0, #0]
	if (!avail) index++;
    a97c:	cbnz	r1, a980 <AudioStream::allocate()+0x58>
    a97e:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    a980:	ldr	r1, [pc, #64]	; (a9c4 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    a982:	strh	r4, [r7, #0]
	used = memory_used + 1;
    a984:	ldrh	r2, [r1, #0]
    a986:	adds	r2, #1
	memory_used = used;
    a988:	uxth	r4, r2
    a98a:	strh	r4, [r1, #0]
	__enable_irq();
    a98c:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a98e:	subs	r0, r0, r6
    a990:	asrs	r0, r0, #2
    a992:	rsb	r0, r3, r0, lsl #5
    a996:	add.w	r0, r0, r0, lsl #6
    a99a:	lsls	r3, r0, #2
    a99c:	ldr	r0, [pc, #40]	; (a9c8 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a99e:	ldr	r1, [pc, #44]	; (a9cc <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a9a0:	ldr	r0, [r0, #0]
    a9a2:	add.w	r3, r3, #8032	; 0x1f60
    a9a6:	adds	r3, #28
	block->ref_count = 1;
    a9a8:	movs	r5, #1
    a9aa:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    a9ac:	ldrh	r5, [r1, #0]
    a9ae:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    a9b0:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    a9b2:	it	hi
    a9b4:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    a9b6:	pop	{r4, r5, r6, r7}
    a9b8:	bx	lr
    a9ba:	nop
    a9bc:	.word	0x1fffbe0a
    a9c0:	.word	0x1fffbdf0
    a9c4:	.word	0x1fffbe0c
    a9c8:	.word	0x1fffbde8
    a9cc:	.word	0x1fffbde4

0000a9d0 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    a9d0:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    a9d2:	cpsid	i
	if (block->ref_count > 1) {
    a9d4:	ldrb	r3, [r0, #0]
    a9d6:	cmp	r3, #1
    a9d8:	bls.n	a9e2 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    a9da:	subs	r3, #1
    a9dc:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    a9de:	cpsie	i
    a9e0:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    a9e2:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    a9e4:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a9e6:	ldr	r4, [pc, #48]	; (aa18 <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a9e8:	ldr	r5, [pc, #48]	; (aa1c <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a9ea:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    a9ee:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    a9f0:	mvns	r2, r2
    a9f2:	mov.w	r0, #2147483648	; 0x80000000
    a9f6:	and.w	r2, r2, #31
    a9fa:	lsr.w	r2, r0, r2
    a9fe:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    aa00:	ldr	r2, [pc, #28]	; (aa20 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    aa02:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    aa06:	cmp	r3, r6
    aa08:	it	cc
    aa0a:	strhcc	r3, [r5, #0]
		memory_used--;
    aa0c:	ldrh	r3, [r2, #0]
    aa0e:	subs	r3, #1
    aa10:	strh	r3, [r2, #0]
	}
	__enable_irq();
    aa12:	cpsie	i
}
    aa14:	pop	{r4, r5, r6}
    aa16:	bx	lr
    aa18:	.word	0x1fffbdf0
    aa1c:	.word	0x1fffbe0a
    aa20:	.word	0x1fffbe0c

0000aa24 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    aa24:	ldr	r3, [r0, #12]
    aa26:	cbz	r3, aa56 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    aa28:	push	{r4, r5}
    aa2a:	b.n	aa30 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    aa2c:	ldr	r3, [r3, #12]
    aa2e:	cbz	r3, aa54 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    aa30:	ldrb	r0, [r3, #8]
    aa32:	cmp	r0, r2
    aa34:	bne.n	aa2c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    aa36:	ldr	r0, [r3, #4]
    aa38:	ldrb	r4, [r3, #9]
    aa3a:	ldr	r0, [r0, #16]
    aa3c:	ldr.w	r5, [r0, r4, lsl #2]
    aa40:	cmp	r5, #0
    aa42:	bne.n	aa2c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    aa44:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    aa48:	ldrb	r0, [r1, #0]
    aa4a:	adds	r0, #1
    aa4c:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    aa4e:	ldr	r3, [r3, #12]
    aa50:	cmp	r3, #0
    aa52:	bne.n	aa30 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    aa54:	pop	{r4, r5}
    aa56:	bx	lr

0000aa58 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    aa58:	ldrb	r3, [r0, #9]
    aa5a:	cmp	r3, r1
    aa5c:	bls.n	aa6c <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    aa5e:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    aa60:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    aa62:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    aa66:	str.w	r2, [r3, r1, lsl #2]
	return in;
    aa6a:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    aa6c:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    aa6e:	bx	lr

0000aa70 <AudioStream::receiveWritable(unsigned int)>:

// Receive block from an input.  The block will not
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
    aa70:	push	{r3, r4, r5, lr}
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    aa72:	ldrb	r3, [r0, #9]
    aa74:	cmp	r3, r1
    aa76:	bls.n	aaae <AudioStream::receiveWritable(unsigned int)+0x3e>
	in = inputQueue[index];
    aa78:	ldr	r3, [r0, #16]
    aa7a:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    aa7e:	movs	r2, #0
    aa80:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    aa84:	cbz	r4, aaae <AudioStream::receiveWritable(unsigned int)+0x3e>
    aa86:	ldrb	r3, [r4, #0]
    aa88:	cmp	r3, #1
    aa8a:	bls.n	aaaa <AudioStream::receiveWritable(unsigned int)+0x3a>
		p = allocate();
    aa8c:	bl	a928 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    aa90:	mov	r5, r0
    aa92:	cbz	r0, aaa0 <AudioStream::receiveWritable(unsigned int)+0x30>
    aa94:	mov.w	r2, #256	; 0x100
    aa98:	adds	r1, r4, #4
    aa9a:	adds	r0, #4
    aa9c:	bl	8bec <memcpy>
		in->ref_count--;
    aaa0:	ldrb	r3, [r4, #0]
    aaa2:	subs	r3, #1
    aaa4:	strb	r3, [r4, #0]

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
    aaa6:	mov	r0, r5
    aaa8:	pop	{r3, r4, r5, pc}
    aaaa:	mov	r0, r4
		if (p) memcpy(p->data, in->data, sizeof(p->data));
		in->ref_count--;
		in = p;
	}
	return in;
}
    aaac:	pop	{r3, r4, r5, pc}
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    aaae:	movs	r0, #0
    aab0:	pop	{r3, r4, r5, pc}
    aab2:	nop

0000aab4 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    aab4:	ldrb	r3, [r0, #16]
    aab6:	cbnz	r3, ab02 <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    aab8:	ldr	r3, [r0, #4]
    aaba:	ldrb	r2, [r0, #9]
    aabc:	ldrb	r3, [r3, #9]
    aabe:	cmp	r2, r3
    aac0:	bhi.n	ab02 <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    aac2:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    aac4:	cpsid	i
	p = src.destination_list;
    aac6:	ldr	r4, [r0, #0]
    aac8:	ldr	r3, [r4, #12]
	if (p == NULL) {
    aaca:	cbz	r3, ab18 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    aacc:	ldr	r2, [r3, #12]
    aace:	cbz	r2, aade <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    aad0:	ldr	r1, [r3, #0]
    aad2:	cmp	r4, r1
    aad4:	beq.n	ab04 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    aad6:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    aad8:	ldr	r2, [r3, #12]
    aada:	cmp	r2, #0
    aadc:	bne.n	aad0 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    aade:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    aae0:	movs	r3, #0
    aae2:	str	r3, [r0, #12]
	src.numConnections++;
    aae4:	ldrb	r3, [r4, #10]
    aae6:	adds	r3, #1
    aae8:	strb	r3, [r4, #10]
	src.active = true;
    aaea:	ldr	r2, [r0, #0]

	dst.numConnections++;
    aaec:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    aaee:	movs	r3, #1
    aaf0:	strb	r3, [r2, #8]

	dst.numConnections++;
    aaf2:	ldrb	r2, [r1, #10]
    aaf4:	add	r2, r3
    aaf6:	strb	r2, [r1, #10]
	dst.active = true;
    aaf8:	ldr	r2, [r0, #4]
    aafa:	strb	r3, [r2, #8]

	isConnected = true;
    aafc:	strb	r3, [r0, #16]

	__enable_irq();
    aafe:	cpsie	i
}
    ab00:	pop	{r4, r5}
    ab02:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    ab04:	ldr	r5, [r3, #4]
    ab06:	ldr	r1, [r0, #4]
    ab08:	cmp	r5, r1
    ab0a:	bne.n	aad6 <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    ab0c:	ldrh	r1, [r3, #8]
    ab0e:	ldrh	r3, [r0, #8]
    ab10:	cmp	r1, r3
    ab12:	beq.n	aafe <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    ab14:	mov	r3, r2
    ab16:	b.n	aad8 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    ab18:	str	r0, [r4, #12]
    ab1a:	b.n	aae0 <AudioConnection::connect()+0x2c>

0000ab1c <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    ab1c:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    ab1e:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    ab20:	cmp	r3, #0
    ab22:	beq.n	ab8a <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    ab24:	ldr	r3, [r0, #4]
    ab26:	ldrb	r2, [r0, #9]
    ab28:	ldrb	r3, [r3, #9]
    ab2a:	cmp	r2, r3
    ab2c:	bhi.n	ab8a <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    ab2e:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    ab30:	ldr	r2, [r0, #0]
    ab32:	ldr	r3, [r2, #12]
	if (p == NULL) {
    ab34:	cbz	r3, ab88 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    ab36:	cmp	r0, r3
    ab38:	bne.n	ab40 <AudioConnection::disconnect()+0x24>
    ab3a:	b.n	ab90 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    ab3c:	cmp	r0, r3
    ab3e:	beq.n	ab46 <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    ab40:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    ab42:	cmp	r3, #0
    ab44:	bne.n	ab3c <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    ab46:	ldr	r3, [r0, #4]
    ab48:	ldrb	r1, [r0, #9]
    ab4a:	ldr	r3, [r3, #16]
    ab4c:	mov	r4, r0
    ab4e:	ldr.w	r0, [r3, r1, lsl #2]
    ab52:	cbz	r0, ab68 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    ab54:	bl	a9d0 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    ab58:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    ab5a:	ldr	r3, [r4, #4]
    ab5c:	ldrb	r2, [r4, #9]
    ab5e:	ldr	r3, [r3, #16]
    ab60:	movs	r1, #0
    ab62:	str.w	r1, [r3, r2, lsl #2]
    ab66:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    ab68:	ldrb	r3, [r2, #10]
    ab6a:	subs	r3, #1
    ab6c:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    ab6e:	ldr	r3, [r4, #0]
    ab70:	ldrb	r2, [r3, #10]
    ab72:	cbnz	r2, ab76 <AudioConnection::disconnect()+0x5a>
		src.active = false;
    ab74:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    ab76:	ldr	r2, [r4, #4]
    ab78:	ldrb	r3, [r2, #10]
    ab7a:	subs	r3, #1
    ab7c:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    ab7e:	ldr	r3, [r4, #4]
    ab80:	ldrb	r2, [r3, #10]
    ab82:	cbz	r2, ab8c <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    ab84:	movs	r3, #0
    ab86:	strb	r3, [r4, #16]

	__enable_irq();
    ab88:	cpsie	i
    ab8a:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    ab8c:	strb	r2, [r3, #8]
    ab8e:	b.n	ab84 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    ab90:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    ab92:	str	r3, [r2, #12]
    ab94:	b.n	ab46 <AudioConnection::disconnect()+0x2a>
    ab96:	nop

0000ab98 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    ab98:	ldr	r3, [pc, #32]	; (abbc <AudioStream::update_setup()+0x24>)
    ab9a:	ldrb	r2, [r3, #0]
    ab9c:	cbnz	r2, abb8 <AudioStream::update_setup()+0x20>
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    ab9e:	push	{r4, r5}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    aba0:	ldr	r0, [pc, #28]	; (abc0 <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    aba2:	ldr	r1, [pc, #32]	; (abc4 <AudioStream::update_setup()+0x2c>)
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    aba4:	movs	r5, #208	; 0xd0
    aba6:	strb	r5, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    aba8:	mov.w	r4, #1073741824	; 0x40000000
	update_scheduled = true;
    abac:	movs	r2, #1

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    abae:	str	r4, [r1, #0]
	update_scheduled = true;
	return true;
    abb0:	mov	r0, r2
bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
	update_scheduled = true;
    abb2:	strb	r2, [r3, #0]
	return true;
}
    abb4:	pop	{r4, r5}
    abb6:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    abb8:	movs	r0, #0
    abba:	bx	lr
    abbc:	.word	0x1fffbdec
    abc0:	.word	0xe000e45e
    abc4:	.word	0xe000e108

0000abc8 <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    abc8:	ldr	r1, [pc, #104]	; (ac34 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    abca:	ldr	r2, [pc, #108]	; (ac38 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    abcc:	ldr	r0, [pc, #108]	; (ac3c <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    abce:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    abd0:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    abd2:	ldr	r5, [pc, #108]	; (ac40 <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    abd4:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    abd6:	orr.w	r3, r3, #16777216	; 0x1000000
    abda:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    abdc:	ldr	r3, [r2, #0]
    abde:	orr.w	r3, r3, #1
    abe2:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    abe4:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    abe6:	cbnz	r4, abee <software_isr+0x26>
    abe8:	b.n	ac16 <software_isr+0x4e>
    abea:	ldr	r4, [r4, #20]
    abec:	cbz	r4, ac16 <software_isr+0x4e>
		if (p->active) {
    abee:	ldrb	r3, [r4, #8]
    abf0:	cmp	r3, #0
    abf2:	beq.n	abea <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    abf4:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    abf6:	ldr	r7, [r5, #0]
			p->update();
    abf8:	ldr	r3, [r3, #0]
    abfa:	mov	r0, r4
    abfc:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    abfe:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    ac00:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    ac02:	subs	r3, r3, r7
    ac04:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    ac06:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    ac08:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    ac0a:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    ac0c:	it	hi
    ac0e:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    ac10:	ldr	r4, [r4, #20]
    ac12:	cmp	r4, #0
    ac14:	bne.n	abee <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    ac16:	ldr	r3, [pc, #40]	; (ac40 <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    ac18:	ldr	r2, [pc, #40]	; (ac44 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    ac1a:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    ac1c:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    ac1e:	ldr	r4, [pc, #40]	; (ac48 <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    ac20:	subs	r3, r3, r6
    ac22:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    ac24:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    ac26:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    ac28:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    ac2a:	bls.n	ac30 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    ac2c:	strh	r1, [r2, #0]
    ac2e:	pop	{r3, r4, r5, r6, r7, pc}
    ac30:	pop	{r3, r4, r5, r6, r7, pc}
    ac32:	nop
    ac34:	.word	0xe000edfc
    ac38:	.word	0xe0001000
    ac3c:	.word	0x1fffbde0
    ac40:	.word	0xe0001004
    ac44:	.word	0x1fffbe08
    ac48:	.word	0x1fffbe0e

0000ac4c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ac4c:	ldr	r2, [pc, #20]	; (ac64 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    ac4e:	ldr	r3, [pc, #24]	; (ac68 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ac50:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    ac52:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ac54:	uxtb	r0, r0
	tail = rx_buffer_tail;
    ac56:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    ac58:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    ac5a:	it	cc
    ac5c:	addcc	r0, #64	; 0x40
    ac5e:	subs	r0, r0, r3
}
    ac60:	bx	lr
    ac62:	nop
    ac64:	.word	0x1fffbe80
    ac68:	.word	0x1fffbe15

0000ac6c <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    ac6c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    ac6e:	ldr	r3, [pc, #224]	; (ad50 <uart1_status_isr+0xe4>)
    ac70:	ldrb	r2, [r3, #4]
    ac72:	tst.w	r2, #48	; 0x30
    ac76:	beq.n	acd2 <uart1_status_isr+0x66>
		__disable_irq();
    ac78:	cpsid	i
		avail = UART1_RCFIFO;
    ac7a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    ac7c:	and.w	r2, r1, #255	; 0xff
    ac80:	cmp	r1, #0
    ac82:	beq.n	ad00 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    ac84:	cpsie	i
			head = rx_buffer_head;
    ac86:	ldr	r7, [pc, #204]	; (ad54 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    ac88:	ldr	r1, [pc, #204]	; (ad58 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    ac8a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    ac8c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    ac8e:	ldr	r6, [pc, #204]	; (ad5c <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    ac90:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    ac92:	uxtb	r0, r0
			tail = rx_buffer_tail;
    ac94:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    ac96:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    ac98:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    ac9a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    ac9c:	it	cs
    ac9e:	movcs	r3, #0
				if (newhead != tail) {
    aca0:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    aca2:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    aca6:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    aca8:	itt	ne
    acaa:	strbne	r1, [r6, r3]
    acac:	movne	r0, r3
				}
			} while (--avail > 0);
    acae:	ands.w	r2, r2, #255	; 0xff
    acb2:	bne.n	ac96 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    acb4:	ldr	r3, [pc, #168]	; (ad60 <uart1_status_isr+0xf4>)
    acb6:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    acb8:	uxtb	r2, r0
    acba:	strb	r2, [r7, #0]
			if (rts_pin) {
    acbc:	cbz	r3, acd2 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    acbe:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    acc0:	itet	cc
    acc2:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    acc6:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    acc8:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    acca:	cmp	r0, #39	; 0x27
    accc:	itt	gt
    acce:	movgt	r2, #1
    acd0:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    acd2:	ldr	r1, [pc, #124]	; (ad50 <uart1_status_isr+0xe4>)
    acd4:	ldrb	r2, [r1, #3]
    acd6:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    acd8:	lsls	r5, r2, #24
    acda:	bmi.n	ad0a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    acdc:	lsls	r2, r2, #25
    acde:	bpl.n	acfc <uart1_status_isr+0x90>
    ace0:	ldr	r3, [pc, #108]	; (ad50 <uart1_status_isr+0xe4>)
    ace2:	ldrb	r3, [r3, #4]
    ace4:	lsls	r3, r3, #25
    ace6:	bpl.n	acfc <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    ace8:	ldr	r3, [pc, #120]	; (ad64 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    acea:	ldr	r1, [pc, #124]	; (ad68 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    acec:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    acee:	movs	r2, #0
    acf0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    acf2:	cbz	r3, acf6 <uart1_status_isr+0x8a>
    acf4:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    acf6:	ldr	r3, [pc, #88]	; (ad50 <uart1_status_isr+0xe4>)
    acf8:	movs	r2, #60	; 0x3c
    acfa:	strb	r2, [r3, #3]
	}
}
    acfc:	pop	{r4, r5, r6, r7}
    acfe:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    ad00:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    ad02:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    ad04:	strb	r2, [r3, #17]
			__enable_irq();
    ad06:	cpsie	i
    ad08:	b.n	acd2 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    ad0a:	ldrb	r3, [r1, #4]
    ad0c:	lsls	r4, r3, #24
    ad0e:	bpl.n	acdc <uart1_status_isr+0x70>
		head = tx_buffer_head;
    ad10:	ldr	r3, [pc, #88]	; (ad6c <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    ad12:	ldr	r6, [pc, #92]	; (ad70 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    ad14:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    ad16:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    ad18:	uxtb	r4, r4
		tail = tx_buffer_tail;
    ad1a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    ad1c:	cmp	r4, r3
    ad1e:	beq.n	ad3e <uart1_status_isr+0xd2>
    ad20:	ldr	r5, [pc, #80]	; (ad74 <uart1_status_isr+0x108>)
    ad22:	b.n	ad28 <uart1_status_isr+0xbc>
    ad24:	cmp	r3, r4
    ad26:	beq.n	ad3e <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    ad28:	adds	r3, #1
    ad2a:	cmp	r3, #40	; 0x28
    ad2c:	it	cs
    ad2e:	movcs	r3, #0
			avail = UART1_S1;
    ad30:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    ad32:	ldrb	r0, [r5, r3]
    ad34:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    ad36:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    ad38:	ldrb	r0, [r1, #20]
    ad3a:	cmp	r0, #7
    ad3c:	bls.n	ad24 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    ad3e:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    ad40:	ldr	r1, [pc, #12]	; (ad50 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    ad42:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    ad44:	ldrb	r3, [r1, #4]
    ad46:	lsls	r0, r3, #24
    ad48:	itt	mi
    ad4a:	movmi	r3, #124	; 0x7c
    ad4c:	strbmi	r3, [r1, #3]
    ad4e:	b.n	acdc <uart1_status_isr+0x70>
    ad50:	.word	0x4006b000
    ad54:	.word	0x1fffbe80
    ad58:	.word	0x1fffbe15
    ad5c:	.word	0x1fffbe40
    ad60:	.word	0x1fffbe10
    ad64:	.word	0x1fffbe84
    ad68:	.word	0x1fffbe14
    ad6c:	.word	0x1fffbe88
    ad70:	.word	0x1fffbe81
    ad74:	.word	0x1fffbe18

0000ad78 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ad78:	ldr	r2, [pc, #20]	; (ad90 <serial_available+0x18>)
	tail = rx_buffer_tail;
    ad7a:	ldr	r3, [pc, #24]	; (ad94 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ad7c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    ad7e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ad80:	uxtb	r0, r0
	tail = rx_buffer_tail;
    ad82:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    ad84:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    ad86:	it	cc
    ad88:	addcc	r0, #64	; 0x40
    ad8a:	subs	r0, r0, r3
}
    ad8c:	bx	lr
    ad8e:	nop
    ad90:	.word	0x1fffbe90
    ad94:	.word	0x1fffbe91

0000ad98 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    ad98:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    ad9a:	ldr	r3, [pc, #224]	; (ae7c <uart0_status_isr+0xe4>)
    ad9c:	ldrb	r2, [r3, #4]
    ad9e:	tst.w	r2, #48	; 0x30
    ada2:	beq.n	adfe <uart0_status_isr+0x66>
		__disable_irq();
    ada4:	cpsid	i
		avail = UART0_RCFIFO;
    ada6:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    ada8:	and.w	r2, r1, #255	; 0xff
    adac:	cmp	r1, #0
    adae:	beq.n	ae2c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    adb0:	cpsie	i
			head = rx_buffer_head;
    adb2:	ldr	r7, [pc, #204]	; (ae80 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    adb4:	ldr	r1, [pc, #204]	; (ae84 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    adb6:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    adb8:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    adba:	ldr	r6, [pc, #204]	; (ae88 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    adbc:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    adbe:	uxtb	r0, r0
			tail = rx_buffer_tail;
    adc0:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    adc2:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    adc4:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    adc6:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    adc8:	it	cs
    adca:	movcs	r3, #0
				if (newhead != tail) {
    adcc:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    adce:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    add2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    add4:	itt	ne
    add6:	strbne	r1, [r6, r3]
    add8:	movne	r0, r3
				}
			} while (--avail > 0);
    adda:	ands.w	r2, r2, #255	; 0xff
    adde:	bne.n	adc2 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    ade0:	ldr	r3, [pc, #168]	; (ae8c <uart0_status_isr+0xf4>)
    ade2:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    ade4:	uxtb	r2, r0
    ade6:	strb	r2, [r7, #0]
			if (rts_pin) {
    ade8:	cbz	r3, adfe <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    adea:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    adec:	itet	cc
    adee:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    adf2:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    adf4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    adf6:	cmp	r0, #39	; 0x27
    adf8:	itt	gt
    adfa:	movgt	r2, #1
    adfc:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    adfe:	ldr	r1, [pc, #124]	; (ae7c <uart0_status_isr+0xe4>)
    ae00:	ldrb	r2, [r1, #3]
    ae02:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    ae04:	lsls	r5, r2, #24
    ae06:	bmi.n	ae36 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    ae08:	lsls	r2, r2, #25
    ae0a:	bpl.n	ae28 <uart0_status_isr+0x90>
    ae0c:	ldr	r3, [pc, #108]	; (ae7c <uart0_status_isr+0xe4>)
    ae0e:	ldrb	r3, [r3, #4]
    ae10:	lsls	r3, r3, #25
    ae12:	bpl.n	ae28 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    ae14:	ldr	r3, [pc, #120]	; (ae90 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    ae16:	ldr	r1, [pc, #124]	; (ae94 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    ae18:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    ae1a:	movs	r2, #0
    ae1c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    ae1e:	cbz	r3, ae22 <uart0_status_isr+0x8a>
    ae20:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    ae22:	ldr	r3, [pc, #88]	; (ae7c <uart0_status_isr+0xe4>)
    ae24:	movs	r2, #60	; 0x3c
    ae26:	strb	r2, [r3, #3]
	}
}
    ae28:	pop	{r4, r5, r6, r7}
    ae2a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    ae2c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    ae2e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    ae30:	strb	r2, [r3, #17]
			__enable_irq();
    ae32:	cpsie	i
    ae34:	b.n	adfe <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    ae36:	ldrb	r3, [r1, #4]
    ae38:	lsls	r4, r3, #24
    ae3a:	bpl.n	ae08 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    ae3c:	ldr	r3, [pc, #88]	; (ae98 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    ae3e:	ldr	r6, [pc, #92]	; (ae9c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    ae40:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    ae42:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    ae44:	uxtb	r4, r4
		tail = tx_buffer_tail;
    ae46:	uxtb	r3, r3
		do {
			if (tail == head) break;
    ae48:	cmp	r4, r3
    ae4a:	beq.n	ae6a <uart0_status_isr+0xd2>
    ae4c:	ldr	r5, [pc, #80]	; (aea0 <uart0_status_isr+0x108>)
    ae4e:	b.n	ae54 <uart0_status_isr+0xbc>
    ae50:	cmp	r3, r4
    ae52:	beq.n	ae6a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    ae54:	adds	r3, #1
    ae56:	cmp	r3, #64	; 0x40
    ae58:	it	cs
    ae5a:	movcs	r3, #0
			avail = UART0_S1;
    ae5c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    ae5e:	ldrb	r0, [r5, r3]
    ae60:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    ae62:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    ae64:	ldrb	r0, [r1, #20]
    ae66:	cmp	r0, #7
    ae68:	bls.n	ae50 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    ae6a:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    ae6c:	ldr	r1, [pc, #12]	; (ae7c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    ae6e:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    ae70:	ldrb	r3, [r1, #4]
    ae72:	lsls	r0, r3, #24
    ae74:	itt	mi
    ae76:	movmi	r3, #124	; 0x7c
    ae78:	strbmi	r3, [r1, #3]
    ae7a:	b.n	ae08 <uart0_status_isr+0x70>
    ae7c:	.word	0x4006a000
    ae80:	.word	0x1fffbe90
    ae84:	.word	0x1fffbe91
    ae88:	.word	0x1fffbed4
    ae8c:	.word	0x1fffbe8c
    ae90:	.word	0x1fffbf18
    ae94:	.word	0x1fffbf14
    ae98:	.word	0x1fffbf1c
    ae9c:	.word	0x1fffbf15
    aea0:	.word	0x1fffbe94

0000aea4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    aea4:	push	{r4, r5, r6, lr}
    aea6:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    aea8:	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    aeaa:	ldr	r3, [pc, #100]	; (af10 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    aeac:	ldr	r5, [pc, #100]	; (af14 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    aeae:	ldr	r0, [pc, #104]	; (af18 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    aeb0:	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    aeb2:	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    aeb4:	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    aeb6:	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    aeb8:	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    aeba:	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    aebc:	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    aebe:	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    aec0:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    aec2:	ldrb	r3, [r2, #0]
    aec4:	lsls	r3, r3, #24
    aec6:	bpl.n	aec2 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    aec8:	ldr	r3, [pc, #80]	; (af1c <usb_init_serialnumber+0x78>)
    aeca:	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    aecc:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    aece:	ldr	r3, [pc, #80]	; (af20 <usb_init_serialnumber+0x7c>)
    aed0:	ldr	r4, [pc, #80]	; (af24 <usb_init_serialnumber+0x80>)
    aed2:	cmp	r0, r3
    aed4:	it	ls
    aed6:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    aeda:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    aedc:	it	ls
    aede:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    aee0:	movs	r2, #10
    aee2:	bl	af28 <ultoa>
    aee6:	add	r1, sp, #4
    aee8:	mov	r0, r4
	for (i=0; i<10; i++) {
    aeea:	movs	r3, #0
		char c = buf[i];
    aeec:	ldrb.w	r2, [r1], #1
    aef0:	adds	r3, #1
		if (!c) break;
    aef2:	cbz	r2, af04 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    aef4:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    aef6:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    aefa:	bne.n	aeec <usb_init_serialnumber+0x48>
    aefc:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    aefe:	strb	r3, [r4, #0]
}
    af00:	add	sp, #16
    af02:	pop	{r4, r5, r6, pc}
    af04:	lsls	r3, r3, #1
    af06:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    af08:	strb	r3, [r4, #0]
}
    af0a:	add	sp, #16
    af0c:	pop	{r4, r5, r6, pc}
    af0e:	nop
    af10:	.word	0x40020000
    af14:	.word	0x40020007
    af18:	.word	0x40020006
    af1c:	.word	0x40020008
    af20:	.word	0x0098967f
    af24:	.word	0x1fff96f8

0000af28 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    af28:	push	{r4, r5, r6, r7}
    af2a:	subs	r5, r1, #1
    af2c:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    af2e:	movs	r4, #0
    af30:	b.n	af34 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    af32:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    af34:	udiv	r3, r0, r2
    af38:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    af3c:	cmp	r0, #9
    af3e:	add.w	r7, r0, #48	; 0x30
    af42:	itet	hi
    af44:	addhi	r0, #55	; 0x37
    af46:	uxtbls	r0, r7
    af48:	uxtbhi	r0, r0
    af4a:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    af4e:	mov	r0, r3
    af50:	cmp	r3, #0
    af52:	bne.n	af32 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    af54:	adds	r2, r1, r4
    af56:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    af58:	cbz	r4, af6e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    af5a:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    af5c:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    af60:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    af62:	adds	r3, #1
    af64:	subs	r0, r4, r3
    af66:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    af68:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    af6c:	blt.n	af5a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    af6e:	mov	r0, r1
    af70:	pop	{r4, r5, r6, r7}
    af72:	bx	lr

0000af74 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    af74:	ldr	r2, [pc, #20]	; (af8c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    af76:	ldr	r3, [pc, #24]	; (af90 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    af78:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    af7a:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    af7c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    af7e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    af80:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    af82:	it	cc
    af84:	addcc	r0, #64	; 0x40
    af86:	subs	r0, r0, r3
}
    af88:	bx	lr
    af8a:	nop
    af8c:	.word	0x1fffbf24
    af90:	.word	0x1fffbf25

0000af94 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    af94:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    af96:	ldr	r3, [pc, #172]	; (b044 <uart2_status_isr+0xb0>)
    af98:	ldrb	r2, [r3, #4]
    af9a:	lsls	r4, r2, #26
    af9c:	bpl.n	afde <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    af9e:	ldr	r0, [pc, #168]	; (b048 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    afa0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    afa2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    afa4:	ldr	r1, [pc, #164]	; (b04c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    afa6:	adds	r3, #1
    afa8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    afaa:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    afac:	it	gt
    afae:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    afb0:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    afb2:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    afb4:	beq.n	afbe <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    afb6:	ldr	r4, [pc, #152]	; (b050 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    afb8:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    afba:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    afbc:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    afbe:	ldr	r2, [pc, #148]	; (b054 <uart2_status_isr+0xc0>)
    afc0:	ldr	r1, [r2, #0]
    afc2:	cbz	r1, afde <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    afc4:	ldr	r2, [pc, #144]	; (b058 <uart2_status_isr+0xc4>)
    afc6:	ldrb	r2, [r2, #0]
    afc8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    afca:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    afcc:	itet	cc
    afce:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    afd2:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    afd4:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    afd6:	cmp	r3, #39	; 0x27
    afd8:	itt	gt
    afda:	movgt	r3, #1
    afdc:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    afde:	ldr	r2, [pc, #100]	; (b044 <uart2_status_isr+0xb0>)
    afe0:	ldrb	r3, [r2, #3]
    afe2:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    afe4:	lsls	r0, r3, #24
    afe6:	bmi.n	b00c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    afe8:	lsls	r2, r3, #25
    afea:	bpl.n	b008 <uart2_status_isr+0x74>
    afec:	ldr	r3, [pc, #84]	; (b044 <uart2_status_isr+0xb0>)
    afee:	ldrb	r3, [r3, #4]
    aff0:	lsls	r3, r3, #25
    aff2:	bpl.n	b008 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    aff4:	ldr	r3, [pc, #100]	; (b05c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    aff6:	ldr	r1, [pc, #104]	; (b060 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    aff8:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    affa:	movs	r2, #0
    affc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    affe:	cbz	r3, b002 <uart2_status_isr+0x6e>
    b000:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    b002:	ldr	r3, [pc, #64]	; (b044 <uart2_status_isr+0xb0>)
    b004:	movs	r2, #44	; 0x2c
    b006:	strb	r2, [r3, #3]
	}
}
    b008:	pop	{r4, r5}
    b00a:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b00c:	ldrb	r1, [r2, #4]
    b00e:	lsls	r1, r1, #24
    b010:	bpl.n	afe8 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    b012:	ldr	r1, [pc, #80]	; (b064 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    b014:	ldr	r0, [pc, #64]	; (b058 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    b016:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    b018:	ldrb	r1, [r0, #0]
    b01a:	uxtb	r1, r1
		if (head == tail) {
    b01c:	cmp	r4, r1
    b01e:	beq.n	b03c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    b020:	adds	r2, r1, #1
    b022:	cmp	r2, #39	; 0x27
    b024:	itt	hi
    b026:	movhi	r1, #0
    b028:	movhi	r2, r1
			n = tx_buffer[tail];
    b02a:	ldr	r5, [pc, #60]	; (b068 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    b02c:	ldr	r4, [pc, #20]	; (b044 <uart2_status_isr+0xb0>)
    b02e:	it	ls
    b030:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    b032:	ldrb	r2, [r5, r2]
    b034:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    b036:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    b038:	strb	r1, [r0, #0]
    b03a:	b.n	afe8 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    b03c:	movs	r1, #108	; 0x6c
    b03e:	strb	r1, [r2, #3]
    b040:	b.n	afe8 <uart2_status_isr+0x54>
    b042:	nop
    b044:	.word	0x4006c000
    b048:	.word	0x1fffbf24
    b04c:	.word	0x1fffbf25
    b050:	.word	0x1fffbf50
    b054:	.word	0x1fffbf20
    b058:	.word	0x1fffbf91
    b05c:	.word	0x1fffbf94
    b060:	.word	0x1fffbf90
    b064:	.word	0x1fffbf98
    b068:	.word	0x1fffbf28

0000b06c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    b06c:	bx	lr
    b06e:	nop

0000b070 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    b070:	bx	lr
    b072:	nop

0000b074 <__aeabi_frsub>:
    b074:	eor.w	r0, r0, #2147483648	; 0x80000000
    b078:	b.n	b080 <__addsf3>
    b07a:	nop

0000b07c <__aeabi_fsub>:
    b07c:	eor.w	r1, r1, #2147483648	; 0x80000000

0000b080 <__addsf3>:
    b080:	lsls	r2, r0, #1
    b082:	itttt	ne
    b084:	movsne.w	r3, r1, lsl #1
    b088:	teqne	r2, r3
    b08c:	mvnsne.w	ip, r2, asr #24
    b090:	mvnsne.w	ip, r3, asr #24
    b094:	beq.n	b16c <__addsf3+0xec>
    b096:	mov.w	r2, r2, lsr #24
    b09a:	rsbs	r3, r2, r3, lsr #24
    b09e:	itttt	gt
    b0a0:	addgt	r2, r2, r3
    b0a2:	eorgt	r1, r0
    b0a4:	eorgt	r0, r1
    b0a6:	eorgt	r1, r0
    b0a8:	it	lt
    b0aa:	neglt	r3, r3
    b0ac:	cmp	r3, #25
    b0ae:	it	hi
    b0b0:	bxhi	lr
    b0b2:	tst.w	r0, #2147483648	; 0x80000000
    b0b6:	orr.w	r0, r0, #8388608	; 0x800000
    b0ba:	bic.w	r0, r0, #4278190080	; 0xff000000
    b0be:	it	ne
    b0c0:	negne	r0, r0
    b0c2:	tst.w	r1, #2147483648	; 0x80000000
    b0c6:	orr.w	r1, r1, #8388608	; 0x800000
    b0ca:	bic.w	r1, r1, #4278190080	; 0xff000000
    b0ce:	it	ne
    b0d0:	negne	r1, r1
    b0d2:	teq	r2, r3
    b0d6:	beq.n	b158 <__addsf3+0xd8>
    b0d8:	sub.w	r2, r2, #1
    b0dc:	asr.w	ip, r1, r3
    b0e0:	adds.w	r0, r0, ip
    b0e4:	rsb	r3, r3, #32
    b0e8:	lsl.w	r1, r1, r3
    b0ec:	and.w	r3, r0, #2147483648	; 0x80000000
    b0f0:	bpl.n	b0f8 <__addsf3+0x78>
    b0f2:	negs	r1, r1
    b0f4:	sbc.w	r0, r0, r0, lsl #1
    b0f8:	cmp.w	r0, #8388608	; 0x800000
    b0fc:	bcc.n	b126 <__addsf3+0xa6>
    b0fe:	cmp.w	r0, #16777216	; 0x1000000
    b102:	bcc.n	b112 <__addsf3+0x92>
    b104:	lsrs	r0, r0, #1
    b106:	mov.w	r1, r1, rrx
    b10a:	add.w	r2, r2, #1
    b10e:	cmp	r2, #254	; 0xfe
    b110:	bcs.n	b1b6 <__addsf3+0x136>
    b112:	cmp.w	r1, #2147483648	; 0x80000000
    b116:	adc.w	r0, r0, r2, lsl #23
    b11a:	it	eq
    b11c:	biceq.w	r0, r0, #1
    b120:	orr.w	r0, r0, r3
    b124:	bx	lr
    b126:	lsls	r1, r1, #1
    b128:	adc.w	r0, r0, r0
    b12c:	tst.w	r0, #8388608	; 0x800000
    b130:	sub.w	r2, r2, #1
    b134:	bne.n	b112 <__addsf3+0x92>
    b136:	clz	ip, r0
    b13a:	sub.w	ip, ip, #8
    b13e:	subs.w	r2, r2, ip
    b142:	lsl.w	r0, r0, ip
    b146:	itet	ge
    b148:	addge.w	r0, r0, r2, lsl #23
    b14c:	neglt	r2, r2
    b14e:	orrge	r0, r3
    b150:	itt	lt
    b152:	lsrlt	r0, r2
    b154:	orrlt	r0, r3
    b156:	bx	lr
    b158:	teq	r2, #0
    b15c:	eor.w	r1, r1, #8388608	; 0x800000
    b160:	itte	eq
    b162:	eoreq.w	r0, r0, #8388608	; 0x800000
    b166:	addeq	r2, #1
    b168:	subne	r3, #1
    b16a:	b.n	b0d8 <__addsf3+0x58>
    b16c:	mov.w	r3, r1, lsl #1
    b170:	mvns.w	ip, r2, asr #24
    b174:	it	ne
    b176:	mvnsne.w	ip, r3, asr #24
    b17a:	beq.n	b1c0 <__addsf3+0x140>
    b17c:	teq	r2, r3
    b180:	beq.n	b18c <__addsf3+0x10c>
    b182:	teq	r2, #0
    b186:	it	eq
    b188:	moveq	r0, r1
    b18a:	bx	lr
    b18c:	teq	r0, r1
    b190:	itt	ne
    b192:	movne	r0, #0
    b194:	bxne	lr
    b196:	tst.w	r2, #4278190080	; 0xff000000
    b19a:	bne.n	b1a6 <__addsf3+0x126>
    b19c:	lsls	r0, r0, #1
    b19e:	it	cs
    b1a0:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    b1a4:	bx	lr
    b1a6:	adds.w	r2, r2, #33554432	; 0x2000000
    b1aa:	itt	cc
    b1ac:	addcc.w	r0, r0, #8388608	; 0x800000
    b1b0:	bxcc	lr
    b1b2:	and.w	r3, r0, #2147483648	; 0x80000000
    b1b6:	orr.w	r0, r3, #2130706432	; 0x7f000000
    b1ba:	orr.w	r0, r0, #8388608	; 0x800000
    b1be:	bx	lr
    b1c0:	mvns.w	r2, r2, asr #24
    b1c4:	itet	ne
    b1c6:	movne	r0, r1
    b1c8:	mvnseq.w	r3, r3, asr #24
    b1cc:	movne	r1, r0
    b1ce:	lsls	r2, r0, #9
    b1d0:	itte	eq
    b1d2:	movseq.w	r3, r1, lsl #9
    b1d6:	teqeq	r0, r1
    b1da:	orrne.w	r0, r0, #4194304	; 0x400000
    b1de:	bx	lr

0000b1e0 <__aeabi_ui2f>:
    b1e0:	mov.w	r3, #0
    b1e4:	b.n	b1f0 <__aeabi_i2f+0x8>
    b1e6:	nop

0000b1e8 <__aeabi_i2f>:
    b1e8:	ands.w	r3, r0, #2147483648	; 0x80000000
    b1ec:	it	mi
    b1ee:	negmi	r0, r0
    b1f0:	movs.w	ip, r0
    b1f4:	it	eq
    b1f6:	bxeq	lr
    b1f8:	orr.w	r3, r3, #1258291200	; 0x4b000000
    b1fc:	mov	r1, r0
    b1fe:	mov.w	r0, #0
    b202:	b.n	b23e <__aeabi_l2f+0x2a>

0000b204 <__aeabi_ul2f>:
    b204:	orrs.w	r2, r0, r1
    b208:	it	eq
    b20a:	bxeq	lr
    b20c:	mov.w	r3, #0
    b210:	b.n	b228 <__aeabi_l2f+0x14>
    b212:	nop

0000b214 <__aeabi_l2f>:
    b214:	orrs.w	r2, r0, r1
    b218:	it	eq
    b21a:	bxeq	lr
    b21c:	ands.w	r3, r1, #2147483648	; 0x80000000
    b220:	bpl.n	b228 <__aeabi_l2f+0x14>
    b222:	negs	r0, r0
    b224:	sbc.w	r1, r1, r1, lsl #1
    b228:	movs.w	ip, r1
    b22c:	ittt	eq
    b22e:	moveq	ip, r0
    b230:	moveq	r1, r0
    b232:	moveq	r0, #0
    b234:	orr.w	r3, r3, #1526726656	; 0x5b000000
    b238:	it	eq
    b23a:	subeq.w	r3, r3, #268435456	; 0x10000000
    b23e:	sub.w	r3, r3, #8388608	; 0x800000
    b242:	clz	r2, ip
    b246:	subs	r2, #8
    b248:	sub.w	r3, r3, r2, lsl #23
    b24c:	blt.n	b270 <__aeabi_l2f+0x5c>
    b24e:	lsl.w	ip, r1, r2
    b252:	add	r3, ip
    b254:	lsl.w	ip, r0, r2
    b258:	rsb	r2, r2, #32
    b25c:	cmp.w	ip, #2147483648	; 0x80000000
    b260:	lsr.w	r2, r0, r2
    b264:	adc.w	r0, r3, r2
    b268:	it	eq
    b26a:	biceq.w	r0, r0, #1
    b26e:	bx	lr
    b270:	add.w	r2, r2, #32
    b274:	lsl.w	ip, r1, r2
    b278:	rsb	r2, r2, #32
    b27c:	orrs.w	r0, r0, ip, lsl #1
    b280:	lsr.w	r2, r1, r2
    b284:	adc.w	r0, r3, r2
    b288:	it	eq
    b28a:	biceq.w	r0, r0, ip, lsr #31
    b28e:	bx	lr

0000b290 <__aeabi_fmul>:
    b290:	mov.w	ip, #255	; 0xff
    b294:	ands.w	r2, ip, r0, lsr #23
    b298:	ittt	ne
    b29a:	andsne.w	r3, ip, r1, lsr #23
    b29e:	teqne	r2, ip
    b2a2:	teqne	r3, ip
    b2a6:	beq.n	b388 <__aeabi_fmul+0xf8>
    b2a8:	add	r2, r3
    b2aa:	eor.w	ip, r0, r1
    b2ae:	lsls	r0, r0, #9
    b2b0:	it	ne
    b2b2:	movsne.w	r1, r1, lsl #9
    b2b6:	beq.n	b2f6 <__aeabi_fmul+0x66>
    b2b8:	mov.w	r3, #134217728	; 0x8000000
    b2bc:	orr.w	r0, r3, r0, lsr #5
    b2c0:	orr.w	r1, r3, r1, lsr #5
    b2c4:	umull	r3, r1, r0, r1
    b2c8:	and.w	r0, ip, #2147483648	; 0x80000000
    b2cc:	cmp.w	r1, #8388608	; 0x800000
    b2d0:	ittt	cc
    b2d2:	lslcc	r1, r1, #1
    b2d4:	orrcc.w	r1, r1, r3, lsr #31
    b2d8:	lslcc	r3, r3, #1
    b2da:	orr.w	r0, r0, r1
    b2de:	sbc.w	r2, r2, #127	; 0x7f
    b2e2:	cmp	r2, #253	; 0xfd
    b2e4:	bhi.n	b322 <__aeabi_fmul+0x92>
    b2e6:	cmp.w	r3, #2147483648	; 0x80000000
    b2ea:	adc.w	r0, r0, r2, lsl #23
    b2ee:	it	eq
    b2f0:	biceq.w	r0, r0, #1
    b2f4:	bx	lr
    b2f6:	teq	r0, #0
    b2fa:	and.w	ip, ip, #2147483648	; 0x80000000
    b2fe:	it	eq
    b300:	lsleq	r1, r1, #9
    b302:	orr.w	r0, ip, r0, lsr #9
    b306:	orr.w	r0, r0, r1, lsr #9
    b30a:	subs	r2, #127	; 0x7f
    b30c:	ittt	gt
    b30e:	rsbsgt	r3, r2, #255	; 0xff
    b312:	orrgt.w	r0, r0, r2, lsl #23
    b316:	bxgt	lr
    b318:	orr.w	r0, r0, #8388608	; 0x800000
    b31c:	mov.w	r3, #0
    b320:	subs	r2, #1
    b322:	bgt.n	b3e0 <__aeabi_fmul+0x150>
    b324:	cmn.w	r2, #25
    b328:	itt	le
    b32a:	andle.w	r0, r0, #2147483648	; 0x80000000
    b32e:	bxle	lr
    b330:	rsb	r2, r2, #0
    b334:	lsls	r1, r0, #1
    b336:	lsr.w	r1, r1, r2
    b33a:	rsb	r2, r2, #32
    b33e:	lsl.w	ip, r0, r2
    b342:	movs.w	r0, r1, rrx
    b346:	adc.w	r0, r0, #0
    b34a:	orrs.w	r3, r3, ip, lsl #1
    b34e:	it	eq
    b350:	biceq.w	r0, r0, ip, lsr #31
    b354:	bx	lr
    b356:	teq	r2, #0
    b35a:	and.w	ip, r0, #2147483648	; 0x80000000
    b35e:	ittt	eq
    b360:	lsleq	r0, r0, #1
    b362:	tsteq.w	r0, #8388608	; 0x800000
    b366:	subeq	r2, #1
    b368:	beq.n	b35e <__aeabi_fmul+0xce>
    b36a:	orr.w	r0, r0, ip
    b36e:	teq	r3, #0
    b372:	and.w	ip, r1, #2147483648	; 0x80000000
    b376:	ittt	eq
    b378:	lsleq	r1, r1, #1
    b37a:	tsteq.w	r1, #8388608	; 0x800000
    b37e:	subeq	r3, #1
    b380:	beq.n	b376 <__aeabi_fmul+0xe6>
    b382:	orr.w	r1, r1, ip
    b386:	b.n	b2a8 <__aeabi_fmul+0x18>
    b388:	and.w	r3, ip, r1, lsr #23
    b38c:	teq	r2, ip
    b390:	it	ne
    b392:	teqne	r3, ip
    b396:	beq.n	b3ae <__aeabi_fmul+0x11e>
    b398:	bics.w	ip, r0, #2147483648	; 0x80000000
    b39c:	it	ne
    b39e:	bicsne.w	ip, r1, #2147483648	; 0x80000000
    b3a2:	bne.n	b356 <__aeabi_fmul+0xc6>
    b3a4:	eor.w	r0, r0, r1
    b3a8:	and.w	r0, r0, #2147483648	; 0x80000000
    b3ac:	bx	lr
    b3ae:	teq	r0, #0
    b3b2:	itett	ne
    b3b4:	teqne	r0, #2147483648	; 0x80000000
    b3b8:	moveq	r0, r1
    b3ba:	teqne	r1, #0
    b3be:	teqne	r1, #2147483648	; 0x80000000
    b3c2:	beq.n	b3ee <__aeabi_fmul+0x15e>
    b3c4:	teq	r2, ip
    b3c8:	bne.n	b3ce <__aeabi_fmul+0x13e>
    b3ca:	lsls	r2, r0, #9
    b3cc:	bne.n	b3ee <__aeabi_fmul+0x15e>
    b3ce:	teq	r3, ip
    b3d2:	bne.n	b3dc <__aeabi_fmul+0x14c>
    b3d4:	lsls	r3, r1, #9
    b3d6:	it	ne
    b3d8:	movne	r0, r1
    b3da:	bne.n	b3ee <__aeabi_fmul+0x15e>
    b3dc:	eor.w	r0, r0, r1
    b3e0:	and.w	r0, r0, #2147483648	; 0x80000000
    b3e4:	orr.w	r0, r0, #2130706432	; 0x7f000000
    b3e8:	orr.w	r0, r0, #8388608	; 0x800000
    b3ec:	bx	lr
    b3ee:	orr.w	r0, r0, #2130706432	; 0x7f000000
    b3f2:	orr.w	r0, r0, #12582912	; 0xc00000
    b3f6:	bx	lr

0000b3f8 <__aeabi_fdiv>:
    b3f8:	mov.w	ip, #255	; 0xff
    b3fc:	ands.w	r2, ip, r0, lsr #23
    b400:	ittt	ne
    b402:	andsne.w	r3, ip, r1, lsr #23
    b406:	teqne	r2, ip
    b40a:	teqne	r3, ip
    b40e:	beq.n	b4e4 <__aeabi_fdiv+0xec>
    b410:	sub.w	r2, r2, r3
    b414:	eor.w	ip, r0, r1
    b418:	lsls	r1, r1, #9
    b41a:	mov.w	r0, r0, lsl #9
    b41e:	beq.n	b490 <__aeabi_fdiv+0x98>
    b420:	mov.w	r3, #268435456	; 0x10000000
    b424:	orr.w	r1, r3, r1, lsr #4
    b428:	orr.w	r3, r3, r0, lsr #4
    b42c:	and.w	r0, ip, #2147483648	; 0x80000000
    b430:	cmp	r3, r1
    b432:	it	cc
    b434:	lslcc	r3, r3, #1
    b436:	adc.w	r2, r2, #125	; 0x7d
    b43a:	mov.w	ip, #8388608	; 0x800000
    b43e:	cmp	r3, r1
    b440:	itt	cs
    b442:	subcs	r3, r3, r1
    b444:	orrcs.w	r0, r0, ip
    b448:	cmp.w	r3, r1, lsr #1
    b44c:	itt	cs
    b44e:	subcs.w	r3, r3, r1, lsr #1
    b452:	orrcs.w	r0, r0, ip, lsr #1
    b456:	cmp.w	r3, r1, lsr #2
    b45a:	itt	cs
    b45c:	subcs.w	r3, r3, r1, lsr #2
    b460:	orrcs.w	r0, r0, ip, lsr #2
    b464:	cmp.w	r3, r1, lsr #3
    b468:	itt	cs
    b46a:	subcs.w	r3, r3, r1, lsr #3
    b46e:	orrcs.w	r0, r0, ip, lsr #3
    b472:	lsls	r3, r3, #4
    b474:	it	ne
    b476:	movsne.w	ip, ip, lsr #4
    b47a:	bne.n	b43e <__aeabi_fdiv+0x46>
    b47c:	cmp	r2, #253	; 0xfd
    b47e:	bhi.w	b322 <__aeabi_fmul+0x92>
    b482:	cmp	r3, r1
    b484:	adc.w	r0, r0, r2, lsl #23
    b488:	it	eq
    b48a:	biceq.w	r0, r0, #1
    b48e:	bx	lr
    b490:	and.w	ip, ip, #2147483648	; 0x80000000
    b494:	orr.w	r0, ip, r0, lsr #9
    b498:	adds	r2, #127	; 0x7f
    b49a:	ittt	gt
    b49c:	rsbsgt	r3, r2, #255	; 0xff
    b4a0:	orrgt.w	r0, r0, r2, lsl #23
    b4a4:	bxgt	lr
    b4a6:	orr.w	r0, r0, #8388608	; 0x800000
    b4aa:	mov.w	r3, #0
    b4ae:	subs	r2, #1
    b4b0:	b.n	b322 <__aeabi_fmul+0x92>
    b4b2:	teq	r2, #0
    b4b6:	and.w	ip, r0, #2147483648	; 0x80000000
    b4ba:	ittt	eq
    b4bc:	lsleq	r0, r0, #1
    b4be:	tsteq.w	r0, #8388608	; 0x800000
    b4c2:	subeq	r2, #1
    b4c4:	beq.n	b4ba <__aeabi_fdiv+0xc2>
    b4c6:	orr.w	r0, r0, ip
    b4ca:	teq	r3, #0
    b4ce:	and.w	ip, r1, #2147483648	; 0x80000000
    b4d2:	ittt	eq
    b4d4:	lsleq	r1, r1, #1
    b4d6:	tsteq.w	r1, #8388608	; 0x800000
    b4da:	subeq	r3, #1
    b4dc:	beq.n	b4d2 <__aeabi_fdiv+0xda>
    b4de:	orr.w	r1, r1, ip
    b4e2:	b.n	b410 <__aeabi_fdiv+0x18>
    b4e4:	and.w	r3, ip, r1, lsr #23
    b4e8:	teq	r2, ip
    b4ec:	bne.n	b500 <__aeabi_fdiv+0x108>
    b4ee:	lsls	r2, r0, #9
    b4f0:	bne.w	b3ee <__aeabi_fmul+0x15e>
    b4f4:	teq	r3, ip
    b4f8:	bne.w	b3dc <__aeabi_fmul+0x14c>
    b4fc:	mov	r0, r1
    b4fe:	b.n	b3ee <__aeabi_fmul+0x15e>
    b500:	teq	r3, ip
    b504:	bne.n	b510 <__aeabi_fdiv+0x118>
    b506:	lsls	r3, r1, #9
    b508:	beq.w	b3a4 <__aeabi_fmul+0x114>
    b50c:	mov	r0, r1
    b50e:	b.n	b3ee <__aeabi_fmul+0x15e>
    b510:	bics.w	ip, r0, #2147483648	; 0x80000000
    b514:	it	ne
    b516:	bicsne.w	ip, r1, #2147483648	; 0x80000000
    b51a:	bne.n	b4b2 <__aeabi_fdiv+0xba>
    b51c:	bics.w	r2, r0, #2147483648	; 0x80000000
    b520:	bne.w	b3dc <__aeabi_fmul+0x14c>
    b524:	bics.w	r3, r1, #2147483648	; 0x80000000
    b528:	bne.w	b3a4 <__aeabi_fmul+0x114>
    b52c:	b.n	b3ee <__aeabi_fmul+0x15e>
    b52e:	nop

0000b530 <__gesf2>:
    b530:	mov.w	ip, #4294967295
    b534:	b.n	b544 <__cmpsf2+0x4>
    b536:	nop

0000b538 <__lesf2>:
    b538:	mov.w	ip, #1
    b53c:	b.n	b544 <__cmpsf2+0x4>
    b53e:	nop

0000b540 <__cmpsf2>:
    b540:	mov.w	ip, #1
    b544:	str.w	ip, [sp, #-4]!
    b548:	mov.w	r2, r0, lsl #1
    b54c:	mov.w	r3, r1, lsl #1
    b550:	mvns.w	ip, r2, asr #24
    b554:	it	ne
    b556:	mvnsne.w	ip, r3, asr #24
    b55a:	beq.n	b580 <__cmpsf2+0x40>
    b55c:	add	sp, #4
    b55e:	orrs.w	ip, r2, r3, lsr #1
    b562:	it	ne
    b564:	teqne	r0, r1
    b568:	it	pl
    b56a:	subspl.w	r0, r2, r3
    b56e:	it	hi
    b570:	asrhi	r0, r1, #31
    b572:	it	cc
    b574:	mvncc.w	r0, r1, asr #31
    b578:	it	ne
    b57a:	orrne.w	r0, r0, #1
    b57e:	bx	lr
    b580:	mvns.w	ip, r2, asr #24
    b584:	bne.n	b58c <__cmpsf2+0x4c>
    b586:	movs.w	ip, r0, lsl #9
    b58a:	bne.n	b598 <__cmpsf2+0x58>
    b58c:	mvns.w	ip, r3, asr #24
    b590:	bne.n	b55c <__cmpsf2+0x1c>
    b592:	movs.w	ip, r1, lsl #9
    b596:	beq.n	b55c <__cmpsf2+0x1c>
    b598:	ldr.w	r0, [sp], #4
    b59c:	bx	lr
    b59e:	nop

0000b5a0 <__aeabi_cfrcmple>:
    b5a0:	mov	ip, r0
    b5a2:	mov	r0, r1
    b5a4:	mov	r1, ip
    b5a6:	b.n	b5a8 <__aeabi_cfcmpeq>

0000b5a8 <__aeabi_cfcmpeq>:
    b5a8:	push	{r0, r1, r2, r3, lr}
    b5aa:	bl	b540 <__cmpsf2>
    b5ae:	cmp	r0, #0
    b5b0:	it	mi
    b5b2:	cmnmi.w	r0, #0
    b5b6:	pop	{r0, r1, r2, r3, pc}

0000b5b8 <__aeabi_fcmpeq>:
    b5b8:	str.w	lr, [sp, #-8]!
    b5bc:	bl	b5a8 <__aeabi_cfcmpeq>
    b5c0:	ite	eq
    b5c2:	moveq	r0, #1
    b5c4:	movne	r0, #0
    b5c6:	ldr.w	pc, [sp], #8
    b5ca:	nop

0000b5cc <__aeabi_fcmplt>:
    b5cc:	str.w	lr, [sp, #-8]!
    b5d0:	bl	b5a8 <__aeabi_cfcmpeq>
    b5d4:	ite	cc
    b5d6:	movcc	r0, #1
    b5d8:	movcs	r0, #0
    b5da:	ldr.w	pc, [sp], #8
    b5de:	nop

0000b5e0 <__aeabi_fcmple>:
    b5e0:	str.w	lr, [sp, #-8]!
    b5e4:	bl	b5a8 <__aeabi_cfcmpeq>
    b5e8:	ite	ls
    b5ea:	movls	r0, #1
    b5ec:	movhi	r0, #0
    b5ee:	ldr.w	pc, [sp], #8
    b5f2:	nop

0000b5f4 <__aeabi_fcmpge>:
    b5f4:	str.w	lr, [sp, #-8]!
    b5f8:	bl	b5a0 <__aeabi_cfrcmple>
    b5fc:	ite	ls
    b5fe:	movls	r0, #1
    b600:	movhi	r0, #0
    b602:	ldr.w	pc, [sp], #8
    b606:	nop

0000b608 <__aeabi_fcmpgt>:
    b608:	str.w	lr, [sp, #-8]!
    b60c:	bl	b5a0 <__aeabi_cfrcmple>
    b610:	ite	cc
    b612:	movcc	r0, #1
    b614:	movcs	r0, #0
    b616:	ldr.w	pc, [sp], #8
    b61a:	nop

0000b61c <__aeabi_f2iz>:
    b61c:	mov.w	r2, r0, lsl #1
    b620:	cmp.w	r2, #2130706432	; 0x7f000000
    b624:	bcc.n	b646 <__aeabi_f2iz+0x2a>
    b626:	mov.w	r3, #158	; 0x9e
    b62a:	subs.w	r2, r3, r2, lsr #24
    b62e:	bls.n	b64c <__aeabi_f2iz+0x30>
    b630:	mov.w	r3, r0, lsl #8
    b634:	orr.w	r3, r3, #2147483648	; 0x80000000
    b638:	tst.w	r0, #2147483648	; 0x80000000
    b63c:	lsr.w	r0, r3, r2
    b640:	it	ne
    b642:	negne	r0, r0
    b644:	bx	lr
    b646:	mov.w	r0, #0
    b64a:	bx	lr
    b64c:	cmn.w	r2, #97	; 0x61
    b650:	bne.n	b656 <__aeabi_f2iz+0x3a>
    b652:	lsls	r2, r0, #9
    b654:	bne.n	b662 <__aeabi_f2iz+0x46>
    b656:	ands.w	r0, r0, #2147483648	; 0x80000000
    b65a:	it	eq
    b65c:	mvneq.w	r0, #2147483648	; 0x80000000
    b660:	bx	lr
    b662:	mov.w	r0, #0
    b666:	bx	lr

0000b668 <__aeabi_f2uiz>:
    b668:	lsls	r2, r0, #1
    b66a:	bcs.n	b68a <__aeabi_f2uiz+0x22>
    b66c:	cmp.w	r2, #2130706432	; 0x7f000000
    b670:	bcc.n	b68a <__aeabi_f2uiz+0x22>
    b672:	mov.w	r3, #158	; 0x9e
    b676:	subs.w	r2, r3, r2, lsr #24
    b67a:	bmi.n	b690 <__aeabi_f2uiz+0x28>
    b67c:	mov.w	r3, r0, lsl #8
    b680:	orr.w	r3, r3, #2147483648	; 0x80000000
    b684:	lsr.w	r0, r3, r2
    b688:	bx	lr
    b68a:	mov.w	r0, #0
    b68e:	bx	lr
    b690:	cmn.w	r2, #97	; 0x61
    b694:	bne.n	b69a <__aeabi_f2uiz+0x32>
    b696:	lsls	r2, r0, #9
    b698:	bne.n	b6a0 <__aeabi_f2uiz+0x38>
    b69a:	mov.w	r0, #4294967295
    b69e:	bx	lr
    b6a0:	mov.w	r0, #0
    b6a4:	bx	lr
    b6a6:	nop

0000b6a8 <__aeabi_atexit>:
    b6a8:	mov	r3, r1
    b6aa:	mov	r1, r0
    b6ac:	mov	r0, r3
    b6ae:	b.w	b6b4 <__cxa_atexit>
    b6b2:	nop

0000b6b4 <__cxa_atexit>:
    b6b4:	mov	r3, r2
    b6b6:	mov	r2, r1
    b6b8:	mov	r1, r0
    b6ba:	movs	r0, #2
    b6bc:	b.w	c304 <__register_exitproc>

0000b6c0 <__errno>:
    b6c0:	ldr	r3, [pc, #4]	; (b6c8 <__errno+0x8>)
    b6c2:	ldr	r0, [r3, #0]
    b6c4:	bx	lr
    b6c6:	nop
    b6c8:	.word	0x1fff9b38

0000b6cc <__libc_init_array>:
    b6cc:	push	{r4, r5, r6, lr}
    b6ce:	ldr	r6, [pc, #60]	; (b70c <__libc_init_array+0x40>)
    b6d0:	ldr	r5, [pc, #60]	; (b710 <__libc_init_array+0x44>)
    b6d2:	subs	r6, r6, r5
    b6d4:	asrs	r6, r6, #2
    b6d6:	it	ne
    b6d8:	movne	r4, #0
    b6da:	beq.n	b6e8 <__libc_init_array+0x1c>
    b6dc:	adds	r4, #1
    b6de:	ldr.w	r3, [r5], #4
    b6e2:	blx	r3
    b6e4:	cmp	r6, r4
    b6e6:	bne.n	b6dc <__libc_init_array+0x10>
    b6e8:	ldr	r6, [pc, #40]	; (b714 <__libc_init_array+0x48>)
    b6ea:	ldr	r5, [pc, #44]	; (b718 <__libc_init_array+0x4c>)
    b6ec:	subs	r6, r6, r5
    b6ee:	bl	cd08 <_init>
    b6f2:	asrs	r6, r6, #2
    b6f4:	it	ne
    b6f6:	movne	r4, #0
    b6f8:	beq.n	b708 <__libc_init_array+0x3c>
    b6fa:	adds	r4, #1
    b6fc:	ldr.w	r3, [r5], #4
    b700:	blx	r3
    b702:	cmp	r6, r4
    b704:	bne.n	b6fa <__libc_init_array+0x2e>
    b706:	pop	{r4, r5, r6, pc}
    b708:	pop	{r4, r5, r6, pc}
    b70a:	nop
    b70c:	.word	0x0000cd14
    b710:	.word	0x0000cd14
    b714:	.word	0x0000cd64
    b718:	.word	0x0000cd14

0000b71c <malloc>:
    b71c:	ldr	r3, [pc, #8]	; (b728 <malloc+0xc>)
    b71e:	mov	r1, r0
    b720:	ldr	r0, [r3, #0]
    b722:	b.w	b73c <_malloc_r>
    b726:	nop
    b728:	.word	0x1fff9b38

0000b72c <free>:
    b72c:	ldr	r3, [pc, #8]	; (b738 <free+0xc>)
    b72e:	mov	r1, r0
    b730:	ldr	r0, [r3, #0]
    b732:	b.w	c480 <_free_r>
    b736:	nop
    b738:	.word	0x1fff9b38

0000b73c <_malloc_r>:
    b73c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b740:	add.w	r5, r1, #11
    b744:	cmp	r5, #22
    b746:	sub	sp, #12
    b748:	mov	r6, r0
    b74a:	bls.w	b88c <_malloc_r+0x150>
    b74e:	bics.w	r5, r5, #7
    b752:	bmi.w	b8d4 <_malloc_r+0x198>
    b756:	cmp	r1, r5
    b758:	bhi.w	b8d4 <_malloc_r+0x198>
    b75c:	bl	bdac <__malloc_lock>
    b760:	cmp.w	r5, #504	; 0x1f8
    b764:	bcc.w	bca0 <_malloc_r+0x564>
    b768:	lsrs	r3, r5, #9
    b76a:	beq.w	b8e2 <_malloc_r+0x1a6>
    b76e:	cmp	r3, #4
    b770:	bhi.w	ba7a <_malloc_r+0x33e>
    b774:	lsrs	r0, r5, #6
    b776:	add.w	lr, r0, #57	; 0x39
    b77a:	mov.w	r3, lr, lsl #1
    b77e:	adds	r0, #56	; 0x38
    b780:	ldr	r7, [pc, #784]	; (ba94 <_malloc_r+0x358>)
    b782:	add.w	r3, r7, r3, lsl #2
    b786:	sub.w	r1, r3, #8
    b78a:	ldr	r4, [r3, #4]
    b78c:	cmp	r1, r4
    b78e:	bne.n	b7a0 <_malloc_r+0x64>
    b790:	b.n	b8ec <_malloc_r+0x1b0>
    b792:	cmp	r2, #0
    b794:	bge.w	b8f0 <_malloc_r+0x1b4>
    b798:	ldr	r4, [r4, #12]
    b79a:	cmp	r1, r4
    b79c:	beq.w	b8ec <_malloc_r+0x1b0>
    b7a0:	ldr	r3, [r4, #4]
    b7a2:	bic.w	r3, r3, #3
    b7a6:	subs	r2, r3, r5
    b7a8:	cmp	r2, #15
    b7aa:	ble.n	b792 <_malloc_r+0x56>
    b7ac:	ldr	r1, [pc, #740]	; (ba94 <_malloc_r+0x358>)
    b7ae:	ldr	r4, [r7, #16]
    b7b0:	add.w	lr, r1, #8
    b7b4:	cmp	r4, lr
    b7b6:	beq.w	bb20 <_malloc_r+0x3e4>
    b7ba:	ldr	r3, [r4, #4]
    b7bc:	bic.w	r3, r3, #3
    b7c0:	subs	r2, r3, r5
    b7c2:	cmp	r2, #15
    b7c4:	bgt.w	bafa <_malloc_r+0x3be>
    b7c8:	cmp	r2, #0
    b7ca:	str.w	lr, [r1, #20]
    b7ce:	str.w	lr, [r1, #16]
    b7d2:	bge.w	b912 <_malloc_r+0x1d6>
    b7d6:	cmp.w	r3, #512	; 0x200
    b7da:	bcs.w	baac <_malloc_r+0x370>
    b7de:	lsrs	r3, r3, #3
    b7e0:	add.w	ip, r3, #1
    b7e4:	movs	r2, #1
    b7e6:	asrs	r3, r3, #2
    b7e8:	lsl.w	r3, r2, r3
    b7ec:	ldr	r2, [r1, #4]
    b7ee:	ldr.w	r8, [r1, ip, lsl #3]
    b7f2:	str.w	r8, [r4, #8]
    b7f6:	add.w	r9, r1, ip, lsl #3
    b7fa:	orrs	r2, r3
    b7fc:	sub.w	r3, r9, #8
    b800:	str	r3, [r4, #12]
    b802:	str	r2, [r1, #4]
    b804:	str.w	r4, [r1, ip, lsl #3]
    b808:	str.w	r4, [r8, #12]
    b80c:	asrs	r3, r0, #2
    b80e:	movs	r4, #1
    b810:	lsls	r4, r3
    b812:	cmp	r4, r2
    b814:	bhi.w	b92c <_malloc_r+0x1f0>
    b818:	tst	r4, r2
    b81a:	bne.n	b82a <_malloc_r+0xee>
    b81c:	bic.w	r0, r0, #3
    b820:	lsls	r4, r4, #1
    b822:	tst	r4, r2
    b824:	add.w	r0, r0, #4
    b828:	beq.n	b820 <_malloc_r+0xe4>
    b82a:	add.w	r9, r7, r0, lsl #3
    b82e:	mov	ip, r9
    b830:	mov	r8, r0
    b832:	ldr.w	r1, [ip, #12]
    b836:	cmp	ip, r1
    b838:	bne.n	b84a <_malloc_r+0x10e>
    b83a:	b.n	bb24 <_malloc_r+0x3e8>
    b83c:	cmp	r2, #0
    b83e:	bge.w	bb44 <_malloc_r+0x408>
    b842:	ldr	r1, [r1, #12]
    b844:	cmp	ip, r1
    b846:	beq.w	bb24 <_malloc_r+0x3e8>
    b84a:	ldr	r3, [r1, #4]
    b84c:	bic.w	r3, r3, #3
    b850:	subs	r2, r3, r5
    b852:	cmp	r2, #15
    b854:	ble.n	b83c <_malloc_r+0x100>
    b856:	mov	r4, r1
    b858:	ldr.w	ip, [r1, #12]
    b85c:	ldr.w	r8, [r4, #8]!
    b860:	adds	r3, r1, r5
    b862:	orr.w	r5, r5, #1
    b866:	str	r5, [r1, #4]
    b868:	orr.w	r1, r2, #1
    b86c:	str.w	ip, [r8, #12]
    b870:	mov	r0, r6
    b872:	str.w	r8, [ip, #8]
    b876:	str	r3, [r7, #20]
    b878:	str	r3, [r7, #16]
    b87a:	str.w	lr, [r3, #12]
    b87e:	str.w	lr, [r3, #8]
    b882:	str	r1, [r3, #4]
    b884:	str	r2, [r3, r2]
    b886:	bl	bdb0 <__malloc_unlock>
    b88a:	b.n	b8cc <_malloc_r+0x190>
    b88c:	cmp	r1, #16
    b88e:	bhi.n	b8d4 <_malloc_r+0x198>
    b890:	bl	bdac <__malloc_lock>
    b894:	movs	r5, #16
    b896:	movs	r3, #6
    b898:	movs	r0, #2
    b89a:	ldr	r7, [pc, #504]	; (ba94 <_malloc_r+0x358>)
    b89c:	add.w	r3, r7, r3, lsl #2
    b8a0:	sub.w	r2, r3, #8
    b8a4:	ldr	r4, [r3, #4]
    b8a6:	cmp	r4, r2
    b8a8:	beq.w	bb36 <_malloc_r+0x3fa>
    b8ac:	ldr	r3, [r4, #4]
    b8ae:	ldr	r1, [r4, #12]
    b8b0:	ldr	r5, [r4, #8]
    b8b2:	bic.w	r3, r3, #3
    b8b6:	add	r3, r4
    b8b8:	mov	r0, r6
    b8ba:	ldr	r2, [r3, #4]
    b8bc:	str	r1, [r5, #12]
    b8be:	orr.w	r2, r2, #1
    b8c2:	str	r5, [r1, #8]
    b8c4:	str	r2, [r3, #4]
    b8c6:	bl	bdb0 <__malloc_unlock>
    b8ca:	adds	r4, #8
    b8cc:	mov	r0, r4
    b8ce:	add	sp, #12
    b8d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8d4:	movs	r4, #0
    b8d6:	movs	r3, #12
    b8d8:	mov	r0, r4
    b8da:	str	r3, [r6, #0]
    b8dc:	add	sp, #12
    b8de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8e2:	movs	r3, #128	; 0x80
    b8e4:	mov.w	lr, #64	; 0x40
    b8e8:	movs	r0, #63	; 0x3f
    b8ea:	b.n	b780 <_malloc_r+0x44>
    b8ec:	mov	r0, lr
    b8ee:	b.n	b7ac <_malloc_r+0x70>
    b8f0:	add	r3, r4
    b8f2:	ldr	r1, [r4, #12]
    b8f4:	ldr	r2, [r3, #4]
    b8f6:	ldr	r5, [r4, #8]
    b8f8:	orr.w	r2, r2, #1
    b8fc:	str	r1, [r5, #12]
    b8fe:	mov	r0, r6
    b900:	str	r5, [r1, #8]
    b902:	str	r2, [r3, #4]
    b904:	bl	bdb0 <__malloc_unlock>
    b908:	adds	r4, #8
    b90a:	mov	r0, r4
    b90c:	add	sp, #12
    b90e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b912:	add	r3, r4
    b914:	mov	r0, r6
    b916:	ldr	r2, [r3, #4]
    b918:	orr.w	r2, r2, #1
    b91c:	str	r2, [r3, #4]
    b91e:	bl	bdb0 <__malloc_unlock>
    b922:	adds	r4, #8
    b924:	mov	r0, r4
    b926:	add	sp, #12
    b928:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b92c:	ldr	r4, [r7, #8]
    b92e:	ldr	r3, [r4, #4]
    b930:	bic.w	r8, r3, #3
    b934:	cmp	r8, r5
    b936:	bcc.n	b942 <_malloc_r+0x206>
    b938:	rsb	r3, r5, r8
    b93c:	cmp	r3, #15
    b93e:	bgt.w	ba5a <_malloc_r+0x31e>
    b942:	ldr	r3, [pc, #340]	; (ba98 <_malloc_r+0x35c>)
    b944:	ldr.w	r9, [pc, #352]	; baa8 <_malloc_r+0x36c>
    b948:	ldr	r2, [r3, #0]
    b94a:	ldr.w	r3, [r9]
    b94e:	adds	r3, #1
    b950:	add	r2, r5
    b952:	add.w	sl, r4, r8
    b956:	beq.w	bc1a <_malloc_r+0x4de>
    b95a:	add.w	r2, r2, #4096	; 0x1000
    b95e:	adds	r2, #15
    b960:	bic.w	r2, r2, #4080	; 0xff0
    b964:	bic.w	r2, r2, #15
    b968:	mov	r1, r2
    b96a:	mov	r0, r6
    b96c:	str	r2, [sp, #4]
    b96e:	bl	bdb4 <_sbrk_r>
    b972:	cmp.w	r0, #4294967295
    b976:	mov	fp, r0
    b978:	ldr	r2, [sp, #4]
    b97a:	beq.w	bc2e <_malloc_r+0x4f2>
    b97e:	cmp	sl, r0
    b980:	bhi.w	bb7c <_malloc_r+0x440>
    b984:	ldr	r3, [pc, #276]	; (ba9c <_malloc_r+0x360>)
    b986:	ldr	r1, [r3, #0]
    b988:	cmp	sl, fp
    b98a:	add	r1, r2
    b98c:	str	r1, [r3, #0]
    b98e:	beq.w	bc38 <_malloc_r+0x4fc>
    b992:	ldr.w	r0, [r9]
    b996:	ldr.w	lr, [pc, #272]	; baa8 <_malloc_r+0x36c>
    b99a:	adds	r0, #1
    b99c:	ittet	ne
    b99e:	rsbne	sl, sl, fp
    b9a2:	addne	r1, sl
    b9a4:	streq.w	fp, [lr]
    b9a8:	strne	r1, [r3, #0]
    b9aa:	ands.w	r1, fp, #7
    b9ae:	beq.w	bbe0 <_malloc_r+0x4a4>
    b9b2:	rsb	r0, r1, #8
    b9b6:	rsb	r1, r1, #4096	; 0x1000
    b9ba:	add	fp, r0
    b9bc:	adds	r1, #8
    b9be:	add	r2, fp
    b9c0:	ubfx	r2, r2, #0, #12
    b9c4:	rsb	r9, r2, r1
    b9c8:	mov	r1, r9
    b9ca:	mov	r0, r6
    b9cc:	str	r3, [sp, #4]
    b9ce:	bl	bdb4 <_sbrk_r>
    b9d2:	adds	r3, r0, #1
    b9d4:	ldr	r3, [sp, #4]
    b9d6:	beq.w	bc58 <_malloc_r+0x51c>
    b9da:	rsb	r2, fp, r0
    b9de:	add	r2, r9
    b9e0:	orr.w	r2, r2, #1
    b9e4:	ldr	r1, [r3, #0]
    b9e6:	str.w	fp, [r7, #8]
    b9ea:	add	r1, r9
    b9ec:	cmp	r4, r7
    b9ee:	str.w	r2, [fp, #4]
    b9f2:	str	r1, [r3, #0]
    b9f4:	ldr.w	r9, [pc, #164]	; ba9c <_malloc_r+0x360>
    b9f8:	beq.n	ba28 <_malloc_r+0x2ec>
    b9fa:	cmp.w	r8, #15
    b9fe:	bls.w	bbfc <_malloc_r+0x4c0>
    ba02:	ldr	r2, [r4, #4]
    ba04:	sub.w	r3, r8, #12
    ba08:	bic.w	r3, r3, #7
    ba0c:	adds	r0, r4, r3
    ba0e:	and.w	r2, r2, #1
    ba12:	mov.w	lr, #5
    ba16:	orrs	r2, r3
    ba18:	cmp	r3, #15
    ba1a:	str	r2, [r4, #4]
    ba1c:	str.w	lr, [r0, #4]
    ba20:	str.w	lr, [r0, #8]
    ba24:	bhi.w	bc60 <_malloc_r+0x524>
    ba28:	ldr	r3, [pc, #116]	; (baa0 <_malloc_r+0x364>)
    ba2a:	ldr	r4, [r7, #8]
    ba2c:	ldr	r2, [r3, #0]
    ba2e:	cmp	r1, r2
    ba30:	it	hi
    ba32:	strhi	r1, [r3, #0]
    ba34:	ldr	r3, [pc, #108]	; (baa4 <_malloc_r+0x368>)
    ba36:	ldr	r2, [r3, #0]
    ba38:	cmp	r1, r2
    ba3a:	ldr	r2, [r4, #4]
    ba3c:	it	hi
    ba3e:	strhi	r1, [r3, #0]
    ba40:	bic.w	r2, r2, #3
    ba44:	cmp	r5, r2
    ba46:	sub.w	r3, r2, r5
    ba4a:	bhi.n	ba50 <_malloc_r+0x314>
    ba4c:	cmp	r3, #15
    ba4e:	bgt.n	ba5a <_malloc_r+0x31e>
    ba50:	mov	r0, r6
    ba52:	bl	bdb0 <__malloc_unlock>
    ba56:	movs	r4, #0
    ba58:	b.n	b8cc <_malloc_r+0x190>
    ba5a:	adds	r2, r4, r5
    ba5c:	orr.w	r3, r3, #1
    ba60:	orr.w	r5, r5, #1
    ba64:	str	r5, [r4, #4]
    ba66:	mov	r0, r6
    ba68:	str	r2, [r7, #8]
    ba6a:	str	r3, [r2, #4]
    ba6c:	bl	bdb0 <__malloc_unlock>
    ba70:	adds	r4, #8
    ba72:	mov	r0, r4
    ba74:	add	sp, #12
    ba76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba7a:	cmp	r3, #20
    ba7c:	bls.n	bb62 <_malloc_r+0x426>
    ba7e:	cmp	r3, #84	; 0x54
    ba80:	bhi.w	bbcc <_malloc_r+0x490>
    ba84:	lsrs	r0, r5, #12
    ba86:	add.w	lr, r0, #111	; 0x6f
    ba8a:	mov.w	r3, lr, lsl #1
    ba8e:	adds	r0, #110	; 0x6e
    ba90:	b.n	b780 <_malloc_r+0x44>
    ba92:	nop
    ba94:	.word	0x1fff9b3c
    ba98:	.word	0x1fffbfa4
    ba9c:	.word	0x1fffbfa8
    baa0:	.word	0x1fffbfa0
    baa4:	.word	0x1fffbf9c
    baa8:	.word	0x1fff9f48
    baac:	lsrs	r2, r3, #9
    baae:	cmp	r2, #4
    bab0:	bls.n	bb70 <_malloc_r+0x434>
    bab2:	cmp	r2, #20
    bab4:	bhi.w	bc1e <_malloc_r+0x4e2>
    bab8:	add.w	r1, r2, #92	; 0x5c
    babc:	lsls	r1, r1, #1
    babe:	adds	r2, #91	; 0x5b
    bac0:	add.w	ip, r7, r1, lsl #2
    bac4:	ldr.w	r1, [r7, r1, lsl #2]
    bac8:	ldr.w	r8, [pc, #476]	; bca8 <_malloc_r+0x56c>
    bacc:	sub.w	ip, ip, #8
    bad0:	cmp	ip, r1
    bad2:	beq.w	bbe6 <_malloc_r+0x4aa>
    bad6:	ldr	r2, [r1, #4]
    bad8:	bic.w	r2, r2, #3
    badc:	cmp	r3, r2
    bade:	bcs.n	bae6 <_malloc_r+0x3aa>
    bae0:	ldr	r1, [r1, #8]
    bae2:	cmp	ip, r1
    bae4:	bne.n	bad6 <_malloc_r+0x39a>
    bae6:	ldr.w	ip, [r1, #12]
    baea:	ldr	r2, [r7, #4]
    baec:	str.w	ip, [r4, #12]
    baf0:	str	r1, [r4, #8]
    baf2:	str.w	r4, [ip, #8]
    baf6:	str	r4, [r1, #12]
    baf8:	b.n	b80c <_malloc_r+0xd0>
    bafa:	adds	r3, r4, r5
    bafc:	orr.w	r7, r2, #1
    bb00:	orr.w	r5, r5, #1
    bb04:	str	r5, [r4, #4]
    bb06:	mov	r0, r6
    bb08:	str	r3, [r1, #20]
    bb0a:	str	r3, [r1, #16]
    bb0c:	str.w	lr, [r3, #12]
    bb10:	str.w	lr, [r3, #8]
    bb14:	str	r7, [r3, #4]
    bb16:	str	r2, [r3, r2]
    bb18:	adds	r4, #8
    bb1a:	bl	bdb0 <__malloc_unlock>
    bb1e:	b.n	b8cc <_malloc_r+0x190>
    bb20:	ldr	r2, [r1, #4]
    bb22:	b.n	b80c <_malloc_r+0xd0>
    bb24:	add.w	r8, r8, #1
    bb28:	tst.w	r8, #3
    bb2c:	add.w	ip, ip, #8
    bb30:	bne.w	b832 <_malloc_r+0xf6>
    bb34:	b.n	bb98 <_malloc_r+0x45c>
    bb36:	ldr	r4, [r3, #12]
    bb38:	cmp	r3, r4
    bb3a:	it	eq
    bb3c:	addeq	r0, #2
    bb3e:	beq.w	b7ac <_malloc_r+0x70>
    bb42:	b.n	b8ac <_malloc_r+0x170>
    bb44:	add	r3, r1
    bb46:	mov	r4, r1
    bb48:	ldr	r2, [r3, #4]
    bb4a:	ldr	r1, [r1, #12]
    bb4c:	ldr.w	r5, [r4, #8]!
    bb50:	orr.w	r2, r2, #1
    bb54:	str	r2, [r3, #4]
    bb56:	mov	r0, r6
    bb58:	str	r1, [r5, #12]
    bb5a:	str	r5, [r1, #8]
    bb5c:	bl	bdb0 <__malloc_unlock>
    bb60:	b.n	b8cc <_malloc_r+0x190>
    bb62:	add.w	lr, r3, #92	; 0x5c
    bb66:	add.w	r0, r3, #91	; 0x5b
    bb6a:	mov.w	r3, lr, lsl #1
    bb6e:	b.n	b780 <_malloc_r+0x44>
    bb70:	lsrs	r2, r3, #6
    bb72:	add.w	r1, r2, #57	; 0x39
    bb76:	lsls	r1, r1, #1
    bb78:	adds	r2, #56	; 0x38
    bb7a:	b.n	bac0 <_malloc_r+0x384>
    bb7c:	cmp	r4, r7
    bb7e:	ldr	r3, [pc, #296]	; (bca8 <_malloc_r+0x56c>)
    bb80:	beq.w	b984 <_malloc_r+0x248>
    bb84:	ldr	r4, [r3, #8]
    bb86:	ldr	r2, [r4, #4]
    bb88:	bic.w	r2, r2, #3
    bb8c:	b.n	ba44 <_malloc_r+0x308>
    bb8e:	ldr.w	r3, [r9], #-8
    bb92:	cmp	r9, r3
    bb94:	bne.w	bc9c <_malloc_r+0x560>
    bb98:	tst.w	r0, #3
    bb9c:	add.w	r0, r0, #4294967295
    bba0:	bne.n	bb8e <_malloc_r+0x452>
    bba2:	ldr	r3, [r7, #4]
    bba4:	bic.w	r3, r3, r4
    bba8:	str	r3, [r7, #4]
    bbaa:	lsls	r4, r4, #1
    bbac:	cmp	r4, r3
    bbae:	bhi.w	b92c <_malloc_r+0x1f0>
    bbb2:	cmp	r4, #0
    bbb4:	beq.w	b92c <_malloc_r+0x1f0>
    bbb8:	tst	r4, r3
    bbba:	mov	r0, r8
    bbbc:	bne.w	b82a <_malloc_r+0xee>
    bbc0:	lsls	r4, r4, #1
    bbc2:	tst	r4, r3
    bbc4:	add.w	r0, r0, #4
    bbc8:	beq.n	bbc0 <_malloc_r+0x484>
    bbca:	b.n	b82a <_malloc_r+0xee>
    bbcc:	cmp.w	r3, #340	; 0x154
    bbd0:	bhi.n	bc04 <_malloc_r+0x4c8>
    bbd2:	lsrs	r0, r5, #15
    bbd4:	add.w	lr, r0, #120	; 0x78
    bbd8:	mov.w	r3, lr, lsl #1
    bbdc:	adds	r0, #119	; 0x77
    bbde:	b.n	b780 <_malloc_r+0x44>
    bbe0:	mov.w	r1, #4096	; 0x1000
    bbe4:	b.n	b9be <_malloc_r+0x282>
    bbe6:	movs	r1, #1
    bbe8:	ldr.w	r3, [r8, #4]
    bbec:	asrs	r2, r2, #2
    bbee:	lsl.w	r2, r1, r2
    bbf2:	orrs	r2, r3
    bbf4:	str.w	r2, [r8, #4]
    bbf8:	mov	r1, ip
    bbfa:	b.n	baec <_malloc_r+0x3b0>
    bbfc:	movs	r3, #1
    bbfe:	str.w	r3, [fp, #4]
    bc02:	b.n	ba50 <_malloc_r+0x314>
    bc04:	movw	r2, #1364	; 0x554
    bc08:	cmp	r3, r2
    bc0a:	bhi.n	bc4e <_malloc_r+0x512>
    bc0c:	lsrs	r0, r5, #18
    bc0e:	add.w	lr, r0, #125	; 0x7d
    bc12:	mov.w	r3, lr, lsl #1
    bc16:	adds	r0, #124	; 0x7c
    bc18:	b.n	b780 <_malloc_r+0x44>
    bc1a:	adds	r2, #16
    bc1c:	b.n	b968 <_malloc_r+0x22c>
    bc1e:	cmp	r2, #84	; 0x54
    bc20:	bhi.n	bc70 <_malloc_r+0x534>
    bc22:	lsrs	r2, r3, #12
    bc24:	add.w	r1, r2, #111	; 0x6f
    bc28:	lsls	r1, r1, #1
    bc2a:	adds	r2, #110	; 0x6e
    bc2c:	b.n	bac0 <_malloc_r+0x384>
    bc2e:	ldr	r4, [r7, #8]
    bc30:	ldr	r2, [r4, #4]
    bc32:	bic.w	r2, r2, #3
    bc36:	b.n	ba44 <_malloc_r+0x308>
    bc38:	ubfx	r0, sl, #0, #12
    bc3c:	cmp	r0, #0
    bc3e:	bne.w	b992 <_malloc_r+0x256>
    bc42:	add	r2, r8
    bc44:	ldr	r3, [r7, #8]
    bc46:	orr.w	r2, r2, #1
    bc4a:	str	r2, [r3, #4]
    bc4c:	b.n	ba28 <_malloc_r+0x2ec>
    bc4e:	movs	r3, #254	; 0xfe
    bc50:	mov.w	lr, #127	; 0x7f
    bc54:	movs	r0, #126	; 0x7e
    bc56:	b.n	b780 <_malloc_r+0x44>
    bc58:	movs	r2, #1
    bc5a:	mov.w	r9, #0
    bc5e:	b.n	b9e4 <_malloc_r+0x2a8>
    bc60:	add.w	r1, r4, #8
    bc64:	mov	r0, r6
    bc66:	bl	c480 <_free_r>
    bc6a:	ldr.w	r1, [r9]
    bc6e:	b.n	ba28 <_malloc_r+0x2ec>
    bc70:	cmp.w	r2, #340	; 0x154
    bc74:	bhi.n	bc82 <_malloc_r+0x546>
    bc76:	lsrs	r2, r3, #15
    bc78:	add.w	r1, r2, #120	; 0x78
    bc7c:	lsls	r1, r1, #1
    bc7e:	adds	r2, #119	; 0x77
    bc80:	b.n	bac0 <_malloc_r+0x384>
    bc82:	movw	r1, #1364	; 0x554
    bc86:	cmp	r2, r1
    bc88:	bhi.n	bc96 <_malloc_r+0x55a>
    bc8a:	lsrs	r2, r3, #18
    bc8c:	add.w	r1, r2, #125	; 0x7d
    bc90:	lsls	r1, r1, #1
    bc92:	adds	r2, #124	; 0x7c
    bc94:	b.n	bac0 <_malloc_r+0x384>
    bc96:	movs	r1, #254	; 0xfe
    bc98:	movs	r2, #126	; 0x7e
    bc9a:	b.n	bac0 <_malloc_r+0x384>
    bc9c:	ldr	r3, [r7, #4]
    bc9e:	b.n	bbaa <_malloc_r+0x46e>
    bca0:	lsrs	r0, r5, #3
    bca2:	adds	r3, r0, #1
    bca4:	lsls	r3, r3, #1
    bca6:	b.n	b89a <_malloc_r+0x15e>
    bca8:	.word	0x1fff9b3c

0000bcac <memcmp>:
    bcac:	cmp	r2, #3
    bcae:	push	{r4, r5, r6}
    bcb0:	bls.n	bd00 <memcmp+0x54>
    bcb2:	orr.w	r3, r0, r1
    bcb6:	lsls	r3, r3, #30
    bcb8:	beq.n	bcde <memcmp+0x32>
    bcba:	ldrb	r4, [r0, #0]
    bcbc:	ldrb	r5, [r1, #0]
    bcbe:	cmp	r4, r5
    bcc0:	bne.n	bd08 <memcmp+0x5c>
    bcc2:	add	r2, r0
    bcc4:	adds	r3, r0, #1
    bcc6:	b.n	bcd4 <memcmp+0x28>
    bcc8:	ldrb.w	r4, [r3], #1
    bccc:	ldrb.w	r5, [r1, #1]!
    bcd0:	cmp	r4, r5
    bcd2:	bne.n	bd08 <memcmp+0x5c>
    bcd4:	cmp	r3, r2
    bcd6:	bne.n	bcc8 <memcmp+0x1c>
    bcd8:	movs	r0, #0
    bcda:	pop	{r4, r5, r6}
    bcdc:	bx	lr
    bcde:	mov	r4, r1
    bce0:	mov	r3, r0
    bce2:	ldr	r6, [r3, #0]
    bce4:	ldr	r5, [r4, #0]
    bce6:	cmp	r6, r5
    bce8:	mov	r0, r3
    bcea:	mov	r1, r4
    bcec:	add.w	r3, r3, #4
    bcf0:	add.w	r4, r4, #4
    bcf4:	bne.n	bcba <memcmp+0xe>
    bcf6:	subs	r2, #4
    bcf8:	cmp	r2, #3
    bcfa:	mov	r0, r3
    bcfc:	mov	r1, r4
    bcfe:	bhi.n	bce2 <memcmp+0x36>
    bd00:	cmp	r2, #0
    bd02:	bne.n	bcba <memcmp+0xe>
    bd04:	mov	r0, r2
    bd06:	b.n	bcda <memcmp+0x2e>
    bd08:	subs	r0, r4, r5
    bd0a:	pop	{r4, r5, r6}
    bd0c:	bx	lr
    bd0e:	nop

0000bd10 <memset>:
    bd10:	push	{r4, r5, r6}
    bd12:	lsls	r4, r0, #30
    bd14:	beq.n	bda4 <memset+0x94>
    bd16:	subs	r4, r2, #1
    bd18:	cmp	r2, #0
    bd1a:	beq.n	bda0 <memset+0x90>
    bd1c:	uxtb	r5, r1
    bd1e:	mov	r3, r0
    bd20:	b.n	bd28 <memset+0x18>
    bd22:	subs	r2, r4, #1
    bd24:	cbz	r4, bda0 <memset+0x90>
    bd26:	mov	r4, r2
    bd28:	strb.w	r5, [r3], #1
    bd2c:	lsls	r2, r3, #30
    bd2e:	bne.n	bd22 <memset+0x12>
    bd30:	cmp	r4, #3
    bd32:	bls.n	bd92 <memset+0x82>
    bd34:	uxtb	r5, r1
    bd36:	orr.w	r5, r5, r5, lsl #8
    bd3a:	cmp	r4, #15
    bd3c:	orr.w	r5, r5, r5, lsl #16
    bd40:	bls.n	bd76 <memset+0x66>
    bd42:	add.w	r2, r3, #16
    bd46:	mov	r6, r4
    bd48:	subs	r6, #16
    bd4a:	cmp	r6, #15
    bd4c:	str.w	r5, [r2, #-16]
    bd50:	str.w	r5, [r2, #-12]
    bd54:	str.w	r5, [r2, #-8]
    bd58:	str.w	r5, [r2, #-4]
    bd5c:	add.w	r2, r2, #16
    bd60:	bhi.n	bd48 <memset+0x38>
    bd62:	sub.w	r2, r4, #16
    bd66:	bic.w	r2, r2, #15
    bd6a:	and.w	r4, r4, #15
    bd6e:	adds	r2, #16
    bd70:	cmp	r4, #3
    bd72:	add	r3, r2
    bd74:	bls.n	bd92 <memset+0x82>
    bd76:	mov	r6, r3
    bd78:	mov	r2, r4
    bd7a:	subs	r2, #4
    bd7c:	cmp	r2, #3
    bd7e:	str.w	r5, [r6], #4
    bd82:	bhi.n	bd7a <memset+0x6a>
    bd84:	subs	r2, r4, #4
    bd86:	bic.w	r2, r2, #3
    bd8a:	adds	r2, #4
    bd8c:	add	r3, r2
    bd8e:	and.w	r4, r4, #3
    bd92:	cbz	r4, bda0 <memset+0x90>
    bd94:	uxtb	r1, r1
    bd96:	add	r4, r3
    bd98:	strb.w	r1, [r3], #1
    bd9c:	cmp	r3, r4
    bd9e:	bne.n	bd98 <memset+0x88>
    bda0:	pop	{r4, r5, r6}
    bda2:	bx	lr
    bda4:	mov	r4, r2
    bda6:	mov	r3, r0
    bda8:	b.n	bd30 <memset+0x20>
    bdaa:	nop

0000bdac <__malloc_lock>:
    bdac:	bx	lr
    bdae:	nop

0000bdb0 <__malloc_unlock>:
    bdb0:	bx	lr
    bdb2:	nop

0000bdb4 <_sbrk_r>:
    bdb4:	push	{r3, r4, r5, lr}
    bdb6:	ldr	r4, [pc, #28]	; (bdd4 <_sbrk_r+0x20>)
    bdb8:	movs	r3, #0
    bdba:	mov	r5, r0
    bdbc:	mov	r0, r1
    bdbe:	str	r3, [r4, #0]
    bdc0:	bl	9134 <_sbrk>
    bdc4:	adds	r3, r0, #1
    bdc6:	beq.n	bdca <_sbrk_r+0x16>
    bdc8:	pop	{r3, r4, r5, pc}
    bdca:	ldr	r3, [r4, #0]
    bdcc:	cmp	r3, #0
    bdce:	beq.n	bdc8 <_sbrk_r+0x14>
    bdd0:	str	r3, [r5, #0]
    bdd2:	pop	{r3, r4, r5, pc}
    bdd4:	.word	0x1fffbfe4

0000bdd8 <strchr>:
    bdd8:	push	{r4, r5, r6}
    bdda:	ands.w	r4, r1, #255	; 0xff
    bdde:	beq.n	be4a <strchr+0x72>
    bde0:	lsls	r5, r0, #30
    bde2:	beq.n	be04 <strchr+0x2c>
    bde4:	ldrb	r3, [r0, #0]
    bde6:	cmp	r3, #0
    bde8:	beq.n	bea0 <strchr+0xc8>
    bdea:	cmp	r4, r3
    bdec:	beq.n	be46 <strchr+0x6e>
    bdee:	adds	r3, r0, #1
    bdf0:	b.n	bdfe <strchr+0x26>
    bdf2:	ldrb.w	r2, [r3], #1
    bdf6:	cmp	r2, #0
    bdf8:	beq.n	be9a <strchr+0xc2>
    bdfa:	cmp	r4, r2
    bdfc:	beq.n	be46 <strchr+0x6e>
    bdfe:	lsls	r2, r3, #30
    be00:	mov	r0, r3
    be02:	bne.n	bdf2 <strchr+0x1a>
    be04:	lsls	r6, r1, #8
    be06:	and.w	r6, r6, #65280	; 0xff00
    be0a:	orrs	r6, r4
    be0c:	ldr	r3, [r0, #0]
    be0e:	orr.w	r6, r6, r6, lsl #16
    be12:	b.n	be18 <strchr+0x40>
    be14:	ldr.w	r3, [r0, #4]!
    be18:	eor.w	r5, r6, r3
    be1c:	sub.w	r2, r5, #16843009	; 0x1010101
    be20:	sub.w	r1, r3, #16843009	; 0x1010101
    be24:	bic.w	r2, r2, r5
    be28:	bic.w	r3, r1, r3
    be2c:	orrs	r3, r2
    be2e:	tst.w	r3, #2155905152	; 0x80808080
    be32:	beq.n	be14 <strchr+0x3c>
    be34:	ldrb	r3, [r0, #0]
    be36:	cbnz	r3, be42 <strchr+0x6a>
    be38:	b.n	bea0 <strchr+0xc8>
    be3a:	ldrb.w	r3, [r0, #1]!
    be3e:	cmp	r3, #0
    be40:	beq.n	bea0 <strchr+0xc8>
    be42:	cmp	r4, r3
    be44:	bne.n	be3a <strchr+0x62>
    be46:	pop	{r4, r5, r6}
    be48:	bx	lr
    be4a:	lsls	r4, r0, #30
    be4c:	beq.n	be66 <strchr+0x8e>
    be4e:	ldrb	r3, [r0, #0]
    be50:	cmp	r3, #0
    be52:	beq.n	be46 <strchr+0x6e>
    be54:	adds	r3, r0, #1
    be56:	b.n	be60 <strchr+0x88>
    be58:	ldrb	r2, [r0, #0]
    be5a:	adds	r3, #1
    be5c:	cmp	r2, #0
    be5e:	beq.n	be46 <strchr+0x6e>
    be60:	lsls	r1, r3, #30
    be62:	mov	r0, r3
    be64:	bne.n	be58 <strchr+0x80>
    be66:	ldr	r2, [r0, #0]
    be68:	sub.w	r3, r2, #16843009	; 0x1010101
    be6c:	bic.w	r3, r3, r2
    be70:	tst.w	r3, #2155905152	; 0x80808080
    be74:	bne.n	be88 <strchr+0xb0>
    be76:	ldr.w	r2, [r0, #4]!
    be7a:	sub.w	r3, r2, #16843009	; 0x1010101
    be7e:	bic.w	r3, r3, r2
    be82:	tst.w	r3, #2155905152	; 0x80808080
    be86:	beq.n	be76 <strchr+0x9e>
    be88:	ldrb	r3, [r0, #0]
    be8a:	cmp	r3, #0
    be8c:	beq.n	be46 <strchr+0x6e>
    be8e:	ldrb.w	r3, [r0, #1]!
    be92:	cmp	r3, #0
    be94:	bne.n	be8e <strchr+0xb6>
    be96:	pop	{r4, r5, r6}
    be98:	bx	lr
    be9a:	mov	r0, r2
    be9c:	pop	{r4, r5, r6}
    be9e:	bx	lr
    bea0:	mov	r0, r3
    bea2:	pop	{r4, r5, r6}
    bea4:	bx	lr
    bea6:	nop
    bea8:			; <UNDEFINED> instruction: 0xffffffff
    beac:			; <UNDEFINED> instruction: 0xffffffff
    beb0:			; <UNDEFINED> instruction: 0xffffffff
    beb4:			; <UNDEFINED> instruction: 0xffffffff
    beb8:			; <UNDEFINED> instruction: 0xffffffff
    bebc:			; <UNDEFINED> instruction: 0xffffffff
    bec0:	sub.w	r0, r2, r3
    bec4:	bx	lr
    bec6:	nop

0000bec8 <strcmp>:
    bec8:	ldrb	r2, [r0, #0]
    beca:	ldrb	r3, [r1, #0]
    becc:	cmp	r2, #1
    bece:	it	cs
    bed0:	cmpcs	r2, r3
    bed2:	bne.n	bec0 <strchr+0xe8>
    bed4:	strd	r4, r5, [sp, #-16]!
    bed8:	orr.w	r4, r0, r1
    bedc:	strd	r6, r7, [sp, #8]
    bee0:	mvn.w	ip, #0
    bee4:	mov.w	r2, r4, lsl #29
    bee8:	cbz	r2, bf30 <strcmp+0x68>
    beea:	eor.w	r4, r0, r1
    beee:	tst.w	r4, #7
    bef2:	bne.n	bfca <strcmp+0x102>
    bef4:	and.w	r4, r0, #7
    bef8:	bic.w	r0, r0, #7
    befc:	and.w	r5, r4, #3
    bf00:	bic.w	r1, r1, #7
    bf04:	mov.w	r5, r5, lsl #3
    bf08:	ldrd	r2, r3, [r0], #16
    bf0c:	tst.w	r4, #4
    bf10:	ldrd	r6, r7, [r1], #16
    bf14:	lsl.w	r4, ip, r5
    bf18:	orn	r2, r2, r4
    bf1c:	orn	r6, r6, r4
    bf20:	beq.n	bf38 <strcmp+0x70>
    bf22:	orn	r3, r3, r4
    bf26:	mov	r2, ip
    bf28:	orn	r7, r7, r4
    bf2c:	mov	r6, ip
    bf2e:	b.n	bf38 <strcmp+0x70>
    bf30:	ldrd	r2, r3, [r0], #16
    bf34:	ldrd	r6, r7, [r1], #16
    bf38:	uadd8	r5, r2, ip
    bf3c:	eor.w	r4, r2, r6
    bf40:	sel	r4, r4, ip
    bf44:	cbnz	r4, bfa2 <strcmp+0xda>
    bf46:	uadd8	r5, r3, ip
    bf4a:	eor.w	r5, r3, r7
    bf4e:	sel	r5, r5, ip
    bf52:	cbnz	r5, bf7a <strcmp+0xb2>
    bf54:	ldrd	r2, r3, [r0, #-8]
    bf58:	ldrd	r6, r7, [r1, #-8]
    bf5c:	uadd8	r5, r2, ip
    bf60:	eor.w	r4, r2, r6
    bf64:	sel	r4, r4, ip
    bf68:	uadd8	r5, r3, ip
    bf6c:	eor.w	r5, r3, r7
    bf70:	sel	r5, r5, ip
    bf74:	orrs	r5, r4
    bf76:	beq.n	bf30 <strcmp+0x68>
    bf78:	cbnz	r4, bfa2 <strcmp+0xda>
    bf7a:	rev	r5, r5
    bf7c:	clz	r4, r5
    bf80:	bic.w	r4, r4, #7
    bf84:	lsr.w	r1, r7, r4
    bf88:	ldrd	r6, r7, [sp, #8]
    bf8c:	lsr.w	r3, r3, r4
    bf90:	and.w	r0, r3, #255	; 0xff
    bf94:	and.w	r1, r1, #255	; 0xff
    bf98:	ldrd	r4, r5, [sp], #16
    bf9c:	sub.w	r0, r0, r1
    bfa0:	bx	lr
    bfa2:	rev	r4, r4
    bfa4:	clz	r4, r4
    bfa8:	bic.w	r4, r4, #7
    bfac:	lsr.w	r1, r6, r4
    bfb0:	ldrd	r6, r7, [sp, #8]
    bfb4:	lsr.w	r2, r2, r4
    bfb8:	and.w	r0, r2, #255	; 0xff
    bfbc:	and.w	r1, r1, #255	; 0xff
    bfc0:	ldrd	r4, r5, [sp], #16
    bfc4:	sub.w	r0, r0, r1
    bfc8:	bx	lr
    bfca:	tst.w	r4, #3
    bfce:	bne.n	c04a <strcmp+0x182>
    bfd0:	ands.w	r4, r0, #3
    bfd4:	bne.n	c028 <strcmp+0x160>
    bfd6:	ldr.w	r2, [r0], #8
    bfda:	ldr.w	r3, [r1], #8
    bfde:	uadd8	r5, r2, ip
    bfe2:	eor.w	r5, r2, r3
    bfe6:	sel	r5, r5, ip
    bfea:	cbnz	r5, c004 <strcmp+0x13c>
    bfec:	ldr.w	r2, [r0, #-4]
    bff0:	ldr.w	r3, [r1, #-4]
    bff4:	uadd8	r5, r2, ip
    bff8:	eor.w	r5, r2, r3
    bffc:	sel	r5, r5, ip
    c000:	cmp	r5, #0
    c002:	beq.n	bfd6 <strcmp+0x10e>
    c004:	rev	r5, r5
    c006:	clz	r4, r5
    c00a:	bic.w	r4, r4, #7
    c00e:	lsr.w	r1, r3, r4
    c012:	lsr.w	r2, r2, r4
    c016:	and.w	r0, r2, #255	; 0xff
    c01a:	and.w	r1, r1, #255	; 0xff
    c01e:	ldrd	r4, r5, [sp], #16
    c022:	sub.w	r0, r0, r1
    c026:	bx	lr
    c028:	mov.w	r4, r4, lsl #3
    c02c:	bic.w	r0, r0, #3
    c030:	ldr.w	r2, [r0], #8
    c034:	bic.w	r1, r1, #3
    c038:	ldr.w	r3, [r1], #8
    c03c:	lsl.w	r4, ip, r4
    c040:	orn	r2, r2, r4
    c044:	orn	r3, r3, r4
    c048:	b.n	bfde <strcmp+0x116>
    c04a:	ands.w	r4, r0, #3
    c04e:	beq.n	c086 <strcmp+0x1be>
    c050:	sub.w	r1, r1, r4
    c054:	bic.w	r0, r0, #3
    c058:	lsls	r4, r4, #31
    c05a:	ldr.w	r2, [r0], #4
    c05e:	beq.n	c06e <strcmp+0x1a6>
    c060:	bcs.n	c082 <strcmp+0x1ba>
    c062:	ldrb	r3, [r1, #2]
    c064:	uxtb.w	r4, r2, ror #16
    c068:	subs	r4, r4, r3
    c06a:	bne.n	c07a <strcmp+0x1b2>
    c06c:	cbz	r3, c07a <strcmp+0x1b2>
    c06e:	ldrb	r3, [r1, #3]
    c070:	uxtb.w	r4, r2, ror #24
    c074:	subs	r4, r4, r3
    c076:	bne.n	c07a <strcmp+0x1b2>
    c078:	cbnz	r3, c082 <strcmp+0x1ba>
    c07a:	mov	r0, r4
    c07c:	ldr.w	r4, [sp], #16
    c080:	bx	lr
    c082:	add.w	r1, r1, #4
    c086:	ldr.w	r2, [r0], #4
    c08a:	lsls	r4, r1, #31
    c08c:	bic.w	r1, r1, #3
    c090:	ldr.w	r3, [r1], #4
    c094:	bhi.n	c128 <strcmp+0x260>
    c096:	bcs.n	c0e2 <strcmp+0x21a>
    c098:	bic.w	r4, r2, #4278190080	; 0xff000000
    c09c:	uadd8	r5, r2, ip
    c0a0:	eors.w	r5, r4, r3, lsr #8
    c0a4:	sel	r5, r5, ip
    c0a8:	bne.n	c0c0 <strcmp+0x1f8>
    c0aa:	cbnz	r5, c0c6 <strcmp+0x1fe>
    c0ac:	ldr.w	r3, [r1], #4
    c0b0:	eor.w	r4, r4, r2
    c0b4:	cmp.w	r4, r3, lsl #24
    c0b8:	bne.n	c0d8 <strcmp+0x210>
    c0ba:	ldr.w	r2, [r0], #4
    c0be:	b.n	c098 <strcmp+0x1d0>
    c0c0:	mov.w	r3, r3, lsr #8
    c0c4:	b.n	c172 <strcmp+0x2aa>
    c0c6:	bics.w	r5, r5, #4278190080	; 0xff000000
    c0ca:	bne.n	c168 <strcmp+0x2a0>
    c0cc:	ldrb	r0, [r1, #0]
    c0ce:	ldrd	r4, r5, [sp], #16
    c0d2:	rsb	r0, r0, #0
    c0d6:	bx	lr
    c0d8:	mov.w	r2, r2, lsr #24
    c0dc:	and.w	r3, r3, #255	; 0xff
    c0e0:	b.n	c172 <strcmp+0x2aa>
    c0e2:	and.w	r4, r2, ip, lsr #16
    c0e6:	uadd8	r5, r2, ip
    c0ea:	eors.w	r5, r4, r3, lsr #16
    c0ee:	sel	r5, r5, ip
    c0f2:	bne.n	c10a <strcmp+0x242>
    c0f4:	cbnz	r5, c110 <strcmp+0x248>
    c0f6:	ldr.w	r3, [r1], #4
    c0fa:	eor.w	r4, r4, r2
    c0fe:	cmp.w	r4, r3, lsl #16
    c102:	bne.n	c11e <strcmp+0x256>
    c104:	ldr.w	r2, [r0], #4
    c108:	b.n	c0e2 <strcmp+0x21a>
    c10a:	mov.w	r3, r3, lsr #16
    c10e:	b.n	c172 <strcmp+0x2aa>
    c110:	ands.w	r5, r5, ip, lsr #16
    c114:	bne.n	c168 <strcmp+0x2a0>
    c116:	ldrh	r3, [r1, #0]
    c118:	mov.w	r2, r2, lsr #16
    c11c:	b.n	c172 <strcmp+0x2aa>
    c11e:	mov.w	r2, r2, lsr #16
    c122:	and.w	r3, r3, ip, lsr #16
    c126:	b.n	c172 <strcmp+0x2aa>
    c128:	and.w	r4, r2, #255	; 0xff
    c12c:	uadd8	r5, r2, ip
    c130:	eors.w	r5, r4, r3, lsr #24
    c134:	sel	r5, r5, ip
    c138:	bne.n	c150 <strcmp+0x288>
    c13a:	cbnz	r5, c156 <strcmp+0x28e>
    c13c:	ldr.w	r3, [r1], #4
    c140:	eor.w	r4, r4, r2
    c144:	cmp.w	r4, r3, lsl #8
    c148:	bne.n	c15e <strcmp+0x296>
    c14a:	ldr.w	r2, [r0], #4
    c14e:	b.n	c128 <strcmp+0x260>
    c150:	mov.w	r3, r3, lsr #24
    c154:	b.n	c172 <strcmp+0x2aa>
    c156:	tst.w	r5, #255	; 0xff
    c15a:	bne.n	c168 <strcmp+0x2a0>
    c15c:	ldr	r3, [r1, #0]
    c15e:	mov.w	r2, r2, lsr #8
    c162:	bic.w	r3, r3, #4278190080	; 0xff000000
    c166:	b.n	c172 <strcmp+0x2aa>
    c168:	mov.w	r0, #0
    c16c:	ldrd	r4, r5, [sp], #16
    c170:	bx	lr
    c172:	rev	r2, r2
    c174:	rev	r3, r3
    c176:	uadd8	r4, r2, ip
    c17a:	eor.w	r4, r2, r3
    c17e:	sel	r5, r4, ip
    c182:	clz	r4, r5
    c186:	lsl.w	r2, r2, r4
    c18a:	lsl.w	r3, r3, r4
    c18e:	mov.w	r0, r2, lsr #24
    c192:	ldrd	r4, r5, [sp], #16
    c196:	sub.w	r0, r0, r3, lsr #24
    c19a:	bx	lr
    c19c:			; <UNDEFINED> instruction: 0xffffffff
    c1a0:			; <UNDEFINED> instruction: 0xffffffff
    c1a4:			; <UNDEFINED> instruction: 0xffffffff
    c1a8:			; <UNDEFINED> instruction: 0xffffffff
    c1ac:			; <UNDEFINED> instruction: 0xffffffff
    c1b0:			; <UNDEFINED> instruction: 0xffffffff
    c1b4:			; <UNDEFINED> instruction: 0xffffffff
    c1b8:			; <UNDEFINED> instruction: 0xffffffff
    c1bc:			; <UNDEFINED> instruction: 0xffffffff

0000c1c0 <strlen>:
    c1c0:	pld	[r0]
    c1c4:	strd	r4, r5, [sp, #-8]!
    c1c8:	bic.w	r1, r0, #7
    c1cc:	mvn.w	ip, #0
    c1d0:	ands.w	r4, r0, #7
    c1d4:	pld	[r1, #32]
    c1d8:	bne.w	c26e <strlen+0xae>
    c1dc:	mov.w	r4, #0
    c1e0:	mvn.w	r0, #7
    c1e4:	ldrd	r2, r3, [r1]
    c1e8:	pld	[r1, #64]	; 0x40
    c1ec:	add.w	r0, r0, #8
    c1f0:	uadd8	r2, r2, ip
    c1f4:	sel	r2, r4, ip
    c1f8:	uadd8	r3, r3, ip
    c1fc:	sel	r3, r2, ip
    c200:	cbnz	r3, c256 <strlen+0x96>
    c202:	ldrd	r2, r3, [r1, #8]
    c206:	uadd8	r2, r2, ip
    c20a:	add.w	r0, r0, #8
    c20e:	sel	r2, r4, ip
    c212:	uadd8	r3, r3, ip
    c216:	sel	r3, r2, ip
    c21a:	cbnz	r3, c256 <strlen+0x96>
    c21c:	ldrd	r2, r3, [r1, #16]
    c220:	uadd8	r2, r2, ip
    c224:	add.w	r0, r0, #8
    c228:	sel	r2, r4, ip
    c22c:	uadd8	r3, r3, ip
    c230:	sel	r3, r2, ip
    c234:	cbnz	r3, c256 <strlen+0x96>
    c236:	ldrd	r2, r3, [r1, #24]
    c23a:	add.w	r1, r1, #32
    c23e:	uadd8	r2, r2, ip
    c242:	add.w	r0, r0, #8
    c246:	sel	r2, r4, ip
    c24a:	uadd8	r3, r3, ip
    c24e:	sel	r3, r2, ip
    c252:	cmp	r3, #0
    c254:	beq.n	c1e4 <strlen+0x24>
    c256:	cmp	r2, #0
    c258:	itt	eq
    c25a:	addeq	r0, #4
    c25c:	moveq	r2, r3
    c25e:	rev	r2, r2
    c260:	clz	r2, r2
    c264:	ldrd	r4, r5, [sp], #8
    c268:	add.w	r0, r0, r2, lsr #3
    c26c:	bx	lr
    c26e:	ldrd	r2, r3, [r1]
    c272:	and.w	r5, r4, #3
    c276:	rsb	r0, r4, #0
    c27a:	mov.w	r5, r5, lsl #3
    c27e:	tst.w	r4, #4
    c282:	pld	[r1, #64]	; 0x40
    c286:	lsl.w	r5, ip, r5
    c28a:	orn	r2, r2, r5
    c28e:	itt	ne
    c290:	ornne	r3, r3, r5
    c294:	movne	r2, ip
    c296:	mov.w	r4, #0
    c29a:	b.n	c1f0 <strlen+0x30>

0000c29c <strncpy>:
    c29c:	orr.w	r3, r0, r1
    c2a0:	lsls	r3, r3, #30
    c2a2:	push	{r4, r5, r6}
    c2a4:	bne.n	c2fe <strncpy+0x62>
    c2a6:	cmp	r2, #3
    c2a8:	bls.n	c2fe <strncpy+0x62>
    c2aa:	mov	r4, r1
    c2ac:	mov	r3, r0
    c2ae:	mov	r1, r4
    c2b0:	ldr.w	r6, [r4], #4
    c2b4:	sub.w	r5, r6, #16843009	; 0x1010101
    c2b8:	bic.w	r5, r5, r6
    c2bc:	tst.w	r5, #2155905152	; 0x80808080
    c2c0:	bne.n	c2d0 <strncpy+0x34>
    c2c2:	subs	r2, #4
    c2c4:	cmp	r2, #3
    c2c6:	str.w	r6, [r3], #4
    c2ca:	mov	r1, r4
    c2cc:	bhi.n	c2ae <strncpy+0x12>
    c2ce:	cbz	r2, c2fa <strncpy+0x5e>
    c2d0:	ldrb	r4, [r1, #0]
    c2d2:	strb	r4, [r3, #0]
    c2d4:	subs	r2, #1
    c2d6:	adds	r3, #1
    c2d8:	adds	r1, #1
    c2da:	cbz	r4, c2ec <strncpy+0x50>
    c2dc:	cbz	r2, c2fa <strncpy+0x5e>
    c2de:	ldrb.w	r4, [r1], #1
    c2e2:	strb.w	r4, [r3], #1
    c2e6:	subs	r2, #1
    c2e8:	cmp	r4, #0
    c2ea:	bne.n	c2dc <strncpy+0x40>
    c2ec:	cbz	r2, c2fa <strncpy+0x5e>
    c2ee:	add	r2, r3
    c2f0:	movs	r1, #0
    c2f2:	strb.w	r1, [r3], #1
    c2f6:	cmp	r2, r3
    c2f8:	bne.n	c2f2 <strncpy+0x56>
    c2fa:	pop	{r4, r5, r6}
    c2fc:	bx	lr
    c2fe:	mov	r3, r0
    c300:	b.n	c2ce <strncpy+0x32>
    c302:	nop

0000c304 <__register_exitproc>:
    c304:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c308:	ldr	r4, [pc, #148]	; (c3a0 <__register_exitproc+0x9c>)
    c30a:	ldr	r5, [r4, #0]
    c30c:	ldr.w	r4, [r5, #328]	; 0x148
    c310:	mov	r6, r0
    c312:	mov	r8, r1
    c314:	mov	sl, r2
    c316:	mov	r9, r3
    c318:	cbz	r4, c38c <__register_exitproc+0x88>
    c31a:	ldr	r0, [r4, #4]
    c31c:	cmp	r0, #31
    c31e:	bgt.n	c350 <__register_exitproc+0x4c>
    c320:	adds	r3, r0, #1
    c322:	cbz	r6, c342 <__register_exitproc+0x3e>
    c324:	add.w	r5, r4, r0, lsl #2
    c328:	movs	r2, #1
    c32a:	str.w	sl, [r5, #136]	; 0x88
    c32e:	ldr.w	r1, [r4, #392]	; 0x188
    c332:	lsls	r2, r0
    c334:	orrs	r1, r2
    c336:	cmp	r6, #2
    c338:	str.w	r1, [r4, #392]	; 0x188
    c33c:	str.w	r9, [r5, #264]	; 0x108
    c340:	beq.n	c380 <__register_exitproc+0x7c>
    c342:	adds	r0, #2
    c344:	str	r3, [r4, #4]
    c346:	str.w	r8, [r4, r0, lsl #2]
    c34a:	movs	r0, #0
    c34c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c350:	ldr	r3, [pc, #80]	; (c3a4 <__register_exitproc+0xa0>)
    c352:	cbz	r3, c396 <__register_exitproc+0x92>
    c354:	mov.w	r0, #400	; 0x190
    c358:	bl	b71c <malloc>
    c35c:	mov	r4, r0
    c35e:	cbz	r0, c396 <__register_exitproc+0x92>
    c360:	ldr.w	r3, [r5, #328]	; 0x148
    c364:	movs	r7, #0
    c366:	stmia.w	r0, {r3, r7}
    c36a:	str.w	r4, [r5, #328]	; 0x148
    c36e:	mov	r0, r7
    c370:	movs	r3, #1
    c372:	str.w	r7, [r4, #392]	; 0x188
    c376:	str.w	r7, [r4, #396]	; 0x18c
    c37a:	cmp	r6, #0
    c37c:	beq.n	c342 <__register_exitproc+0x3e>
    c37e:	b.n	c324 <__register_exitproc+0x20>
    c380:	ldr.w	r1, [r4, #396]	; 0x18c
    c384:	orrs	r2, r1
    c386:	str.w	r2, [r4, #396]	; 0x18c
    c38a:	b.n	c342 <__register_exitproc+0x3e>
    c38c:	add.w	r4, r5, #332	; 0x14c
    c390:	str.w	r4, [r5, #328]	; 0x148
    c394:	b.n	c31a <__register_exitproc+0x16>
    c396:	mov.w	r0, #4294967295
    c39a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c39e:	nop
    c3a0:	.word	0x0000cd04
    c3a4:	.word	0x0000b71d

0000c3a8 <register_fini>:
    c3a8:	ldr	r3, [pc, #8]	; (c3b4 <register_fini+0xc>)
    c3aa:	cbz	r3, c3b2 <register_fini+0xa>
    c3ac:	ldr	r0, [pc, #8]	; (c3b8 <register_fini+0x10>)
    c3ae:	b.w	5764 <atexit>
    c3b2:	bx	lr
    c3b4:	.word	0x00000000
    c3b8:	.word	0x0000c3bd

0000c3bc <__libc_fini_array>:
    c3bc:	push	{r3, r4, r5, lr}
    c3be:	ldr	r5, [pc, #28]	; (c3dc <__libc_fini_array+0x20>)
    c3c0:	ldr	r4, [pc, #28]	; (c3e0 <__libc_fini_array+0x24>)
    c3c2:	subs	r4, r5, r4
    c3c4:	asrs	r4, r4, #2
    c3c6:	beq.n	c3d4 <__libc_fini_array+0x18>
    c3c8:	subs	r4, #1
    c3ca:	ldr.w	r3, [r5, #-4]!
    c3ce:	blx	r3
    c3d0:	cmp	r4, #0
    c3d2:	bne.n	c3c8 <__libc_fini_array+0xc>
    c3d4:	ldmia.w	sp!, {r3, r4, r5, lr}
    c3d8:	b.w	cd64 <__init_array_end>
	...

0000c3e4 <_malloc_trim_r>:
    c3e4:	push	{r3, r4, r5, r6, r7, lr}
    c3e6:	ldr	r7, [pc, #140]	; (c474 <_malloc_trim_r+0x90>)
    c3e8:	mov	r4, r1
    c3ea:	mov	r6, r0
    c3ec:	bl	bdac <__malloc_lock>
    c3f0:	ldr	r3, [r7, #8]
    c3f2:	ldr	r5, [r3, #4]
    c3f4:	bic.w	r5, r5, #3
    c3f8:	subs	r1, r5, r4
    c3fa:	addw	r1, r1, #4079	; 0xfef
    c3fe:	bic.w	r1, r1, #4080	; 0xff0
    c402:	bic.w	r1, r1, #15
    c406:	sub.w	r4, r1, #4096	; 0x1000
    c40a:	cmp.w	r4, #4096	; 0x1000
    c40e:	blt.n	c420 <_malloc_trim_r+0x3c>
    c410:	movs	r1, #0
    c412:	mov	r0, r6
    c414:	bl	bdb4 <_sbrk_r>
    c418:	ldr	r3, [r7, #8]
    c41a:	add	r3, r5
    c41c:	cmp	r0, r3
    c41e:	beq.n	c42a <_malloc_trim_r+0x46>
    c420:	mov	r0, r6
    c422:	bl	bdb0 <__malloc_unlock>
    c426:	movs	r0, #0
    c428:	pop	{r3, r4, r5, r6, r7, pc}
    c42a:	negs	r1, r4
    c42c:	mov	r0, r6
    c42e:	bl	bdb4 <_sbrk_r>
    c432:	adds	r0, #1
    c434:	beq.n	c452 <_malloc_trim_r+0x6e>
    c436:	ldr	r3, [pc, #64]	; (c478 <_malloc_trim_r+0x94>)
    c438:	ldr	r2, [r7, #8]
    c43a:	ldr	r1, [r3, #0]
    c43c:	subs	r5, r5, r4
    c43e:	orr.w	r5, r5, #1
    c442:	mov	r0, r6
    c444:	subs	r1, r1, r4
    c446:	str	r5, [r2, #4]
    c448:	str	r1, [r3, #0]
    c44a:	bl	bdb0 <__malloc_unlock>
    c44e:	movs	r0, #1
    c450:	pop	{r3, r4, r5, r6, r7, pc}
    c452:	movs	r1, #0
    c454:	mov	r0, r6
    c456:	bl	bdb4 <_sbrk_r>
    c45a:	ldr	r2, [r7, #8]
    c45c:	subs	r3, r0, r2
    c45e:	cmp	r3, #15
    c460:	ble.n	c420 <_malloc_trim_r+0x3c>
    c462:	ldr	r4, [pc, #24]	; (c47c <_malloc_trim_r+0x98>)
    c464:	ldr	r1, [pc, #16]	; (c478 <_malloc_trim_r+0x94>)
    c466:	ldr	r4, [r4, #0]
    c468:	orr.w	r3, r3, #1
    c46c:	subs	r0, r0, r4
    c46e:	str	r3, [r2, #4]
    c470:	str	r0, [r1, #0]
    c472:	b.n	c420 <_malloc_trim_r+0x3c>
    c474:	.word	0x1fff9b3c
    c478:	.word	0x1fffbfa8
    c47c:	.word	0x1fff9f48

0000c480 <_free_r>:
    c480:	cmp	r1, #0
    c482:	beq.n	c510 <_free_r+0x90>
    c484:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c488:	mov	r5, r1
    c48a:	mov	r8, r0
    c48c:	bl	bdac <__malloc_lock>
    c490:	ldr.w	r7, [r5, #-4]
    c494:	ldr	r1, [pc, #424]	; (c640 <_free_r+0x1c0>)
    c496:	bic.w	r3, r7, #1
    c49a:	sub.w	r4, r5, #8
    c49e:	adds	r2, r4, r3
    c4a0:	ldr	r6, [r1, #8]
    c4a2:	ldr	r0, [r2, #4]
    c4a4:	cmp	r2, r6
    c4a6:	bic.w	r0, r0, #3
    c4aa:	beq.n	c572 <_free_r+0xf2>
    c4ac:	lsls	r6, r7, #31
    c4ae:	str	r0, [r2, #4]
    c4b0:	bmi.n	c4ca <_free_r+0x4a>
    c4b2:	ldr.w	r7, [r5, #-8]
    c4b6:	subs	r4, r4, r7
    c4b8:	add.w	lr, r1, #8
    c4bc:	ldr	r5, [r4, #8]
    c4be:	cmp	r5, lr
    c4c0:	add	r3, r7
    c4c2:	beq.n	c5a4 <_free_r+0x124>
    c4c4:	ldr	r7, [r4, #12]
    c4c6:	str	r7, [r5, #12]
    c4c8:	str	r5, [r7, #8]
    c4ca:	adds	r5, r2, r0
    c4cc:	ldr	r5, [r5, #4]
    c4ce:	lsls	r5, r5, #31
    c4d0:	bpl.n	c558 <_free_r+0xd8>
    c4d2:	orr.w	r2, r3, #1
    c4d6:	str	r2, [r4, #4]
    c4d8:	str	r3, [r4, r3]
    c4da:	cmp.w	r3, #512	; 0x200
    c4de:	bcs.n	c512 <_free_r+0x92>
    c4e0:	lsrs	r3, r3, #3
    c4e2:	adds	r2, r3, #1
    c4e4:	ldr	r5, [r1, #4]
    c4e6:	ldr.w	r7, [r1, r2, lsl #3]
    c4ea:	str	r7, [r4, #8]
    c4ec:	movs	r0, #1
    c4ee:	asrs	r3, r3, #2
    c4f0:	lsl.w	r3, r0, r3
    c4f4:	add.w	r0, r1, r2, lsl #3
    c4f8:	orrs	r5, r3
    c4fa:	subs	r0, #8
    c4fc:	str	r0, [r4, #12]
    c4fe:	str	r5, [r1, #4]
    c500:	str.w	r4, [r1, r2, lsl #3]
    c504:	str	r4, [r7, #12]
    c506:	mov	r0, r8
    c508:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c50c:	b.w	bdb0 <__malloc_unlock>
    c510:	bx	lr
    c512:	lsrs	r2, r3, #9
    c514:	cmp	r2, #4
    c516:	bhi.n	c5c0 <_free_r+0x140>
    c518:	lsrs	r2, r3, #6
    c51a:	add.w	r7, r2, #57	; 0x39
    c51e:	lsls	r7, r7, #1
    c520:	add.w	r5, r2, #56	; 0x38
    c524:	add.w	r0, r1, r7, lsl #2
    c528:	ldr.w	r2, [r1, r7, lsl #2]
    c52c:	ldr	r1, [pc, #272]	; (c640 <_free_r+0x1c0>)
    c52e:	subs	r0, #8
    c530:	cmp	r0, r2
    c532:	beq.n	c5d0 <_free_r+0x150>
    c534:	ldr	r1, [r2, #4]
    c536:	bic.w	r1, r1, #3
    c53a:	cmp	r3, r1
    c53c:	bcs.n	c544 <_free_r+0xc4>
    c53e:	ldr	r2, [r2, #8]
    c540:	cmp	r0, r2
    c542:	bne.n	c534 <_free_r+0xb4>
    c544:	ldr	r0, [r2, #12]
    c546:	str	r0, [r4, #12]
    c548:	str	r2, [r4, #8]
    c54a:	str	r4, [r0, #8]
    c54c:	str	r4, [r2, #12]
    c54e:	mov	r0, r8
    c550:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c554:	b.w	bdb0 <__malloc_unlock>
    c558:	ldr	r5, [r2, #8]
    c55a:	ldr	r7, [pc, #232]	; (c644 <_free_r+0x1c4>)
    c55c:	cmp	r5, r7
    c55e:	add	r3, r0
    c560:	beq.n	c5e2 <_free_r+0x162>
    c562:	ldr	r0, [r2, #12]
    c564:	str	r0, [r5, #12]
    c566:	orr.w	r2, r3, #1
    c56a:	str	r5, [r0, #8]
    c56c:	str	r2, [r4, #4]
    c56e:	str	r3, [r4, r3]
    c570:	b.n	c4da <_free_r+0x5a>
    c572:	lsls	r7, r7, #31
    c574:	add	r3, r0
    c576:	bmi.n	c588 <_free_r+0x108>
    c578:	ldr.w	r2, [r5, #-8]
    c57c:	subs	r4, r4, r2
    c57e:	add	r3, r2
    c580:	ldr	r0, [r4, #8]
    c582:	ldr	r2, [r4, #12]
    c584:	str	r2, [r0, #12]
    c586:	str	r0, [r2, #8]
    c588:	ldr	r2, [pc, #188]	; (c648 <_free_r+0x1c8>)
    c58a:	ldr	r2, [r2, #0]
    c58c:	orr.w	r0, r3, #1
    c590:	cmp	r3, r2
    c592:	str	r0, [r4, #4]
    c594:	str	r4, [r1, #8]
    c596:	bcc.n	c506 <_free_r+0x86>
    c598:	ldr	r3, [pc, #176]	; (c64c <_free_r+0x1cc>)
    c59a:	mov	r0, r8
    c59c:	ldr	r1, [r3, #0]
    c59e:	bl	c3e4 <_malloc_trim_r>
    c5a2:	b.n	c506 <_free_r+0x86>
    c5a4:	adds	r1, r2, r0
    c5a6:	ldr	r1, [r1, #4]
    c5a8:	lsls	r1, r1, #31
    c5aa:	bmi.n	c636 <_free_r+0x1b6>
    c5ac:	ldr	r1, [r2, #8]
    c5ae:	ldr	r2, [r2, #12]
    c5b0:	str	r2, [r1, #12]
    c5b2:	add	r3, r0
    c5b4:	orr.w	r0, r3, #1
    c5b8:	str	r1, [r2, #8]
    c5ba:	str	r0, [r4, #4]
    c5bc:	str	r3, [r4, r3]
    c5be:	b.n	c506 <_free_r+0x86>
    c5c0:	cmp	r2, #20
    c5c2:	bhi.n	c5f4 <_free_r+0x174>
    c5c4:	add.w	r7, r2, #92	; 0x5c
    c5c8:	lsls	r7, r7, #1
    c5ca:	add.w	r5, r2, #91	; 0x5b
    c5ce:	b.n	c524 <_free_r+0xa4>
    c5d0:	asrs	r2, r5, #2
    c5d2:	ldr	r3, [r1, #4]
    c5d4:	movs	r5, #1
    c5d6:	lsl.w	r2, r5, r2
    c5da:	orrs	r3, r2
    c5dc:	str	r3, [r1, #4]
    c5de:	mov	r2, r0
    c5e0:	b.n	c546 <_free_r+0xc6>
    c5e2:	orr.w	r2, r3, #1
    c5e6:	str	r4, [r1, #20]
    c5e8:	str	r4, [r1, #16]
    c5ea:	str	r5, [r4, #12]
    c5ec:	str	r5, [r4, #8]
    c5ee:	str	r2, [r4, #4]
    c5f0:	str	r3, [r4, r3]
    c5f2:	b.n	c506 <_free_r+0x86>
    c5f4:	cmp	r2, #84	; 0x54
    c5f6:	bhi.n	c606 <_free_r+0x186>
    c5f8:	lsrs	r2, r3, #12
    c5fa:	add.w	r7, r2, #111	; 0x6f
    c5fe:	lsls	r7, r7, #1
    c600:	add.w	r5, r2, #110	; 0x6e
    c604:	b.n	c524 <_free_r+0xa4>
    c606:	cmp.w	r2, #340	; 0x154
    c60a:	bhi.n	c61a <_free_r+0x19a>
    c60c:	lsrs	r2, r3, #15
    c60e:	add.w	r7, r2, #120	; 0x78
    c612:	lsls	r7, r7, #1
    c614:	add.w	r5, r2, #119	; 0x77
    c618:	b.n	c524 <_free_r+0xa4>
    c61a:	movw	r0, #1364	; 0x554
    c61e:	cmp	r2, r0
    c620:	bhi.n	c630 <_free_r+0x1b0>
    c622:	lsrs	r2, r3, #18
    c624:	add.w	r7, r2, #125	; 0x7d
    c628:	lsls	r7, r7, #1
    c62a:	add.w	r5, r2, #124	; 0x7c
    c62e:	b.n	c524 <_free_r+0xa4>
    c630:	movs	r7, #254	; 0xfe
    c632:	movs	r5, #126	; 0x7e
    c634:	b.n	c524 <_free_r+0xa4>
    c636:	orr.w	r2, r3, #1
    c63a:	str	r2, [r4, #4]
    c63c:	str	r3, [r4, r3]
    c63e:	b.n	c506 <_free_r+0x86>
    c640:	.word	0x1fff9b3c
    c644:	.word	0x1fff9b44
    c648:	.word	0x1fff9f44
    c64c:	.word	0x1fffbfa4

0000c650 <vtable for AudioStream>:
	...
    c658:	a...

0000c65c <vtable for ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>>:
	...
    c664:	....

0000c668 <vtable for NEOPIXEL<(unsigned char)2>>:
	...
    c670:	....]...........
    c680:	m.......A...

0000c68c <vtable for NEOPIXEL<(unsigned char)3>>:
	...
    c694:	....]...........
    c6a4:	m.......!...

0000c6b0 <vtable for NEOPIXEL<(unsigned char)4>>:
	...
    c6b8:	....]...........
    c6c8:	m...}.......

0000c6d4 <vtable for NEOPIXEL<(unsigned char)5>>:
	...
    c6dc:	....]...........
    c6ec:	m...u.......Unab
    c6fc:	le to access the
    c70c:	 SD card....Port
    c71c:	 Opened.....Init
    c72c:	ializing....Succ
    c73c:	essfully Initial
    c74c:	ized....RAIN.WAV
    c75c:	....Intensity +.
    c76c:	Intensity -.Star
    c77c:	t Thunder...Repe
    c78c:	at..""\\b.f.n.r.
    c79c:	t...method..null
    c7ac:	....fadeToRGB...
    c7bc:	R...true....G...
    c7cc:	Delay...fadeToHS
    c7dc:	V...H...S...setT
    c7ec:	oRGB....set to R
    c7fc:	GB value....setT
    c80c:	oHSV....set to H
    c81c:	SV value....rain
    c82c:	bow.Rainbow.flas
    c83c:	h...groupFlash..
    c84c:	Group...Directio
    c85c:	n...rdmGroupFlas
    c86c:	h...rain....thun
    c87c:	der.Trigering Th
    c88c:	under...ca ne ma
    c89c:	rche pas ^^.THUN
    c8ac:	DER.WAV.Timestam
    c8bc:	p ..Event ..Even
    c8cc:	t ID ...Current 
    c8dc:	number of events
    c8ec:	 for T1: .......
    c8fc:	................
    c90c:	................
    c91c:	................
    c92c:	............Grou
    c93c:	pFlash received.
    c94c:	Fading To HSV Re
    c95c:	ceived..target H
    c96c:	 ... starting H,
    c97c:	 ... FadingDone 
    c98c:	? .. Buffer ....
    c99c:	 R = ... G = ...
    c9ac:	 B = ...Refresh 
    c9bc:	rate ...LED ....
    c9cc:	 Trigger receive
    c9dc:	d, .Offset = ...
    c9ec:	TR = ..., TH = .
    c9fc:	, TF = .

0000ca04 <vtable for AudioControlSGTL5000>:
	...
    ca0c:	qG...G...I...G..
    ca1c:	QH..

0000ca20 <vtable for AudioMixer4>:
	...
    ca28:	AI..

0000ca2c <vtable for AudioPlaySdWav>:
	...
    ca34:	aP..

0000ca38 <vtable for AudioOutputI2S>:
	...
    ca40:	eS..

0000ca44 <vtable for File>:
	...
    ca4c:	.j...k...j...k..
    ca5c:	.j..%k..Qk../...

0000ca6c <vtable for SdFile>:
	...
    ca74:	.{..U....j...j..
    ca84:	|<>^+=?/[];,*"\.

0000ca94 <SPIClass::spi0_hardware>:
    ca94:	<..@............
    caa4:	................
    cab4:	........@.......
    cac4:	....@...........
    cad4:	................
    cae4:	................
    caf4:	................
    cb04:	........

0000cb0c <TwoWire::i2c0_hardware>:
    cb0c:	4..@@...........
    cb1c:	................

0000cb2c <TwoWire::i2c1_hardware>:
    cb2c:	4..@............
    cb3c:	................

0000cb4c <vtable for TwoWire>:
	...
    cb54:	....E....j..A...
    cb64:	........)...

0000cb70 <digital_pin_to_info_PGM>:
    cb70:	@..C@..@D..CD..@
    cb80:	...C...@0..C0..@
    cb90:	4..C4..@...C...@
    cba0:	...C...@...C...@
    cbb0:	...C...@...C...@
    cbc0:	...C...@...C...@
    cbd0:	...C...@...C...@
    cbe0:	...C...@...C...@
    cbf0:	...C...@...C...@
    cc00:	...C...@...C...@
    cc10:	...C...@...C...@
    cc20:	...C...@...C...@
    cc30:	...C...@L..CL..@
    cc40:	. .C...@$..C$..@
    cc50:	 ..C ..@(..C(..@
    cc60:	,..C,..@. .C...@
    cc70:	H..CH..@...C...@

0000cc80 <vtable for usb_serial_class>:
	...
    cc88:	I...A...=...9...
    cc98:	5...1...-...)...
    cca8:	....

0000ccac <usb_endpoint_config_table>:
    ccac:	....

0000ccb0 <usb_descriptor_list>:
    ccb0:	....l...........
    ccc0:	....C...........
    ccd0:	................
    cce0:	................
    ccf0:	................
    cd00:	....

0000cd04 <_global_impure_ptr>:
    cd04:	....

0000cd08 <_init>:
    cd08:	push	{r3, r4, r5, r6, r7, lr}
    cd0a:	nop
    cd0c:	pop	{r3, r4, r5, r6, r7}
    cd0e:	pop	{r3}
    cd10:	mov	lr, r3
    cd12:	bx	lr

0000cd14 <__init_array_start>:
    cd14:	.word	0x0000c3a9

0000cd18 <__frame_dummy_init_array_entry>:
    cd18:	5...E8...F...F..
    cd28:	5J..MJ..eJ..}J..
    cd38:	.J...Q...R...R..
    cd48:	1R..IR...U...U..
    cd58:	iW..qn......

Disassembly of section .fini:

0000cd64 <_fini>:
    cd64:	push	{r3, r4, r5, r6, r7, lr}
    cd66:	nop

Disassembly of section .data:

1fff9320 <port_E_isr>:
#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
PORT_ISR_FUNCTION_CLZ(E)
1fff9320:	push	{r3, r4, r5, lr}
1fff9322:	ldr	r3, [pc, #32]	; (1fff9344 <port_E_isr+0x24>)
1fff9324:	ldr	r4, [r3, #0]
1fff9326:	str	r4, [r3, #0]
1fff9328:	cbz	r4, 1fff9340 <port_E_isr+0x20>
1fff932a:	ldr	r5, [pc, #28]	; (1fff9348 <port_E_isr+0x28>)
1fff932c:	rbit	r3, r4
1fff9330:	clz	r3, r3
1fff9334:	ldr.w	r3, [r5, r3, lsl #2]
1fff9338:	blx	r3
1fff933a:	subs	r3, r4, #1
1fff933c:	ands	r4, r3
1fff933e:	bne.n	1fff932c <port_E_isr+0xc>
1fff9340:	pop	{r3, r4, r5, pc}
1fff9342:	nop
1fff9344:	.word	0x4004d0a0
1fff9348:	.word	0x1fff9650

1fff934c <port_D_isr>:

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
1fff934c:	push	{r3, r4, r5, lr}
1fff934e:	ldr	r3, [pc, #32]	; (1fff9370 <port_D_isr+0x24>)
1fff9350:	ldr	r4, [r3, #0]
1fff9352:	str	r4, [r3, #0]
1fff9354:	cbz	r4, 1fff936c <port_D_isr+0x20>
1fff9356:	ldr	r5, [pc, #28]	; (1fff9374 <port_D_isr+0x28>)
1fff9358:	rbit	r3, r4
1fff935c:	clz	r3, r3
1fff9360:	ldr.w	r3, [r5, r3, lsl #2]
1fff9364:	blx	r3
1fff9366:	subs	r3, r4, #1
1fff9368:	ands	r4, r3
1fff936a:	bne.n	1fff9358 <port_D_isr+0xc>
1fff936c:	pop	{r3, r4, r5, pc}
1fff936e:	nop
1fff9370:	.word	0x4004c0a0
1fff9374:	.word	0x1fff9630

1fff9378 <port_C_isr>:
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
1fff9378:	push	{r3, r4, r5, lr}
1fff937a:	ldr	r3, [pc, #32]	; (1fff939c <port_C_isr+0x24>)
1fff937c:	ldr	r4, [r3, #0]
1fff937e:	str	r4, [r3, #0]
1fff9380:	cbz	r4, 1fff9398 <port_C_isr+0x20>
1fff9382:	ldr	r5, [pc, #28]	; (1fff93a0 <port_C_isr+0x28>)
1fff9384:	rbit	r3, r4
1fff9388:	clz	r3, r3
1fff938c:	ldr.w	r3, [r5, r3, lsl #2]
1fff9390:	blx	r3
1fff9392:	subs	r3, r4, #1
1fff9394:	ands	r4, r3
1fff9396:	bne.n	1fff9384 <port_C_isr+0xc>
1fff9398:	pop	{r3, r4, r5, pc}
1fff939a:	nop
1fff939c:	.word	0x4004b0a0
1fff93a0:	.word	0x1fff9600

1fff93a4 <port_B_isr>:
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
1fff93a4:	push	{r3, r4, r5, lr}
1fff93a6:	ldr	r3, [pc, #32]	; (1fff93c8 <port_B_isr+0x24>)
1fff93a8:	ldr	r4, [r3, #0]
1fff93aa:	str	r4, [r3, #0]
1fff93ac:	cbz	r4, 1fff93c4 <port_B_isr+0x20>
1fff93ae:	ldr	r5, [pc, #28]	; (1fff93cc <port_B_isr+0x28>)
1fff93b0:	rbit	r3, r4
1fff93b4:	clz	r3, r3
1fff93b8:	ldr.w	r3, [r5, r3, lsl #2]
1fff93bc:	blx	r3
1fff93be:	subs	r3, r4, #1
1fff93c0:	ands	r4, r3
1fff93c2:	bne.n	1fff93b0 <port_B_isr+0xc>
1fff93c4:	pop	{r3, r4, r5, pc}
1fff93c6:	nop
1fff93c8:	.word	0x4004a0a0
1fff93cc:	.word	0x1fff95b0

1fff93d0 <port_A_isr>:
		}                                                     \
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
1fff93d0:	push	{r3, r4, r5, lr}
1fff93d2:	ldr	r3, [pc, #32]	; (1fff93f4 <port_A_isr+0x24>)
1fff93d4:	ldr	r4, [r3, #0]
1fff93d6:	str	r4, [r3, #0]
1fff93d8:	cbz	r4, 1fff93f0 <port_A_isr+0x20>
1fff93da:	ldr	r5, [pc, #28]	; (1fff93f8 <port_A_isr+0x28>)
1fff93dc:	rbit	r3, r4
1fff93e0:	clz	r3, r3
1fff93e4:	ldr.w	r3, [r5, r3, lsl #2]
1fff93e8:	blx	r3
1fff93ea:	subs	r3, r4, #1
1fff93ec:	ands	r4, r3
1fff93ee:	bne.n	1fff93dc <port_A_isr+0xc>
1fff93f0:	pop	{r3, r4, r5, pc}
1fff93f2:	nop
1fff93f4:	.word	0x400490a0
1fff93f8:	.word	0x1fff9578

1fff93fc <__dso_handle>:
1fff93fc:	....

1fff9400 <IRcmdCommands>:
1fff9400:	.:...*...8...(..
1fff9410:	.0... E.e.U.u.G.
1fff9420:	g.W.w.O.o._.}.].
1fff9430:	m.M..x.X.h.H.p.P
1fff9440:	.`..."...2..'...
1fff9450:	7.../...

1fff9458 <LastIRCmd>:
1fff9458:	,

1fff9459 <LastFrameShowed>:
1fff9459:	...

1fff945c <SdVolume::cacheBlockNumber_>:
1fff945c:	....

1fff9460 <SPI>:
1fff9460:	...@............
	...

1fff9498 <Wire>:
1fff9498:	T...............
1fff94a8:	.`.@............
	...

1fff9504 <Wire1>:
1fff9504:	T...............
1fff9514:	.p.@,...........
	...

1fff9570 <analog_config_bits>:
1fff9570:	.

1fff9571 <analog_num_average>:
1fff9571:	...

1fff9574 <__brkval>:
1fff9574:	....

1fff9578 <isr_table_portA>:
1fff9578:	y...y...y...y...
1fff9588:	y...y...y...y...
1fff9598:	y...y...y...y...
1fff95a8:	y...y...

1fff95b0 <isr_table_portB>:
1fff95b0:	y...y...y...y...
1fff95c0:	y...y...y...y...
1fff95d0:	y...y...y...y...
1fff95e0:	y...y...y...y...
1fff95f0:	y...y...y...y...

1fff9600 <isr_table_portC>:
1fff9600:	y...y...y...y...
1fff9610:	y...y...y...y...
1fff9620:	y...y...y...y...

1fff9630 <isr_table_portD>:
1fff9630:	y...y...y...y...
1fff9640:	y...y...y...y...

1fff9650 <isr_table_portE>:
1fff9650:	y...y...

1fff9658 <usb_buffer_available>:
1fff9658:	....

1fff965c <Serial>:
1fff965c:	................

1fff966c <device_descriptor>:
1fff966c:	.......@....u...
1fff967c:	....

1fff9680 <usb_string_manufacturer_name_default>:
1fff9680:	..T.e.e.n.s.y.d.
1fff9690:	u.i.n.o.

1fff9698 <config_descriptor>:
1fff9698:	..C.....2.......
1fff96a8:	...$....$....$..
1fff96b8:	.$.........@....
1fff96c8:	.........@......
1fff96d8:	@...

1fff96dc <usb_string_product_name_default>:
1fff96dc:	..U.S.B. .S.e.r.
1fff96ec:	i.a.l...

1fff96f4 <string0>:
1fff96f4:	....

1fff96f8 <usb_string_serial_number_default>:
1fff96f8:	................
	...

1fff9710 <impure_data>:
1fff9710:	........d.......
	...
1fff97b8:	.........3..4.m.
1fff97c8:	................
	...

1fff9b38 <_impure_ptr>:
1fff9b38:	....

1fff9b3c <__malloc_av_>:
	...
1fff9b44:	<...<...D...D...
1fff9b54:	L...L...T...T...
1fff9b64:	\...\...d...d...
1fff9b74:	l...l...t...t...
1fff9b84:	|...|...........
1fff9b94:	................
1fff9ba4:	................
1fff9bb4:	................
1fff9bc4:	................
1fff9bd4:	................
1fff9be4:	................
1fff9bf4:	................
1fff9c04:	................
1fff9c14:	................
1fff9c24:	........$...$...
1fff9c34:	,...,...4...4...
1fff9c44:	<...<...D...D...
1fff9c54:	L...L...T...T...
1fff9c64:	\...\...d...d...
1fff9c74:	l...l...t...t...
1fff9c84:	|...|...........
1fff9c94:	................
1fff9ca4:	................
1fff9cb4:	................
1fff9cc4:	................
1fff9cd4:	................
1fff9ce4:	................
1fff9cf4:	................
1fff9d04:	................
1fff9d14:	................
1fff9d24:	........$...$...
1fff9d34:	,...,...4...4...
1fff9d44:	<...<...D...D...
1fff9d54:	L...L...T...T...
1fff9d64:	\...\...d...d...
1fff9d74:	l...l...t...t...
1fff9d84:	|...|...........
1fff9d94:	................
1fff9da4:	................
1fff9db4:	................
1fff9dc4:	................
1fff9dd4:	................
1fff9de4:	................
1fff9df4:	................
1fff9e04:	................
1fff9e14:	................
1fff9e24:	........$...$...
1fff9e34:	,...,...4...4...
1fff9e44:	<...<...D...D...
1fff9e54:	L...L...T...T...
1fff9e64:	\...\...d...d...
1fff9e74:	l...l...t...t...
1fff9e84:	|...|...........
1fff9e94:	................
1fff9ea4:	................
1fff9eb4:	................
1fff9ec4:	................
1fff9ed4:	................
1fff9ee4:	................
1fff9ef4:	................
1fff9f04:	................
1fff9f14:	................
1fff9f24:	........$...$...
1fff9f34:	,...,...4...4...

1fff9f44 <__malloc_trim_threshold>:
1fff9f44:	....

1fff9f48 <__malloc_sbrk_base>:
1fff9f48:	....
