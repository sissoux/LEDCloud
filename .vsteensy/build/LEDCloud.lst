
.vsteensy/build/LEDCloud.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00005f70 l    d  .fini	00000000 .fini
1fff8000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff8200 l    d  .dmabuffers	00000000 .dmabuffers
1fff85bc l    d  .usbbuffers	00000000 .usbbuffers
1fff8920 l    d  .data	00000000 .data
1fff94e4 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000301c l     F .text	0000000c startup_default_early_hook
00003028 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff94e4 l       .bss	00000000 completed.8603
00000434 l     F .text	00000000 frame_dummy
1fff94e8 l       .bss	00000000 object.8608
00005f24 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000005ac l     F .text	0000038c _GLOBAL__sub_I_IRcmdCommands
00000000 l    df *ABS*	00000000 StripCommand.cpp
00000000 l    df *ABS*	00000000 StripLED.cpp
00000000 l    df *ABS*	00000000 FastLED.cpp
000009f8 l     F .text	00000018 _GLOBAL__sub_I_pSmartMatrix
00000000 l    df *ABS*	00000000 output_pwm.cpp
00000a1c l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00000a34 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 control_sgtl5000.cpp
00000000 l    df *ABS*	00000000 mixer.cpp
00000000 l    df *ABS*	00000000 output_adat.cpp
00000d70 l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_adc.cpp
00000d88 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 output_dac.cpp
00000da0 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00000db8 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00000de8 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 play_sd_wav.cpp
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
000013f0 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00001408 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00001420 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 input_pdm.cpp
00001438 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_tdm.cpp
00001450 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 output_i2s.cpp
000017d4 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
1fff8200 l     O .dmabuffers	00000200 i2s_tx_buffer
00000000 l    df *ABS*	00000000 output_spdif.cpp
000017ec l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
00001b5e l       .text	00000000 L_1480_delayMicroseconds
00001b6c l       .text	00000000 L_1494_delayMicroseconds
00001bb2 l       .text	00000000 L_1545_delayMicroseconds
1fffabc4 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 File.cpp
00000000 l    df *ABS*	00000000 SD.cpp
00001f90 l     F .text	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 SdVolume.cpp
00002050 l     F .text	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 SdFile.cpp
00002234 l     F .text	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00000000 l    df *ABS*	00000000 Sd2Card.cpp
00002ae8 l     F .text	00000010 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
1fffae2c l     O .bss	00000004 settings
1fffae30 l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 irRecv.cpp
00000000 l    df *ABS*	00000000 IRremote.cpp
00000000 l    df *ABS*	00000000 .vsteensy/build/lib/Audio//memcpy_audio.o
00002c64 l       .text	00000000 .loopLR
00002ca8 l       .text	00000000 .loopL
00002ce8 l       .text	00000000 .loopR
00002d24 l       .text	00000000 .loopQuad
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fffafd9 l     O .bss	00000001 tx_noautoflush
1fffafdc l     O .bss	00000004 tx_packet
1fffafe0 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
1fffafe5 l     O .bss	00000001 calibrating
1fff8b14 l     O .data	00000001 analog_config_bits
1fffafe6 l     O .bss	00000001 analog_reference_internal
1fff8b15 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
0000305c l     F .text	00000002 dummy_isr
1fff8920 l     F .data	0000002c port_E_isr
1fff894c l     F .data	0000002c port_D_isr
1fff8978 l     F .data	0000002c port_C_isr
1fff89a4 l     F .data	0000002c port_B_isr
1fff89d0 l     F .data	0000002c port_A_isr
00003060 l     F .text	00000044 digitalWrite.part.1
000030a4 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff8bfc l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fffafec l     O .bss	00000004 ep0_tx_ptr
1fffaff0 l     O .bss	00000010 rx_last
1fffb000 l     O .bss	00000002 ep0_tx_len
1fffb004 l     O .bss	00000040 ep0_rx0_buf
1fffb044 l     O .bss	00000010 rx_first
1fffb054 l     O .bss	00000001 ep0_tx_data_toggle
1fffb058 l     O .bss	00000040 ep0_rx1_buf
1fffb098 l     O .bss	00000010 tx_first
1fff8000 l     O .usbdescriptortable	000000a0 table
1fffb0a8 l     O .bss	00000010 tx_last
1fffb0b8 l     O .bss	00000008 setup
1fffb0c0 l     O .bss	00000001 ep0_tx_bdt_bank
1fffb0c4 l     O .bss	00000008 reply_buffer
1fffb0d0 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 yield.cpp
1fffb0f4 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 serial2.c
1fffb128 l     O .bss	00000004 rts_pin
1fffb12c l     O .bss	00000001 transmitting
1fffb12d l     O .bss	00000001 rx_buffer_tail
1fffb130 l     O .bss	00000028 tx_buffer
1fffb158 l     O .bss	00000040 rx_buffer
1fffb198 l     O .bss	00000001 rx_buffer_head
1fffb199 l     O .bss	00000001 tx_buffer_tail
1fffb19c l     O .bss	00000004 transmit_pin
1fffb1a0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fffb1a4 l     O .bss	00000004 rts_pin
1fffb1a8 l     O .bss	00000001 rx_buffer_head
1fffb1a9 l     O .bss	00000001 rx_buffer_tail
1fffb1ac l     O .bss	00000040 tx_buffer
1fffb1ec l     O .bss	00000040 rx_buffer
1fffb22c l     O .bss	00000001 transmitting
1fffb22d l     O .bss	00000001 tx_buffer_tail
1fffb230 l     O .bss	00000004 transmit_pin
1fffb234 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff8c00 l     O .data	00000012 device_descriptor
1fff8c2c l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fffb238 l     O .bss	00000004 rts_pin
1fffb23c l     O .bss	00000001 rx_buffer_head
1fffb23d l     O .bss	00000001 rx_buffer_tail
1fffb240 l     O .bss	00000028 tx_buffer
1fffb268 l     O .bss	00000040 rx_buffer
1fffb2a8 l     O .bss	00000001 transmitting
1fffb2a9 l     O .bss	00000001 tx_buffer_tail
1fffb2ac l     O .bss	00000004 transmit_pin
1fffb2b0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_muldivsf3.o
00000000 l    df *ABS*	00000000 _arm_fixunssfsi.o
00000000 l    df *ABS*	00000000 aeabi_atexit.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00005950 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
1fff8ca8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/arduino-1.8.9/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/crti.o
00000000 l    df *ABS*	00000000 c:/arduino-1.8.9/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/crtn.o
00000000 l    df *ABS*	00000000 spi_interrupt.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff94e4 l       .bss	00000000 __bss_start__
00000000 l       *UND*	00000000 XY(unsigned char, unsigned char)
1fffb300 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00003014  w    F .text	00000006 adc0_isr
00002e88 g     F .text	0000001c usb_serial_available
1fffb100 g     O .bss	00000004 AudioStream::memory_pool
000044c4  w    F .text	0000009c yield
000022a0 g     F .text	0000002a SdFile::addCluster()
1fff8c14 g     O .data	00000018 usb_string_manufacturer_name_default
000049e8 g     F .text	00000020 serial_available
1fff8a6c g     O .data	0000006c Wire1
00002fcc  w    F .text	00000048 hard_fault_isr
00003014  w    F .text	00000006 dma_ch6_isr
1fffb104 g     O .bss	00000001 AudioStream::update_scheduled
00005c84 g     O .text	0000000c vtable for AudioOutputI2S
0000046c  w    F .text	00000054 ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)
00001948 g     F .text	0000012c TwoWire::isr()
000048bc g     F .text	00000020 serial2_available
1fffb124 g     O .bss	00000002 AudioStream::memory_used
00003014  w    F .text	00000006 uart0_lon_isr
00000554  w    F .text	00000058 AudioPlaySdWav::AudioPlaySdWav()
000034fc g     F .text	000000c8 usb_rx_memory
00001f3c g     F .text	0000000a File::flush()
00003014  w    F .text	00000006 dma_ch8_isr
00005884 g     F .text	00000002 __malloc_unlock
1fff8b1c g     O .data	00000038 isr_table_portA
00002670 g     F .text	00000058 Sd2Card::chipSelectHigh()
00002eec g     F .text	000000e0 analog_init
000035c4 g     F .text	00000084 usb_tx
00005068 g     F .text	00000136 .hidden __divsf3
00003014  w    F .text	00000006 portcd_isr
000016fc g     F .text	000000d8 AudioOutputI2S::begin()
000022cc g     F .text	0000001e SdFile::close()
00002658 g     F .text	00000018 SdFile::write(unsigned char)
0000441c g     F .text	00000098 MillisTimer::runFromTimer()
00003014  w    F .text	00000006 can1_rx_warn_isr
00005f74 g       .fini	00000000 __exidx_end
00003014  w    F .text	00000006 dma_error_isr
1fffabb0 g     O .bss	00000004 AudioOutputI2S::block_right_2nd
1fffb0ec g     O .bss	00000001 EventResponder::runningFromYield
00001ce8 g     F .text	0000000c i2c0_isr
00004564 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
000051f8 g     F .text	0000000c __errno
00001eb0 g     F .text	00000022 File::write(unsigned char const*, unsigned int)
00003014  w    F .text	00000006 portd_isr
00003014  w    F .text	00000006 enet_error_isr
00001f64 g     F .text	00000002 File::~File()
1fffb0d8 g     O .bss	00000004 EventResponder::firstInterrupt
1fffa268 g     O .bss	00000014 patchCord2
00001adc g     F .text	0000000c sda_rising_isr1()
00003014  w    F .text	00000006 tpm1_isr
00005da8 g     O .text	00000110 digital_pin_to_info_PGM
1fffb2fc g     O .bss	00000004 errno
00005f74 g       .fini	00000000 _etext
00001d18 g     F .text	00000134 _spi_dma_rxISR0()
1fff94e4 g       .bss	00000000 _sbss
00002480 g     F .text	000001d8 SdFile::write(void const*, unsigned int)
1fffac24 g     O .bss	00000200 SdVolume::cacheBuffer_
00004cf0 g     F .text	00000160 .hidden __aeabi_fadd
00004cec g     F .text	00000164 .hidden __subsf3
1fffa578 g     O .bss	0000000c sgtl5000_1
000032cc g     F .text	0000001c digitalRead
00003014  w    F .text	00000006 porte_isr
000046c8 g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
00003014  w    F .text	00000006 portb_isr
00001268 g     F .text	00000188 AudioPlaySdWav::update()
00003014  w    F .text	00000006 spi1_isr
00003014  w    F .text	00000006 uart3_status_isr
00004cdc  w    F .text	00000002 serialEvent1()
00003014  w    F .text	00000006 mcm_isr
1fffa27c g     O .bss	00000014 patchCord3
000043b4 g     F .text	00000068 MillisTimer::addToActiveList()
00000a4c  w    F .text	00000004 AudioControlSGTL5000::disable()
00002144 g     F .text	000000f0 SdVolume::allocContiguous(unsigned long, unsigned long*)
00001f48 g     F .text	0000001c File::File()
00001bd4 g     F .text	00000114 TwoWire::endTransmission(unsigned char)
1fffb0dc g     O .bss	00000004 EventResponder::lastInterrupt
000048dc g     F .text	0000010c uart1_status_isr
00002d54 g     F .text	00000134 memcpy
00003014  w    F .text	00000006 randnum_isr
00005c6c g     O .text	0000000c vtable for AudioMixer4
00001e98 g     F .text	00000016 File::available()
000009bc g     F .text	00000038 StripLED::StripLED()
1fffae28 g     O .bss	00000004 SdFile::dateTime_
1fff8ba4 g     O .data	00000030 isr_table_portC
1fffafe8 g     O .bss	00000004 systick_millis_count
1fffac1c g     O .bss	00000004 SdVolume::cacheMirrorBlock_
00002fcc  w    F .text	00000048 bus_fault_isr
00001ae8 g     F .text	000000ec TwoWire::wait_idle()
00003014  w    F .text	00000006 watchdog_isr
1fffae34 g     O .bss	000001a4 irparams
00001cf4 g     F .text	0000000c i2c1_isr
1fffb0cc g     O .bss	00000001 usb_configuration
00003014  w    F .text	00000006 dma_ch11_isr
00000000  w      *UND*	00000000 __fini_array_end
00002008 g     F .text	00000048 SdVolume::cacheRawBlock(unsigned long, unsigned char)
1fff97b4 g     O .bss	00000a9c StripCommander
00004590  w    F .text	00000002 serialEvent2()
00003014  w    F .text	00000006 i2c2_isr
1fffb108 g     O .bss	00000018 AudioStream::memory_pool_available_mask
1fffab4c g     O .bss	00000008 AudioOutputAnalog::dma
1fff8c14  w    O .data	00000018 usb_string_manufacturer_name
1fffb2f4 g     O .bss	00000008 usb_rx_byte_count_data
1fff97a0 g     O .bss	00000014 patchCord9
00003014  w    F .text	00000006 pit1_isr
00005254 g     F .text	00000010 malloc
00003014  w    F .text	00000006 dma_ch4_isr
00005cb0 g     O .text	00000020 TwoWire::i2c1_hardware
00004838 g     F .text	00000084 software_isr
00003014  w    F .text	00000006 dma_ch7_isr
00001814  w    F .text	0000001e TwoWire::read()
00001d00  w    F .text	00000018 EventResponder::triggerEvent(int, void*)
00004e58 g     F .text	0000001c .hidden __aeabi_i2f
00004118 g     F .text	000000d8 usb_init
1fffb122 g     O .bss	00000002 AudioStream::memory_pool_first_mask
1fffa2e0 g     O .bss	00000014 patchCord10
00003014  w    F .text	00000006 lptmr_isr
1fffb2bc g     O .bss	00000004 __malloc_top_pad
0000329c g     F .text	00000024 rtc_set
1fffa2f4 g     O .bss	00000280 Rain
1fff89fc g     O .data	00000000 .hidden __dso_handle
00000504  w    F .text	00000050 AudioStream::AudioStream(unsigned char, audio_block_struct**)
1fff8920 g       .data	00000000 _sdata
00005c90 g     O .text	00000020 TwoWire::i2c0_hardware
00005888 g     F .text	00000024 _sbrk_r
000001bc g     F .text	000001d8 ResetHandler
00003014  w    F .text	00000006 can1_bus_off_isr
00002c5c g     F .text	00000000 memcpy_tointerleaveLR
00003014  w    F .text	00000006 ftm2_isr
1fffb2e8 g     O .bss	00000008 usb_cdc_line_coding
000032c0 g     F .text	0000000a digitalWrite
1fffb0e4 g     O .bss	00000004 EventResponder::lastYield
00003014  w    F .text	00000006 uart5_status_isr
00003014  w    F .text	00000006 lpuart0_status_isr
00005eb8 g     O .text	00000004 usb_endpoint_config_table
00003014  w    F .text	00000006 dma_ch9_isr
1fffaba8 g     O .bss	00000002 AudioOutputI2S::block_right_offset
00003014  w    F .text	00000006 pit2_isr
00004be4 g     F .text	00000020 serial3_available
1fffb2b8 g     O .bss	00000004 __malloc_max_sbrked_mem
000026c8 g     F .text	0000009c Sd2Card::chipSelectLow()
000032e8 g     F .text	0000000a pinMode
000034b0 g     F .text	0000004c usb_free
00003014  w    F .text	00000006 i2c3_isr
1fffab1c g     O .bss	00000010 FastLED
1fffac20 g     O .bss	00000004 SdVolume::sdCard_
00001f00 g     F .text	0000003a File::peek()
00005f74 g       .fini	00000000 __exidx_start
00000a10  w    F .text	0000000c DMAChannel::~DMAChannel()
00003014  w    F .text	00000006 pit0_isr
1fffb0e8 g     O .bss	00000004 EventResponder::firstYield
00002410 g     F .text	00000064 SdFile::seekSet(unsigned long)
00005f10 g     O .text	00000004 _global_impure_ptr
1fffab98 g     O .bss	00000002 AudioOutputI2S::block_left_offset
00003014  w    F .text	00000006 can1_error_isr
00002a5c g     F .text	0000008c Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
00005204 g     F .text	00000050 __libc_init_array
1fffb300 g       .bss	00000000 __bss_end
00001808  w    F .text	0000000c TwoWire::available()
00003014  w    F .text	00000006 can0_wakeup_isr
00003014  w    F .text	00000006 flash_cmd_isr
00004c04 g     F .text	000000d8 uart2_status_isr
0000302c g     F .text	0000002c _sbrk
1fffb0f0 g     O .bss	00000004 MillisTimer::listWaiting
0000311c g     F .text	000000f8 attachInterrupt
1fffab90 g     O .bss	00000008 AudioOutputTDM::dma
1fff8b18 g     O .data	00000004 __brkval
1fffafe4 g     O .bss	00000001 usb_cdc_line_rtsdtr
00002ea4 g     F .text	00000048 usb_serial_flush_callback
00001f68 g     F .text	0000000a File::read(void*, unsigned short)
00002af8 g     F .text	00000010 IRrecv::IRrecv(int)
00005f14 g     F .text	00000000 _init
1fffa864 g     O .bss	00000038 mixer2
00003014  w    F .text	00000006 svcall_isr
00003014  w    F .text	00000006 dma_ch15_isr
00004cec g     F .text	00000164 .hidden __aeabi_fsub
00005cd0 g     O .text	00000024 vtable for TwoWire
00003014  w    F .text	00000006 uart1_error_isr
00005964 g     F .text	00000028 __libc_fini_array
00003014  w    F .text	00000006 usbhs_phy_isr
1fffab54 g     O .bss	00000008 AudioInputAnalogStereo::dma0
1fffb300 g       .bss	00000000 _ebss
1fffab3c g     O .bss	00000008 AudioOutputADAT::dma
1fffaba4 g     O .bss	00000004 AudioOutputI2S::block_right_1st
1fffabb4 g     O .bss	00000001 AudioOutputI2S::update_responsibility
000004cc  w    F .text	00000018 AudioPlaySdWav::~AudioPlaySdWav()
00003014 g     F .text	00000006 unused_isr
00003014  w    F .text	00000006 spi0_isr
00004e84 g     F .text	0000007c .hidden __floatdisf
00003014  w    F .text	00000006 dma_ch3_isr
00002d1a g     F .text	00000000 memcpy_tointerleaveQuad
00001e4c g     F .text	0000002e SPIClass::notUsingInterrupt(IRQ_NUMBER_t)
00000a10  w    F .text	0000000c DMAChannel::~DMAChannel()
00001f64 g     F .text	00000002 File::~File()
00003014  w    F .text	00000006 flash_error_isr
00002af8 g     F .text	00000010 IRrecv::IRrecv(int)
00003014  w    F .text	00000006 uart5_error_isr
00003014  w    F .text	00000006 rtc_seconds_isr
00005cf4 g     O .text	00000078 SPIClass::spi0_hardware
00003014  w    F .text	00000006 pdb_isr
00002fcc  w    F .text	00000048 usage_fault_isr
00003014  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001bc _VectorsFlash
00003014  w    F .text	00000006 dma_ch14_isr
00003214 g     F .text	00000088 detachInterrupt
00000000  w      *UND*	00000000 __deregister_frame_info
1fffb2f0 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fffa2cc g     O .bss	00000014 patchCord8
000044b4 g     F .text	00000010 systick_isr
00003014  w    F .text	00000006 rtc_alarm_isr
1fffab74 g     O .bss	00000002 AudioUsingSPICount
1fffabb8 g     O .bss	00000004 AudioOutputI2S::block_left_2nd
1fffb0f8 g     O .bss	00000004 AudioStream::first_update
00003014  w    F .text	00000006 dma_ch2_isr
1fffb0fc g     O .bss	00000002 AudioStream::memory_used_max
00003014  w    F .text	00000006 ftm1_isr
000004c0  w    F .text	0000000c AudioConnection::~AudioConnection()
00005c50 g     O .text	0000001c vtable for AudioControlSGTL5000
0000301c  w    F .text	0000000c startup_early_hook
00003014  w    F .text	00000006 dma_ch13_isr
00005d6c g     O .text	00000024 vtable for File
00000a50  w    F .text	00000004 AudioControlSGTL5000::inputLevel(float)
00003014  w    F .text	00000006 uart2_error_isr
1fff9500 g     O .bss	00000280 ThunderRight
1fffabac g     O .bss	00000004 AudioOutputI2S::block_left_1st
1fff8c8c g     O .data	00000016 usb_string_serial_number_default
00002fcc g     F .text	00000048 fault_isr
00005a28 g     F .text	000001d0 _free_r
00003014  w    F .text	00000006 usb_charge_isr
00002b08 g     F .text	00000154 cmt_isr
00003014  w    F .text	00000006 usbhs_isr
1fff94e0 g     O .data	00000004 __malloc_sbrk_base
00003014  w    F .text	00000006 ftm3_isr
1fffa81c g     O .bss	00000010 jsonBuffer
00003014  w    F .text	00000006 tsi0_isr
00003058  w    F .text	00000002 __cxa_pure_virtual
00003014  w    F .text	00000006 spi2_isr
1fffab5c g     O .bss	00000008 AudioInputAnalogStereo::dma1
1fffa59c g     O .bss	00000280 ThunderLeft
00004e58 g     F .text	0000001c .hidden __floatsisf
00004560  w    F .text	00000002 serialEvent()
00000b8c  w    F .text	0000005c AudioControlSGTL5000::inputSelect(int)
1fffb055 g     O .bss	00000001 usb_reboot_timer
1fffab2c g     O .bss	00000008 AudioOutputPWM::dma
000058ac g     F .text	000000a4 __register_exitproc
000046e0 g     F .text	00000042 AudioStream::receiveWritable(unsigned int)
00000504  w    F .text	00000050 AudioStream::AudioStream(unsigned char, audio_block_struct**)
1fff8bf4 g     O .data	00000008 isr_table_portE
00000021 g       *ABS*	00000000 _teensy_model_identifier
1fffb2c0 g     O .bss	00000028 __malloc_current_mallinfo
00000c50  w    F .text	0000002c AudioControlSGTL5000::volume(float)
00003014  w    F .text	00000006 can0_bus_off_isr
00000e9c g     F .text	000003cc AudioPlaySdWav::consume(unsigned long)
1fffb0c1 g     O .bss	00000001 usb_rx_memory_needed
00003648 g     F .text	00000ace usb_isr
000051ec g     F .text	0000000c __cxa_atexit
00004808 g     F .text	00000030 AudioStream::update_setup()
00005068 g     F .text	00000136 .hidden __aeabi_fdiv
1fff8ad8 g     O .data	00000038 SPI
00003014  w    F .text	00000006 uart3_error_isr
0000156c g     F .text	00000098 AudioOutputI2S::update()
00004e74 g     F .text	0000008c .hidden __floatundisf
1fffb0e0 g     O .bss	00000004 MillisTimer::listActive
00003014  w    F .text	00000006 porta_isr
1fff85bc g     O .usbbuffers	00000360 usb_buffer_memory
1fffa584 g     O .bss	00000014 patchCord5
00003014  w    F .text	00000006 low_voltage_isr
1fff90d4 g     O .data	00000408 __malloc_av_
00004e50 g     F .text	00000024 .hidden __aeabi_ui2f
00003014  w    F .text	00000006 can0_error_isr
00003390 g     F .text	000000e0 _init_Teensyduino_internal_
00001a74 g     F .text	0000005c TwoWire::sda_rising_isr()
00003014  w    F .text	00000006 dma_ch12_isr
1fffab80 g     O .bss	00000008 AudioInputI2S::dma
00005880 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003014  w    F .text	00000006 can1_wakeup_isr
1fff8400 g     O .dmabuffers	000001bc _VectorsRam
00003014  w    F .text	00000006 pit3_isr
00003014  w    F .text	00000006 enet_rx_isr
00003014  w    F .text	00000006 portc_isr
00002c9a g     F .text	00000000 memcpy_tointerleaveL
1fffab64 g     O .bss	00000008 AudioInputI2SQuad::dma
000057e4 g     F .text	0000009a memset
00000be8 g     F .text	00000066 AudioControlSGTL5000::volumeInteger(unsigned int)
00004594 g     F .text	00000002 main
000020d4 g     F .text	00000070 SdVolume::fatGet(unsigned long, unsigned long*) const
1fffab9c g     O .bss	00000008 AudioOutputI2S::dma
1fffb2b4 g     O .bss	00000004 __malloc_max_total_mem
00004e84 g     F .text	0000007c .hidden __aeabi_l2f
00002fcc  w    F .text	00000048 memmanage_fault_isr
00001f74 g     F .text	0000001c File::close()
000004e4  w    F .text	00000020 ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()
00000a54 g     F .text	00000058 AudioControlSGTL5000::write(unsigned int, unsigned int)
00004b14 g     F .text	00000084 usb_init_serialnumber
000022ec g     F .text	00000124 SdFile::read(void*, unsigned int)
00005f70 g       .text	00000000 __init_array_end
00005274 g     F .text	00000570 _malloc_r
00003014  w    F .text	00000006 debugmonitor_isr
1fff8bd4 g     O .data	00000020 isr_table_portD
000042ec g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
00000aac g     F .text	000000e0 AudioControlSGTL5000::enable()
00000000  w      *UND*	00000000 __libc_fini
00001ad0 g     F .text	0000000c sda_rising_isr0()
00004e74 g     F .text	0000008c .hidden __aeabi_ul2f
00003014  w    F .text	00000006 cmp1_isr
00000c7c g     F .text	000000f4 AudioMixer4::update()
00002474 g     F .text	0000000c SdFile::sync()
00003014  w    F .text	00000006 ftm0_isr
00000e2c g     F .text	00000070 AudioPlaySdWav::parse_format()
0000598c g     F .text	0000009c _malloc_trim_r
1fffa89c g     O .bss	00000280 ThunderCenter
1fff8c88 g     O .data	00000004 string0
00004f00 g     F .text	00000168 .hidden __mulsf3
00003028  w    F .text	00000002 startup_late_hook
00000938 g     F .text	00000084 StripCommand::StripCommand()
1fff8c70  w    O .data	00000016 usb_string_product_name
000032f4 g     F .text	0000009c delay
00003014  w    F .text	00000006 tpm0_isr
1fffb0d4 g     O .bss	00000002 dma_channel_allocated_mask
00005f70 g     F .fini	00000000 _fini
1fff8b10 g     O .data	00000004 SdVolume::cacheBlockNumber_
0000188c g     F .text	00000026 TwoWire::write(unsigned char)
1fffab34 g     O .bss	00000008 AudioOutputPT8211::dma
00003014  w    F .text	00000006 i2s0_rx_isr
00003014  w    F .text	00000006 uart4_error_isr
00000554  w    F .text	00000058 AudioPlaySdWav::AudioPlaySdWav()
000009f4 g     F .text	00000004 atexit
00001e80 g     F .text	00000018 File::write(unsigned char)
1fffabc8 g     O .bss	00000054 SD
00004ce4 g     F .text	0000016c .hidden __aeabi_frsub
00004640 g     F .text	00000054 AudioStream::release(audio_block_struct*)
00003014  w    F .text	00000006 can0_message_isr
1fff90d0 g     O .data	00000004 _impure_ptr
00003014  w    F .text	00000006 can1_message_isr
1fffabbc g     O .bss	00000008 AudioOutputSPDIF::dma
00003014  w    F .text	00000006 nmi_isr
1fff8a00 g     O .data	0000006c Wire
00004694 g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
00004f00 g     F .text	00000168 .hidden __aeabi_fmul
00000938 g     F .text	00000084 StripCommand::StripCommand()
00005f20 g       .text	00000000 __preinit_array_end
1fffab78 g     O .bss	00000008 AudioInputTDM::dma
00003014  w    F .text	00000006 sdhc_isr
1fffa598 g     O .bss	00000004 IRRepeatTimeout
00004598 g     F .text	000000a8 AudioStream::allocate()
00001834  w    F .text	00000016 TwoWire::peek()
0000184c  w    F .text	00000002 TwoWire::flush()
00005ebc g     O .text	00000054 usb_descriptor_list
00002764 g     F .text	00000054 Sd2Card::waitNotBusy(unsigned int)
00003014  w    F .text	00000006 dma_ch10_isr
00001e7c  w    F .text	00000002 Print::flush()
1fffa254 g     O .bss	00000014 patchCord1
00003014  w    F .text	00000006 uart0_error_isr
1fffa290 g     O .bss	00000014 patchCord4
00003470 g     F .text	00000040 usb_malloc
00003014  w    F .text	00000006 i2s0_isr
20008000 g       .bss	00000000 _estack
000042b8 g     F .text	00000034 DMAChannel::release()
00001ed4 g     F .text	0000002a File::read()
00003014  w    F .text	00000006 enet_timer_isr
00004724 g     F .text	00000068 AudioConnection::connect()
00002870 g     F .text	00000060 Sd2Card::waitStartBlock()
1fffab88 g     O .bss	00000008 AudioInputPDM::dma
00001850 g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
1fff94e4 g       .data	00000000 _edata
1fffa2b8 g     O .bss	00000014 patchCord7
00003014  w    F .text	00000006 i2s0_tx_isr
00003014  w    F .text	00000006 adc1_isr
1fff9780 g     O .bss	00000020 i2s1
00003014  w    F .text	00000006 cmp0_isr
00004b98 g     F .text	0000004c ultoa
00005d90 g     O .text	00000018 vtable for SdFile
000051a0 g     F .text	0000003e .hidden __aeabi_f2uiz
000004e4  w    F .text	00000020 ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()
00001f48 g     F .text	0000001c File::File()
000018b4 g     F .text	00000094 TwoWire::begin()
00000e00 g     F .text	0000002a AudioPlaySdWav::begin()
0000436c g     F .text	00000044 EventResponder::runFromInterrupt()
1fff94dc g     O .data	00000004 __malloc_trim_threshold
0000478c g     F .text	0000007a AudioConnection::disconnect()
00002990 g     F .text	000000cc Sd2Card::writeData(unsigned char, unsigned char const*)
00004e50 g     F .text	00000024 .hidden __floatunsisf
1fffafd8 g     O .bss	00000001 usb_cdc_transmit_flush_timer
000009bc g     F .text	00000038 StripLED::StripLED()
1fffb126 g     O .bss	00000002 AudioStream::cpu_cycles_total
00003014  w    F .text	00000006 pit_isr
000004cc  w    F .text	00000018 AudioPlaySdWav::~AudioPlaySdWav()
000027b8 g     F .text	000000b8 Sd2Card::cardCommand(unsigned char, unsigned long)
00001fb4 g     F .text	00000054 SdVolume::cacheFlush()
00005c04  w    O .text	0000000c vtable for ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>
00003014  w    F .text	00000006 dac0_isr
00005f20 g       .text	00000000 __init_array_start
00003014  w    F .text	00000006 can1_tx_warn_isr
000051a0 g     F .text	0000003e .hidden __fixunssfsi
000028d0 g     F .text	000000c0 Sd2Card::SD_readBlock(unsigned long, unsigned char*)
00004a08 g     F .text	0000010c uart0_status_isr
00001468 g     F .text	00000104 AudioOutputI2S::isr()
00003014  w    F .text	00000006 mcg_isr
00001604 g     F .text	000000f8 AudioOutputI2S::config_i2s()
00000400 g     O .text	00000010 flashconfigbytes
000041f0 g     F .text	000000c8 DMAChannel::begin(bool)
1fff8c70 g     O .data	00000016 usb_string_product_name_default
1fffab6c g     O .bss	00000008 AudioOutputI2SQuad::dma
00003014  w    F .text	00000006 dma_ch1_isr
1fffa2a4 g     O .bss	00000014 patchCord6
00002cda g     F .text	00000000 memcpy_tointerleaveR
00003014  w    F .text	00000006 dma_ch5_isr
00003014  w    F .text	00000006 can0_rx_warn_isr
00003014  w    F .text	00000006 can0_tx_warn_isr
00003014  w    F .text	00000006 uart4_status_isr
00000000  w      *UND*	00000000 _Jv_RegisterClasses
1fffab44 g     O .bss	00000008 AudioInputAnalog::dma
1fffb120 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00005f20 g       .text	00000000 __preinit_array_start
00005bf8  w    O .text	0000000c vtable for AudioStream
00004ce0  w    F .text	00000002 serialEvent3()
000051e0 g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00005c78 g     O .text	0000000c vtable for AudioPlaySdWav
00003014  w    F .text	00000006 cmp2_isr
00004cf0 g     F .text	00000160 .hidden __addsf3
1fffa82c g     O .bss	00000038 mixer1
000043b0 g     F .text	00000004 pendablesrvreq_isr
00001804  w    F .text	00000004 Print::availableForWrite()
000004c0  w    F .text	0000000c AudioConnection::~AudioConnection()
1fff8b54 g     O .data	00000050 isr_table_portB
00003014  w    F .text	00000006 wakeup_isr
1fffa250 g     O .bss	00000004 RefreshOutputTimer
00003014  w    F .text	00000006 cmp3_isr
00005264 g     F .text	00000010 free
1fffae24 g     O .bss	00000001 SdVolume::cacheDirty_
00003014  w    F .text	00000006 tpm2_isr
00003014  w    F .text	00000006 dma_ch0_isr
1fff8c8c  w    O .data	00000016 usb_string_serial_number
00003014  w    F .text	00000006 enet_tx_isr
1fffa574 g     O .bss	00000001 IR



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... .....0.../..
      10:	./.../.../.../..
      20:	./.../.../...0..
      30:	.0.../...C...D..
      40:	.0...0...0...0..
      50:	.0...0...0...0..
      60:	.0...0...0...0..
      70:	.0...0...0...0..
      80:	.0...0...0...0..
      90:	.0...0...0...0..
      a0:	.........0...0..
      b0:	.0...0...0...0..
      c0:	.0...0...0...0..
      d0:	.0...0...0...0..
      e0:	.0...0...0...0..
      f0:	.0...J...0...H..
     100:	.0...L...0...0..
     110:	.0...0...0...0..
     120:	.0...0...0...0..
     130:	.0...0...0...0..
     140:	.0...+...0...0..
     150:	.0...0...0...0..
     160:	.0..I6...0...0..
     170:	.0...0...0...0..
     180:	.0...0...0...0..
     190:	.0...0...0...0..
     1a0:	.0...0...0...0..
     1b0:	.0...0..9H..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	movw	r2, #55592	; 0xd928
     1ca:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	nop
	__asm__ volatile ("nop");
     1ce:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	bl	301c <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	mov.w	r2, #150994944	; 0x9000000
     1da:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	ldr	r3, [r2, #0]
     1e8:	ands.w	r3, r3, #256	; 0x100
     1ec:	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	mov.w	r3, #5376	; 0x1500
     1f6:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	ldrb	r2, [r3, #0]
     1fc:	lsls	r1, r2, #28
     1fe:	bpl.n	208 <ResetHandler+0x4c>
     200:	ldrb	r2, [r3, #0]
     202:	orr.w	r2, r2, #8
     206:	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	movs	r2, #42	; 0x2a
     20e:	strb	r2, [r3, #0]
     210:	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	cmp	r3, r1
     216:	bcs.n	222 <ResetHandler+0x66>
     218:	ldr.w	r0, [r2, #4]!
     21c:	str.w	r0, [r3], #4
     220:	b.n	214 <ResetHandler+0x58>
     222:	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	movs	r2, #0
     228:	cmp	r3, r1
     22a:	bcs.n	232 <ResetHandler+0x76>
     22c:	str.w	r2, [r3], #4
     230:	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	movs	r3, #0
     238:	ldr.w	r0, [r2, r3, lsl #2]
     23c:	str.w	r0, [r1, r3, lsl #2]
     240:	adds	r3, #1
     242:	cmp	r3, #111	; 0x6f
     244:	bne.n	238 <ResetHandler+0x7c>
     246:	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	movs	r1, #128	; 0x80
     24c:	strb.w	r1, [r3], #1
     250:	cmp	r3, r2
     252:	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	movs	r2, #138	; 0x8a
     25e:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	sub.w	r3, r3, #4096	; 0x1000
     264:	movs	r2, #36	; 0x24
     266:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	movs	r2, #160	; 0xa0
     26a:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	ldrb	r2, [r3, #6]
     26e:	lsls	r2, r2, #30
     270:	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	ldrb	r2, [r3, #6]
     274:	lsls	r4, r2, #27
     276:	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	ldrb	r3, [r2, #6]
     27c:	and.w	r3, r3, #12
     280:	cmp	r3, #8
     282:	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	movs	r2, #3
     288:	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	movs	r2, #64	; 0x40
     28c:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r0, r2, #26
     292:	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	ldrb	r1, [r2, #6]
     298:	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	lsls	r1, r1, #25
     29c:	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	movs	r1, #2
     2a6:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	movs	r2, #32
     2aa:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	ldrb	r2, [r3, #6]
     2ae:	and.w	r2, r2, #12
     2b2:	cmp	r2, #12
     2b4:	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	movs	r2, #0
     2c4:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	movs	r2, #7
     2c8:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	bl	3390 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	ldr	r3, [r3, #0]
     2dc:	lsls	r2, r3, #31
     2de:	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	bl	329c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	ldrb	r3, [r3, #0]
     2f0:	lsls	r3, r3, #25
     2f2:	bpl.n	308 <ResetHandler+0x14c>
     2f4:	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	ldr	r2, [r4, #0]
     2fa:	cmp	r2, r3
     2fc:	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	bl	329c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	movs	r3, #0
     306:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	bl	5204 <__libc_init_array>

	startup_late_hook();
     30c:	bl	3028 <startup_late_hook>
	main();
     310:	bl	4594 <main>
     314:	b.n	314 <ResetHandler+0x158>
     316:	nop
     318:	.word	0x4005200e
     31c:	.word	0x40048030
     320:	.word	0x00043f82
     324:	.word	0x2b000001
     328:	.word	0x4003d010
     32c:	.word	0x4003d014
     330:	.word	0x4007d002
     334:	.word	0x4007e000
     338:	.word	0x1fff94e4
     33c:	.word	0x00005f70
     340:	.word	0x1fff8920
     344:	.word	0x1fff94e4
     348:	.word	0x1fffb300
     34c:	.word	0x1fff8400
     350:	.word	0x00000000
     354:	.word	0xe000e400
     358:	.word	0xe000e45f
     35c:	.word	0xe000ed08
     360:	.word	0x40065000
     364:	.word	0x40064000
     368:	.word	0x40048044
     36c:	.word	0x01030000
     370:	.word	0x40048004
     374:	.word	0x000510c0
     378:	.word	0xe000e014
     37c:	.word	0x000176ff
     380:	.word	0x20200000
     384:	.word	0x00000031
     388:	.word	0x4003e01c
     38c:	.word	0x5a94c3a5
     390:	.word	0x4007f000
     394:	.word	0xffffffff
     398:	.word	0xffffffff
     39c:	.word	0xffffffff
     3a0:	.word	0xffffffff
     3a4:	.word	0xffffffff
     3a8:	.word	0xffffffff
     3ac:	.word	0xffffffff
     3b0:	.word	0xffffffff
     3b4:	.word	0xffffffff
     3b8:	.word	0xffffffff
     3bc:	.word	0xffffffff
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff94e4
     42c:	.word	0x00000000
     430:	.word	0x00005f74

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff94e8
     460:	.word	0x00005f74
     464:	.word	0x1fff94e4
     468:	.word	0x00000000

0000046c <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)>:
      return _ptr[1];
    }
  };

  static bool equals(const TChar* str, const char* expected) {
    return strcmp(reinterpret_cast<const char*>(str), expected) == 0;
     46c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     470:	ldr	r4, [r0, #8]
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
     472:	cbz	r4, 492 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)+0x26>
     474:	ldr	r3, [r4, #8]
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     476:	ldr	r5, [r4, #4]
     478:	adds	r3, #3
     47a:	bic.w	r3, r3, #3
     47e:	adds	r2, r1, r3
     480:	cmp	r2, r5
     482:	str	r3, [r4, #8]
     484:	bhi.n	492 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)+0x26>
     486:	add.w	r0, r4, #12
     48a:	str	r2, [r4, #8]
     48c:	add	r0, r3
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
     48e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case JSON_UNDEFINED:
      return 0;
     492:	ldr	r7, [r0, #12]
      StripCommander.fadeToHSV(root["H"], root["S"], root["V"], root["Delay"]);
    }
    else if (strcmp(method, "setToRGB") == 0) //{method:setToRGB,R:255,G:100,B:0}
    {
      Serial.println("set to RGB value");
      StripCommander.setToRGB(root["R"], root["G"], root["B"]);
     494:	cmp	r1, r7
     496:	mov	r8, r1
     498:	it	cc
     49a:	movcc	r8, r7
     49c:	mov	r5, r0
     49e:	add.w	r0, r8, #12
      LastFrameShowed = false;
     4a2:	mov	r6, r1
     4a4:	bl	5254 <malloc>
    {
      Serial.println("ca ne marche pas ^^");
    }
    //Serial.println(micros() - time);
  }
}
     4a8:	cbz	r0, 4bc <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::alloc(unsigned int)+0x50>
     4aa:	lsls	r7, r7, #1
     4ac:	stmia.w	r0, {r4, r8}
     4b0:	str	r0, [r5, #8]
     4b2:	str	r6, [r0, #8]
  bool operator!=(const ListIterator<T> &other) const {
    return _node != other._node;
  }

  ListIterator<T> &operator++() {
    if (_node) _node = _node->next;
     4b4:	str	r7, [r5, #12]
     4b6:	adds	r0, #12
     4b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000004c0 <AudioConnection::~AudioConnection()>:
     4c0:	push	{r4, lr}
     4c2:	mov	r4, r0
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
     4c4:	bl	478c <AudioConnection::disconnect()>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     4c8:	mov	r0, r4
     4ca:	pop	{r4, pc}

000004cc <AudioPlaySdWav::~AudioPlaySdWav()>:
     4cc:	push	{r4, lr}
     4ce:	ldr	r3, [pc, #16]	; (4e0 <AudioPlaySdWav::~AudioPlaySdWav()+0x14>)
     4d0:	mov	r4, r0
     4d2:	str.w	r3, [r0], #24
     4d6:	bl	1f64 <File::~File()>
     4da:	mov	r0, r4
     4dc:	pop	{r4, pc}
     4de:	nop
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4e0:	.word	0x00005c80

000004e4 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()>:
     4e4:	push	{r3, r4, r5, lr}
     4e6:	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     4e8:	ldr	r0, [r0, #8]
     4ea:	ldr	r3, [pc, #20]	; (500 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()+0x1c>)
     4ec:	str	r3, [r5, #0]
     4ee:	cbz	r0, 4fc <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()+0x18>
    }
    else if (strcmp(method, "thunder") == 0) //{method:thunder}
    {
      if (!ThunderLeft.isPlaying())
      {
        ThunderLeft.play("THUNDER.WAV");
     4f0:	ldr	r4, [r0, #0]
     4f2:	bl	5264 <free>
     4f6:	mov	r0, r4
        StripCommander.groupFlash();
     4f8:	cmp	r4, #0
     4fa:	bne.n	4f0 <ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>::~DynamicJsonBufferBase()+0xc>
     4fc:	mov	r0, r5
     4fe:	pop	{r3, r4, r5, pc}
     500:	.word	0x00005c0c

00000504 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     504:	movs	r3, #0
     506:	push	{r4}
     508:	ldr	r4, [pc, #64]	; (54c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x48>)
     50a:	strb	r1, [r0, #9]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     50c:	str	r2, [r0, #16]
     50e:	str	r4, [r0, #0]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     510:	strb	r3, [r0, #8]
     512:	str	r3, [r0, #12]
     514:	cbz	r1, 528 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
     516:	mov	r1, r3
      if (!strcmp("true", _content.asString)) return 1;
     518:	b.n	51c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
     51a:	ldr	r2, [r0, #16]
     51c:	str.w	r1, [r2, r3, lsl #2]
     520:	ldrb	r2, [r0, #9]
     522:	adds	r3, #1
     524:	cmp	r2, r3
     526:	bgt.n	51a <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x16>
     528:	ldr	r3, [pc, #36]	; (550 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4c>)
     52a:	ldr	r2, [r3, #0]
     52c:	cbnz	r2, 532 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
     52e:	b.n	548 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x44>
     530:	mov	r2, r3
     532:	ldr	r3, [r2, #20]
     534:	cmp	r3, #0
     536:	bne.n	530 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2c>
     538:	str	r0, [r2, #20]
     53a:	movs	r3, #0
     53c:	str	r3, [r0, #20]
     53e:	strh	r3, [r0, #4]
     540:	strh	r3, [r0, #6]
     542:	strb	r3, [r0, #10]
     544:	pop	{r4}
     546:	bx	lr
     548:	str	r0, [r3, #0]
     54a:	b.n	53a <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x36>
     54c:	.word	0x00005c00
     550:	.word	0x1fffb0f8

00000554 <AudioPlaySdWav::AudioPlaySdWav()>:
     554:	ldr	r1, [pc, #72]	; (5a0 <AudioPlaySdWav::AudioPlaySdWav()+0x4c>)
     556:	ldr	r2, [r1, #0]
     558:	push	{r3, r4, r5, lr}
     55a:	movs	r3, #0
     55c:	ldr	r5, [pc, #68]	; (5a4 <AudioPlaySdWav::AudioPlaySdWav()+0x50>)
     55e:	str	r5, [r0, #0]
     560:	mov	r4, r0
     562:	strb	r3, [r0, #9]
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     564:	str	r3, [r0, #16]
     566:	strb	r3, [r0, #8]
     568:	str	r3, [r0, #12]
     56a:	cbnz	r2, 570 <AudioPlaySdWav::AudioPlaySdWav()+0x1c>
      if (!strcmp("true", _content.asString)) return 1;
     56c:	b.n	59c <AudioPlaySdWav::AudioPlaySdWav()+0x48>
     56e:	mov	r2, r3
     570:	ldr	r3, [r2, #20]
     572:	cmp	r3, #0
     574:	bne.n	56e <AudioPlaySdWav::AudioPlaySdWav()+0x1a>
     576:	str	r4, [r2, #20]
     578:	mov	r0, r4
     57a:	movs	r5, #0
     57c:	ldr	r3, [pc, #40]	; (5a8 <AudioPlaySdWav::AudioPlaySdWav()+0x54>)
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     57e:	str	r5, [r4, #20]
     580:	strh	r5, [r4, #4]
     582:	strh	r5, [r4, #6]
     584:	strb	r5, [r4, #10]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     586:	str.w	r3, [r0], #24
     58a:	bl	1f48 <File::File()>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     58e:	mov	r0, r4
     590:	str	r5, [r4, #108]	; 0x6c
     592:	str	r5, [r4, #112]	; 0x70
     594:	bl	e00 <AudioPlaySdWav::begin()>
      if (!strcmp("true", _content.asString)) return 1;
     598:	mov	r0, r4
     59a:	pop	{r3, r4, r5, pc}
     59c:	str	r0, [r1, #0]
     59e:	b.n	578 <AudioPlaySdWav::AudioPlaySdWav()+0x24>
     5a0:	.word	0x1fffb0f8
     5a4:	.word	0x00005c00
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     5a8:	.word	0x00005c80

000005ac <_GLOBAL__sub_I_IRcmdCommands>:
     5ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5b0:	movs	r1, #8
     5b2:	sub	sp, #20
     5b4:	ldr	r0, [pc, #760]	; (8b0 <_GLOBAL__sub_I_IRcmdCommands+0x304>)
     5b6:	ldr	r7, [pc, #764]	; (8b4 <_GLOBAL__sub_I_IRcmdCommands+0x308>)
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     5b8:	ldr	r6, [pc, #764]	; (8b8 <_GLOBAL__sub_I_IRcmdCommands+0x30c>)
     5ba:	ldr	r5, [pc, #768]	; (8bc <_GLOBAL__sub_I_IRcmdCommands+0x310>)
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     5bc:	ldr.w	r9, [pc, #840]	; 908 <_GLOBAL__sub_I_IRcmdCommands+0x35c>
     5c0:	bl	2af8 <IRrecv::IRrecv(int)>
      if (!strcmp("true", _content.asString)) return 1;
     5c4:	ldr	r0, [pc, #760]	; (8c0 <_GLOBAL__sub_I_IRcmdCommands+0x314>)
     5c6:	bl	938 <StripCommand::StripCommand()>
     5ca:	ldr	r2, [pc, #760]	; (8c4 <_GLOBAL__sub_I_IRcmdCommands+0x318>)
     5cc:	ldr	r3, [pc, #760]	; (8c8 <_GLOBAL__sub_I_IRcmdCommands+0x31c>)
     5ce:	ldr	r1, [r2, #0]
     5d0:	str	r1, [sp, #8]
     5d2:	ldr	r4, [sp, #8]
     5d4:	ldr	r2, [r2, #0]
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
     5d6:	str	r2, [sp, #12]
     5d8:	ldr	r1, [pc, #752]	; (8cc <_GLOBAL__sub_I_IRcmdCommands+0x320>)
     5da:	ldr	r0, [sp, #12]
     5dc:	ldr	r2, [pc, #752]	; (8d0 <_GLOBAL__sub_I_IRcmdCommands+0x324>)
     5de:	str	r0, [r1, #0]
     5e0:	mov.w	r1, #256	; 0x100
     5e4:	str	r1, [r3, #12]
     5e6:	mov	r0, r3
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
     5e8:	mov.w	r8, #0
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     5ec:	str	r4, [r2, #0]
     5ee:	ldr	r1, [pc, #740]	; (8d4 <_GLOBAL__sub_I_IRcmdCommands+0x328>)
     5f0:	ldr	r2, [pc, #740]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     5f2:	ldr	r4, [pc, #744]	; (8dc <_GLOBAL__sub_I_IRcmdCommands+0x330>)
     5f4:	str	r4, [r3, #0]
     5f6:	str.w	r8, [r3, #8]
     5fa:	bl	51e0 <__aeabi_atexit>
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
     5fe:	ldr	r0, [pc, #736]	; (8e0 <_GLOBAL__sub_I_IRcmdCommands+0x334>)
     600:	bl	554 <AudioPlaySdWav::AudioPlaySdWav()>
    case JSON_UNDEFINED:
      return 0;
     604:	ldr	r2, [pc, #720]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
    {
      StripCommander.fadeToRGB(root["R"], root["G"], root["B"], root["Delay"]);
    }
    else if (strcmp(method, "fadeToHSV") == 0) //{method:fadeToHSV,H:160,S:255,V:255,Delay:2000}
    {
      StripCommander.fadeToHSV(root["H"], root["S"], root["V"], root["Delay"]);
     606:	ldr	r1, [pc, #732]	; (8e4 <_GLOBAL__sub_I_IRcmdCommands+0x338>)
     608:	ldr	r0, [pc, #724]	; (8e0 <_GLOBAL__sub_I_IRcmdCommands+0x334>)
     60a:	bl	51e0 <__aeabi_atexit>
     60e:	ldr	r0, [pc, #728]	; (8e8 <_GLOBAL__sub_I_IRcmdCommands+0x33c>)
     610:	bl	554 <AudioPlaySdWav::AudioPlaySdWav()>
    {
      Serial.println("ca ne marche pas ^^");
    }
    //Serial.println(micros() - time);
  }
}
     614:	ldr	r2, [pc, #704]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     616:	ldr	r1, [pc, #716]	; (8e4 <_GLOBAL__sub_I_IRcmdCommands+0x338>)
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     618:	ldr	r0, [pc, #716]	; (8e8 <_GLOBAL__sub_I_IRcmdCommands+0x33c>)
     61a:	bl	51e0 <__aeabi_atexit>
     61e:	ldr	r0, [pc, #716]	; (8ec <_GLOBAL__sub_I_IRcmdCommands+0x340>)
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     620:	bl	554 <AudioPlaySdWav::AudioPlaySdWav()>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     624:	ldr	r2, [pc, #688]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     626:	ldr	r1, [pc, #700]	; (8e4 <_GLOBAL__sub_I_IRcmdCommands+0x338>)
     628:	ldr	r0, [pc, #704]	; (8ec <_GLOBAL__sub_I_IRcmdCommands+0x340>)
     62a:	bl	51e0 <__aeabi_atexit>
      if (!strcmp("true", _content.asString)) return 1;
     62e:	ldr	r0, [pc, #704]	; (8f0 <_GLOBAL__sub_I_IRcmdCommands+0x344>)
     630:	bl	554 <AudioPlaySdWav::AudioPlaySdWav()>
     634:	ldr	r2, [pc, #672]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     636:	ldr	r1, [pc, #684]	; (8e4 <_GLOBAL__sub_I_IRcmdCommands+0x338>)
     638:	ldr	r0, [pc, #692]	; (8f0 <_GLOBAL__sub_I_IRcmdCommands+0x344>)
     63a:	bl	51e0 <__aeabi_atexit>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     63e:	add.w	r2, r7, #40	; 0x28
     642:	movs	r1, #4
     644:	mov	r0, r7
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     646:	bl	504 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     64a:	mov.w	r4, #65536	; 0x10000
     64e:	add.w	r2, r6, #40	; 0x28
      if (!strcmp("true", _content.asString)) return 1;
     652:	movs	r1, #4
     654:	mov	r0, r6
     656:	str	r4, [r7, #24]
     658:	str	r4, [r7, #28]
     65a:	str	r4, [r7, #32]
     65c:	str	r4, [r7, #36]	; 0x24
     65e:	str.w	r9, [r7]
     662:	bl	504 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     666:	ldr.w	lr, [pc, #676]	; 90c <_GLOBAL__sub_I_IRcmdCommands+0x360>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     66a:	str	r4, [r6, #24]
     66c:	movs	r0, #2
     66e:	add.w	r2, r5, #24
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     672:	str	r4, [r6, #28]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     674:	str	r4, [r6, #32]
     676:	str	r4, [r6, #36]	; 0x24
     678:	mov	r3, r8
     67a:	str.w	r9, [r6]
      if (!strcmp("true", _content.asString)) return 1;
     67e:	mov	r1, r8
     680:	strb.w	r8, [r5, #8]
     684:	str.w	r8, [r5, #12]
     688:	str.w	lr, [r5]
     68c:	strb	r0, [r5, #9]
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     68e:	str	r2, [r5, #16]
     690:	mov	r4, r5
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     692:	b.n	696 <_GLOBAL__sub_I_IRcmdCommands+0xea>
     694:	ldr	r2, [r4, #16]
     696:	str.w	r1, [r2, r3, lsl #2]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     69a:	ldrb	r2, [r5, #9]
     69c:	ldr	r0, [pc, #540]	; (8bc <_GLOBAL__sub_I_IRcmdCommands+0x310>)
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     69e:	adds	r3, #1
     6a0:	cmp	r2, r3
     6a2:	bgt.n	694 <_GLOBAL__sub_I_IRcmdCommands+0xe8>
      if (!strcmp("true", _content.asString)) return 1;
     6a4:	ldr	r3, [pc, #588]	; (8f4 <_GLOBAL__sub_I_IRcmdCommands+0x348>)
     6a6:	ldr	r2, [r3, #0]
     6a8:	cbnz	r2, 6ae <_GLOBAL__sub_I_IRcmdCommands+0x102>
     6aa:	b.n	8ac <_GLOBAL__sub_I_IRcmdCommands+0x300>
     6ac:	mov	r2, r3
     6ae:	ldr	r3, [r2, #20]
     6b0:	cmp	r3, #0
     6b2:	bne.n	6ac <_GLOBAL__sub_I_IRcmdCommands+0x100>
     6b4:	str	r5, [r2, #20]
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     6b6:	ldr.w	sl, [pc, #600]	; 910 <_GLOBAL__sub_I_IRcmdCommands+0x364>
     6ba:	ldr	r3, [pc, #572]	; (8f8 <_GLOBAL__sub_I_IRcmdCommands+0x34c>)
     6bc:	ldr	r0, [pc, #508]	; (8bc <_GLOBAL__sub_I_IRcmdCommands+0x310>)
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     6be:	str	r3, [r5, #0]
     6c0:	movs	r4, #0
     6c2:	str	r4, [r5, #20]
     6c4:	strh	r4, [r5, #4]
      if (!strcmp("true", _content.asString)) return 1;
     6c6:	strh	r4, [r5, #6]
     6c8:	strb	r4, [r5, #10]
     6ca:	bl	16fc <AudioOutputI2S::begin()>
     6ce:	ldr	r3, [pc, #528]	; (8e0 <_GLOBAL__sub_I_IRcmdCommands+0x334>)
     6d0:	ldr.w	fp, [pc, #576]	; 914 <_GLOBAL__sub_I_IRcmdCommands+0x368>
     6d4:	str.w	r3, [sl]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     6d8:	mov	r0, sl
     6da:	strb.w	r4, [sl, #8]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     6de:	str.w	r7, [sl, #4]
     6e2:	strb.w	r4, [sl, #9]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     6e6:	str.w	r4, [sl, #12]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     6ea:	strb.w	r4, [sl, #16]
     6ee:	bl	4724 <AudioConnection::connect()>
      if (!strcmp("true", _content.asString)) return 1;
     6f2:	ldr	r2, [pc, #484]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     6f4:	ldr	r1, [pc, #516]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
     6f6:	ldr.w	r9, [pc, #544]	; 918 <_GLOBAL__sub_I_IRcmdCommands+0x36c>
     6fa:	ldr.w	r8, [pc, #544]	; 91c <_GLOBAL__sub_I_IRcmdCommands+0x370>
     6fe:	mov	r0, sl
     700:	bl	51e0 <__aeabi_atexit>
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     704:	ldr	r3, [pc, #472]	; (8e0 <_GLOBAL__sub_I_IRcmdCommands+0x334>)
     706:	strb.w	r4, [fp, #9]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     70a:	mov.w	sl, #1
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     70e:	mov	r0, fp
     710:	stmia.w	fp, {r3, r6}
     714:	str.w	r4, [fp, #12]
      if (!strcmp("true", _content.asString)) return 1;
     718:	strb.w	r4, [fp, #16]
     71c:	strb.w	sl, [fp, #8]
     720:	bl	4724 <AudioConnection::connect()>
     724:	ldr	r2, [pc, #432]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     726:	ldr	r1, [pc, #468]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
     728:	mov	r0, fp
     72a:	bl	51e0 <__aeabi_atexit>
     72e:	ldr	r3, [pc, #440]	; (8e8 <_GLOBAL__sub_I_IRcmdCommands+0x33c>)
     730:	str.w	r3, [r9]
     734:	mov	r0, r9
     736:	strb.w	r4, [r9, #8]
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
     73a:	str.w	r7, [r9, #4]
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     73e:	strb.w	sl, [r9, #9]
     742:	str.w	r4, [r9, #12]
     746:	strb.w	r4, [r9, #16]
     74a:	bl	4724 <AudioConnection::connect()>
     74e:	ldr	r2, [pc, #392]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
     750:	ldr	r1, [pc, #424]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
     752:	ldr.w	fp, [pc, #460]	; 920 <_GLOBAL__sub_I_IRcmdCommands+0x374>
      LastFrameShowed = false;
    }
    else if (strcmp(method, "setToHSV") == 0) //{method:setToHSV,H:255,S:100,V:0}
    {
      Serial.println("set to HSV value");
      StripCommander.setToHSV(root["H"], root["S"], root["V"]);
     756:	mov	r0, r9
     758:	bl	51e0 <__aeabi_atexit>
     75c:	ldr	r3, [pc, #392]	; (8e8 <_GLOBAL__sub_I_IRcmdCommands+0x33c>)
     75e:	strb.w	sl, [r8, #8]
      LastFrameShowed = false;
     762:	stmia.w	r8, {r3, r7}
     766:	mov	r0, r8
    {
      Serial.println("ca ne marche pas ^^");
    }
    //Serial.println(micros() - time);
  }
}
     768:	mov.w	r3, #2
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     76c:	strb.w	r3, [r8, #9]
     770:	str.w	r4, [r8, #12]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     774:	strb.w	r4, [r8, #16]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     778:	bl	4724 <AudioConnection::connect()>
     77c:	ldr	r2, [pc, #344]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     77e:	ldr	r1, [pc, #380]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
      if (!strcmp("true", _content.asString)) return 1;
     780:	ldr.w	r9, [pc, #364]	; 8f0 <_GLOBAL__sub_I_IRcmdCommands+0x344>
     784:	mov	r0, r8
     786:	bl	51e0 <__aeabi_atexit>
     78a:	ldr.w	r8, [pc, #408]	; 924 <_GLOBAL__sub_I_IRcmdCommands+0x378>
     78e:	strb.w	r4, [fp, #8]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     792:	movs	r3, #3
     794:	mov	r0, fp
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     796:	strb.w	r3, [fp, #9]
     79a:	str	r3, [sp, #4]
     79c:	str.w	r7, [fp, #4]
      if (!strcmp("true", _content.asString)) return 1;
     7a0:	str.w	r4, [fp, #12]
     7a4:	strb.w	r4, [fp, #16]
     7a8:	str.w	r9, [fp]
     7ac:	bl	4724 <AudioConnection::connect()>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     7b0:	ldr	r2, [pc, #292]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     7b2:	ldr	r1, [pc, #328]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     7b4:	mov	r0, fp
     7b6:	bl	51e0 <__aeabi_atexit>
     7ba:	ldr.w	fp, [pc, #364]	; 928 <_GLOBAL__sub_I_IRcmdCommands+0x37c>
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     7be:	ldr	r3, [sp, #4]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     7c0:	strb.w	r3, [r8, #9]
     7c4:	mov	r0, r8
      if (!strcmp("true", _content.asString)) return 1;
     7c6:	str.w	r9, [r8]
     7ca:	str.w	r6, [r8, #4]
     7ce:	strb.w	sl, [r8, #8]
     7d2:	str.w	r4, [r8, #12]
     7d6:	strb.w	r4, [r8, #16]
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     7da:	bl	4724 <AudioConnection::connect()>
     7de:	ldr	r2, [pc, #248]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     7e0:	ldr	r1, [pc, #280]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
     7e2:	ldr.w	r9, [pc, #328]	; 92c <_GLOBAL__sub_I_IRcmdCommands+0x380>
     7e6:	mov	r0, r8
     7e8:	bl	51e0 <__aeabi_atexit>
     7ec:	ldr.w	r8, [pc, #252]	; 8ec <_GLOBAL__sub_I_IRcmdCommands+0x340>
     7f0:	strb.w	r4, [fp, #8]
     7f4:	mov	r0, fp
     7f6:	str.w	r6, [fp, #4]
     7fa:	strb.w	sl, [fp, #9]
     7fe:	str.w	r4, [fp, #12]
     802:	strb.w	r4, [fp, #16]
     806:	str.w	r8, [fp]
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
     80a:	bl	4724 <AudioConnection::connect()>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     80e:	ldr	r2, [pc, #200]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     810:	ldr	r1, [pc, #232]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
     812:	mov	r0, fp
     814:	bl	51e0 <__aeabi_atexit>
     818:	ldr.w	fp, [pc, #276]	; 930 <_GLOBAL__sub_I_IRcmdCommands+0x384>
     81c:	str.w	r8, [r9]
 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
    iterator it;
    for (it = begin(); it != end(); ++it) {
     820:	mov.w	r3, #2
    case JSON_UNDEFINED:
      return 0;
     824:	mov	r0, r9
        StripCommander.flash(random(0, NUM_LEDS));
      }
    }
    else if (strcmp(method, "groupFlash") == 0) //{method:groupFlash,Group:0,Direction:1}
    {
      StripCommander.groupFlash(root["Group"], root["Direction"]);
     826:	strb.w	r3, [r9, #9]
     82a:	str.w	r6, [r9, #4]
     82e:	strb.w	sl, [r9, #8]
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
     832:	str.w	r4, [r9, #12]
     836:	strb.w	r4, [r9, #16]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     83a:	bl	4724 <AudioConnection::connect()>
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     83e:	ldr	r2, [pc, #152]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     840:	ldr	r1, [pc, #184]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
     842:	ldr.w	r8, [pc, #240]	; 934 <_GLOBAL__sub_I_IRcmdCommands+0x388>
      if (!strcmp("true", _content.asString)) return 1;
     846:	mov	r0, r9
     848:	bl	51e0 <__aeabi_atexit>
     84c:	mov	r0, fp
     84e:	strb.w	r4, [fp, #8]
     852:	str.w	r7, [fp]
     856:	str.w	r5, [fp, #4]
  switch (_type) {
    case JSON_UNDEFINED:
      return 0;
    case JSON_POSITIVE_INTEGER:
    case JSON_BOOLEAN:
      return static_cast<T>(_content.asInteger);
     85a:	strb.w	r4, [fp, #9]
    case JSON_NEGATIVE_INTEGER:
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
     85e:	str.w	r4, [fp, #12]
      if (!strcmp("true", _content.asString)) return 1;
     862:	strb.w	r4, [fp, #16]
     866:	bl	4724 <AudioConnection::connect()>
     86a:	ldr	r2, [pc, #108]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     86c:	ldr	r1, [pc, #140]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
     86e:	mov	r0, fp
     870:	bl	51e0 <__aeabi_atexit>
}

template <typename T>
inline T JsonVariant::variantAsInteger() const {
  using namespace Internals;
  switch (_type) {
     874:	mov	r0, r8
     876:	strb.w	sl, [r8, #9]
    {
      StripCommander.groupFlash();
    }
    else if (strcmp(method, "rain") == 0) //{method:rain}
    {
      if (!Rain.isPlaying())
     87a:	str.w	r6, [r8]
     87e:	str.w	r5, [r8, #4]
      {
        Rain.play("RAIN.WAV");
     882:	strb.w	r4, [r8, #8]
     886:	str.w	r4, [r8, #12]
     88a:	strb.w	r4, [r8, #16]
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
    default:
      return static_cast<T>(_content.asFloat);
     88e:	bl	4724 <AudioConnection::connect()>
     892:	mov	r0, r8
     894:	ldr	r2, [pc, #64]	; (8d8 <_GLOBAL__sub_I_IRcmdCommands+0x32c>)
     896:	ldr	r1, [pc, #100]	; (8fc <_GLOBAL__sub_I_IRcmdCommands+0x350>)
     898:	bl	51e0 <__aeabi_atexit>
     89c:	ldr	r3, [pc, #96]	; (900 <_GLOBAL__sub_I_IRcmdCommands+0x354>)
     89e:	ldr	r2, [pc, #100]	; (904 <_GLOBAL__sub_I_IRcmdCommands+0x358>)
     8a0:	str	r2, [r3, #0]
     8a2:	movs	r2, #10
     8a4:	strb	r2, [r3, #8]
     8a6:	add	sp, #20
     8a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ac:	str	r0, [r3, #0]
     8ae:	b.n	6b6 <_GLOBAL__sub_I_IRcmdCommands+0x10a>
     8b0:	.word	0x1fffa574
     8b4:	.word	0x1fffa82c
     8b8:	.word	0x1fffa864
     8bc:	.word	0x1fff9780
     8c0:	.word	0x1fff97b4
     8c4:	.word	0x1fffafe8
     8c8:	.word	0x1fffa81c
     8cc:	.word	0x1fffa598
     8d0:	.word	0x1fffa250
     8d4:	.word	0x000004e5
     8d8:	.word	0x1fff89fc
     8dc:	.word	0x00005c0c
     8e0:	.word	0x1fffa2f4
     8e4:	.word	0x000004cd
     8e8:	.word	0x1fffa59c
     8ec:	.word	0x1fff9500
     8f0:	.word	0x1fffa89c
     8f4:	.word	0x1fffb0f8
     8f8:	.word	0x00005c8c
     8fc:	.word	0x000004c1
     900:	.word	0x1fffa578
     904:	.word	0x00005c58
     908:	.word	0x00005c74
     90c:	.word	0x00005c00
      }
      else
      {
        Rain.stop();
     910:	.word	0x1fffa254
     914:	.word	0x1fffa268
     918:	.word	0x1fffa27c
     91c:	.word	0x1fffa290
      return static_cast<T>(_content.asInteger * -1);
    case JSON_STRING:
    case JSON_UNPARSED:
      if (!_content.asString) return 0;
      if (!strcmp("true", _content.asString)) return 1;
      return Polyfills::parseInteger<T>(_content.asString);
     920:	.word	0x1fffa584
     924:	.word	0x1fffa2a4
     928:	.word	0x1fffa2b8
     92c:	.word	0x1fffa2cc
     930:	.word	0x1fff97a0
    default:
      return static_cast<T>(_content.asFloat);
     934:	.word	0x1fffa2e0

00000938 <StripCommand::StripCommand()>:

#include "StripCommand.h"
#include "FastLED.h"

StripCommand::StripCommand()
     938:	push	{r4, r5, r6, r7, lr}
     93a:	ldr	r4, [pc, #116]	; (9b0 <StripCommand::StripCommand()+0x78>)
     93c:	sub	sp, #12
     93e:	mov	r6, r0
     940:	mov	r7, r0
     942:	add.w	lr, r4, #48	; 0x30
     946:	ldr	r0, [r4, #0]
     948:	ldr	r1, [r4, #4]
     94a:	ldr	r2, [r4, #8]
     94c:	ldr	r3, [r4, #12]
     94e:	mov	r5, r7
     950:	stmia	r5!, {r0, r1, r2, r3}
     952:	adds	r4, #16
     954:	cmp	r4, lr
     956:	mov	r7, r5
     958:	bne.n	946 <StripCommand::StripCommand()+0xe>
     95a:	ldr	r0, [r4, #0]
     95c:	ldr	r1, [r4, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     95e:	ldr	r2, [pc, #84]	; (9b4 <StripCommand::StripCommand()+0x7c>)
     960:	ldr	r3, [pc, #84]	; (9b8 <StripCommand::StripCommand()+0x80>)
     962:	stmia	r7!, {r0, r1}
     964:	ldr	r2, [r2, #0]
     966:	str	r2, [sp, #4]
	return ret;
     968:	ldr	r2, [sp, #4]
     96a:	ldr	r0, [r3, #0]
     96c:	ldrh	r1, [r3, #4]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     96e:	str.w	r2, [r6, #232]	; 0xe8
     972:	movs	r3, #0
     974:	movs	r2, #1
     976:	str	r0, [r6, #56]	; 0x38
     978:	strh	r1, [r6, #60]	; 0x3c
     97a:	strb.w	r2, [r6, #230]	; 0xe6
     97e:	strb.w	r2, [r6, #699]	; 0x2bb
     982:	strb.w	r3, [r6, #236]	; 0xec
     986:	strb.w	r3, [r6, #237]	; 0xed
     98a:	strh.w	r3, [r6, #238]	; 0xee
     98e:	strh.w	r3, [r6, #240]	; 0xf0
     992:	strb.w	r3, [r6, #242]	; 0xf2
     996:	add.w	r4, r6, #700	; 0x2bc
     99a:	addw	r5, r6, #2716	; 0xa9c
     99e:	mov	r0, r4
     9a0:	adds	r4, #36	; 0x24
     9a2:	bl	9bc <StripLED::StripLED()>
     9a6:	cmp	r4, r5
     9a8:	bne.n	99e <StripCommand::StripCommand()+0x66>
{
}
     9aa:	mov	r0, r6
     9ac:	add	sp, #12
     9ae:	pop	{r4, r5, r6, r7, pc}
     9b0:	.word	0x00005c10
     9b4:	.word	0x1fffafe8
     9b8:	.word	0x00005c48

000009bc <StripLED::StripLED()>:
#include "StripLED.h"

StripLED::StripLED()
     9bc:	push	{r4, r5, r6}
     9be:	movs	r2, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     9c0:	ldr	r1, [pc, #44]	; (9f0 <StripLED::StripLED()+0x34>)
     9c2:	strb	r2, [r0, #2]
     9c4:	sub	sp, #12
     9c6:	ldr	r1, [r1, #0]
     9c8:	str	r1, [sp, #4]
	return ret;
     9ca:	ldr	r6, [sp, #4]
     9cc:	strh	r2, [r0, #0]
     9ce:	movs	r1, #100	; 0x64
     9d0:	movs	r5, #10
     9d2:	movs	r4, #30
     9d4:	strb	r2, [r0, #3]
     9d6:	strb	r2, [r0, #8]
     9d8:	strb	r2, [r0, #9]
     9da:	strb	r2, [r0, #10]
     9dc:	strh	r2, [r0, #22]
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
     9de:	str	r6, [r0, #4]
     9e0:	strh	r5, [r0, #12]
     9e2:	strh	r4, [r0, #14]
     9e4:	strh	r1, [r0, #16]
     9e6:	strh	r1, [r0, #18]
{
}
     9e8:	add	sp, #12
     9ea:	pop	{r4, r5, r6}
     9ec:	bx	lr
     9ee:	nop
     9f0:	.word	0x1fffafe8

000009f4 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
     9f4:	movs	r0, #0
     9f6:	bx	lr

000009f8 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
     9f8:	ldr	r3, [pc, #16]	; (a0c <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
     9fa:	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
     9fc:	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
     9fe:	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
     a02:	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
     a04:	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
     a06:	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
     a08:	str	r2, [r3, #12]
     a0a:	bx	lr
     a0c:	.word	0x1fffab1c

00000a10 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     a10:	push	{r4, lr}
     a12:	mov	r4, r0
		release();
     a14:	bl	42b8 <DMAChannel::release()>
	}
     a18:	mov	r0, r4
     a1a:	pop	{r4, pc}

00000a1c <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE>:
uint32_t  AudioOutputPWM::block_offset = 0;
bool AudioOutputPWM::update_responsibility = false;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
     a1c:	ldr	r2, [pc, #8]	; (a28 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0xc>)
     a1e:	ldr	r1, [pc, #12]	; (a2c <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x10>)
     a20:	ldr	r0, [pc, #12]	; (a30 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x14>)
     a22:	b.w	51e0 <__aeabi_atexit>
     a26:	nop
     a28:	.word	0x1fff89fc
     a2c:	.word	0x00000a11
     a30:	.word	0x1fffab2c

00000a34 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
	static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
	static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
     a34:	ldr	r2, [pc, #8]	; (a40 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
     a36:	ldr	r1, [pc, #12]	; (a44 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
     a38:	ldr	r0, [pc, #12]	; (a48 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
     a3a:	b.w	51e0 <__aeabi_atexit>
     a3e:	nop
     a40:	.word	0x1fff89fc
     a44:	.word	0x00000a11
     a48:	.word	0x1fffab34

00000a4c <AudioControlSGTL5000::disable()>:
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
     a4c:	movs	r0, #0
     a4e:	bx	lr

00000a50 <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
     a50:	movs	r0, #0
     a52:	bx	lr

00000a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
     a54:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     a56:	ldr	r4, [pc, #80]	; (aa8 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x54>)
     a58:	ldrb	r3, [r0, #8]
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
     a5a:	cmp	r1, #36	; 0x24
     a5c:	it	eq
     a5e:	strheq	r2, [r0, #6]
     a60:	lsls	r3, r3, #1
		transmitting = 1;
     a62:	movs	r5, #1
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
     a64:	mov	r6, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
     a66:	mov	r0, r4
     a68:	ubfx	r1, r1, #8, #8
     a6c:	mov	r7, r2
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     a6e:	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
     a72:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
     a76:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
     a7a:	bl	188c <TwoWire::write(unsigned char)>
     a7e:	uxtb	r1, r6
     a80:	mov	r0, r4
     a82:	bl	188c <TwoWire::write(unsigned char)>
     a86:	ubfx	r1, r7, #8, #8
     a8a:	mov	r0, r4
     a8c:	bl	188c <TwoWire::write(unsigned char)>
     a90:	uxtb	r1, r7
     a92:	mov	r0, r4
     a94:	bl	188c <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
     a98:	mov	r1, r5
     a9a:	mov	r0, r4
     a9c:	bl	1bd4 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
     aa0:	clz	r0, r0
     aa4:	lsrs	r0, r0, #5
     aa6:	pop	{r3, r4, r5, r6, r7, pc}
     aa8:	.word	0x1fff8a00

00000aac <AudioControlSGTL5000::enable()>:
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
     aac:	push	{r4, r5, r6, lr}
	muted = true;
     aae:	movs	r6, #1
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
     ab0:	mov	r4, r0
	muted = true;
     ab2:	strb	r6, [r0, #4]
	Wire.begin();
     ab4:	ldr	r0, [pc, #208]	; (b88 <AudioControlSGTL5000::enable()+0xdc>)
     ab6:	bl	18b4 <TwoWire::begin()>
	delay(5);
     aba:	movs	r0, #5
     abc:	bl	32f4 <delay>
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
     ac0:	mov	r0, r4
     ac2:	movw	r2, #16480	; 0x4060
     ac6:	movs	r1, #48	; 0x30
     ac8:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
     acc:	mov	r5, r0
     ace:	cmp	r0, #0
     ad0:	beq.n	b84 <AudioControlSGTL5000::enable()+0xd8>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
     ad2:	movs	r2, #108	; 0x6c
     ad4:	movs	r1, #38	; 0x26
     ad6:	mov	r0, r4
     ad8:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
     adc:	mov.w	r2, #498	; 0x1f2
     ae0:	movs	r1, #40	; 0x28
     ae2:	mov	r0, r4
     ae4:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
     ae8:	movw	r2, #3874	; 0xf22
     aec:	movs	r1, #44	; 0x2c
     aee:	mov	r0, r4
     af0:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
     af4:	movw	r2, #17478	; 0x4446
     af8:	movs	r1, #60	; 0x3c
     afa:	mov	r0, r4
     afc:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
     b00:	movw	r2, #311	; 0x137
     b04:	movs	r1, #36	; 0x24
     b06:	mov	r0, r4
     b08:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
     b0c:	movw	r2, #16639	; 0x40ff
     b10:	movs	r1, #48	; 0x30
     b12:	mov	r0, r4
     b14:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
     b18:	movs	r2, #115	; 0x73
     b1a:	movs	r1, #2
     b1c:	mov	r0, r4
     b1e:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
     b22:	mov.w	r0, #400	; 0x190
     b26:	bl	32f4 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
     b2a:	movw	r2, #7453	; 0x1d1d
     b2e:	movs	r1, #46	; 0x2e
     b30:	mov	r0, r4
     b32:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
     b36:	movs	r2, #4
     b38:	mov	r1, r2
     b3a:	mov	r0, r4
     b3c:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_I2S_CTRL, 0x0130); // SCLK=32*Fs, 16bit, I2S format
     b40:	mov.w	r2, #304	; 0x130
     b44:	movs	r1, #6
     b46:	mov	r0, r4
     b48:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
     b4c:	movs	r2, #16
     b4e:	movs	r1, #10
     b50:	mov	r0, r4
     b52:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
     b56:	movs	r2, #0
     b58:	movs	r1, #14
     b5a:	mov	r0, r4
     b5c:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
     b60:	movw	r2, #15420	; 0x3c3c
     b64:	movs	r1, #16
     b66:	mov	r0, r4
     b68:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
     b6c:	movw	r2, #32639	; 0x7f7f
     b70:	movs	r1, #34	; 0x22
     b72:	mov	r0, r4
     b74:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
     b78:	movs	r2, #54	; 0x36
     b7a:	movs	r1, #36	; 0x24
     b7c:	mov	r0, r4
     b7e:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	//mute = false;
	semi_automated = true;
     b82:	strb	r6, [r4, #9]
	return true;
}
     b84:	mov	r0, r5
     b86:	pop	{r4, r5, r6, pc}
     b88:	.word	0x1fff8a00

00000b8c <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
     b8c:	push	{r4, lr}
     b8e:	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
     b90:	cbz	r1, b9a <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
     b92:	cmp	r1, #1
     b94:	beq.n	bba <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
     b96:	movs	r0, #0
     b98:	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
     b9a:	movs	r2, #85	; 0x55
     b9c:	movs	r1, #32
     b9e:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
     ba2:	cmp	r0, #0
     ba4:	beq.n	b96 <AudioControlSGTL5000::inputSelect(int)+0xa>
     ba6:	ldrh	r2, [r4, #6]
     ba8:	orr.w	r2, r2, #4
     bac:	mov	r0, r4
     bae:	uxth	r2, r2
     bb0:	movs	r1, #36	; 0x24
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
     bb2:	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
     bb6:	b.w	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
     bba:	movw	r2, #371	; 0x173
     bbe:	movs	r1, #42	; 0x2a
     bc0:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
     bc4:	cmp	r0, #0
     bc6:	beq.n	b96 <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
     bc8:	movs	r2, #136	; 0x88
     bca:	movs	r1, #32
     bcc:	mov	r0, r4
     bce:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
     bd2:	cmp	r0, #0
     bd4:	beq.n	b96 <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
     bd6:	ldrh	r2, [r4, #6]
     bd8:	mov	r0, r4
     bda:	bic.w	r2, r2, #4
     bde:	movs	r1, #36	; 0x24
		} else {
			return false;
		}
	}
     be0:	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
     be4:	b.w	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

00000be8 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
     be8:	push	{r3, r4, r5, lr}
     bea:	mov	r5, r0
	if (n == 0) {
     bec:	cbz	r1, c2c <AudioControlSGTL5000::volumeInteger(unsigned int)+0x44>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
     bee:	cmp	r1, #128	; 0x80
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
     bf0:	ldrb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
     bf2:	itte	ls
     bf4:	rsbls	r4, r1, #128	; 0x80
     bf8:	orrls.w	r4, r4, r4, lsl #8
     bfc:	movhi	r4, #0
	}
	if (muted) {
     bfe:	cbnz	r3, c0e <AudioControlSGTL5000::volumeInteger(unsigned int)+0x26>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
     c00:	mov	r2, r4
     c02:	mov	r0, r5
     c04:	movs	r1, #34	; 0x22
}
     c06:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
     c0a:	b.w	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
     c0e:	ldrh	r2, [r0, #6]
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
		muted = false;
     c10:	movs	r3, #0
     c12:	bic.w	r2, r2, #16
     c16:	strb	r3, [r0, #4]
     c18:	movs	r1, #36	; 0x24
     c1a:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
     c1e:	mov	r2, r4
     c20:	mov	r0, r5
     c22:	movs	r1, #34	; 0x22
}
     c24:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
     c28:	b.w	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
     c2c:	movs	r3, #1
     c2e:	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
     c30:	movw	r2, #32639	; 0x7f7f
     c34:	movs	r1, #34	; 0x22
     c36:	bl	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
     c3a:	ldrh	r2, [r5, #6]
     c3c:	orr.w	r2, r2, #16
     c40:	mov	r0, r5
     c42:	uxth	r2, r2
     c44:	movs	r1, #36	; 0x24
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
     c46:	ldmia.w	sp!, {r3, r4, r5, lr}
     c4a:	b.w	a54 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
     c4e:	nop

00000c50 <AudioControlSGTL5000::volume(float)>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
     c50:	mov	r3, r1
     c52:	push	{r4, lr}
     c54:	ldr	r1, [pc, #28]	; (c74 <AudioControlSGTL5000::volume(float)+0x24>)
     c56:	mov	r4, r0
     c58:	mov	r0, r3
     c5a:	bl	4f00 <__aeabi_fmul>
     c5e:	ldr	r1, [pc, #24]	; (c78 <AudioControlSGTL5000::volume(float)+0x28>)
     c60:	bl	4cf0 <__addsf3>
     c64:	bl	51a0 <__aeabi_f2uiz>
     c68:	mov	r1, r0
     c6a:	mov	r0, r4
     c6c:	ldmia.w	sp!, {r4, lr}
     c70:	b.w	be8 <AudioControlSGTL5000::volumeInteger(unsigned int)>
     c74:	.word	0x43010000
     c78:	.word	0x3eff7cee

00000c7c <AudioMixer4::update()>:
}

#endif

void AudioMixer4::update(void)
{
     c7c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
     c80:	mov.w	r8, #0
}

#endif

void AudioMixer4::update(void)
{
     c84:	mov	r6, r0
     c86:	add.w	r5, r0, #24
	audio_block_t *in, *out=NULL;
     c8a:	mov	r7, r8
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
     c8c:	mov	r1, r8
     c8e:	mov	r0, r6
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
     c90:	cmp	r7, #0
     c92:	beq.n	d34 <AudioMixer4::update()+0xb8>
			if (out) {
				int32_t mult = multiplier[channel];
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
     c94:	bl	46c8 <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
     c98:	cbz	r0, cd8 <AudioMixer4::update()+0x5c>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
     c9a:	ldr	r4, [r5, #0]
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
     c9c:	cmp.w	r4, #65536	; 0x10000
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
     ca0:	add.w	r1, r7, #4
     ca4:	add.w	lr, r0, #4

static void applyGainThenAdd(int16_t *data, const int16_t *in, int32_t mult)
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
     ca8:	add.w	ip, r7, #260	; 0x104

	if (mult == MULTI_UNITYGAIN) {
     cac:	beq.n	cfe <AudioMixer4::update()+0x82>
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
	} else {
		do {
			uint32_t tmp32 = *src++; // read 2 samples from *data
     cae:	ldr.w	r2, [lr], #4
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     cb2:	smulwb	r3, r4, r2
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     cb6:	smulwt	r9, r4, r2
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     cba:	ssat	r2, #16, r3
     cbe:	ssat	r3, #16, r9
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
     cc2:	pkhbt	r3, r2, r3, lsl #16
			int32_t val1 = signed_multiply_32x16b(mult, tmp32);
			int32_t val2 = signed_multiply_32x16t(mult, tmp32);
			val1 = signed_saturate_rshift(val1, 16, 0);
			val2 = signed_saturate_rshift(val2, 16, 0);
			tmp32 = pack_16b_16b(val2, val1);
			uint32_t tmp32b = *dst;
     cc6:	ldr	r2, [r1, #0]
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     cc8:	qadd16	r3, r3, r2
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
     ccc:	str.w	r3, [r1], #4
		} while (dst < end);
     cd0:	cmp	ip, r1
     cd2:	bhi.n	cae <AudioMixer4::update()+0x32>
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
     cd4:	bl	4640 <AudioStream::release(audio_block_struct*)>
void AudioMixer4::update(void)
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
     cd8:	add.w	r8, r8, #1
     cdc:	cmp.w	r8, #4
     ce0:	add.w	r5, r5, #4
     ce4:	bne.n	c8c <AudioMixer4::update()+0x10>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
			}
		}
	}
	if (out) {
     ce6:	cmp	r7, #0
     ce8:	beq.n	d6c <AudioMixer4::update()+0xf0>
		transmit(out);
     cea:	mov	r0, r6
     cec:	mov	r1, r7
     cee:	movs	r2, #0
     cf0:	bl	4694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
     cf4:	mov	r0, r7
	}
}
     cf6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			}
		}
	}
	if (out) {
		transmit(out);
		release(out);
     cfa:	b.w	4640 <AudioStream::release(audio_block_struct*)>
     cfe:	add.w	r1, r7, #12
     d02:	add.w	r4, r0, #12
     d06:	ldr.w	r3, [r1, #-8]
     d0a:	ldr.w	r2, [r4, #-8]
     d0e:	qadd16	r3, r3, r2
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
     d12:	str.w	r3, [r1, #-8]
     d16:	ldr.w	r2, [r4, #-4]
     d1a:	ldr.w	r3, [r1, #-4]
     d1e:	qadd16	r3, r3, r2
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
     d22:	cmp	ip, r1
	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
     d24:	str.w	r3, [r1, #-4]
     d28:	add.w	r4, r4, #8
		} while (dst < end);
     d2c:	add.w	r1, r1, #8
     d30:	bhi.n	d06 <AudioMixer4::update()+0x8a>
     d32:	b.n	cd4 <AudioMixer4::update()+0x58>
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
     d34:	bl	46e0 <AudioStream::receiveWritable(unsigned int)>
			if (out) {
     d38:	mov	r7, r0
     d3a:	cmp	r0, #0
     d3c:	beq.n	cd8 <AudioMixer4::update()+0x5c>
				int32_t mult = multiplier[channel];
     d3e:	ldr	r0, [r5, #0]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
     d40:	cmp.w	r0, #65536	; 0x10000
     d44:	beq.n	cd8 <AudioMixer4::update()+0x5c>
     d46:	adds	r1, r7, #4
#define MULTI_UNITYGAIN 65536

static void applyGain(int16_t *data, int32_t mult)
{
	uint32_t *p = (uint32_t *)data;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
     d48:	add.w	r4, r7, #260	; 0x104

	do {
		uint32_t tmp32 = *p; // read 2 samples from *data
     d4c:	ldr	r3, [r1, #0]
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     d4e:	smulwb	r2, r0, r3
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     d52:	smulwt	r3, r0, r3
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     d56:	ssat	r2, #16, r2
     d5a:	ssat	r3, #16, r3
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
     d5e:	pkhbt	r3, r2, r3, lsl #16
		int32_t val1 = signed_multiply_32x16b(mult, tmp32);
		int32_t val2 = signed_multiply_32x16t(mult, tmp32);
		val1 = signed_saturate_rshift(val1, 16, 0);
		val2 = signed_saturate_rshift(val2, 16, 0);
		*p++ = pack_16b_16b(val2, val1);
     d62:	str.w	r3, [r1], #4
	} while (p < end);
     d66:	cmp	r4, r1
     d68:	bhi.n	d4c <AudioMixer4::update()+0xd0>
     d6a:	b.n	cd8 <AudioMixer4::update()+0x5c>
     d6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000d70 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
     d70:	ldr	r2, [pc, #8]	; (d7c <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
     d72:	ldr	r1, [pc, #12]	; (d80 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
     d74:	ldr	r0, [pc, #12]	; (d84 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
     d76:	b.w	51e0 <__aeabi_atexit>
     d7a:	nop
     d7c:	.word	0x1fff89fc
     d80:	.word	0x00000a11
     d84:	.word	0x1fffab3c

00000d88 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
     d88:	ldr	r2, [pc, #8]	; (d94 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
     d8a:	ldr	r1, [pc, #12]	; (d98 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
     d8c:	ldr	r0, [pc, #12]	; (d9c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
     d8e:	b.w	51e0 <__aeabi_atexit>
     d92:	nop
     d94:	.word	0x1fff89fc
     d98:	.word	0x00000a11
     d9c:	.word	0x1fffab44

00000da0 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
     da0:	ldr	r2, [pc, #8]	; (dac <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
     da2:	ldr	r1, [pc, #12]	; (db0 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
     da4:	ldr	r0, [pc, #12]	; (db4 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
     da6:	b.w	51e0 <__aeabi_atexit>
     daa:	nop
     dac:	.word	0x1fff89fc
     db0:	.word	0x00000a11
     db4:	.word	0x1fffab4c

00000db8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
     db8:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
     dba:	ldr	r5, [pc, #28]	; (dd8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
     dbc:	ldr	r4, [pc, #28]	; (ddc <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
     dbe:	ldr	r0, [pc, #32]	; (de0 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
     dc0:	mov	r2, r5
     dc2:	mov	r1, r4
     dc4:	bl	51e0 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
     dc8:	mov	r2, r5
     dca:	mov	r1, r4
     dcc:	ldr	r0, [pc, #20]	; (de4 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
     dce:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
     dd2:	b.w	51e0 <__aeabi_atexit>
     dd6:	nop
     dd8:	.word	0x1fff89fc
     ddc:	.word	0x00000a11
     de0:	.word	0x1fffab54
     de4:	.word	0x1fffab5c

00000de8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
     de8:	ldr	r2, [pc, #8]	; (df4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
     dea:	ldr	r1, [pc, #12]	; (df8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
     dec:	ldr	r0, [pc, #12]	; (dfc <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
     dee:	b.w	51e0 <__aeabi_atexit>
     df2:	nop
     df4:	.word	0x1fff89fc
     df8:	.word	0x00000a11
     dfc:	.word	0x1fffab64

00000e00 <AudioPlaySdWav::begin()>:
#define STATE_PARSE4			11 // ignoring unknown chunk after "fmt "
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
     e00:	push	{r3, r4, r5, lr}
     e02:	mov	r4, r0
	state = STATE_STOP;
	state_play = STATE_STOP;
	data_length = 0;
	if (block_left) {
     e04:	ldr	r0, [r0, #108]	; 0x6c
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
	state = STATE_STOP;
     e06:	movs	r3, #13
	state_play = STATE_STOP;
	data_length = 0;
     e08:	movs	r5, #0
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
	state = STATE_STOP;
     e0a:	strb.w	r3, [r4, #635]	; 0x27b
	state_play = STATE_STOP;
     e0e:	strb.w	r3, [r4, #636]	; 0x27c
	data_length = 0;
     e12:	str	r5, [r4, #96]	; 0x60
	if (block_left) {
     e14:	cbz	r0, e1c <AudioPlaySdWav::begin()+0x1c>
		release(block_left);
     e16:	bl	4640 <AudioStream::release(audio_block_struct*)>
		block_left = NULL;
     e1a:	str	r5, [r4, #108]	; 0x6c
	}
	if (block_right) {
     e1c:	ldr	r0, [r4, #112]	; 0x70
     e1e:	cbz	r0, e28 <AudioPlaySdWav::begin()+0x28>
		release(block_right);
     e20:	bl	4640 <AudioStream::release(audio_block_struct*)>
		block_right = NULL;
     e24:	movs	r3, #0
     e26:	str	r3, [r4, #112]	; 0x70
     e28:	pop	{r3, r4, r5, pc}
     e2a:	nop

00000e2c <AudioPlaySdWav::parse_format()>:
	uint16_t format;
	uint16_t channels;
	uint32_t rate, b2m;
	uint16_t bits;

	format = header[0];
     e2c:	ldr	r3, [r0, #56]	; 0x38
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;
     e2e:	uxth	r2, r3
     e30:	cmp	r2, #1
     e32:	beq.n	e38 <AudioPlaySdWav::parse_format()+0xc>
     e34:	movs	r0, #0
	// if they're not the expected values, all we could do is
	// return false.  Do any real wav files have unexpected
	// values in these other fields?
	state_play = num;
	return true;
}
     e36:	bx	lr
	format = header[0];
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;

	rate = header[1];
     e38:	ldr	r2, [r0, #60]	; 0x3c
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
     e3a:	movw	r1, #44100	; 0xac44
     e3e:	cmp	r2, r1
     e40:	beq.n	e88 <AudioPlaySdWav::parse_format()+0x5c>
		b2m = B2M_44100;
	} else if (rate == 22050) {
     e42:	movw	r1, #22050	; 0x5622
     e46:	cmp	r2, r1
     e48:	beq.n	e82 <AudioPlaySdWav::parse_format()+0x56>
		b2m = B2M_22050;
		num |= 4;
	} else if (rate == 11025) {
     e4a:	movw	r1, #11025	; 0x2b11
     e4e:	cmp	r2, r1
     e50:	bne.n	e34 <AudioPlaySdWav::parse_format()+0x8>
		b2m = B2M_11025;
     e52:	ldr	r1, [pc, #60]	; (e90 <AudioPlaySdWav::parse_format()+0x64>)
		num |= 4;
     e54:	movs	r2, #4
	} else {
		return false;
	}

	channels = header[0] >> 16;
     e56:	lsrs	r3, r3, #16
	//Serial.print("  channels = ");
	//Serial.println(channels);
	if (channels == 1) {
     e58:	cmp	r3, #1
     e5a:	beq.n	e66 <AudioPlaySdWav::parse_format()+0x3a>
	} else if (channels == 2) {
     e5c:	cmp	r3, #2
     e5e:	bne.n	e34 <AudioPlaySdWav::parse_format()+0x8>
		b2m >>= 1;
     e60:	lsrs	r1, r1, #1
		num |= 1;
     e62:	orr.w	r2, r2, #1
	} else {
		return false;
	}

	bits = header[3] >> 16;
     e66:	ldrh.w	r3, [r0, #70]	; 0x46
	//Serial.print("  bits = ");
	//Serial.println(bits);
	if (bits == 8) {
     e6a:	cmp	r3, #8
     e6c:	beq.n	e78 <AudioPlaySdWav::parse_format()+0x4c>
	} else if (bits == 16) {
     e6e:	cmp	r3, #16
     e70:	bne.n	e34 <AudioPlaySdWav::parse_format()+0x8>
		b2m >>= 1;
     e72:	lsrs	r1, r1, #1
		num |= 2;
     e74:	orr.w	r2, r2, #2
	} else {
		return false;
	}

	bytes2millis = b2m;
     e78:	str	r1, [r0, #104]	; 0x68

	// we're not checking the byte rate and block align fields
	// if they're not the expected values, all we could do is
	// return false.  Do any real wav files have unexpected
	// values in these other fields?
	state_play = num;
     e7a:	strb.w	r2, [r0, #636]	; 0x27c
	return true;
     e7e:	movs	r0, #1
     e80:	bx	lr
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
		b2m = B2M_44100;
	} else if (rate == 22050) {
		b2m = B2M_22050;
     e82:	ldr	r1, [pc, #16]	; (e94 <AudioPlaySdWav::parse_format()+0x68>)
		num |= 4;
     e84:	movs	r2, #4
     e86:	b.n	e56 <AudioPlaySdWav::parse_format()+0x2a>

	rate = header[1];
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
		b2m = B2M_44100;
     e88:	ldr	r1, [pc, #12]	; (e98 <AudioPlaySdWav::parse_format()+0x6c>)
#define B2M_22050 (uint32_t)((double)4294967296000.0 / AUDIO_SAMPLE_RATE_EXACT * 2.0)
#define B2M_11025 (uint32_t)((double)4294967296000.0 / AUDIO_SAMPLE_RATE_EXACT * 4.0)

bool AudioPlaySdWav::parse_format(void)
{
	uint8_t num = 0;
     e8a:	movs	r2, #0
     e8c:	b.n	e56 <AudioPlaySdWav::parse_format()+0x2a>
     e8e:	nop
     e90:	.word	0x1735ee34
     e94:	.word	0x0b9af71a
     e98:	.word	0x05cd7b8d

00000e9c <AudioPlaySdWav::consume(unsigned long)>:

// https://ccrma.stanford.edu/courses/422/projects/WaveFormat/

// Consume already buffered data.  Returns true if audio transmitted.
bool AudioPlaySdWav::consume(uint32_t size)
{
     e9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
     ea0:	ldrh.w	r6, [r0, #630]	; 0x276
     ea4:	add.w	r7, r0, #118	; 0x76

// https://ccrma.stanford.edu/courses/422/projects/WaveFormat/

// Consume already buffered data.  Returns true if audio transmitted.
bool AudioPlaySdWav::consume(uint32_t size)
{
     ea8:	sub	sp, #12
	uint32_t len;
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
     eaa:	add	r6, r7
start:
	if (size == 0) return false;
     eac:	cbz	r1, eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
		if (header[0] == 0x61746164) {
     eae:	ldr.w	fp, [pc, #948]	; 1264 <AudioPlaySdWav::consume(unsigned long)+0x3c8>
     eb2:	mov	r4, r0
     eb4:	mov	r5, r1
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		p += len;
		size -= len;
		data_length = 8;
     eb6:	mov.w	sl, #8
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
		data_length = 8;
		header_offset = 0;
     eba:	mov.w	r9, #0
	Serial.print(", space = ");
	Serial.print((AUDIO_BLOCK_SAMPLES - block_offset) * 2);
	Serial.print(", state = ");
	Serial.println(state);
#endif
	switch (state) {
     ebe:	ldrb.w	r3, [r4, #635]	; 0x27b
     ec2:	cmp	r3, #13
     ec4:	bhi.w	1178 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
     ec8:	tbh	[pc, r3, lsl #1]
     ecc:	.word	0x000f000f
     ed0:	.word	0x009e00d3
     ed4:	.word	0x000f000f
     ed8:	.word	0x000f000f
     edc:	.word	0x00130116
     ee0:	.word	0x00710045
     ee4:	.word	0x000f0087
	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
     ee8:	str	r2, [r4, #96]	; 0x60
		state = STATE_PARSE1;
		goto start;

	  // playing mono at native sample rate
	  case STATE_DIRECT_8BIT_MONO:
		return false;
     eea:	movs	r0, #0
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
     eec:	add	sp, #12
     eee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		//Serial.println("unknown WAV header");
		break;

	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
     ef2:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
     ef4:	ldrb.w	r3, [r4, #634]	; 0x27a
     ef8:	cmp	r2, r5
     efa:	add.w	r0, r4, #56	; 0x38
     efe:	it	cs
     f00:	movcs	r2, r5
     f02:	add	r0, r3
     f04:	mov	r1, r6
     f06:	mov	r8, r2
     f08:	bl	2d54 <memcpy>
		header_offset += len;
     f0c:	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
     f10:	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
     f14:	ldr	r3, [r4, #96]	; 0x60
	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
     f16:	add	r1, r8
		buffer_offset += len;
		data_length -= len;
     f18:	rsb	r3, r8, r3
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
		buffer_offset += len;
     f1c:	add	r2, r8
	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
     f1e:	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
     f22:	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
     f26:	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
     f28:	str	r3, [sp, #4]
     f2a:	cmp	r3, #0
     f2c:	bne.n	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
		if (parse_format()) {
     f2e:	mov	r0, r4
     f30:	bl	e2c <AudioPlaySdWav::parse_format()>
     f34:	cmp	r0, #0
     f36:	beq.w	1178 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
			header_offset = 0;
			state = STATE_PARSE3;
     f3a:	movs	r2, #10
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
			header_offset = 0;
     f3c:	ldr	r3, [sp, #4]
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
     f3e:	str.w	sl, [r4, #96]	; 0x60
		data_length -= len;
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
     f42:	rsb	r5, r8, r5
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
     f46:	add	r6, r8
			size -= len;
			data_length = 8;
			header_offset = 0;
     f48:	strb.w	r3, [r4, #634]	; 0x27a
			state = STATE_PARSE3;
     f4c:	strb.w	r2, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
     f50:	cmp	r5, #0
     f52:	bne.n	ebe <AudioPlaySdWav::consume(unsigned long)+0x22>
     f54:	b.n	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.println("unknown audio format");
		break;

	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
     f56:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
     f58:	ldrb.w	r3, [r4, #634]	; 0x27a
     f5c:	cmp	r2, r5
     f5e:	add.w	r0, r4, #56	; 0x38
     f62:	it	cs
     f64:	movcs	r2, r5
     f66:	add	r0, r3
     f68:	mov	r1, r6
     f6a:	mov	r8, r2
     f6c:	bl	2d54 <memcpy>
		header_offset += len;
     f70:	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
     f74:	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
     f78:	ldr	r3, [r4, #96]	; 0x60
	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
     f7a:	add	r1, r8
		buffer_offset += len;
     f7c:	add	r2, r8
		data_length -= len;
     f7e:	rsb	r3, r8, r3
	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
     f82:	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
     f86:	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
     f8a:	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
     f8c:	cmp	r3, #0
     f8e:	bne.n	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
		if (header[0] == 0x61746164) {
     f90:	ldr	r1, [r4, #56]	; 0x38
		//Serial.print(header[0], HEX);
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
     f92:	ldr	r2, [r4, #60]	; 0x3c
     f94:	str	r2, [r4, #96]	; 0x60
		if (header[0] == 0x61746164) {
     f96:	cmp	r1, fp
		if (data_length > 0) return false;
		//Serial.print("chunk id = ");
		//Serial.print(header[0], HEX);
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
     f98:	add	r6, r8
		size -= len;
     f9a:	rsb	r5, r8, r5
		data_length = header[1];
		if (header[0] == 0x61746164) {
     f9e:	beq.w	11a4 <AudioPlaySdWav::consume(unsigned long)+0x308>
				block_right = allocate();
				if (!block_right) return false;
			}
			total_length = data_length;
		} else {
			state = STATE_PARSE4;
     fa2:	movs	r3, #11
     fa4:	strb.w	r3, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
     fa8:	cmp	r5, #0
     faa:	bne.n	ebe <AudioPlaySdWav::consume(unsigned long)+0x22>
     fac:	b.n	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
		}
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
     fae:	ldr	r2, [r4, #96]	; 0x60
			data_length -= size;
			buffer_offset += size;
     fb0:	ldrh.w	r3, [r4, #630]	; 0x276
		}
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
     fb4:	cmp	r5, r2
     fb6:	bcc.w	1250 <AudioPlaySdWav::consume(unsigned long)+0x3b4>
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
     fba:	add	r3, r2
		data_length = 8;
		header_offset = 0;
		state = STATE_PARSE3;
     fbc:	movs	r1, #10
			data_length -= size;
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
     fbe:	subs	r5, r5, r2
		buffer_offset += data_length;
		data_length = 8;
     fc0:	str.w	sl, [r4, #96]	; 0x60
		if (size < data_length) {
			data_length -= size;
			buffer_offset += size;
			return false;
		}
		p += data_length;
     fc4:	add	r6, r2
		size -= data_length;
		buffer_offset += data_length;
		data_length = 8;
		header_offset = 0;
     fc6:	strb.w	r9, [r4, #634]	; 0x27a
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
     fca:	strh.w	r3, [r4, #630]	; 0x276
		data_length = 8;
		header_offset = 0;
		state = STATE_PARSE3;
     fce:	strb.w	r1, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
     fd2:	cmp	r5, #0
     fd4:	bne.w	ebe <AudioPlaySdWav::consume(unsigned long)+0x22>
     fd8:	b.n	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
		//Serial.println("consumed unknown chunk");
		goto start;

	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
     fda:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		buffer_offset += len;
     fdc:	ldrh.w	r1, [r4, #630]	; 0x276
     fe0:	cmp	r5, r2
     fe2:	mov	r3, r5
     fe4:	it	cs
     fe6:	movcs	r3, r2
     fe8:	add	r1, r3
		data_length -= len;
		if (data_length > 0) return false;
     fea:	subs	r2, r2, r3

	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
     fec:	strh.w	r1, [r4, #630]	; 0x276
		data_length -= len;
		if (data_length > 0) return false;
     ff0:	bne.w	ee8 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		p += len;
		size -= len;
     ff4:	subs	r5, r5, r3
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		p += len;
     ff6:	add	r6, r3
		size -= len;
		data_length = 8;
     ff8:	str.w	sl, [r4, #96]	; 0x60
		state = STATE_PARSE1;
     ffc:	strb.w	sl, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    1000:	cmp	r5, #0
    1002:	bne.w	ebe <AudioPlaySdWav::consume(unsigned long)+0x22>
    1006:	b.n	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
		state = STATE_STOP;
		return false;

	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
    1008:	ldr	r3, [r4, #96]	; 0x60
		data_length -= size;
		if (leftover_bytes) {
    100a:	ldrb.w	r1, [r4, #637]	; 0x27d
    100e:	cmp	r5, r3
    1010:	it	cs
    1012:	movcs	r5, r3
		return false;

	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
		data_length -= size;
    1014:	subs	r2, r3, r5
    1016:	str	r2, [r4, #96]	; 0x60
		if (leftover_bytes) {
    1018:	cmp	r1, #0
    101a:	beq.w	118a <AudioPlaySdWav::consume(unsigned long)+0x2ee>
			block_left->data[block_offset] = header[0];
    101e:	ldr	r1, [r4, #108]	; 0x6c
    1020:	ldrh.w	r3, [r4, #116]	; 0x74
    1024:	ldr	r0, [r4, #56]	; 0x38
    1026:	add.w	ip, r1, r3, lsl #1
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
    102a:	mov.w	lr, #0
	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
		data_length -= size;
		if (leftover_bytes) {
			block_left->data[block_offset] = header[0];
    102e:	strh.w	r0, [ip, #4]
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
    1032:	strb.w	lr, [r4, #637]	; 0x27d
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    1036:	ldr	r0, [r4, #112]	; 0x70
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
    1038:	ldrb.w	ip, [r6, #1]
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
    103c:	ldrb.w	lr, [r6], #2
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    1040:	add.w	r0, r0, r3, lsl #1
    1044:	adds	r3, #1
    1046:	uxth	r3, r3
    1048:	orr.w	lr, lr, ip, lsl #8
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    104c:	cmp	r3, #127	; 0x7f
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    104e:	strh.w	r3, [r4, #116]	; 0x74
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
    1052:	sub.w	r5, r5, #2
			block_right->data[block_offset++] = (msb << 8) | lsb;
    1056:	strh.w	lr, [r0, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    105a:	bhi.w	1212 <AudioPlaySdWav::consume(unsigned long)+0x376>
				data_length += size;
				buffer_offset = p - buffer;
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
    105e:	cmp	r5, #0
    1060:	bne.w	118a <AudioPlaySdWav::consume(unsigned long)+0x2ee>
				if (data_length == 0) break;
    1064:	cmp	r2, #0
    1066:	beq.w	1196 <AudioPlaySdWav::consume(unsigned long)+0x2fa>
				leftover_bytes = 0;
    106a:	strb.w	r5, [r4, #637]	; 0x27d
				return false;
    106e:	mov	r0, r5
    1070:	b.n	eec <AudioPlaySdWav::consume(unsigned long)+0x50>
	  case STATE_DIRECT_8BIT_STEREO:
		return false;

	  // playing mono at native sample rate
	  case STATE_DIRECT_16BIT_MONO:
		if (size > data_length) size = data_length;
    1072:	ldr	r3, [r4, #96]	; 0x60
    1074:	ldr	r1, [r4, #108]	; 0x6c
    1076:	cmp	r5, r3
    1078:	it	cs
    107a:	movcs	r5, r3
		data_length -= size;
    107c:	rsb	ip, r5, r3
    1080:	adds	r6, #2
    1082:	str.w	ip, [r4, #96]	; 0x60
    1086:	b.n	1090 <AudioPlaySdWav::consume(unsigned long)+0x1f4>
    1088:	adds	r6, #2
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
    108a:	cmp	r5, #0
    108c:	beq.w	11d4 <AudioPlaySdWav::consume(unsigned long)+0x338>
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    1090:	ldrh.w	r2, [r4, #116]	; 0x74
	  // playing mono at native sample rate
	  case STATE_DIRECT_16BIT_MONO:
		if (size > data_length) size = data_length;
		data_length -= size;
		while (1) {
			lsb = *p++;
    1094:	ldrb.w	r0, [r6, #-2]
			msb = *p++;
    1098:	ldrb.w	lr, [r6, #-1]
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    109c:	adds	r3, r2, #1
    109e:	uxth	r3, r3
    10a0:	add.w	r2, r1, r2, lsl #1
    10a4:	orr.w	r0, r0, lr, lsl #8
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    10a8:	cmp	r3, #127	; 0x7f
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    10aa:	strh.w	r3, [r4, #116]	; 0x74
		if (size > data_length) size = data_length;
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
    10ae:	sub.w	r5, r5, #2
			block_left->data[block_offset++] = (msb << 8) | lsb;
    10b2:	strh	r0, [r2, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    10b4:	bls.n	1088 <AudioPlaySdWav::consume(unsigned long)+0x1ec>
				transmit(block_left, 0);
    10b6:	movs	r2, #0
    10b8:	mov	r0, r4
    10ba:	bl	4694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				transmit(block_left, 1);
    10be:	movs	r2, #1
    10c0:	ldr	r1, [r4, #108]	; 0x6c
    10c2:	mov	r0, r4
    10c4:	bl	4694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
    10c8:	ldr	r0, [r4, #108]	; 0x6c
    10ca:	bl	4640 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
				data_length += size;
    10ce:	ldr	r3, [r4, #96]	; 0x60
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
    10d0:	ldr	r0, [r4, #112]	; 0x70
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
				data_length += size;
    10d2:	add	r5, r3
				buffer_offset = p - buffer;
    10d4:	subs	r6, r6, r7
			block_left->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
    10d6:	movs	r3, #0
				data_length += size;
				buffer_offset = p - buffer;
    10d8:	strh.w	r6, [r4, #630]	; 0x276
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
				data_length += size;
    10dc:	str	r5, [r4, #96]	; 0x60
			block_left->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
    10de:	str	r3, [r4, #108]	; 0x6c
				data_length += size;
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
    10e0:	cbz	r0, 10e8 <AudioPlaySdWav::consume(unsigned long)+0x24c>
    10e2:	bl	4640 <AudioStream::release(audio_block_struct*)>
    10e6:	ldr	r5, [r4, #96]	; 0x60
				if (data_length == 0) state = STATE_STOP;
    10e8:	cbnz	r5, 10f0 <AudioPlaySdWav::consume(unsigned long)+0x254>
    10ea:	movs	r3, #13
    10ec:	strb.w	r3, [r4, #635]	; 0x27b
				return true;
    10f0:	movs	r0, #1
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
    10f2:	add	sp, #12
    10f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Serial.println(state);
#endif
	switch (state) {
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
    10f8:	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    10fa:	ldrb.w	r3, [r4, #634]	; 0x27a
    10fe:	cmp	r2, r5
    1100:	add.w	r0, r4, #56	; 0x38
    1104:	it	cs
    1106:	movcs	r2, r5
    1108:	add	r0, r3
    110a:	mov	r1, r6
    110c:	mov	r8, r2
    110e:	bl	2d54 <memcpy>
		header_offset += len;
    1112:	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    1116:	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    111a:	ldr	r3, [r4, #96]	; 0x60
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    111c:	add	r1, r8
		buffer_offset += len;
    111e:	add	r2, r8
		data_length -= len;
    1120:	rsb	r3, r8, r3
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    1124:	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    1128:	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    112c:	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    112e:	cmp	r3, #0
    1130:	bne.w	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
    1134:	ldr	r2, [r4, #56]	; 0x38
    1136:	ldr	r1, [pc, #296]	; (1260 <AudioPlaySdWav::consume(unsigned long)+0x3c4>)
    1138:	cmp	r2, r1
    113a:	bne.n	1178 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
    113c:	ldr	r2, [r4, #64]	; 0x40
    113e:	sub.w	r1, r1, #15728640	; 0xf00000
    1142:	subw	r1, r1, #2043	; 0x7fb
    1146:	cmp	r2, r1
    1148:	bne.n	1178 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
			//Serial.println("is wav file");
			if (header[3] == 0x20746D66) {
    114a:	add.w	r1, r1, #3674210304	; 0xdb000000
    114e:	ldr	r2, [r4, #68]	; 0x44
    1150:	add.w	r1, r1, #1974272	; 0x1e2000
    1154:	addw	r1, r1, #3087	; 0xc0f
    1158:	cmp	r2, r1
    115a:	beq.n	11be <AudioPlaySdWav::consume(unsigned long)+0x322>
				// first chuck is something other than "fmt "
				//Serial.print("skipping \"");
				//Serial.printf("\" (%08X), ", __builtin_bswap32(header[3]));
				//Serial.print(header[4]);
				//Serial.println(" bytes");
				header_offset = 12;
    115c:	movs	r3, #12
    115e:	ldr	r2, [r4, #72]	; 0x48
    1160:	strb.w	r3, [r4, #634]	; 0x27a
				state = STATE_PARSE5;
    1164:	strb.w	r3, [r4, #635]	; 0x27b
			}
			p += len;
			size -= len;
    1168:	rsb	r5, r8, r5
				//Serial.print(header[4]);
				//Serial.println(" bytes");
				header_offset = 12;
				state = STATE_PARSE5;
			}
			p += len;
    116c:	add	r6, r8
			size -= len;
			data_length = header[4];
    116e:	str	r2, [r4, #96]	; 0x60
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    1170:	cmp	r5, #0
    1172:	bne.w	ebe <AudioPlaySdWav::consume(unsigned long)+0x22>
    1176:	b.n	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>

	  // this is not supposed to happen!
	  //default:
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
    1178:	movs	r3, #13
	state = STATE_STOP;
	return false;
    117a:	movs	r0, #0

	  // this is not supposed to happen!
	  //default:
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
    117c:	strb.w	r3, [r4, #636]	; 0x27c
	state = STATE_STOP;
    1180:	strb.w	r3, [r4, #635]	; 0x27b
	return false;
}
    1184:	add	sp, #12
    1186:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			if (size == 0) {
    118a:	subs	r5, #2
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
			goto right16;
		}
		while (1) {
			lsb = *p++;
    118c:	ldrb	r0, [r6, #0]
			msb = *p++;
    118e:	ldrb.w	lr, [r6, #1]
			size -= 2;
			if (size == 0) {
    1192:	bne.n	11de <AudioPlaySdWav::consume(unsigned long)+0x342>
				if (data_length == 0) break;
    1194:	cbnz	r2, 11f4 <AudioPlaySdWav::consume(unsigned long)+0x358>
		//Serial.println("end of file reached");
		// end of file reached
		if (block_offset > 0) {
			// TODO: fill remainder of last block with zero and transmit
		}
		state = STATE_STOP;
    1196:	movs	r3, #13
		return false;
    1198:	movs	r0, #0
		//Serial.println("end of file reached");
		// end of file reached
		if (block_offset > 0) {
			// TODO: fill remainder of last block with zero and transmit
		}
		state = STATE_STOP;
    119a:	strb.w	r3, [r4, #635]	; 0x27b
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
    119e:	add	sp, #12
    11a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
			state = state_play;
    11a4:	ldrb.w	r1, [r4, #636]	; 0x27c
			//Serial.print("wav: found data chunk, len=");
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
    11a8:	strb.w	r3, [r4, #637]	; 0x27d
			state = state_play;
			if (state & 1) {
    11ac:	lsls	r3, r1, #31
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
			state = state_play;
    11ae:	strb.w	r1, [r4, #635]	; 0x27b
			if (state & 1) {
    11b2:	bmi.n	1202 <AudioPlaySdWav::consume(unsigned long)+0x366>
				// if we're going to start stereo
				// better allocate another output block
				block_right = allocate();
				if (!block_right) return false;
			}
			total_length = data_length;
    11b4:	str	r2, [r4, #100]	; 0x64
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    11b6:	cmp	r5, #0
    11b8:	bne.w	ebe <AudioPlaySdWav::consume(unsigned long)+0x22>
    11bc:	b.n	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
			//Serial.println("is wav file");
			if (header[3] == 0x20746D66) {
				// "fmt " header
				if (header[4] < 16) {
    11be:	ldr	r2, [r4, #72]	; 0x48
    11c0:	sub.w	r1, r2, #16
    11c4:	cmp	r1, #24
    11c6:	bhi.n	1178 <AudioPlaySdWav::consume(unsigned long)+0x2dc>
					//Serial.println("WAVEFORMATEXTENSIBLE too long");
					break;
				}
				//Serial.println("header ok");
				header_offset = 0;
				state = STATE_PARSE2;
    11c8:	movs	r1, #9
					// size of header[] should accomodate them...
					//Serial.println("WAVEFORMATEXTENSIBLE too long");
					break;
				}
				//Serial.println("header ok");
				header_offset = 0;
    11ca:	strb.w	r3, [r4, #634]	; 0x27a
				state = STATE_PARSE2;
    11ce:	strb.w	r1, [r4, #635]	; 0x27b
    11d2:	b.n	1168 <AudioPlaySdWav::consume(unsigned long)+0x2cc>
				if (block_right) release(block_right);
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
				if (data_length == 0) break;
    11d4:	cmp.w	ip, #0
    11d8:	bne.w	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
    11dc:	b.n	1196 <AudioPlaySdWav::consume(unsigned long)+0x2fa>
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
    11de:	ldr	r1, [r4, #108]	; 0x6c
    11e0:	ldrh.w	r3, [r4, #116]	; 0x74
    11e4:	add.w	ip, r1, r3, lsl #1
    11e8:	orr.w	r0, r0, lr, lsl #8
			leftover_bytes = 0;
			goto right16;
		}
		while (1) {
			lsb = *p++;
			msb = *p++;
    11ec:	adds	r6, #2
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
    11ee:	strh.w	r0, [ip, #4]
    11f2:	b.n	1036 <AudioPlaySdWav::consume(unsigned long)+0x19a>
    11f4:	ldrh	r3, [r6, #0]
			lsb = *p++;
			msb = *p++;
			size -= 2;
			if (size == 0) {
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
    11f6:	str	r3, [r4, #56]	; 0x38
				leftover_bytes = 2;
    11f8:	movs	r3, #2
				return false;
    11fa:	mov	r0, r5
			msb = *p++;
			size -= 2;
			if (size == 0) {
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
    11fc:	strb.w	r3, [r4, #637]	; 0x27d
				return false;
    1200:	b.n	eec <AudioPlaySdWav::consume(unsigned long)+0x50>
			leftover_bytes = 0;
			state = state_play;
			if (state & 1) {
				// if we're going to start stereo
				// better allocate another output block
				block_right = allocate();
    1202:	bl	4598 <AudioStream::allocate()>
    1206:	str	r0, [r4, #112]	; 0x70
				if (!block_right) return false;
    1208:	cmp	r0, #0
    120a:	beq.w	eea <AudioPlaySdWav::consume(unsigned long)+0x4e>
    120e:	ldr	r2, [r4, #96]	; 0x60
    1210:	b.n	11b4 <AudioPlaySdWav::consume(unsigned long)+0x318>
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
    1212:	movs	r2, #0
    1214:	mov	r0, r4
    1216:	bl	4694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
				block_left = NULL;
    121a:	mov.w	r8, #0
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				release(block_left);
    121e:	ldr	r0, [r4, #108]	; 0x6c
    1220:	bl	4640 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
				transmit(block_right, 1);
    1224:	movs	r2, #1
    1226:	ldr	r1, [r4, #112]	; 0x70
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				release(block_left);
				block_left = NULL;
    1228:	str.w	r8, [r4, #108]	; 0x6c
				transmit(block_right, 1);
    122c:	mov	r0, r4
    122e:	bl	4694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_right);
    1232:	ldr	r0, [r4, #112]	; 0x70
    1234:	bl	4640 <AudioStream::release(audio_block_struct*)>
				block_right = NULL;
				data_length += size;
    1238:	ldr	r0, [r4, #96]	; 0x60
				transmit(block_left, 0);
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
    123a:	str.w	r8, [r4, #112]	; 0x70
				data_length += size;
				buffer_offset = p - buffer;
    123e:	subs	r6, r6, r7
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
    1240:	add	r0, r5
				buffer_offset = p - buffer;
    1242:	strh.w	r6, [r4, #630]	; 0x276
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
    1246:	str	r0, [r4, #96]	; 0x60
				buffer_offset = p - buffer;
				if (data_length == 0) state = STATE_STOP;
    1248:	cmp	r0, #0
    124a:	beq.w	10ea <AudioPlaySdWav::consume(unsigned long)+0x24e>
    124e:	b.n	10f0 <AudioPlaySdWav::consume(unsigned long)+0x254>
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
			data_length -= size;
    1250:	subs	r2, r2, r5
			buffer_offset += size;
    1252:	add	r5, r3
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
			data_length -= size;
    1254:	str	r2, [r4, #96]	; 0x60
			buffer_offset += size;
    1256:	strh.w	r5, [r4, #630]	; 0x276
			return false;
    125a:	movs	r0, #0
    125c:	b.n	eec <AudioPlaySdWav::consume(unsigned long)+0x50>
    125e:	nop
    1260:	.word	0x46464952
    1264:	.word	0x61746164

00001268 <AudioPlaySdWav::update()>:
void AudioPlaySdWav::update(void)
{
	int32_t n;

	// only update if we're playing
	if (state == STATE_STOP) return;
    1268:	ldrb.w	r3, [r0, #635]	; 0x27b
    126c:	cmp	r3, #13
    126e:	beq.w	13ca <AudioPlaySdWav::update()+0x162>
	}
}


void AudioPlaySdWav::update(void)
{
    1272:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1276:	mov	r4, r0

	// only update if we're playing
	if (state == STATE_STOP) return;

	// allocate the audio blocks to transmit
	block_left = allocate();
    1278:	bl	4598 <AudioStream::allocate()>
    127c:	str	r0, [r4, #108]	; 0x6c
	if (block_left == NULL) return;
    127e:	cmp	r0, #0
    1280:	beq.w	13aa <AudioPlaySdWav::update()+0x142>
	if (state < 8 && (state & 1) == 1) {
    1284:	ldrb.w	r3, [r4, #635]	; 0x27b
    1288:	cmp	r3, #7
    128a:	bls.w	13ae <AudioPlaySdWav::update()+0x146>
			return;
		}
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
    128e:	movs	r3, #0
    1290:	str	r3, [r4, #112]	; 0x70
	block_offset = 0;

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
    1292:	ldrh.w	r3, [r4, #632]	; 0x278
    1296:	ldrh.w	r1, [r4, #630]	; 0x276
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
	}
	block_offset = 0;
    129a:	movs	r2, #0

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
    129c:	subs	r1, r3, r1
	if (n > 0) {
    129e:	cmp	r1, r2
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
	}
	block_offset = 0;
    12a0:	strh.w	r2, [r4, #116]	; 0x74

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
	if (n > 0) {
    12a4:	ble.n	12b2 <AudioPlaySdWav::update()+0x4a>
		// we have buffered data
		if (consume(n)) return; // it was enough to transmit audio
    12a6:	mov	r0, r4
    12a8:	bl	e9c <AudioPlaySdWav::consume(unsigned long)>
    12ac:	cmp	r0, #0
    12ae:	bne.w	13d8 <AudioPlaySdWav::update()+0x170>
	}

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
    12b2:	ldrb.w	r3, [r4, #635]	; 0x27b
    12b6:	cmp	r3, #13
    12b8:	add.w	r6, r4, #24
    12bc:	beq.n	130a <AudioPlaySdWav::update()+0xa2>
    12be:	mov	r0, r6
    12c0:	bl	1e98 <File::available()>
    12c4:	cbz	r0, 130a <AudioPlaySdWav::update()+0xa2>
    12c6:	add.w	r7, r4, #118	; 0x76
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
    12ca:	mov.w	r8, #0
    12ce:	b.n	12f0 <AudioPlaySdWav::update()+0x88>
    12d0:	strh.w	r8, [r4, #630]	; 0x276
		bool parsing = (state >= 8);
    12d4:	ldrb.w	r5, [r4, #635]	; 0x27b
		bool txok = consume(buffer_length);
    12d8:	bl	e9c <AudioPlaySdWav::consume(unsigned long)>
		if (txok) {
			if (state != STATE_STOP) return;
    12dc:	ldrb.w	r3, [r4, #635]	; 0x27b
		buffer_length = wavfile.read(buffer, 512);
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
		if (txok) {
    12e0:	cmp	r0, #0
    12e2:	bne.n	13a6 <AudioPlaySdWav::update()+0x13e>
			if (state != STATE_STOP) return;
		} else {
			if (state != STATE_STOP) {
    12e4:	cmp	r3, #13
    12e6:	beq.n	130a <AudioPlaySdWav::update()+0xa2>
				if (parsing && state < 8) goto readagain;
    12e8:	cmp	r5, #7
    12ea:	bls.n	132a <AudioPlaySdWav::update()+0xc2>
    12ec:	cmp	r3, #7
    12ee:	bhi.n	132a <AudioPlaySdWav::update()+0xc2>

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
    12f0:	mov	r1, r7
    12f2:	mov.w	r2, #512	; 0x200
    12f6:	mov	r0, r6
    12f8:	bl	1f68 <File::read(void*, unsigned short)>
    12fc:	uxth	r3, r0
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
    12fe:	mov	r1, r3
    1300:	mov	r0, r4

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
    1302:	strh.w	r3, [r4, #632]	; 0x278
		if (buffer_length == 0) goto end;
    1306:	cmp	r3, #0
    1308:	bne.n	12d0 <AudioPlaySdWav::update()+0x68>
				else goto cleanup;
			}
		}
	}
end:	// end of file reached or other reason to stop
	wavfile.close();
    130a:	mov	r0, r6
    130c:	bl	1f74 <File::close()>
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    1310:	ldr	r2, [pc, #212]	; (13e8 <AudioPlaySdWav::update()+0x180>)
    1312:	ldrh	r3, [r2, #0]
    1314:	cmp	r3, #0
    1316:	bne.n	13cc <AudioPlaySdWav::update()+0x164>
		SPI.notUsingInterrupt(IRQ_SOFTWARE);
    1318:	movs	r1, #94	; 0x5e
    131a:	ldr	r0, [pc, #208]	; (13ec <AudioPlaySdWav::update()+0x184>)
    131c:	bl	1e4c <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>
#if defined(HAS_KINETIS_SDHC)	
	if (!(SIM_SCGC3 & SIM_SCGC3_SDHC)) AudioStopUsingSPI();
#else 	
	AudioStopUsingSPI();
#endif	
	state_play = STATE_STOP;
    1320:	movs	r3, #13
    1322:	strb.w	r3, [r4, #636]	; 0x27c
	state = STATE_STOP;
    1326:	strb.w	r3, [r4, #635]	; 0x27b
cleanup:
	if (block_left) {
    132a:	ldr	r0, [r4, #108]	; 0x6c
    132c:	cbz	r0, 136c <AudioPlaySdWav::update()+0x104>
		if (block_offset > 0) {
    132e:	ldrh.w	r3, [r4, #116]	; 0x74
    1332:	cbz	r3, 1364 <AudioPlaySdWav::update()+0xfc>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    1334:	cmp	r3, #127	; 0x7f
    1336:	bhi.n	134c <AudioPlaySdWav::update()+0xe4>
    1338:	add.w	r3, r0, r3, lsl #1
    133c:	adds	r3, #2
    133e:	add.w	r5, r0, #258	; 0x102
				block_left->data[i] = 0;
    1342:	movs	r2, #0
    1344:	strh.w	r2, [r3, #2]!
	state_play = STATE_STOP;
	state = STATE_STOP;
cleanup:
	if (block_left) {
		if (block_offset > 0) {
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    1348:	cmp	r3, r5
    134a:	bne.n	1344 <AudioPlaySdWav::update()+0xdc>
				block_left->data[i] = 0;
			}
			transmit(block_left, 0);
    134c:	mov	r1, r0
    134e:	movs	r2, #0
    1350:	mov	r0, r4
    1352:	bl	4694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
			if (state < 8 && (state & 1) == 0) {
    1356:	ldrb.w	r3, [r4, #635]	; 0x27b
    135a:	cmp	r3, #7
    135c:	bhi.n	1362 <AudioPlaySdWav::update()+0xfa>
    135e:	lsls	r3, r3, #31
    1360:	bpl.n	13dc <AudioPlaySdWav::update()+0x174>
    1362:	ldr	r0, [r4, #108]	; 0x6c
				transmit(block_left, 1);
			}
		}
		release(block_left);
    1364:	bl	4640 <AudioStream::release(audio_block_struct*)>
		block_left = NULL;
    1368:	movs	r3, #0
    136a:	str	r3, [r4, #108]	; 0x6c
	}
	if (block_right) {
    136c:	ldr	r0, [r4, #112]	; 0x70
    136e:	cbz	r0, 13aa <AudioPlaySdWav::update()+0x142>
		if (block_offset > 0) {
    1370:	ldrh.w	r3, [r4, #116]	; 0x74
    1374:	cbz	r3, 139a <AudioPlaySdWav::update()+0x132>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    1376:	cmp	r3, #127	; 0x7f
    1378:	bhi.n	138e <AudioPlaySdWav::update()+0x126>
    137a:	add.w	r3, r0, r3, lsl #1
    137e:	adds	r3, #2
    1380:	add.w	r5, r0, #258	; 0x102
				block_right->data[i] = 0;
    1384:	movs	r2, #0
    1386:	strh.w	r2, [r3, #2]!
		release(block_left);
		block_left = NULL;
	}
	if (block_right) {
		if (block_offset > 0) {
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    138a:	cmp	r5, r3
    138c:	bne.n	1386 <AudioPlaySdWav::update()+0x11e>
				block_right->data[i] = 0;
			}
			transmit(block_right, 1);
    138e:	mov	r1, r0
    1390:	movs	r2, #1
    1392:	mov	r0, r4
    1394:	bl	4694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    1398:	ldr	r0, [r4, #112]	; 0x70
		}
		release(block_right);
    139a:	bl	4640 <AudioStream::release(audio_block_struct*)>
		block_right = NULL;
    139e:	movs	r3, #0
    13a0:	str	r3, [r4, #112]	; 0x70
    13a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
		if (txok) {
			if (state != STATE_STOP) return;
    13a6:	cmp	r3, #13
    13a8:	beq.n	130a <AudioPlaySdWav::update()+0xa2>
    13aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (state == STATE_STOP) return;

	// allocate the audio blocks to transmit
	block_left = allocate();
	if (block_left == NULL) return;
	if (state < 8 && (state & 1) == 1) {
    13ae:	lsls	r2, r3, #31
    13b0:	bpl.w	128e <AudioPlaySdWav::update()+0x26>
		// if we're playing stereo, allocate another
		// block for the right channel output
		block_right = allocate();
    13b4:	bl	4598 <AudioStream::allocate()>
    13b8:	str	r0, [r4, #112]	; 0x70
		if (block_right == NULL) {
    13ba:	cmp	r0, #0
    13bc:	bne.w	1292 <AudioPlaySdWav::update()+0x2a>
			release(block_left);
    13c0:	ldr	r0, [r4, #108]	; 0x6c
			transmit(block_right, 1);
		}
		release(block_right);
		block_right = NULL;
	}
}
    13c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (state < 8 && (state & 1) == 1) {
		// if we're playing stereo, allocate another
		// block for the right channel output
		block_right = allocate();
		if (block_right == NULL) {
			release(block_left);
    13c6:	b.w	4640 <AudioStream::release(audio_block_struct*)>
    13ca:	bx	lr
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    13cc:	subs	r3, #1
    13ce:	uxth	r3, r3
    13d0:	strh	r3, [r2, #0]
    13d2:	cmp	r3, #0
    13d4:	beq.n	1318 <AudioPlaySdWav::update()+0xb0>
    13d6:	b.n	1320 <AudioPlaySdWav::update()+0xb8>
    13d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
				block_left->data[i] = 0;
			}
			transmit(block_left, 0);
			if (state < 8 && (state & 1) == 0) {
				transmit(block_left, 1);
    13dc:	movs	r2, #1
    13de:	ldr	r1, [r4, #108]	; 0x6c
    13e0:	mov	r0, r4
    13e2:	bl	4694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    13e6:	b.n	1362 <AudioPlaySdWav::update()+0xfa>
    13e8:	.word	0x1fffab74
    13ec:	.word	0x1fff8ad8

000013f0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
//audio_block_t * AudioOutputI2SQuad::inputQueueArray[4];
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    13f0:	ldr	r2, [pc, #8]	; (13fc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    13f2:	ldr	r1, [pc, #12]	; (1400 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    13f4:	ldr	r0, [pc, #12]	; (1404 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    13f6:	b.w	51e0 <__aeabi_atexit>
    13fa:	nop
    13fc:	.word	0x1fff89fc
    1400:	.word	0x00000a11
    1404:	.word	0x1fffab6c

00001408 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    1408:	ldr	r2, [pc, #8]	; (1414 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    140a:	ldr	r1, [pc, #12]	; (1418 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    140c:	ldr	r0, [pc, #12]	; (141c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    140e:	b.w	51e0 <__aeabi_atexit>
    1412:	nop
    1414:	.word	0x1fff89fc
    1418:	.word	0x00000a11
    141c:	.word	0x1fffab78

00001420 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    1420:	ldr	r2, [pc, #8]	; (142c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    1422:	ldr	r1, [pc, #12]	; (1430 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    1424:	ldr	r0, [pc, #12]	; (1434 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    1426:	b.w	51e0 <__aeabi_atexit>
    142a:	nop
    142c:	.word	0x1fff89fc
    1430:	.word	0x00000a11
    1434:	.word	0x1fffab80

00001438 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    1438:	ldr	r2, [pc, #8]	; (1444 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    143a:	ldr	r1, [pc, #12]	; (1448 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    143c:	ldr	r0, [pc, #12]	; (144c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    143e:	b.w	51e0 <__aeabi_atexit>
    1442:	nop
    1444:	.word	0x1fff89fc
    1448:	.word	0x00000a11
    144c:	.word	0x1fffab88

00001450 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    1450:	ldr	r2, [pc, #8]	; (145c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    1452:	ldr	r1, [pc, #12]	; (1460 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    1454:	ldr	r0, [pc, #12]	; (1464 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    1456:	b.w	51e0 <__aeabi_atexit>
    145a:	nop
    145c:	.word	0x1fff89fc
    1460:	.word	0x00000a11
    1464:	.word	0x1fffab90

00001468 <AudioOutputI2S::isr()>:
	dma.enable();
}


void AudioOutputI2S::isr(void)
{
    1468:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    146c:	ldr	r3, [pc, #208]	; (1540 <AudioOutputI2S::isr()+0xd8>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    146e:	ldr	r0, [pc, #212]	; (1544 <AudioOutputI2S::isr()+0xdc>)
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    1470:	ldr	r2, [r3, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1472:	ldr	r1, [pc, #212]	; (1548 <AudioOutputI2S::isr()+0xe0>)
    1474:	ldr	r2, [r2, #0]
    1476:	ldrb	r3, [r3, #4]
    1478:	strb	r3, [r1, #0]
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    147a:	cmp	r2, r0
    147c:	bcs.n	14d2 <AudioOutputI2S::isr()+0x6a>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    147e:	ldr	r3, [pc, #204]	; (154c <AudioOutputI2S::isr()+0xe4>)
    1480:	ldrb	r3, [r3, #0]
    1482:	cbnz	r3, 14d8 <AudioOutputI2S::isr()+0x70>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    1484:	ldr.w	sl, [pc, #212]	; 155c <AudioOutputI2S::isr()+0xf4>
	blockR = AudioOutputI2S::block_right_1st;
    1488:	ldr.w	r9, [pc, #212]	; 1560 <AudioOutputI2S::isr()+0xf8>
	offsetL = AudioOutputI2S::block_left_offset;
    148c:	ldr.w	r8, [pc, #212]	; 1564 <AudioOutputI2S::isr()+0xfc>
	offsetR = AudioOutputI2S::block_right_offset;
    1490:	ldr.w	fp, [pc, #212]	; 1568 <AudioOutputI2S::isr()+0x100>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    1494:	ldr.w	r6, [sl]
	blockR = AudioOutputI2S::block_right_1st;
    1498:	ldr.w	r7, [r9]
	offsetL = AudioOutputI2S::block_left_offset;
    149c:	ldrh.w	r4, [r8]
	offsetR = AudioOutputI2S::block_right_offset;
    14a0:	ldrh.w	r5, [fp]

	if (blockL && blockR) {
    14a4:	cmp	r6, #0
    14a6:	beq.n	1522 <AudioOutputI2S::isr()+0xba>
    14a8:	cbz	r7, 1514 <AudioOutputI2S::isr()+0xac>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    14aa:	adds	r2, r7, #4
    14ac:	adds	r1, r6, #4
    14ae:	add.w	r2, r2, r5, lsl #1
    14b2:	add.w	r1, r1, r4, lsl #1
    14b6:	bl	2c5c <memcpy_tointerleaveLR>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    14ba:	adds	r5, #64	; 0x40
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    14bc:	adds	r4, #64	; 0x40
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    14be:	cmp	r4, #127	; 0x7f
    14c0:	bhi.n	14fc <AudioOutputI2S::isr()+0x94>
		AudioOutputI2S::block_left_offset = offsetL;
    14c2:	strh.w	r4, [r8]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    14c6:	cmp	r5, #127	; 0x7f
    14c8:	bhi.n	14e2 <AudioOutputI2S::isr()+0x7a>
		AudioOutputI2S::block_right_offset = offsetR;
    14ca:	strh.w	r5, [fp]
    14ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
    14d2:	sub.w	r0, r0, #256	; 0x100
    14d6:	b.n	1484 <AudioOutputI2S::isr()+0x1c>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    14d8:	ldr	r3, [pc, #116]	; (1550 <AudioOutputI2S::isr()+0xe8>)
    14da:	mov.w	r2, #1073741824	; 0x40000000
    14de:	str	r2, [r3, #0]
    14e0:	b.n	1484 <AudioOutputI2S::isr()+0x1c>
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    14e2:	movs	r4, #0
		AudioStream::release(blockR);
    14e4:	mov	r0, r7
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    14e6:	strh.w	r4, [fp]
		AudioStream::release(blockR);
    14ea:	bl	4640 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    14ee:	ldr	r3, [pc, #100]	; (1554 <AudioOutputI2S::isr()+0xec>)
    14f0:	ldr	r2, [r3, #0]
    14f2:	str.w	r2, [r9]
		AudioOutputI2S::block_right_2nd = NULL;
    14f6:	str	r4, [r3, #0]
    14f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    14fc:	movs	r4, #0
		AudioStream::release(blockL);
    14fe:	mov	r0, r6
	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    1500:	strh.w	r4, [r8]
		AudioStream::release(blockL);
    1504:	bl	4640 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    1508:	ldr	r3, [pc, #76]	; (1558 <AudioOutputI2S::isr()+0xf0>)
    150a:	ldr	r2, [r3, #0]
    150c:	str.w	r2, [sl]
		AudioOutputI2S::block_left_2nd = NULL;
    1510:	str	r4, [r3, #0]
    1512:	b.n	14c6 <AudioOutputI2S::isr()+0x5e>
	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    1514:	adds	r1, r6, #4
    1516:	add.w	r1, r1, r4, lsl #1
    151a:	bl	2c9a <memcpy_tointerleaveL>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    151e:	adds	r4, #64	; 0x40
    1520:	b.n	14be <AudioOutputI2S::isr()+0x56>
	} else if (blockR) {
    1522:	cbz	r7, 1532 <AudioOutputI2S::isr()+0xca>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    1524:	adds	r1, r7, #4
    1526:	add.w	r1, r1, r5, lsl #1
    152a:	bl	2cda <memcpy_tointerleaveR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    152e:	adds	r5, #64	; 0x40
    1530:	b.n	14be <AudioOutputI2S::isr()+0x56>
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    1532:	mov.w	r2, #256	; 0x100
    1536:	mov	r1, r7
    1538:	bl	57e4 <memset>
    153c:	b.n	14be <AudioOutputI2S::isr()+0x56>
    153e:	nop
    1540:	.word	0x1fffab9c
    1544:	.word	0x1fff8300
    1548:	.word	0x4000801f
    154c:	.word	0x1fffabb4
    1550:	.word	0xe000e208
    1554:	.word	0x1fffabb0
    1558:	.word	0x1fffabb8
    155c:	.word	0x1fffabac
    1560:	.word	0x1fffaba4
    1564:	.word	0x1fffab98
    1568:	.word	0x1fffaba8

0000156c <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    156c:	push	{r4, r5, r6, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    156e:	movs	r1, #0




void AudioOutputI2S::update(void)
{
    1570:	mov	r4, r0
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    1572:	bl	46c8 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    1576:	cbz	r0, 159a <AudioOutputI2S::update()+0x2e>
		__disable_irq();
    1578:	cpsid	i
		if (block_left_1st == NULL) {
    157a:	ldr	r2, [pc, #112]	; (15ec <AudioOutputI2S::update()+0x80>)
    157c:	ldr	r3, [r2, #0]
    157e:	cmp	r3, #0
    1580:	beq.n	15d6 <AudioOutputI2S::update()+0x6a>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    1582:	ldr	r1, [pc, #108]	; (15f0 <AudioOutputI2S::update()+0x84>)
    1584:	ldr	r5, [r1, #0]
    1586:	cbz	r5, 15ca <AudioOutputI2S::update()+0x5e>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
			block_left_offset = 0;
    1588:	ldr	r6, [pc, #104]	; (15f4 <AudioOutputI2S::update()+0x88>)
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    158a:	str	r5, [r2, #0]
			block_left_2nd = block;
			block_left_offset = 0;
    158c:	movs	r2, #0
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
    158e:	str	r0, [r1, #0]
			block_left_offset = 0;
    1590:	strh	r2, [r6, #0]
			__enable_irq();
    1592:	cpsie	i
			release(tmp);
    1594:	mov	r0, r3
    1596:	bl	4640 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    159a:	mov	r0, r4
    159c:	movs	r1, #1
    159e:	bl	46c8 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    15a2:	cbz	r0, 15c8 <AudioOutputI2S::update()+0x5c>
		__disable_irq();
    15a4:	cpsid	i
		if (block_right_1st == NULL) {
    15a6:	ldr	r2, [pc, #80]	; (15f8 <AudioOutputI2S::update()+0x8c>)
    15a8:	ldr	r3, [r2, #0]
    15aa:	cbz	r3, 15e0 <AudioOutputI2S::update()+0x74>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    15ac:	ldr	r1, [pc, #76]	; (15fc <AudioOutputI2S::update()+0x90>)
    15ae:	ldr	r4, [r1, #0]
    15b0:	cbz	r4, 15d0 <AudioOutputI2S::update()+0x64>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
    15b2:	ldr	r5, [pc, #76]	; (1600 <AudioOutputI2S::update()+0x94>)
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    15b4:	str	r4, [r2, #0]
			block_right_2nd = block;
			block_right_offset = 0;
    15b6:	movs	r2, #0
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
    15b8:	str	r0, [r1, #0]
			block_right_offset = 0;
    15ba:	strh	r2, [r5, #0]
			__enable_irq();
    15bc:	cpsie	i
			release(tmp);
    15be:	mov	r0, r3
		}
	}
}
    15c0:	ldmia.w	sp!, {r4, r5, r6, lr}
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
			__enable_irq();
			release(tmp);
    15c4:	b.w	4640 <AudioStream::release(audio_block_struct*)>
    15c8:	pop	{r4, r5, r6, pc}
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
    15ca:	str	r0, [r1, #0]
			__enable_irq();
    15cc:	cpsie	i
    15ce:	b.n	159a <AudioOutputI2S::update()+0x2e>
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
    15d0:	str	r0, [r1, #0]
			__enable_irq();
    15d2:	cpsie	i
    15d4:	pop	{r4, r5, r6, pc}
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
    15d6:	ldr	r1, [pc, #28]	; (15f4 <AudioOutputI2S::update()+0x88>)
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
    15d8:	str	r0, [r2, #0]
			block_left_offset = 0;
    15da:	strh	r3, [r1, #0]
			__enable_irq();
    15dc:	cpsie	i
    15de:	b.n	159a <AudioOutputI2S::update()+0x2e>
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
    15e0:	ldr	r1, [pc, #28]	; (1600 <AudioOutputI2S::update()+0x94>)
	}
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
    15e2:	str	r0, [r2, #0]
			block_right_offset = 0;
    15e4:	strh	r3, [r1, #0]
			__enable_irq();
    15e6:	cpsie	i
    15e8:	pop	{r4, r5, r6, pc}
    15ea:	nop
    15ec:	.word	0x1fffabac
    15f0:	.word	0x1fffabb8
    15f4:	.word	0x1fffab98
    15f8:	.word	0x1fffaba4
    15fc:	.word	0x1fffabb0
    1600:	.word	0x1fffaba8

00001604 <AudioOutputI2S::config_i2s()>:


void AudioOutputI2S::config_i2s(void)
{
#if defined(KINETISK) || defined(KINETISL)
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    1604:	ldr	r3, [pc, #160]	; (16a8 <AudioOutputI2S::config_i2s()+0xa4>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    1606:	ldr	r1, [pc, #164]	; (16ac <AudioOutputI2S::config_i2s()+0xa8>)


void AudioOutputI2S::config_i2s(void)
{
#if defined(KINETISK) || defined(KINETISL)
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    1608:	ldr	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    160a:	ldr	r0, [pc, #164]	; (16b0 <AudioOutputI2S::config_i2s()+0xac>)


void AudioOutputI2S::config_i2s(void)
{
#if defined(KINETISK) || defined(KINETISL)
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    160c:	orr.w	r2, r2, #32768	; 0x8000
    1610:	str	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    1612:	ldr	r2, [r1, #0]
    1614:	orr.w	r2, r2, #2
    1618:	str	r2, [r1, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    161a:	ldr	r2, [r3, #0]
    161c:	orr.w	r2, r2, #2
    1620:	str	r2, [r3, #0]

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    1622:	ldr	r3, [r0, #0]
    1624:	cmp	r3, #0
    1626:	blt.n	16a6 <AudioOutputI2S::config_i2s()+0xa2>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
    1628:	ldr	r3, [pc, #136]	; (16b4 <AudioOutputI2S::config_i2s()+0xb0>)
    162a:	ldr	r3, [r3, #0]
    162c:	cmp	r3, #0
    162e:	blt.n	16a6 <AudioOutputI2S::config_i2s()+0xa2>

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    1630:	ldr	r2, [pc, #132]	; (16b8 <AudioOutputI2S::config_i2s()+0xb4>)
    1632:	mov.w	r3, #1124073472	; 0x43000000
    1636:	str	r3, [r2, #0]
	while (I2S0_MCR & I2S_MCR_DUF) ;
    1638:	ldr	r3, [r2, #0]
    163a:	cmp	r3, #0
    163c:	blt.n	1638 <AudioOutputI2S::config_i2s()+0x34>
#endif
#endif


void AudioOutputI2S::config_i2s(void)
{
    163e:	push	{r4, r5, r6, r7, lr}
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    1640:	ldr	r4, [pc, #120]	; (16bc <AudioOutputI2S::config_i2s()+0xb8>)

	// configure transmitter
	I2S0_TMR = 0;
    1642:	ldr	r0, [pc, #124]	; (16c0 <AudioOutputI2S::config_i2s()+0xbc>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    1644:	ldr.w	lr, [pc, #168]	; 16f0 <AudioOutputI2S::config_i2s()+0xec>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    1648:	ldr	r1, [pc, #120]	; (16c4 <AudioOutputI2S::config_i2s()+0xc0>)
	I2S0_TCR3 = I2S_TCR3_TCE;
    164a:	ldr	r3, [pc, #124]	; (16c8 <AudioOutputI2S::config_i2s()+0xc4>)
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    164c:	ldr	r2, [pc, #124]	; (16cc <AudioOutputI2S::config_i2s()+0xc8>)
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    164e:	ldr	r7, [pc, #128]	; (16d0 <AudioOutputI2S::config_i2s()+0xcc>)

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    1650:	ldr	r6, [pc, #128]	; (16d4 <AudioOutputI2S::config_i2s()+0xd0>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    1652:	ldr	r5, [pc, #132]	; (16d8 <AudioOutputI2S::config_i2s()+0xd4>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    1654:	movw	ip, #4112	; 0x1010
    1658:	str.w	ip, [r4]

	// configure transmitter
	I2S0_TMR = 0;
    165c:	movs	r4, #0
    165e:	str	r4, [r0, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    1660:	movs	r0, #1
    1662:	str.w	r0, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    1666:	ldr.w	lr, [pc, #140]	; 16f4 <AudioOutputI2S::config_i2s()+0xf0>
    166a:	str.w	lr, [r1]
	I2S0_TCR3 = I2S_TCR3_TCE;
    166e:	mov.w	r1, #65536	; 0x10000
    1672:	str	r1, [r3, #0]
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    1674:	ldr	r3, [pc, #100]	; (16dc <AudioOutputI2S::config_i2s()+0xd8>)
    1676:	str	r3, [r2, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    1678:	ldr.w	lr, [pc, #124]	; 16f8 <AudioOutputI2S::config_i2s()+0xf4>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
	I2S0_TCR3 = I2S_TCR3_TCE;
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    167c:	ldr	r2, [pc, #96]	; (16e0 <AudioOutputI2S::config_i2s()+0xdc>)
    167e:	str	r2, [r7, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    1680:	str	r4, [r6, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    1682:	str	r0, [r5, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    1684:	add.w	r0, r0, #1191182336	; 0x47000000
    1688:	str.w	r0, [lr]
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    168c:	ldr	r4, [pc, #84]	; (16e4 <AudioOutputI2S::config_i2s()+0xe0>)
	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
    168e:	str	r1, [r7, #120]	; 0x78
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    1690:	ldr	r0, [pc, #84]	; (16e8 <AudioOutputI2S::config_i2s()+0xe4>)
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    1692:	ldr	r1, [pc, #88]	; (16ec <AudioOutputI2S::config_i2s()+0xe8>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    1694:	str.w	r3, [r6, #-80]
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    1698:	mov.w	r3, #1536	; 0x600
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    169c:	str	r2, [r5, #16]

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    169e:	str	r3, [r4, #0]
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    16a0:	str	r3, [r0, #0]
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    16a2:	str	r3, [r1, #0]
    16a4:	pop	{r4, r5, r6, r7, pc}
    16a6:	bx	lr
    16a8:	.word	0x4004803c
    16ac:	.word	0x40048040
    16b0:	.word	0x4002f000
    16b4:	.word	0x4002f080
    16b8:	.word	0x4002f100
    16bc:	.word	0x4002f104
    16c0:	.word	0x4002f060
    16c4:	.word	0x4002f008
    16c8:	.word	0x4002f00c
    16cc:	.word	0x4002f010
    16d0:	.word	0x4002f014
    16d4:	.word	0x4002f0e0
    16d8:	.word	0x4002f084
    16dc:	.word	0x00011f1b
    16e0:	.word	0x1f1f1f00
    16e4:	.word	0x4004b008
    16e8:	.word	0x4004b00c
    16ec:	.word	0x4004b018
    16f0:	.word	0x4002f004
    16f4:	.word	0x07000001
    16f8:	.word	0x4002f088

000016fc <AudioOutputI2S::begin()>:
#if defined(__IMXRT1062__)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
    16fc:	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    16fe:	ldr	r4, [pc, #160]	; (17a0 <AudioOutputI2S::begin()+0xa4>)
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);

	I2S0_TCSR = I2S_TCSR_SR;
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    1700:	ldr	r7, [pc, #160]	; (17a4 <AudioOutputI2S::begin()+0xa8>)
#include "utility/imxrt_hw.h"
#endif

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    1702:	movs	r1, #1
    1704:	mov	r0, r4
    1706:	bl	41f0 <DMAChannel::begin(bool)>

	block_left_1st = NULL;
    170a:	ldr	r2, [pc, #156]	; (17a8 <AudioOutputI2S::begin()+0xac>)
	block_right_1st = NULL;
    170c:	ldr	r3, [pc, #156]	; (17ac <AudioOutputI2S::begin()+0xb0>)

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_left_1st = NULL;
    170e:	movs	r5, #0
    1710:	str	r5, [r2, #0]
	block_right_1st = NULL;
    1712:	str	r5, [r3, #0]

	config_i2s();
    1714:	bl	1604 <AudioOutputI2S::config_i2s()>

#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0
    1718:	ldr	r3, [pc, #148]	; (17b0 <AudioOutputI2S::begin()+0xb4>)

	dma.TCD->SADDR = i2s_tx_buffer;
    171a:	ldr	r2, [pc, #152]	; (17b4 <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
    171c:	ldr.w	lr, [pc, #176]	; 17d0 <AudioOutputI2S::begin()+0xd4>

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    1720:	ldr	r0, [pc, #148]	; (17b8 <AudioOutputI2S::begin()+0xbc>)
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);

	I2S0_TCSR = I2S_TCSR_SR;
    1722:	ldr	r1, [pc, #152]	; (17bc <AudioOutputI2S::begin()+0xc0>)
	block_right_1st = NULL;

	config_i2s();

#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0
    1724:	mov.w	r6, #1536	; 0x600
    1728:	str	r6, [r3, #0]

	dma.TCD->SADDR = i2s_tx_buffer;
    172a:	ldr	r3, [r4, #0]
	dma.TCD->SOFF = 2;
    172c:	movs	r6, #2
	config_i2s();

#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
    172e:	str	r2, [r3, #0]
	dma.TCD->SOFF = 2;
    1730:	strh	r6, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    1732:	ldrb	r2, [r4, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
    1734:	str.w	lr, [r3, #16]
    1738:	add.w	r2, r2, #1073741824	; 0x40000000

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    173c:	str	r0, [r3, #12]
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    173e:	str	r6, [r3, #8]
    1740:	add.w	r2, r2, #135168	; 0x21000
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    1744:	mov.w	r0, #256	; 0x100
#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    1748:	movw	lr, #257	; 0x101
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    174c:	movs	r6, #6
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    174e:	strh	r0, [r3, #22]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
    1750:	strh	r5, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    1752:	strh	r0, [r3, #30]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
    1754:	str	r5, [r3, #24]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    1756:	strh	r6, [r3, #28]
#if defined(KINETISK)
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    1758:	strh.w	lr, [r3, #6]
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    175c:	movs	r0, #143	; 0x8f
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);

	I2S0_TCSR = I2S_TCSR_SR;
    175e:	mov.w	r3, #16777216	; 0x1000000

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    1762:	strb	r5, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    1764:	strb	r0, [r2, #0]
    1766:	str	r3, [r1, #0]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    1768:	str	r7, [r1, #0]
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_SAI1_TX);

	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
#endif
	update_responsibility = update_setup();
    176a:	bl	4808 <AudioStream::update_setup()>
    176e:	ldrb	r2, [r4, #4]
    1770:	ldr	r3, [pc, #76]	; (17c0 <AudioOutputI2S::begin()+0xc4>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1772:	ldr	r5, [pc, #80]	; (17c4 <AudioOutputI2S::begin()+0xc8>)
    1774:	strb	r0, [r3, #0]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1776:	asrs	r3, r2, #5
    1778:	lsls	r3, r3, #2
    177a:	add.w	r3, r3, #3758096384	; 0xe0000000
    177e:	add.w	r3, r3, #57600	; 0xe100

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1782:	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1786:	movs	r1, #1
    1788:	and.w	r2, r2, #31
    178c:	lsl.w	r2, r1, r2

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1790:	ldr	r6, [pc, #52]	; (17c8 <AudioOutputI2S::begin()+0xcc>)
    1792:	str.w	r6, [r5, r0, lsl #2]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1796:	ldr	r1, [pc, #52]	; (17cc <AudioOutputI2S::begin()+0xd0>)
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1798:	str	r2, [r3, #0]
    179a:	ldrb	r3, [r4, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    179c:	strb	r3, [r1, #0]
    179e:	pop	{r3, r4, r5, r6, r7, pc}
    17a0:	.word	0x1fffab9c
    17a4:	.word	0x90000001
    17a8:	.word	0x1fffabac
    17ac:	.word	0x1fffaba4
    17b0:	.word	0x4004b004
    17b4:	.word	0x1fff8200
    17b8:	.word	0xfffffe00
    17bc:	.word	0x4002f000
    17c0:	.word	0x1fffabb4
    17c4:	.word	0x1fff8400
    17c8:	.word	0x00001469
    17cc:	.word	0x4000801b
    17d0:	.word	0x4002f022

000017d4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    17d4:	ldr	r2, [pc, #8]	; (17e0 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    17d6:	ldr	r1, [pc, #12]	; (17e4 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    17d8:	ldr	r0, [pc, #12]	; (17e8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    17da:	b.w	51e0 <__aeabi_atexit>
    17de:	nop
    17e0:	.word	0x1fff89fc
    17e4:	.word	0x00000a11
    17e8:	.word	0x1fffab9c

000017ec <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    17ec:	ldr	r2, [pc, #8]	; (17f8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    17ee:	ldr	r1, [pc, #12]	; (17fc <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    17f0:	ldr	r0, [pc, #12]	; (1800 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    17f2:	b.w	51e0 <__aeabi_atexit>
    17f6:	nop
    17f8:	.word	0x1fff89fc
    17fc:	.word	0x00000a11
    1800:	.word	0x1fffabbc

00001804 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    1804:	movs	r0, #0
    1806:	bx	lr

00001808 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    1808:	ldrb.w	r2, [r0, #57]	; 0x39
    180c:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    1810:	subs	r0, r2, r0
    1812:	bx	lr

00001814 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1814:	ldrb.w	r3, [r0, #56]	; 0x38
    1818:	ldrb.w	r2, [r0, #57]	; 0x39
    181c:	cmp	r2, r3
    181e:	bls.n	182c <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    1820:	adds	r2, r3, #1
    1822:	add	r3, r0
    1824:	strb.w	r2, [r0, #56]	; 0x38
    1828:	ldrb	r0, [r3, #24]
    182a:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    182c:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    1830:	bx	lr
    1832:	nop

00001834 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1834:	ldrb.w	r3, [r0, #56]	; 0x38
    1838:	ldrb.w	r2, [r0, #57]	; 0x39
    183c:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    183e:	itte	hi
    1840:	addhi	r3, r3, r0
    1842:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1844:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    1848:	bx	lr
    184a:	nop

0000184c <TwoWire::flush()>:
	virtual void flush(void) {
    184c:	bx	lr
    184e:	nop

00001850 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1850:	push	{r3, r4, r5, lr}
    1852:	mov	r5, r0
	if (transmitting || slave_mode) {
    1854:	ldrh.w	r0, [r0, #94]	; 0x5e
    1858:	cbz	r0, 1880 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    185a:	ldrb.w	r3, [r5, #93]	; 0x5d
    185e:	mov	r4, r2
    1860:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    1864:	cmp	r4, r2
    1866:	bhi.n	1882 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    1868:	add.w	r0, r5, #59	; 0x3b
    186c:	add	r0, r3
    186e:	mov	r2, r4
    1870:	bl	2d54 <memcpy>
		txBufferLength += quantity;
    1874:	ldrb.w	r3, [r5, #93]	; 0x5d
    1878:	add	r3, r4
    187a:	strb.w	r3, [r5, #93]	; 0x5d
    187e:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    1880:	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1882:	movs	r0, #1
    1884:	mov	r4, r2
    1886:	strb	r0, [r5, #4]
    1888:	b.n	1868 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    188a:	nop

0000188c <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    188c:	ldrh.w	r3, [r0, #94]	; 0x5e
    1890:	cbz	r3, 18ae <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    1892:	ldrb.w	r3, [r0, #93]	; 0x5d
    1896:	cmp	r3, #32
    1898:	bhi.n	18aa <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    189a:	adds	r2, r0, r3
    189c:	adds	r3, #1
    189e:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    18a2:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    18a4:	strb.w	r1, [r2, #59]	; 0x3b
    18a8:	bx	lr
    18aa:	movs	r3, #1
    18ac:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    18ae:	movs	r0, #0
    18b0:	bx	lr
    18b2:	nop

000018b4 <TwoWire::begin()>:
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    18b4:	movs	r3, #0
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    18b6:	ldr	r2, [r0, #20]
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    18b8:	strb.w	r3, [r0, #56]	; 0x38
	rxBufferLength = 0;
    18bc:	strb.w	r3, [r0, #57]	; 0x39
	txBufferIndex = 0;
    18c0:	strb.w	r3, [r0, #92]	; 0x5c
	txBufferLength = 0;
    18c4:	strb.w	r3, [r0, #93]	; 0x5d
	transmitting = 0;
    18c8:	strb.w	r3, [r0, #94]	; 0x5e
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
    18cc:	strb.w	r3, [r0, #95]	; 0x5f
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    18d0:	ldmia	r2, {r1, r2}

void sda_rising_isr0(void);
void sda_rising_isr1(void);

void TwoWire::begin(void)
{
    18d2:	push	{r4, r5}
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    18d4:	ldr	r5, [r1, #0]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    18d6:	ldr	r4, [r0, #16]
	rxBufferIndex = 0;
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
    18d8:	str	r3, [r0, #100]	; 0x64
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    18da:	orrs	r2, r5
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
    18dc:	str	r3, [r0, #104]	; 0x68
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    18de:	str	r2, [r1, #0]
	port().C1 = 0;
    18e0:	strb	r3, [r4, #2]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    18e2:	ldr	r2, [r0, #20]
    18e4:	ldrb.w	r3, [r0, #97]	; 0x61
    18e8:	ldr	r1, [pc, #88]	; (1944 <TwoWire::begin()+0x90>)
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    18ea:	ldr	r4, [r2, #0]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    18ec:	add	r3, r2
    18ee:	ldrb	r5, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    18f0:	ldrb	r3, [r3, #13]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    18f2:	add.w	r5, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    18f6:	lsls	r3, r3, #8
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    18f8:	ldr	r5, [r5, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    18fa:	and.w	r3, r3, #1792	; 0x700
    18fe:	orr.w	r3, r3, #100	; 0x64
    1902:	str	r3, [r5, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    1904:	ldrb.w	r3, [r0, #98]	; 0x62
    1908:	add	r3, r2
    190a:	ldrb	r5, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    190c:	ldrb	r3, [r3, #23]
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    190e:	add.w	r1, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1912:	lsls	r3, r3, #8
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    1914:	ldr	r1, [r1, #4]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1916:	and.w	r3, r3, #1792	; 0x700
    191a:	orr.w	r3, r3, #100	; 0x64
    191e:	str	r3, [r1, #0]
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    1920:	ldr	r1, [r4, #0]
    1922:	ldr	r3, [r2, #4]
    1924:	tst	r1, r3
    1926:	beq.n	1934 <TwoWire::begin()+0x80>
    1928:	ldr	r3, [r0, #16]
		port().F = I2C_F_DIV56; // 0.96 MHz
	}
	port().FLT = 4;
#elif F_BUS == 48000000
	if (frequency < 400000) {
		port().F = 0x27;	// 100 kHz
    192a:	movs	r2, #39	; 0x27
    192c:	strb	r2, [r3, #1]
    192e:	ldr	r3, [r0, #16]
	} else if (frequency < 1000000) {
		port().F = 0x1A; // 400 kHz
	} else {
		port().F = 0x0D; // 1 MHz
	}
	port().FLT = 4;
    1930:	movs	r2, #4
    1932:	strb	r2, [r3, #6]
    1934:	ldr	r3, [r0, #16]
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	setClock(100000);
	port().C2 = I2C_C2_HDRS;
    1936:	movs	r2, #32
    1938:	strb	r2, [r3, #5]
    193a:	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
    193c:	movs	r2, #128	; 0x80
    193e:	strb	r2, [r3, #2]
	//pinMode(3, OUTPUT);
	//pinMode(4, OUTPUT);
}
    1940:	pop	{r4, r5}
    1942:	bx	lr
    1944:	.word	0x00005da8

00001948 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    1948:	push	{r4, lr}
    194a:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    194c:	ldrb	r3, [r2, #3]
    194e:	uxtb	r3, r3
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    1950:	lsls	r1, r3, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    1952:	mov	r4, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    1954:	bpl.n	19d2 <TwoWire::isr()+0x8a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    1956:	movs	r1, #16
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    1958:	lsls	r0, r3, #25

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    195a:	strb	r1, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    195c:	bpl.n	19d0 <TwoWire::isr()+0x88>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    195e:	and.w	r3, r3, #4
    1962:	and.w	r2, r3, #255	; 0xff
    1966:	cmp	r3, #0
    1968:	beq.n	1a0e <TwoWire::isr()+0xc6>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    196a:	ldr	r1, [pc, #244]	; (1a60 <TwoWire::isr()+0x118>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    196c:	ldr	r2, [r4, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    196e:	movs	r3, #0
    1970:	strb	r3, [r1, #0]
			txBufferLength = 0;
    1972:	strb.w	r3, [r4, #93]	; 0x5d
			if (user_onRequest != NULL) {
    1976:	cmp	r2, #0
    1978:	beq.n	1a32 <TwoWire::isr()+0xea>
				user_onRequest();
    197a:	blx	r2
			}
			if (txBufferLength == 0) {
    197c:	ldrb.w	r3, [r4, #93]	; 0x5d
    1980:	cmp	r3, #0
    1982:	beq.n	1a32 <TwoWire::isr()+0xea>
    1984:	ldr	r3, [r4, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    1986:	movs	r2, #208	; 0xd0
    1988:	strb	r2, [r3, #2]
    198a:	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
    198c:	ldrb.w	r2, [r4, #59]	; 0x3b
    1990:	strb	r2, [r3, #4]
    1992:	ldr	r3, [r4, #16]
			txBufferIndex = 1;
    1994:	movs	r2, #1
    1996:	strb.w	r2, [r4, #92]	; 0x5c
			receiving = 1;
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
    199a:	movs	r2, #2
    199c:	strb	r2, [r3, #3]
		return;
    199e:	pop	{r4, pc}
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
    19a0:	ldr	r3, [pc, #192]	; (1a64 <TwoWire::isr()+0x11c>)
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    19a2:	strb.w	r0, [r4, #96]	; 0x60
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
    19a6:	cmp	r4, r3
    19a8:	beq.n	1a40 <TwoWire::isr()+0xf8>
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		} else if (this == &Wire1) {
    19aa:	ldr	r3, [pc, #188]	; (1a68 <TwoWire::isr()+0x120>)
    19ac:	cmp	r4, r3
    19ae:	beq.n	1a56 <TwoWire::isr()+0x10e>
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    19b0:	ldrb.w	r1, [r4, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    19b4:	ldrb	r3, [r2, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    19b6:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    19b8:	uxtb	r3, r3
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    19ba:	bhi.n	19cc <TwoWire::isr()+0x84>
    19bc:	ldr	r0, [pc, #160]	; (1a60 <TwoWire::isr()+0x118>)
    19be:	ldrb	r0, [r0, #0]
    19c0:	cbz	r0, 19cc <TwoWire::isr()+0x84>
			rxBuffer[rxBufferLength++] = data;
    19c2:	adds	r0, r4, r1
    19c4:	adds	r1, #1
    19c6:	strb.w	r1, [r4, #57]	; 0x39
    19ca:	strb	r3, [r0, #24]
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    19cc:	movs	r3, #2
    19ce:	strb	r3, [r2, #3]
    19d0:	pop	{r4, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    19d2:	lsls	r1, r3, #25
    19d4:	bmi.n	195e <TwoWire::isr()+0x16>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    19d6:	ldrb	r1, [r2, #2]
	if (c1 & I2C_C1_TX) {
    19d8:	and.w	r1, r1, #16
    19dc:	and.w	r0, r1, #255	; 0xff
    19e0:	cmp	r1, #0
    19e2:	beq.n	19a0 <TwoWire::isr()+0x58>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    19e4:	ands.w	r3, r3, #1
    19e8:	bne.n	1a28 <TwoWire::isr()+0xe0>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    19ea:	ldrb.w	r1, [r4, #92]	; 0x5c
    19ee:	ldrb.w	r0, [r4, #93]	; 0x5d
    19f2:	cmp	r0, r1
				port().D = txBuffer[txBufferIndex++];
    19f4:	itttt	hi
    19f6:	addhi	r3, r1, #1
    19f8:	addhi	r1, r1, r4
    19fa:	strbhi.w	r3, [r4, #92]	; 0x5c
    19fe:	ldrbhi.w	r3, [r1, #59]	; 0x3b
			} else {
				port().D = 0;
    1a02:	strb	r3, [r2, #4]
    1a04:	ldr	r3, [r4, #16]
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    1a06:	movs	r2, #208	; 0xd0
    1a08:	strb	r2, [r3, #2]
    1a0a:	ldr	r2, [r4, #16]
    1a0c:	b.n	19cc <TwoWire::isr()+0x84>
    1a0e:	ldr	r3, [r4, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    1a10:	strb.w	r2, [r4, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    1a14:	movs	r2, #192	; 0xc0
    1a16:	strb	r2, [r3, #2]
    1a18:	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    1a1a:	ldr	r2, [pc, #68]	; (1a60 <TwoWire::isr()+0x118>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    1a1c:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    1a1e:	movs	r1, #1
    1a20:	strb	r1, [r2, #0]
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
    1a22:	movs	r2, #2
    1a24:	strb	r2, [r3, #3]
		return;
    1a26:	pop	{r4, pc}
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    1a28:	movs	r3, #192	; 0xc0
    1a2a:	strb	r3, [r2, #2]
    1a2c:	ldr	r2, [r4, #16]
			data = port().D;
    1a2e:	ldrb	r3, [r2, #4]
    1a30:	b.n	19cc <TwoWire::isr()+0x84>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    1a32:	movs	r2, #1
				txBuffer[0] = 0;
    1a34:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    1a36:	strb.w	r2, [r4, #93]	; 0x5d
				txBuffer[0] = 0;
    1a3a:	strb.w	r3, [r4, #59]	; 0x3b
    1a3e:	b.n	1984 <TwoWire::isr()+0x3c>
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
    1a40:	ldr	r2, [r4, #20]
    1a42:	ldrb.w	r3, [r4, #97]	; 0x61
    1a46:	ldr	r1, [pc, #36]	; (1a6c <TwoWire::isr()+0x124>)
		} else if (this == &Wire1) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
    1a48:	add	r3, r2
    1a4a:	movs	r2, #3
    1a4c:	ldrb	r0, [r3, #8]
    1a4e:	bl	311c <attachInterrupt>
    1a52:	ldr	r2, [r4, #16]
    1a54:	b.n	19b0 <TwoWire::isr()+0x68>
    1a56:	ldr	r2, [r4, #20]
    1a58:	ldrb.w	r3, [r4, #97]	; 0x61
    1a5c:	ldr	r1, [pc, #16]	; (1a70 <TwoWire::isr()+0x128>)
    1a5e:	b.n	1a48 <TwoWire::isr()+0x100>
    1a60:	.word	0x1fffabc4
    1a64:	.word	0x1fff8a00
    1a68:	.word	0x1fff8a6c
    1a6c:	.word	0x00001ad1
    1a70:	.word	0x00001add

00001a74 <TwoWire::sda_rising_isr()>:
    1a74:	ldr	r3, [r0, #16]
#endif

void TwoWire::sda_rising_isr(void)
{
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
    1a76:	ldrb	r3, [r3, #3]
    1a78:	and.w	r3, r3, #32
    1a7c:	cbz	r3, 1a9c <TwoWire::sda_rising_isr()+0x28>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
    1a7e:	ldrb.w	r3, [r0, #96]	; 0x60
    1a82:	adds	r3, #1
    1a84:	uxtb	r3, r3
    1a86:	cmp	r3, #1
    1a88:	strb.w	r3, [r0, #96]	; 0x60
    1a8c:	bls.n	1ac4 <TwoWire::sda_rising_isr()+0x50>
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
    1a8e:	ldr	r2, [r0, #20]
    1a90:	ldrb.w	r3, [r0, #97]	; 0x61
    1a94:	add	r3, r2
    1a96:	ldrb	r0, [r3, #8]
    1a98:	b.w	3214 <detachInterrupt>
	Wire1.sda_rising_isr();
}
#endif

void TwoWire::sda_rising_isr(void)
{
    1a9c:	push	{r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
    1a9e:	ldr	r2, [r0, #20]
    1aa0:	and.w	r5, r3, #255	; 0xff
    1aa4:	ldrb.w	r3, [r0, #97]	; 0x61
    1aa8:	add	r3, r2
    1aaa:	mov	r4, r0
    1aac:	ldrb	r0, [r3, #8]
    1aae:	bl	3214 <detachInterrupt>
		if (user_onReceive != NULL) {
    1ab2:	ldr	r3, [r4, #104]	; 0x68
    1ab4:	cbz	r3, 1ace <TwoWire::sda_rising_isr()+0x5a>
			rxBufferIndex = 0;
    1ab6:	strb.w	r5, [r4, #56]	; 0x38
			user_onReceive(rxBufferLength);
    1aba:	ldrb.w	r0, [r4, #57]	; 0x39
		if (++irqcount >= 2 || !slave_mode) {
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
		}
	}
	//digitalWrite(3, LOW);
}
    1abe:	ldmia.w	sp!, {r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
		if (user_onReceive != NULL) {
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
    1ac2:	bx	r3
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
    1ac4:	ldrb.w	r3, [r0, #95]	; 0x5f
    1ac8:	cmp	r3, #0
    1aca:	beq.n	1a8e <TwoWire::sda_rising_isr()+0x1a>
    1acc:	bx	lr
    1ace:	pop	{r4, r5, r6, pc}

00001ad0 <sda_rising_isr0()>:
#if !defined(WIRE_HAS_STOP_INTERRUPT)

#if defined(WIRE_IMPLEMENT_WIRE)
void sda_rising_isr0(void)
{
	Wire.sda_rising_isr();
    1ad0:	ldr	r0, [pc, #4]	; (1ad8 <sda_rising_isr0()+0x8>)
    1ad2:	b.w	1a74 <TwoWire::sda_rising_isr()>
    1ad6:	nop
    1ad8:	.word	0x1fff8a00

00001adc <sda_rising_isr1()>:
}
#endif
#if defined(WIRE_IMPLEMENT_WIRE1)
void sda_rising_isr1(void)
{
	Wire1.sda_rising_isr();
    1adc:	ldr	r0, [pc, #4]	; (1ae4 <sda_rising_isr1()+0x8>)
    1ade:	b.w	1a74 <TwoWire::sda_rising_isr()>
    1ae2:	nop
    1ae4:	.word	0x1fff8a6c

00001ae8 <TwoWire::wait_idle()>:
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    1ae8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1aec:	ldr	r7, [pc, #220]	; (1bcc <L_1545_delayMicroseconds+0x1a>)
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    1aee:	ldr.w	r9, [pc, #224]	; 1bd0 <L_1545_delayMicroseconds+0x1e>
    1af2:	ldr	r3, [r7, #0]
    1af4:	ldr	r2, [r0, #16]
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    1af6:	sub	sp, #8
    1af8:	mov	r6, r0
    1afa:	str	r3, [sp, #0]
	return ret;
    1afc:	ldr.w	r8, [sp]
	bool reset=false;
    1b00:	movs	r1, #0
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    1b02:	movs	r5, #160	; 0xa0
	uint8_t i2c_status(void) {
		return port().S;
    1b04:	ldrb	r3, [r2, #3]
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    1b06:	lsls	r3, r3, #26
    1b08:	bpl.n	1bc2 <L_1545_delayMicroseconds+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b0a:	ldr	r3, [r7, #0]
    1b0c:	str	r3, [sp, #4]
	return ret;
    1b0e:	ldr	r3, [sp, #4]
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
    1b10:	rsb	r3, r8, r3
#if 1
		if (waited > 15 && !reset) {
    1b14:	cmp	r3, #15
    1b16:	bls.n	1b04 <TwoWire::wait_idle()+0x1c>
    1b18:	cbz	r1, 1b2e <TwoWire::wait_idle()+0x46>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
    1b1a:	cmp	r3, #16
    1b1c:	beq.n	1b04 <TwoWire::wait_idle()+0x1c>
			// bus stuck busy too long
			port().C1 = 0;
    1b1e:	movs	r0, #0
    1b20:	strb	r0, [r2, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    1b22:	ldr	r3, [r6, #16]
			port().C1 = I2C_C1_IICEN;
    1b24:	movs	r2, #128	; 0x80
    1b26:	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
    1b28:	add	sp, #8
    1b2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
    1b2e:	ldr	r2, [r6, #20]
    1b30:	ldrb.w	r3, [r6, #97]	; 0x61
    1b34:	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
    1b36:	movs	r1, #5
    1b38:	ldrb	r0, [r3, #8]
    1b3a:	bl	32e8 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    1b3e:	ldr	r2, [r6, #20]
    1b40:	ldrb.w	r3, [r6, #97]	; 0x61
    1b44:	add	r3, r2
			pinMode(scl_pin, OUTPUT);
    1b46:	movs	r1, #1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    1b48:	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
    1b4c:	mov	r0, sl
    1b4e:	bl	32e8 <pinMode>
    1b52:	movs	r4, #9
			for (int i=0; i < 9; i++) {
				digitalWrite(scl_pin, LOW);
    1b54:	movs	r1, #0
    1b56:	mov	r0, sl
    1b58:	bl	32c0 <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    1b5c:	mov	r3, r5

00001b5e <L_1480_delayMicroseconds>:
    1b5e:	subs	r3, #1
    1b60:	bne.n	1b5e <L_1480_delayMicroseconds>
				delayMicroseconds(5);
				digitalWrite(scl_pin, HIGH);
    1b62:	movs	r1, #1
    1b64:	mov	r0, sl
    1b66:	bl	32c0 <digitalWrite>
    1b6a:	mov	r3, r5

00001b6c <L_1494_delayMicroseconds>:
    1b6c:	subs	r3, #1
    1b6e:	bne.n	1b6c <L_1494_delayMicroseconds>
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
			pinMode(scl_pin, OUTPUT);
			for (int i=0; i < 9; i++) {
    1b70:	subs	r4, #1
    1b72:	bne.n	1b54 <TwoWire::wait_idle()+0x6c>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    1b74:	ldr	r0, [r6, #20]
    1b76:	ldrb.w	r1, [r6, #97]	; 0x61
    1b7a:	add	r1, r0
    1b7c:	mov.w	r2, #320	; 0x140
    1b80:	ldrb	r4, [r1, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1b82:	ldrb	r3, [r1, #13]
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    1b84:	add.w	r1, r9, r4, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1b88:	lsls	r3, r3, #8
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    1b8a:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1b8c:	and.w	r3, r3, #1792	; 0x700
    1b90:	orr.w	r3, r3, #100	; 0x64
    1b94:	str	r3, [r1, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    1b96:	ldrb.w	r3, [r6, #98]	; 0x62
    1b9a:	add	r3, r0
    1b9c:	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1b9e:	ldrb	r3, [r3, #23]
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    1ba0:	add.w	r1, r9, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1ba4:	lsls	r3, r3, #8
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    1ba6:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    1ba8:	and.w	r3, r3, #1792	; 0x700
    1bac:	orr.w	r3, r3, #100	; 0x64
    1bb0:	str	r3, [r1, #0]

00001bb2 <L_1545_delayMicroseconds>:
    1bb2:	subs	r2, #1
    1bb4:	bne.n	1bb2 <L_1545_delayMicroseconds>
    1bb6:	ldr	r2, [r6, #16]
	uint8_t i2c_status(void) {
		return port().S;
    1bb8:	ldrb	r3, [r2, #3]
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    1bba:	lsls	r3, r3, #26
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
    1bbc:	mov.w	r1, #1
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    1bc0:	bmi.n	1b0a <TwoWire::wait_idle()+0x22>
			//Serial.println("abort");
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
    1bc2:	movs	r0, #1
}
    1bc4:	add	sp, #8
    1bc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1bca:	nop
    1bcc:	.word	0x1fffafe8
    1bd0:	.word	0x00005da8

00001bd4 <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    1bd4:	push	{r4, r5, r6, r7, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    1bd6:	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    1bd8:	movs	r2, #18
    1bda:	strb	r2, [r3, #3]
    1bdc:	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    1bde:	ldrb	r3, [r2, #2]
    1be0:	and.w	r3, r3, #32
	}
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    1be4:	sub	sp, #20
    1be6:	mov	r4, r0
    1be8:	mov	r5, r1
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    1bea:	cmp	r3, #0
    1bec:	beq.n	1cac <TwoWire::endTransmission(unsigned char)+0xd8>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    1bee:	movs	r3, #180	; 0xb4
    1bf0:	strb	r3, [r2, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1bf2:	ldr	r1, [pc, #240]	; (1ce4 <TwoWire::endTransmission(unsigned char)+0x110>)
    1bf4:	ldr	r2, [r4, #16]
    1bf6:	ldr	r3, [r1, #0]
    1bf8:	str	r3, [sp, #0]
	return ret;
    1bfa:	ldr	r6, [sp, #0]
    1bfc:	b.n	1c0a <TwoWire::endTransmission(unsigned char)+0x36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1bfe:	ldr	r3, [r1, #0]
    1c00:	str	r3, [sp, #4]
	return ret;
    1c02:	ldr	r3, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
    1c04:	subs	r3, r3, r6
    1c06:	cmp	r3, #4
    1c08:	bhi.n	1c90 <TwoWire::endTransmission(unsigned char)+0xbc>
	uint8_t i2c_status(void) {
		return port().S;
    1c0a:	ldrb	r3, [r2, #3]
	}
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    1c0c:	and.w	r3, r3, #32
    1c10:	and.w	r0, r3, #255	; 0xff
    1c14:	cmp	r3, #0
    1c16:	beq.n	1bfe <TwoWire::endTransmission(unsigned char)+0x2a>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    1c18:	ldrb.w	r3, [r4, #93]	; 0x5d
    1c1c:	cmp	r3, #0
    1c1e:	beq.n	1c84 <TwoWire::endTransmission(unsigned char)+0xb0>
    1c20:	mov.w	lr, #0
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    1c24:	mov.w	ip, #2
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
		port().D = txBuffer[i];
    1c28:	add.w	r3, r4, lr
    1c2c:	ldrb.w	r3, [r3, #59]	; 0x3b
    1c30:	strb	r3, [r2, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c32:	ldr	r3, [r1, #0]
    1c34:	str	r3, [sp, #12]
	return ret;
    1c36:	ldr	r7, [sp, #12]
    1c38:	ldr	r0, [r4, #16]
    1c3a:	b.n	1c4c <TwoWire::endTransmission(unsigned char)+0x78>
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
    1c3c:	lsls	r3, r3, #26
    1c3e:	bpl.n	1c5c <TwoWire::endTransmission(unsigned char)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c40:	ldr	r3, [r1, #0]
    1c42:	str	r3, [sp, #8]
	return ret;
    1c44:	ldr	r3, [sp, #8]
			if (millis() - wait_begin > 5) {
    1c46:	subs	r3, r3, r7
    1c48:	cmp	r3, #5
    1c4a:	bhi.n	1c9e <TwoWire::endTransmission(unsigned char)+0xca>
    1c4c:	ldrb	r3, [r0, #3]
    1c4e:	uxtb	r3, r3
		port().D = txBuffer[i];
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
    1c50:	and.w	r2, r3, #2
    1c54:	and.w	r6, r2, #255	; 0xff
    1c58:	cmp	r2, #0
    1c5a:	beq.n	1c3c <TwoWire::endTransmission(unsigned char)+0x68>
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    1c5c:	strb.w	ip, [r0, #3]
    1c60:	ldr	r6, [r4, #16]
    1c62:	ldrb	r3, [r6, #3]
    1c64:	uxtb	r3, r3
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
    1c66:	lsls	r7, r3, #27
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    1c68:	mov	r2, r6
    1c6a:	bmi.n	1cc8 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
    1c6c:	lsls	r7, r3, #26
    1c6e:	bpl.n	1cc8 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
    1c70:	lsls	r3, r3, #31
    1c72:	bmi.n	1cd8 <TwoWire::endTransmission(unsigned char)+0x104>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    1c74:	add.w	lr, lr, #1
    1c78:	ldrb.w	r3, [r4, #93]	; 0x5d
    1c7c:	uxtb.w	lr, lr
    1c80:	cmp	r3, lr
    1c82:	bhi.n	1c28 <TwoWire::endTransmission(unsigned char)+0x54>
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	uint8_t i, status, ret=0;
    1c84:	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
    1c86:	cbnz	r5, 1cd0 <TwoWire::endTransmission(unsigned char)+0xfc>
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
    1c88:	movs	r3, #0
    1c8a:	strb.w	r3, [r4, #94]	; 0x5e
    1c8e:	b.n	1c9a <TwoWire::endTransmission(unsigned char)+0xc6>
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    1c90:	strb	r0, [r2, #2]
    1c92:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    1c94:	movs	r2, #128	; 0x80
    1c96:	strb	r2, [r3, #2]
			//Serial.println("abort2");
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
    1c98:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    1c9a:	add	sp, #20
    1c9c:	pop	{r4, r5, r6, r7, pc}
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    1c9e:	strb	r6, [r0, #2]
    1ca0:	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
    1ca2:	movs	r2, #128	; 0x80
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
    1ca4:	movs	r0, #4
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
				port().C1 = I2C_C1_IICEN;
    1ca6:	strb	r2, [r3, #2]
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    1ca8:	add	sp, #20
    1caa:	pop	{r4, r5, r6, r7, pc}
    1cac:	and.w	r6, r3, #255	; 0xff
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    1cb0:	bl	1ae8 <TwoWire::wait_idle()>
    1cb4:	cbnz	r0, 1cbc <TwoWire::endTransmission(unsigned char)+0xe8>
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
    1cb6:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    1cb8:	add	sp, #20
    1cba:	pop	{r4, r5, r6, r7, pc}
    1cbc:	ldr	r3, [r4, #16]
		if (!wait_idle()) {
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    1cbe:	strb.w	r6, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    1cc2:	movs	r2, #176	; 0xb0
    1cc4:	strb	r2, [r3, #2]
    1cc6:	b.n	1bf2 <TwoWire::endTransmission(unsigned char)+0x1e>
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
			// suddenly lost control of the bus!
			port().C1 = I2C_C1_IICEN;
    1cc8:	movs	r3, #128	; 0x80
    1cca:	strb	r3, [r6, #2]
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
    1ccc:	movs	r0, #4
    1cce:	b.n	1c86 <TwoWire::endTransmission(unsigned char)+0xb2>
    1cd0:	ldr	r6, [r4, #16]
			break;
		}
	}
	if (sendStop) {
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
    1cd2:	movs	r3, #128	; 0x80
    1cd4:	strb	r3, [r6, #2]
    1cd6:	b.n	1c88 <TwoWire::endTransmission(unsigned char)+0xb4>
			if (i == 0) {
				//Serial.printf("endTransmission err6\n");
				ret = 2; // 2:received NACK on transmit of address
			} else {
				//Serial.printf("endTransmission err7\n");
				ret = 3; // 3:received NACK on transmit of data 
    1cd8:	cmp.w	lr, #0
    1cdc:	ite	eq
    1cde:	moveq	r0, #2
    1ce0:	movne	r0, #3
    1ce2:	b.n	1cd2 <TwoWire::endTransmission(unsigned char)+0xfe>
    1ce4:	.word	0x1fffafe8

00001ce8 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    1ce8:	ldr	r0, [pc, #4]	; (1cf0 <i2c0_isr+0x8>)
    1cea:	b.w	1948 <TwoWire::isr()>
    1cee:	nop
    1cf0:	.word	0x1fff8a00

00001cf4 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    1cf4:	ldr	r0, [pc, #4]	; (1cfc <i2c1_isr+0x8>)
    1cf6:	b.w	1948 <TwoWire::isr()>
    1cfa:	nop
    1cfc:	.word	0x1fff8a6c

00001d00 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1d00:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1d02:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1d04:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1d06:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1d08:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1d0a:	beq.n	1d12 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1d0c:	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1d0e:	b.w	42ec <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1d12:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    1d14:	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1d16:	bx	r3

00001d18 <_spi_dma_rxISR0()>:
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1d18:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    1d1a:	ldr	r3, [pc, #280]	; (1e34 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1d1c:	ldr	r2, [pc, #280]	; (1e38 <_spi_dma_rxISR0()+0x120>)
    1d1e:	ldr	r0, [r3, #48]	; 0x30
    1d20:	ldr	r4, [r3, #44]	; 0x2c
    1d22:	ldrb	r1, [r0, #4]
    1d24:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    1d26:	ldr	r1, [pc, #276]	; (1e3c <_spi_dma_rxISR0()+0x124>)
    1d28:	ldrb	r2, [r4, #4]
    1d2a:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    1d2c:	ldr	r2, [r3, #40]	; 0x28
    1d2e:	ldrb	r0, [r0, #4]
    1d30:	strb	r0, [r1, #0]
    1d32:	cmp	r2, #0
    1d34:	beq.n	1dc4 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    1d36:	ldr	r1, [r3, #4]
    1d38:	ldr	r1, [r1, #12]
    1d3a:	cmp	r2, r1
    1d3c:	bhi.n	1dbc <_spi_dma_rxISR0()+0xa4>
    1d3e:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1d40:	ldrh	r4, [r1, #30]
    1d42:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    1d44:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1d48:	bmi.n	1e16 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    1d4a:	ubfx	r0, r0, #0, #15
    1d4e:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1d50:	ldrh	r0, [r1, #30]
    1d52:	uxth	r0, r0
    1d54:	strh	r0, [r1, #22]
    1d56:	ldr	r1, [r3, #48]	; 0x30
    1d58:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1d5a:	ldrh	r0, [r1, #30]
    1d5c:	lsls	r0, r0, #16
    1d5e:	bmi.n	1e06 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    1d60:	ubfx	r0, r2, #0, #15
    1d64:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1d66:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    1d68:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1d6a:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    1d6c:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1d70:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    1d72:	it	ne
    1d74:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    1d76:	str	r4, [r3, #40]	; 0x28
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    1d78:	ldr	r1, [r3, #44]	; 0x2c
    1d7a:	ldr	r0, [pc, #184]	; (1e34 <_spi_dma_rxISR0()+0x11c>)
    1d7c:	ldr	r1, [r1, #0]
    1d7e:	ldr	r5, [r1, #0]
    1d80:	add.w	r4, r0, #36	; 0x24
    1d84:	cmp	r5, r4
    1d86:	beq.n	1df6 <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    1d88:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    1d8a:	ldr	r4, [r0, #12]
    1d8c:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    1d90:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    1d92:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    1d94:	itete	ne
    1d96:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    1d98:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    1d9a:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    1d9c:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    1d9e:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    1da2:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    1da4:	str	r4, [r0, #52]	; 0x34
    1da6:	ldr	r1, [r3, #48]	; 0x30
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1da8:	ldr	r3, [pc, #148]	; (1e40 <_spi_dma_rxISR0()+0x128>)
    1daa:	ldrb	r1, [r1, #4]
    1dac:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    1dae:	ldr	r1, [pc, #132]	; (1e34 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    1db0:	cbz	r2, 1db8 <_spi_dma_rxISR0()+0xa0>
    1db2:	ldr	r2, [r1, #44]	; 0x2c
    1db4:	ldrb	r2, [r2, #4]
    1db6:	strb	r2, [r3, #0]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1db8:	pop	{r4, r5, r6, r7}
    1dba:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    1dbc:	subs	r2, r2, r1
    1dbe:	str	r2, [r3, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    1dc0:	movs	r2, #1
    1dc2:	b.n	1d78 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1dc4:	ldr	r0, [r3, #52]	; 0x34
    1dc6:	ldr	r1, [r3, #0]
    1dc8:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    1dca:	ldr	r4, [pc, #120]	; (1e44 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    1dcc:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    1dce:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    1dd0:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1dd2:	ldr	r5, [r5, #0]
    1dd4:	ldr	r6, [pc, #112]	; (1e48 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    1dd6:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1dda:	movs	r7, #3
    1ddc:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    1dde:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1de0:	strb.w	r7, [r3, #37]	; 0x25
    1de4:	bne.n	1e26 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1de6:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1de8:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1dea:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1dec:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1dee:	beq.n	1e2e <_spi_dma_rxISR0()+0x116>
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1df0:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1df2:	b.w	42ec <EventResponder::triggerEventNotImmediate()>
    1df6:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    1df8:	ldrb.w	r0, [r0, #36]	; 0x24

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    1dfc:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    1dfe:	orr.w	r0, r0, #2147483648	; 0x80000000
    1e02:	str	r0, [r1, #52]	; 0x34
    1e04:	b.n	1da6 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1e06:	ldrh	r4, [r1, #30]
    1e08:	ubfx	r0, r2, #0, #9
    1e0c:	and.w	r4, r4, #65024	; 0xfe00
    1e10:	orrs	r0, r4
    1e12:	strh	r0, [r1, #30]
    1e14:	b.n	1d66 <_spi_dma_rxISR0()+0x4e>
    1e16:	ldrh	r4, [r1, #30]
    1e18:	ubfx	r0, r0, #0, #9
    1e1c:	and.w	r4, r4, #65024	; 0xfe00
    1e20:	orrs	r0, r4
    1e22:	strh	r0, [r1, #30]
    1e24:	b.n	1d50 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1e26:	mov	r3, r5
    1e28:	mov	r1, r2
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e2a:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1e2c:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1e2e:	ldr	r3, [r0, #8]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e30:	pop	{r4, r5, r6, r7}
    1e32:	bx	r3
    1e34:	.word	0x1fff8ad8
    1e38:	.word	0x4000801f
    1e3c:	.word	0x4000801c
    1e40:	.word	0x4000801b
    1e44:	.word	0xff0f0000
    1e48:	.word	0x00001d01

00001e4c <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>:
}

void SPIClass::notUsingInterrupt(IRQ_NUMBER_t interruptName)
{
	uint32_t n = (uint32_t)interruptName;
	if (n >= NVIC_NUM_INTERRUPTS) return;
    1e4c:	cmp	r1, #94	; 0x5e
    1e4e:	bhi.n	1e78 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)+0x2c>
	//Serial.printf("interruptMask[1] = %08X\n", interruptMask[1]);
	//Serial.printf("interruptMask[2] = %08X\n", interruptMask[2]);
}

void SPIClass::notUsingInterrupt(IRQ_NUMBER_t interruptName)
{
    1e50:	push	{r4, r5}
	uint32_t n = (uint32_t)interruptName;
	if (n >= NVIC_NUM_INTERRUPTS) return;
	interruptMask[n >> 5] &= ~(1 << (n & 0x1F));
    1e52:	lsrs	r5, r1, #5
    1e54:	add.w	r4, r0, r5, lsl #2
    1e58:	and.w	r1, r1, #31
    1e5c:	ldr	r3, [r4, #12]
    1e5e:	movs	r2, #1
    1e60:	lsl.w	r1, r2, r1
    1e64:	bic.w	r1, r3, r1
    1e68:	str	r1, [r4, #12]
	if (interruptMask[n >> 5] == 0) {
    1e6a:	cbnz	r1, 1e76 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)+0x2a>
		interruptMasksUsed &= ~(1 << (n >> 5));
    1e6c:	ldrb	r3, [r0, #11]
    1e6e:	lsls	r2, r5
    1e70:	bic.w	r2, r3, r2
    1e74:	strb	r2, [r0, #11]
	}
}
    1e76:	pop	{r4, r5}
    1e78:	bx	lr
    1e7a:	nop

00001e7c <Print::flush()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
    1e7c:	bx	lr
    1e7e:	nop

00001e80 <File::write(unsigned char)>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    1e80:	push	{r4, lr}
    1e82:	sub	sp, #8
    1e84:	add	r3, sp, #8
  return write(&val, 1);
    1e86:	ldr	r2, [r0, #0]
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    1e88:	strb.w	r1, [r3, #-1]!
  return write(&val, 1);
    1e8c:	ldr	r4, [r2, #4]
    1e8e:	mov	r1, r3
    1e90:	movs	r2, #1
    1e92:	blx	r4
}
    1e94:	add	sp, #8
    1e96:	pop	{r4, pc}

00001e98 <File::available()>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    1e98:	ldr	r0, [r0, #28]
    1e9a:	cbz	r0, 1eac <File::available()+0x14>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
    1e9c:	ldr	r3, [r0, #24]
    1e9e:	ldr	r0, [r0, #12]
    1ea0:	movw	r2, #32767	; 0x7fff
    1ea4:	subs	r0, r3, r0
    1ea6:	cmp	r0, r2
    1ea8:	it	cs
    1eaa:	movcs	r0, r2
}
    1eac:	bx	lr
    1eae:	nop

00001eb0 <File::write(unsigned char const*, unsigned int)>:
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    1eb0:	ldr	r3, [r0, #28]

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    1eb2:	push	{r4, lr}
    1eb4:	mov	r4, r0
  size_t t;
  if (!_file) {
    1eb6:	cbz	r3, 1ec8 <File::write(unsigned char const*, unsigned int)+0x18>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1eb8:	movs	r0, #0
    1eba:	strb	r0, [r3, #4]
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    1ebc:	ldr	r0, [r4, #28]
    1ebe:	bl	2480 <SdFile::write(void const*, unsigned int)>
    1ec2:	ldr	r3, [r4, #28]
  if (_file->getWriteError()) {
    1ec4:	ldrb	r3, [r3, #4]
    1ec6:	cbz	r3, 1ed0 <File::write(unsigned char const*, unsigned int)+0x20>
    1ec8:	movs	r3, #1
    1eca:	strb	r3, [r4, #4]

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    setWriteError();
    return 0;
    1ecc:	movs	r0, #0
    1ece:	pop	{r4, pc}
  if (_file->getWriteError()) {
    setWriteError();
    return 0;
  }
  return t;
}
    1ed0:	pop	{r4, pc}
    1ed2:	nop

00001ed4 <File::read()>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    1ed4:	ldr	r0, [r0, #28]
    1ed6:	cbz	r0, 1ef8 <File::read()+0x24>
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    1ed8:	push	{lr}
    1eda:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1edc:	movs	r2, #1
    1ede:	add.w	r1, sp, #7
    1ee2:	bl	22ec <SdFile::read(void*, unsigned int)>
    1ee6:	cmp	r0, #1
    1ee8:	ite	eq
    1eea:	ldrbeq.w	r0, [sp, #7]
    1eee:	movne.w	r0, #4294967295
  if (_file) 
    return _file->read();
  return -1;
}
    1ef2:	add	sp, #12
    1ef4:	ldr.w	pc, [sp], #4
}

int File::read() {
  if (_file) 
    return _file->read();
  return -1;
    1ef8:	mov.w	r0, #4294967295
    1efc:	bx	lr
    1efe:	nop

00001f00 <File::peek()>:
  }
  return t;
}

int File::peek() {
  if (! _file) 
    1f00:	ldr	r3, [r0, #28]
    1f02:	cbz	r3, 1f36 <File::peek()+0x36>
    return 0;
  }
  return t;
}

int File::peek() {
    1f04:	push	{r4, lr}
    1f06:	sub	sp, #8
    1f08:	mov	r4, r0
    1f0a:	movs	r2, #1
    1f0c:	mov	r0, r3
    1f0e:	add.w	r1, sp, #7
    1f12:	bl	22ec <SdFile::read(void*, unsigned int)>
    1f16:	cmp	r0, #1
    1f18:	beq.n	1f22 <File::peek()+0x22>
    1f1a:	mov.w	r0, #4294967295
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    1f1e:	add	sp, #8
    1f20:	pop	{r4, pc}
int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    1f22:	ldr	r0, [r4, #28]
    1f24:	ldrb.w	r4, [sp, #7]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    1f28:	ldr	r1, [r0, #12]
    1f2a:	subs	r1, #1
    1f2c:	bl	2410 <SdFile::seekSet(unsigned long)>

int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
    1f30:	mov	r0, r4
  if (c != -1) _file->seekCur(-1);
  return c;
}
    1f32:	add	sp, #8
    1f34:	pop	{r4, pc}
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    1f36:	mov	r0, r3

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    1f38:	bx	lr
    1f3a:	nop

00001f3c <File::flush()>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    1f3c:	ldr	r0, [r0, #28]
    1f3e:	cbz	r0, 1f44 <File::flush()+0x8>
    _file->sync();
    1f40:	b.w	2474 <SdFile::sync()>
    1f44:	bx	lr
    1f46:	nop

00001f48 <File::File()>:
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1f48:	mov.w	r2, #1000	; 0x3e8
       Serial.println(nfilecount, DEC);
    */
  }
}

File::File(void) {
    1f4c:	ldr	r1, [pc, #16]	; (1f60 <File::File()+0x18>)
    1f4e:	str	r2, [r0, #8]
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1f50:	movs	r2, #0
    1f52:	str	r1, [r0, #0]
    1f54:	strb	r2, [r0, #4]
    1f56:	strb	r2, [r0, #12]
  _file = 0;
    1f58:	str	r2, [r0, #28]
  _name[0] = 0;
    1f5a:	strb	r2, [r0, #13]
  //Serial.print("Created empty file object");
}
    1f5c:	bx	lr
    1f5e:	nop
    1f60:	.word	0x00005d74

00001f64 <File::~File()>:

File::~File(void) {
  //  Serial.print("Deleted file object");
}
    1f64:	bx	lr
    1f66:	nop

00001f68 <File::read(void*, unsigned short)>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    1f68:	ldr	r0, [r0, #28]
    1f6a:	cbz	r0, 1f70 <File::read(void*, unsigned short)+0x8>
    return _file->read(buf, nbyte);
    1f6c:	b.w	22ec <SdFile::read(void*, unsigned int)>
  return 0;
}
    1f70:	bx	lr
    1f72:	nop

00001f74 <File::close()>:
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
  if (_file) {
    1f74:	ldr	r3, [r0, #28]
    1f76:	cbz	r3, 1f8e <File::close()+0x1a>
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    1f78:	push	{r4, lr}
    1f7a:	mov	r4, r0
  if (_file) {
    _file->close();
    1f7c:	mov	r0, r3
    1f7e:	bl	22cc <SdFile::close()>
    free(_file); 
    1f82:	ldr	r0, [r4, #28]
    1f84:	bl	5264 <free>
    _file = 0;
    1f88:	movs	r3, #0
    1f8a:	str	r3, [r4, #28]
    1f8c:	pop	{r4, pc}
    1f8e:	bx	lr

00001f90 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    1f90:	ldr	r3, [pc, #24]	; (1fac <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1f92:	ldr	r2, [pc, #28]	; (1fb0 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    1f94:	str	r2, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1f96:	movs	r1, #2
    1f98:	movs	r2, #0
    1f9a:	str	r1, [r3, #4]
    1f9c:	strb	r2, [r3, #2]
    1f9e:	strb.w	r2, [r3, #36]	; 0x24
    1fa2:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1fa6:	strb.w	r2, [r3, #50]	; 0x32
    1faa:	bx	lr
    1fac:	.word	0x1fffabc8
    1fb0:	.word	0x00005d98

00001fb4 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    1fb4:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    1fb6:	ldr	r4, [pc, #60]	; (1ff4 <SdVolume::cacheFlush()+0x40>)
    1fb8:	ldrb	r3, [r4, #0]
    1fba:	cbnz	r3, 1fc0 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    1fbc:	movs	r0, #1
}
    1fbe:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    1fc0:	ldr	r3, [pc, #52]	; (1ff8 <SdVolume::cacheFlush()+0x44>)
    1fc2:	ldr	r5, [pc, #56]	; (1ffc <SdVolume::cacheFlush()+0x48>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    1fc4:	ldr	r1, [r3, #0]
    1fc6:	ldr	r0, [r5, #0]
    1fc8:	ldr	r2, [pc, #52]	; (2000 <SdVolume::cacheFlush()+0x4c>)
    1fca:	bl	2a5c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    1fce:	cbz	r0, 1fee <SdVolume::cacheFlush()+0x3a>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    1fd0:	ldr	r6, [pc, #48]	; (2004 <SdVolume::cacheFlush()+0x50>)
    1fd2:	ldr	r1, [r6, #0]
    1fd4:	cbnz	r1, 1fde <SdVolume::cacheFlush()+0x2a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    1fd6:	movs	r3, #0
    1fd8:	strb	r3, [r4, #0]
  }
  return true;
    1fda:	movs	r0, #1
    1fdc:	pop	{r4, r5, r6, pc}
    1fde:	ldr	r0, [r5, #0]
    1fe0:	ldr	r2, [pc, #28]	; (2000 <SdVolume::cacheFlush()+0x4c>)
    1fe2:	bl	2a5c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    1fe6:	cbz	r0, 1fee <SdVolume::cacheFlush()+0x3a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    1fe8:	movs	r3, #0
    1fea:	str	r3, [r6, #0]
    1fec:	b.n	1fd6 <SdVolume::cacheFlush()+0x22>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    1fee:	movs	r0, #0
    1ff0:	pop	{r4, r5, r6, pc}
    1ff2:	nop
    1ff4:	.word	0x1fffae24
    1ff8:	.word	0x1fff8b10
    1ffc:	.word	0x1fffac20
    2000:	.word	0x1fffac24
    2004:	.word	0x1fffac1c

00002008 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2008:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    200a:	ldr	r5, [pc, #52]	; (2040 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x38>)
    200c:	ldr	r3, [r5, #0]
    200e:	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2010:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    2012:	beq.n	2032 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    2014:	mov	r4, r0
    if (!cacheFlush()) return false;
    2016:	bl	1fb4 <SdVolume::cacheFlush()>
    201a:	cbnz	r0, 2020 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    201c:	movs	r0, #0
    201e:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2020:	ldr	r3, [pc, #32]	; (2044 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    2022:	ldr	r2, [pc, #36]	; (2048 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x40>)
    2024:	ldr	r0, [r3, #0]
    2026:	mov	r1, r4
    2028:	bl	28d0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    202c:	cmp	r0, #0
    202e:	beq.n	201c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    2030:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    2032:	ldr	r3, [pc, #24]	; (204c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x44>)
    2034:	ldrb	r1, [r3, #0]
    2036:	orrs	r1, r6
    2038:	strb	r1, [r3, #0]
  return true;
    203a:	movs	r0, #1
}
    203c:	pop	{r4, r5, r6, pc}
    203e:	nop
    2040:	.word	0x1fff8b10
    2044:	.word	0x1fffac20
    2048:	.word	0x1fffac24
    204c:	.word	0x1fffae24

00002050 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2050:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2052:	ldrb.w	r3, [r0, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2056:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2058:	cmp	r3, #16

  if (lba != cacheBlockNumber_) {
    205a:	ldr	r3, [pc, #104]	; (20c4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    205c:	mov	r5, r0
    205e:	mov	r6, r1
    2060:	mov	r7, r2

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    2062:	ldr	r3, [r3, #0]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2064:	beq.n	2094 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    2066:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    206a:	cmp	r4, r3
    206c:	bne.n	209c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    206e:	and.w	r6, r6, #127	; 0x7f
    2072:	ldr	r2, [pc, #84]	; (20c8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    2074:	str.w	r7, [r2, r6, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2078:	ldr	r1, [pc, #80]	; (20cc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    207a:	ldrb	r0, [r5, #24]
    207c:	ldrb	r2, [r1, #0]
    207e:	cmp	r0, #1
    2080:	orr.w	r2, r2, #1
    2084:	strb	r2, [r1, #0]
    2086:	bls.n	20ba <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6a>
    2088:	ldr	r1, [r5, #8]
    208a:	ldr	r2, [pc, #68]	; (20d0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    208c:	add	r3, r1
    208e:	str	r3, [r2, #0]
  return true;
    2090:	movs	r0, #1
    2092:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2094:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    2098:	cmp	r4, r3
    209a:	beq.n	20ae <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x5e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    209c:	movs	r1, #0
    209e:	mov	r0, r4
    20a0:	bl	2008 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    20a4:	cbz	r0, 20bc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
  }
  // store entry
  if (fatType_ == 16) {
    20a6:	ldrb.w	r3, [r5, #32]
    20aa:	cmp	r3, #16
    20ac:	bne.n	20be <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    20ae:	uxtb	r6, r6
    20b0:	ldr	r2, [pc, #20]	; (20c8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    20b2:	mov	r3, r4
    20b4:	strh.w	r7, [r2, r6, lsl #1]
    20b8:	b.n	2078 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    20ba:	movs	r0, #1
}
    20bc:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    20be:	mov	r3, r4
    20c0:	b.n	206e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    20c2:	nop
    20c4:	.word	0x1fff8b10
    20c8:	.word	0x1fffac24
    20cc:	.word	0x1fffae24
    20d0:	.word	0x1fffac1c

000020d4 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    20d4:	ldr	r3, [r0, #12]
    20d6:	adds	r3, #1
    20d8:	cmp	r3, r1
    20da:	bcc.n	210e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    20dc:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    20de:	ldrb.w	r3, [r0, #32]
    20e2:	cmp	r3, #16
  if (lba != cacheBlockNumber_) {
    20e4:	ldr	r3, [pc, #84]	; (213c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x68>)
    20e6:	mov	r4, r0
    20e8:	mov	r6, r2
    20ea:	mov	r5, r1
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    20ec:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    20ee:	ldr	r3, [r3, #0]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    20f0:	beq.n	2112 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    20f2:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    20f6:	cmp	r0, r3
    20f8:	bne.n	211a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x46>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    20fa:	and.w	r1, r5, #127	; 0x7f
    20fe:	ldr	r3, [pc, #64]	; (2140 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    2100:	ldr.w	r3, [r3, r1, lsl #2]
    2104:	bic.w	r3, r3, #4026531840	; 0xf0000000
    2108:	str	r3, [r6, #0]
    210a:	movs	r0, #1
  }
  return true;
}
    210c:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    210e:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    2110:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2112:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    2116:	cmp	r0, r3
    2118:	beq.n	212a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x56>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    211a:	movs	r1, #0
    211c:	bl	2008 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2120:	cbz	r0, 2138 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
  }
  if (fatType_ == 16) {
    2122:	ldrb.w	r3, [r4, #32]
    2126:	cmp	r3, #16
    2128:	bne.n	20fa <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    212a:	uxtb	r1, r5
    212c:	ldr	r3, [pc, #16]	; (2140 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    212e:	ldrh.w	r3, [r3, r1, lsl #1]
    2132:	str	r3, [r6, #0]
    2134:	movs	r0, #1
    2136:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    2138:	movs	r0, #0
    213a:	pop	{r4, r5, r6, pc}
    213c:	.word	0x1fff8b10
    2140:	.word	0x1fffac24

00002144 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2144:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2148:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    214a:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    214c:	cbz	r7, 21aa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    214e:	adds	r7, #1

    // don't save new start location
    setStart = false;
    2150:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2154:	ldr	r3, [r0, #12]
    2156:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    215a:	cbz	r3, 21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    215c:	mov	fp, r1
    215e:	mov	r6, r0
    2160:	mov	r9, r2
    2162:	mov	r4, r7
    2164:	movs	r5, #0
    2166:	b.n	2174 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2168:	mov	r4, r3
    216a:	mov	r7, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    216c:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    216e:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2170:	cmp	r3, r5
    2172:	bls.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2174:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    2176:	it	cc
    2178:	movcc	r4, #2
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    217a:	mov	r1, r4
    217c:	add	r2, sp, #4
    217e:	mov	r0, r6
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    2180:	it	cc
    2182:	movcc	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2184:	bl	20d4 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2188:	adds	r3, r4, #1

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    218a:	subs	r1, r3, r7
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    218c:	cbz	r0, 21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    if (f != 0) {
    218e:	ldr	r2, [sp, #4]
    2190:	cmp	r2, #0
    2192:	bne.n	2168 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    2194:	cmp	fp, r1
    2196:	beq.n	21ba <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x76>
    2198:	mov	r4, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    219a:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    219c:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    219e:	cmp	r3, r5
    21a0:	bhi.n	2174 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    21a2:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    21a4:	add	sp, #12
    21a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    21aa:	sub.w	sl, r1, #1
    21ae:	clz	sl, sl

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    21b2:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    21b4:	mov.w	sl, sl, lsr #5
    21b8:	b.n	2154 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    21ba:	cmp	r4, #1
    21bc:	bls.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    21be:	ldr	r3, [r6, #12]
    21c0:	adds	r3, #1
    21c2:	cmp	r4, r3
    21c4:	bhi.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    21c6:	mvn.w	r2, #4026531840	; 0xf0000000
    21ca:	mov	r1, r4
    21cc:	mov	r0, r6
    21ce:	bl	2050 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    21d2:	cmp	r0, #0
    21d4:	beq.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // link clusters
  while (endCluster > bgnCluster) {
    21d6:	cmp	r7, r4
    21d8:	bcs.n	2204 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    21da:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    21dc:	cmp	r4, #1
    21de:	bls.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    21e0:	ldr	r3, [r6, #12]
    21e2:	adds	r3, #1
    21e4:	cmp	r4, r3
    21e6:	bhi.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    21e8:	adds	r2, r4, #1
    21ea:	mov	r1, r4
    21ec:	mov	r0, r6
    21ee:	bl	2050 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    21f2:	cmp	r0, #0
    21f4:	beq.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    21f6:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    21f8:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    21fc:	beq.n	2204 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    21fe:	cmp	r4, #1
    2200:	bne.n	21e0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9c>
    2202:	b.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2204:	ldr.w	r1, [r9]
    2208:	cbz	r1, 2222 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xde>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    220a:	cmp	r1, #1
    220c:	bls.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    220e:	ldr	r3, [r6, #12]
    2210:	adds	r3, #1
    2212:	cmp	r1, r3
    2214:	bhi.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    2216:	mov	r2, r7
    2218:	mov	r0, r6
    221a:	bl	2050 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    221e:	cmp	r0, #0
    2220:	beq.n	21a2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2222:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2226:	cmp.w	sl, #0
    222a:	beq.n	2230 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xec>
    222c:	adds	r7, #1
    222e:	str	r7, [r6, #0]

  return true;
    2230:	movs	r0, #1
    2232:	b.n	21a4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

00002234 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    2234:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    2236:	ldrsb.w	r3, [r0, #5]
    223a:	cmp	r3, #0
    223c:	blt.n	2246 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    223e:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    2242:	b.w	1fb4 <SdVolume::cacheFlush()>
    2246:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    2248:	movs	r1, #1
    224a:	ldr	r0, [r0, #16]
    224c:	bl	2008 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2250:	cbz	r0, 2292 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    2252:	ldrb	r5, [r4, #20]
    2254:	ldr	r3, [pc, #64]	; (2298 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    2256:	adds.w	r5, r3, r5, lsl #5
    225a:	beq.n	2292 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    225c:	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    225e:	ldr	r2, [pc, #60]	; (229c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    2260:	cmp	r3, #1
    2262:	itt	ls
    2264:	ldrls	r3, [r4, #24]
    2266:	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2268:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    226a:	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    226c:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    226e:	lsrs	r3, r3, #16
    2270:	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    2272:	cbz	r2, 2282 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4e>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    2274:	add.w	r1, r5, #22
    2278:	add.w	r0, r5, #24
    227c:	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    227e:	ldrh	r3, [r5, #24]
    2280:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    2282:	ldrb	r3, [r4, #5]
    2284:	and.w	r3, r3, #127	; 0x7f
    2288:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    228a:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    228e:	b.w	1fb4 <SdVolume::cacheFlush()>
}
    2292:	movs	r0, #0
    2294:	pop	{r3, r4, r5, pc}
    2296:	nop
    2298:	.word	0x1fffac24
    229c:	.word	0x1fffae28

000022a0 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    22a0:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    22a2:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    22a6:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    22a8:	movs	r1, #1
    22aa:	ldr	r0, [r0, #32]
    22ac:	bl	2144 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    22b0:	cbz	r0, 22c8 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    22b2:	ldr	r3, [r4, #28]
    22b4:	cbnz	r3, 22c6 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    22b6:	ldrb	r3, [r4, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    22b8:	ldr	r2, [r4, #8]
    22ba:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    22bc:	orn	r3, r3, #127	; 0x7f
    22c0:	strb	r3, [r4, #5]
    22c2:	movs	r0, #1
    22c4:	pop	{r4, pc}
  }
  return true;
    22c6:	movs	r0, #1
}
    22c8:	pop	{r4, pc}
    22ca:	nop

000022cc <SdFile::close()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    22cc:	ldrb	r2, [r0, #6]
    22ce:	cbnz	r2, 22d4 <SdFile::close()+0x8>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    22d0:	movs	r0, #0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    22d2:	bx	lr
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    22d4:	push	{r4, lr}
    22d6:	mov	r4, r0
    22d8:	bl	2234 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  if (!sync())return false;
    22dc:	cbz	r0, 22e6 <SdFile::close()+0x1a>
  type_ = FAT_FILE_TYPE_CLOSED;
    22de:	movs	r3, #0
    22e0:	strb	r3, [r4, #6]
  return true;
    22e2:	movs	r0, #1
}
    22e4:	pop	{r4, pc}
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    22e6:	movs	r0, #0
    22e8:	pop	{r4, pc}
    22ea:	nop

000022ec <SdFile::read(void*, unsigned int)>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    22ec:	ldrb	r3, [r0, #6]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    22ee:	cbnz	r3, 22f6 <SdFile::read(void*, unsigned int)+0xa>
    22f0:	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    22f4:	bx	lr
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    22f6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22fa:	mov	fp, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    22fc:	ldrb	r1, [r0, #5]
    22fe:	lsls	r1, r1, #31
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    2300:	sub	sp, #12
    2302:	mov	r5, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2304:	bpl.n	23b8 <SdFile::read(void*, unsigned int)+0xcc>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    2306:	ldr	r1, [r0, #12]
    2308:	ldr	r4, [r0, #24]
    230a:	subs	r4, r4, r1
    230c:	cmp	r4, r2
    230e:	it	cs
    2310:	movcs	r4, r2
    2312:	mov	r6, r4
    2314:	str	r4, [sp, #4]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    2316:	cmp	r4, #0
    2318:	beq.n	23e4 <SdFile::read(void*, unsigned int)+0xf8>
    231a:	mov	r2, r3
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    231c:	cmp	r2, #2
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    231e:	ldr.w	r9, [pc, #232]	; 2408 <SdFile::read(void*, unsigned int)+0x11c>

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    2322:	ldr	r7, [pc, #224]	; (2404 <SdFile::read(void*, unsigned int)+0x118>)
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    2324:	ldr.w	r8, [pc, #228]	; 240c <SdFile::read(void*, unsigned int)+0x120>
    2328:	ldr	r2, [r5, #32]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    232a:	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    232e:	beq.n	23b0 <SdFile::read(void*, unsigned int)+0xc4>
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2330:	ldrb	r4, [r2, #4]
    2332:	subs	r4, #1
    2334:	and.w	r4, r4, r1, lsr #9
    2338:	uxtb	r4, r4
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
    233a:	cmp.w	sl, #0
    233e:	bne.n	23fe <SdFile::read(void*, unsigned int)+0x112>
    2340:	cmp	r4, #0
    2342:	bne.n	23fe <SdFile::read(void*, unsigned int)+0x112>
        // start of new cluster
        if (curPosition_ == 0) {
    2344:	cmp	r1, #0
    2346:	bne.n	23ec <SdFile::read(void*, unsigned int)+0x100>
          // use first cluster in file
          curCluster_ = firstCluster_;
    2348:	ldr	r1, [r5, #28]
    234a:	str	r1, [r5, #8]
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    234c:	ldrb	r0, [r2, #16]
    234e:	ldr	r2, [r2, #20]
    2350:	subs	r1, #2
    2352:	lsls	r1, r0
    2354:	add	r4, r2
    2356:	adds	r0, r1, r4
    }
    int32_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    2358:	rsb	r4, sl, #512	; 0x200

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    235c:	ldrb	r2, [r5, #5]
    235e:	cmp	r4, r6
    2360:	it	ge
    2362:	movge	r4, r6
    2364:	lsls	r3, r2, #25
    2366:	bmi.n	23c2 <SdFile::read(void*, unsigned int)+0xd6>
    2368:	cmp.w	r4, #512	; 0x200
    236c:	beq.n	23c2 <SdFile::read(void*, unsigned int)+0xd6>
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    236e:	movs	r1, #0
    2370:	bl	2008 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2374:	cbz	r0, 23b8 <SdFile::read(void*, unsigned int)+0xcc>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    2376:	add.w	lr, sl, r9
      uint8_t* end = src + n;
    237a:	add.w	r0, lr, r4
      while (src != end) *dst++ = *src++;
    237e:	cmp	lr, r0
    2380:	beq.n	239a <SdFile::read(void*, unsigned int)+0xae>
    2382:	add.w	r2, fp, #4294967295
    2386:	mov	r3, lr
    2388:	ldrb.w	r1, [r3], #1
    238c:	strb.w	r1, [r2, #1]!
    2390:	cmp	r0, r3
    2392:	bne.n	2388 <SdFile::read(void*, unsigned int)+0x9c>
    2394:	rsb	r0, lr, r0
    2398:	add	fp, r0
    }
    curPosition_ += n;
    239a:	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    239c:	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    239e:	add	r1, r4
    23a0:	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    23a2:	beq.n	23e4 <SdFile::read(void*, unsigned int)+0xf8>
    23a4:	ldrb	r2, [r5, #6]
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    23a6:	cmp	r2, #2

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    23a8:	ubfx	sl, r1, #0, #9
    23ac:	ldr	r2, [r5, #32]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    23ae:	bne.n	2330 <SdFile::read(void*, unsigned int)+0x44>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    23b0:	ldr	r0, [r2, #36]	; 0x24
    23b2:	add.w	r0, r0, r1, lsr #9
    23b6:	b.n	2358 <SdFile::read(void*, unsigned int)+0x6c>
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    23b8:	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    23bc:	add	sp, #12
    23be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    23c2:	ldr	r2, [r7, #0]
    23c4:	cmp	r0, r2
    23c6:	beq.n	236e <SdFile::read(void*, unsigned int)+0x82>
    23c8:	mov	r1, r0
    23ca:	mov	r2, fp
    23cc:	ldr.w	r0, [r8]
    23d0:	bl	28d0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
      if (!vol_->readBlock(block, dst)) return -1;
    23d4:	cmp	r0, #0
    23d6:	beq.n	23b8 <SdFile::read(void*, unsigned int)+0xcc>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    23d8:	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    23da:	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    23dc:	add	r1, r4
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    23de:	add	fp, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    23e0:	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    23e2:	bne.n	23a4 <SdFile::read(void*, unsigned int)+0xb8>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    23e4:	ldr	r0, [sp, #4]
}
    23e6:	add	sp, #12
    23e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    23ec:	mov	r0, r2
    23ee:	ldr	r1, [r5, #8]
    23f0:	add.w	r2, r5, #8
    23f4:	bl	20d4 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    23f8:	cmp	r0, #0
    23fa:	beq.n	23b8 <SdFile::read(void*, unsigned int)+0xcc>
    23fc:	ldr	r2, [r5, #32]
    23fe:	ldr	r1, [r5, #8]
    2400:	b.n	234c <SdFile::read(void*, unsigned int)+0x60>
    2402:	nop
    2404:	.word	0x1fff8b10
    2408:	.word	0x1fffac24
    240c:	.word	0x1fffac20

00002410 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    2410:	push	{r3, r4, r5, r6, r7, lr}
    2412:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    2414:	cbz	r3, 241c <SdFile::seekSet(unsigned long)+0xc>
    2416:	ldr	r2, [r0, #24]
    2418:	cmp	r2, r1
    241a:	bcs.n	2420 <SdFile::seekSet(unsigned long)+0x10>
    241c:	movs	r0, #0
    241e:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    2420:	cmp	r3, #2
    2422:	mov	r7, r1
    2424:	mov	r5, r0
    2426:	beq.n	245e <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    2428:	cbz	r7, 246c <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    242a:	ldr	r3, [r5, #32]
    242c:	ldr	r1, [r5, #12]
    242e:	ldrb	r4, [r3, #16]
    2430:	subs	r2, r1, #1
    2432:	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    2436:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    2438:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    243a:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    243c:	cmp	r2, r4
    243e:	bls.n	2464 <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    2440:	ldr	r3, [r5, #28]
    2442:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    2444:	add.w	r6, r5, #8
    2448:	b.n	2458 <SdFile::seekSet(unsigned long)+0x48>
    244a:	ldr	r1, [r5, #8]
    244c:	ldr	r0, [r5, #32]
    244e:	bl	20d4 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2452:	subs	r4, #1
    2454:	cmp	r0, #0
    2456:	beq.n	241c <SdFile::seekSet(unsigned long)+0xc>
    2458:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    245a:	cmp	r4, #0
    245c:	bne.n	244a <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    245e:	str	r7, [r5, #12]
    return true;
    2460:	movs	r0, #1
    2462:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    2464:	cmp	r1, #0
    2466:	beq.n	2440 <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    2468:	subs	r4, r4, r2
    246a:	b.n	2444 <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    246c:	str	r7, [r5, #8]
    curPosition_ = 0;
    246e:	str	r7, [r5, #12]
    return true;
    2470:	movs	r0, #1
    2472:	pop	{r3, r4, r5, r6, r7, pc}

00002474 <SdFile::sync()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    2474:	ldrb	r3, [r0, #6]
    2476:	cbz	r3, 247c <SdFile::sync()+0x8>
    2478:	b.w	2234 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    247c:	mov	r0, r3
    247e:	bx	lr

00002480 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    2480:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2484:	mov	fp, r1

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2486:	ldrb	r1, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    2488:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    248a:	cmp	r1, #1
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    248c:	mov	r7, r0
    248e:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2490:	beq.n	249e <SdFile::write(void const*, unsigned int)+0x1e>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    2492:	movs	r3, #1
    2494:	strb	r3, [r7, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2496:	movs	r0, #0
}
    2498:	add	sp, #20
    249a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    249e:	ldrb	r2, [r0, #5]
    24a0:	lsls	r1, r2, #30
    24a2:	bpl.n	2492 <SdFile::write(void const*, unsigned int)+0x12>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    24a4:	lsls	r3, r2, #29
    24a6:	bpl.n	24ba <SdFile::write(void const*, unsigned int)+0x3a>
    24a8:	ldr	r4, [r7, #12]
    24aa:	ldr	r1, [r7, #24]
    24ac:	cmp	r4, r1
    24ae:	beq.w	2602 <SdFile::write(void const*, unsigned int)+0x182>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    24b2:	bl	2410 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    24b6:	cmp	r0, #0
    24b8:	beq.n	2492 <SdFile::write(void const*, unsigned int)+0x12>
  }

  while (nToWrite > 0) {
    24ba:	ldr	r3, [sp, #4]
    24bc:	ldr	r4, [r7, #12]
    24be:	cmp	r3, #0
    24c0:	beq.n	2556 <SdFile::write(void const*, unsigned int)+0xd6>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    24c2:	ldr.w	r9, [pc, #396]	; 2650 <SdFile::write(void const*, unsigned int)+0x1d0>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    24c6:	ldr.w	sl, [pc, #396]	; 2654 <SdFile::write(void const*, unsigned int)+0x1d4>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    24ca:	ldr.w	r8, [sp, #4]
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    24ce:	ldr	r0, [r7, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    24d0:	ldrb	r6, [r0, #4]
    24d2:	subs	r6, #1
    24d4:	and.w	r6, r6, r4, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    24d8:	ands.w	r6, r6, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    24dc:	ubfx	r4, r4, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    24e0:	bne.n	2568 <SdFile::write(void const*, unsigned int)+0xe8>
    24e2:	cmp	r4, #0
    24e4:	bne.n	2568 <SdFile::write(void const*, unsigned int)+0xe8>
      // start of new cluster
      if (curCluster_ == 0) {
    24e6:	ldr	r1, [r7, #8]
    24e8:	cmp	r1, #0
    24ea:	bne.n	25cc <SdFile::write(void const*, unsigned int)+0x14c>
        if (firstCluster_ == 0) {
    24ec:	ldr	r2, [r7, #28]
    24ee:	cmp	r2, #0
    24f0:	beq.n	25f0 <SdFile::write(void const*, unsigned int)+0x170>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    24f2:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    24f4:	rsb	r5, r4, #512	; 0x200
    24f8:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    24fa:	cmp	r5, r8
    24fc:	bls.n	2574 <SdFile::write(void const*, unsigned int)+0xf4>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    24fe:	ldrb	r5, [r0, #16]
    2500:	ldr	r1, [r0, #20]
    2502:	subs	r2, #2
    2504:	lsls	r2, r5
    2506:	add	r6, r1
    2508:	add	r6, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    250a:	uxth.w	r5, r8
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    250e:	cbnz	r4, 2518 <SdFile::write(void const*, unsigned int)+0x98>
    2510:	ldr	r0, [r7, #12]
    2512:	ldr	r2, [r7, #24]
    2514:	cmp	r0, r2
    2516:	bcs.n	25b2 <SdFile::write(void const*, unsigned int)+0x132>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2518:	mov	r0, r6
    251a:	movs	r1, #1
    251c:	bl	2008 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2520:	cmp	r0, #0
    2522:	beq.n	2492 <SdFile::write(void const*, unsigned int)+0x12>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    2524:	add	r4, r9
      uint8_t* end = dst + n;
    2526:	add.w	lr, r4, r5
      while (dst != end) *dst++ = *src++;
    252a:	cmp	r4, lr
    252c:	beq.n	254a <SdFile::write(void const*, unsigned int)+0xca>
    252e:	add.w	r1, fp, #4294967295
    2532:	subs	r2, r4, #1
    2534:	add.w	r6, lr, #4294967295
    2538:	ldrb.w	r0, [r1, #1]!
    253c:	strb.w	r0, [r2, #1]!
    2540:	cmp	r6, r2
    2542:	bne.n	2538 <SdFile::write(void const*, unsigned int)+0xb8>
    2544:	rsb	r4, r4, lr
    2548:	add	fp, r4
    }
    nToWrite -= n;
    curPosition_ += n;
    254a:	ldr	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    254c:	subs.w	r8, r8, r5
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    2550:	add	r4, r5
    2552:	str	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2554:	bne.n	24ce <SdFile::write(void const*, unsigned int)+0x4e>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2556:	ldr	r3, [r7, #24]
    2558:	cmp	r3, r4
    255a:	bcs.n	260c <SdFile::write(void const*, unsigned int)+0x18c>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    255c:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    255e:	str	r4, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    2560:	orr.w	r2, r2, #128	; 0x80
    2564:	strb	r2, [r7, #5]
    2566:	b.n	261e <SdFile::write(void const*, unsigned int)+0x19e>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2568:	rsb	r5, r4, #512	; 0x200
    256c:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    256e:	cmp	r5, r8
    2570:	ldr	r2, [r7, #8]
    2572:	bhi.n	24fe <SdFile::write(void const*, unsigned int)+0x7e>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2574:	ldrb	r1, [r0, #16]
    2576:	ldr	r0, [r0, #20]
    2578:	subs	r2, #2
    257a:	lsls	r2, r1
    257c:	add	r6, r0
    if (n == 512) {
    257e:	cmp.w	r5, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2582:	add	r6, r2
    if (n == 512) {
    2584:	bne.n	250e <SdFile::write(void const*, unsigned int)+0x8e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2586:	ldr.w	r2, [sl]
    258a:	cmp	r6, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    258c:	itt	eq
    258e:	moveq.w	r2, #4294967295
    2592:	streq.w	r2, [sl]
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2596:	ldr	r2, [pc, #168]	; (2640 <SdFile::write(void const*, unsigned int)+0x1c0>)
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    2598:	mov	r1, r6
    259a:	ldr	r0, [r2, #0]
    259c:	mov	r2, fp
    259e:	bl	2a5c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    25a2:	cmp	r0, #0
    25a4:	beq.w	2492 <SdFile::write(void const*, unsigned int)+0x12>
      src += 512;
    25a8:	add.w	fp, fp, #512	; 0x200
    25ac:	mov.w	r5, #512	; 0x200
    25b0:	b.n	254a <SdFile::write(void const*, unsigned int)+0xca>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    25b2:	bl	1fb4 <SdVolume::cacheFlush()>
    25b6:	cmp	r0, #0
    25b8:	beq.w	2492 <SdFile::write(void const*, unsigned int)+0x12>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    25bc:	ldr	r1, [pc, #132]	; (2644 <SdFile::write(void const*, unsigned int)+0x1c4>)
        SdVolume::cacheBlockNumber_ = block;
    25be:	str.w	r6, [sl]
    25c2:	ldrb	r2, [r1, #0]
    25c4:	orr.w	r2, r2, #1
    25c8:	strb	r2, [r1, #0]
    25ca:	b.n	2524 <SdFile::write(void const*, unsigned int)+0xa4>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    25cc:	add	r2, sp, #12
    25ce:	bl	20d4 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    25d2:	cmp	r0, #0
    25d4:	beq.w	2498 <SdFile::write(void const*, unsigned int)+0x18>
        if (vol_->isEOC(next)) {
    25d8:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    25da:	ldr	r3, [pc, #108]	; (2648 <SdFile::write(void const*, unsigned int)+0x1c8>)
    25dc:	ldrb.w	r5, [r0, #32]
    25e0:	ldr	r2, [sp, #12]
    25e2:	movw	r1, #65528	; 0xfff8
    25e6:	cmp	r5, #16
    25e8:	it	ne
    25ea:	movne	r1, r3
    25ec:	cmp	r2, r1
    25ee:	bcc.n	24f2 <SdFile::write(void const*, unsigned int)+0x72>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    25f0:	mov	r0, r7
    25f2:	bl	22a0 <SdFile::addCluster()>
    25f6:	cmp	r0, #0
    25f8:	beq.w	2492 <SdFile::write(void const*, unsigned int)+0x12>
    25fc:	ldr	r0, [r7, #32]
    25fe:	ldr	r2, [r7, #8]
    2600:	b.n	24f4 <SdFile::write(void const*, unsigned int)+0x74>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2602:	ldr	r3, [sp, #4]
    2604:	cmp	r3, #0
    2606:	bne.w	24c2 <SdFile::write(void const*, unsigned int)+0x42>
    260a:	b.n	261e <SdFile::write(void const*, unsigned int)+0x19e>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    260c:	ldr	r3, [pc, #60]	; (264c <SdFile::write(void const*, unsigned int)+0x1cc>)
    260e:	ldrb	r2, [r7, #5]
    2610:	ldr	r3, [r3, #0]
    2612:	cbz	r3, 261e <SdFile::write(void const*, unsigned int)+0x19e>
    2614:	ldr	r3, [sp, #4]
    2616:	cbz	r3, 261e <SdFile::write(void const*, unsigned int)+0x19e>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2618:	orr.w	r2, r2, #128	; 0x80
    261c:	strb	r2, [r7, #5]
  }

  if (flags_ & O_SYNC) {
    261e:	lsls	r2, r2, #28
    2620:	bpl.n	2636 <SdFile::write(void const*, unsigned int)+0x1b6>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    2622:	ldrb	r3, [r7, #6]
    2624:	cmp	r3, #0
    2626:	beq.w	2492 <SdFile::write(void const*, unsigned int)+0x12>
    262a:	mov	r0, r7
    262c:	bl	2234 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2630:	cmp	r0, #0
    2632:	beq.w	2492 <SdFile::write(void const*, unsigned int)+0x12>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2636:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2638:	add	sp, #20
    263a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    263e:	nop
    2640:	.word	0x1fffac20
    2644:	.word	0x1fffae24
    2648:	.word	0x0ffffff8
    264c:	.word	0x1fffae28
    2650:	.word	0x1fffac24
    2654:	.word	0x1fff8b10

00002658 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2658:	push	{lr}
    265a:	sub	sp, #12
    265c:	add	r3, sp, #8
  return write(&b, 1);
    265e:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2660:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    2664:	mov	r1, r3
    2666:	bl	2480 <SdFile::write(void const*, unsigned int)>
}
    266a:	add	sp, #12
    266c:	ldr.w	pc, [sp], #4

00002670 <Sd2Card::chipSelectHigh()>:
}
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    2670:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    2672:	movs	r1, #1
    2674:	ldrb	r0, [r0, #0]
    2676:	bl	32c0 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    267a:	ldr	r2, [pc, #56]	; (26b4 <Sd2Card::chipSelectHigh()+0x44>)
    267c:	ldrb	r3, [r2, #0]
    267e:	cbz	r3, 26a6 <Sd2Card::chipSelectHigh()+0x36>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    2680:	ldr	r1, [pc, #52]	; (26b8 <Sd2Card::chipSelectHigh()+0x48>)
    2682:	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    2684:	movs	r4, #0
    2686:	mov	r0, r3
    2688:	strb	r4, [r2, #0]
    268a:	cbz	r3, 26a6 <Sd2Card::chipSelectHigh()+0x36>
			if (interruptMasksUsed & 0x01) {
    268c:	lsls	r4, r3, #31
    268e:	bpl.n	2698 <Sd2Card::chipSelectHigh()+0x28>
				NVIC_ISER0 = interruptSave[0];
    2690:	ldr	r2, [pc, #40]	; (26bc <Sd2Card::chipSelectHigh()+0x4c>)
    2692:	ldr	r0, [r1, #24]
    2694:	str	r0, [r2, #0]
    2696:	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    2698:	lsls	r2, r3, #30
    269a:	bmi.n	26a8 <Sd2Card::chipSelectHigh()+0x38>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    269c:	lsls	r3, r0, #29
    269e:	bpl.n	26a6 <Sd2Card::chipSelectHigh()+0x36>
				NVIC_ISER2 = interruptSave[2];
    26a0:	ldr	r3, [pc, #28]	; (26c0 <Sd2Card::chipSelectHigh()+0x50>)
    26a2:	ldr	r2, [r1, #32]
    26a4:	str	r2, [r3, #0]
    26a6:	pop	{r4, pc}
			if (interruptMasksUsed & 0x01) {
				NVIC_ISER0 = interruptSave[0];
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
				NVIC_ISER1 = interruptSave[1];
    26a8:	ldr	r3, [pc, #24]	; (26c4 <Sd2Card::chipSelectHigh()+0x54>)
    26aa:	ldr	r2, [r1, #28]
    26ac:	ldrb	r0, [r1, #11]
    26ae:	str	r2, [r3, #0]
    26b0:	b.n	269c <Sd2Card::chipSelectHigh()+0x2c>
    26b2:	nop
    26b4:	.word	0x1fffae30
    26b8:	.word	0x1fff8ad8
    26bc:	.word	0xe000e100
    26c0:	.word	0xe000e108
    26c4:	.word	0xe000e104

000026c8 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    26c8:	ldr	r3, [pc, #120]	; (2744 <Sd2Card::chipSelectLow()+0x7c>)
    26ca:	ldrb	r2, [r3, #0]
    26cc:	cbz	r2, 26d6 <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    26ce:	ldrb	r0, [r0, #0]
    26d0:	movs	r1, #0
    26d2:	b.w	32c0 <digitalWrite>
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    26d6:	push	{r4, r5, r6}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    26d8:	ldr	r2, [pc, #108]	; (2748 <Sd2Card::chipSelectLow()+0x80>)
    26da:	ldr	r1, [pc, #112]	; (274c <Sd2Card::chipSelectLow()+0x84>)
    26dc:	ldrb	r4, [r2, #11]
    26de:	ldr	r1, [r1, #0]
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    26e0:	movs	r5, #1
    26e2:	strb	r5, [r3, #0]
    26e4:	cbz	r4, 2722 <Sd2Card::chipSelectLow()+0x5a>
			__disable_irq();
    26e6:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    26e8:	ldrb	r3, [r2, #11]
    26ea:	lsls	r6, r3, #31
    26ec:	mov	r4, r3
    26ee:	bpl.n	26fe <Sd2Card::chipSelectLow()+0x36>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    26f0:	ldr	r5, [pc, #92]	; (2750 <Sd2Card::chipSelectLow()+0x88>)
    26f2:	ldr	r4, [r2, #12]
    26f4:	ldr	r6, [r5, #0]
    26f6:	ands	r4, r6
    26f8:	str	r4, [r2, #24]
				NVIC_ICER0 = interruptSave[0];
    26fa:	str	r4, [r5, #0]
    26fc:	mov	r4, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    26fe:	lsls	r5, r3, #30
    2700:	bpl.n	2710 <Sd2Card::chipSelectLow()+0x48>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2702:	ldr	r5, [pc, #80]	; (2754 <Sd2Card::chipSelectLow()+0x8c>)
    2704:	ldr	r3, [r2, #16]
    2706:	ldr	r6, [r5, #0]
    2708:	ldrb	r4, [r2, #11]
    270a:	ands	r3, r6
    270c:	str	r3, [r2, #28]
				NVIC_ICER1 = interruptSave[1];
    270e:	str	r3, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    2710:	lsls	r3, r4, #29
    2712:	bpl.n	2720 <Sd2Card::chipSelectLow()+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2714:	ldr	r4, [pc, #64]	; (2758 <Sd2Card::chipSelectLow()+0x90>)
    2716:	ldr	r3, [r2, #20]
    2718:	ldr	r5, [r4, #0]
    271a:	ands	r3, r5
    271c:	str	r3, [r2, #32]
				NVIC_ICER2 = interruptSave[2];
    271e:	str	r3, [r4, #0]
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    2720:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2722:	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    2724:	ldr	r2, [r3, #12]
    2726:	cmp	r2, r1
    2728:	beq.n	273a <Sd2Card::chipSelectLow()+0x72>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    272a:	ldr	r4, [pc, #48]	; (275c <Sd2Card::chipSelectLow()+0x94>)
    272c:	str	r4, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    272e:	ldr	r2, [pc, #48]	; (2760 <Sd2Card::chipSelectLow()+0x98>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    2730:	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    2732:	orr.w	r4, r1, #1073741824	; 0x40000000
    2736:	str	r4, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2738:	str	r2, [r3, #0]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    273a:	ldrb	r0, [r0, #0]
    273c:	movs	r1, #0
}
    273e:	pop	{r4, r5, r6}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    2740:	b.w	32c0 <digitalWrite>
    2744:	.word	0x1fffae30
    2748:	.word	0x1fff8ad8
    274c:	.word	0x1fffae2c
    2750:	.word	0xe000e180
    2754:	.word	0xe000e184
    2758:	.word	0xe000e188
    275c:	.word	0x003f4001
    2760:	.word	0x803f0000

00002764 <Sd2Card::waitNotBusy(unsigned int)>:
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    2764:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2766:	ldr	r0, [pc, #72]	; (27b0 <Sd2Card::waitNotBusy(unsigned int)+0x4c>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2768:	ldr	r2, [pc, #72]	; (27b4 <Sd2Card::waitNotBusy(unsigned int)+0x50>)
    276a:	ldr	r3, [r0, #0]
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    276c:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    276e:	mov	r6, r2
    2770:	str	r3, [sp, #0]
	return ret;
    2772:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2774:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    2778:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    277a:	ldr	r3, [r2, #0]
    277c:	orr.w	r3, r3, #1024	; 0x400
    2780:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2782:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2784:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2786:	ldr	r3, [r2, #44]	; 0x2c
    2788:	cmp	r3, #0
    278a:	bge.n	2786 <Sd2Card::waitNotBusy(unsigned int)+0x22>
  return SPI0_POPR;
    278c:	ldr	r3, [r6, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    278e:	uxtb	r3, r3
    2790:	cmp	r3, #255	; 0xff
    2792:	beq.n	27a8 <Sd2Card::waitNotBusy(unsigned int)+0x44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2794:	ldr	r3, [r0, #0]
    2796:	str	r3, [sp, #4]
	return ret;
    2798:	ldr	r3, [sp, #4]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    279a:	subs	r3, r3, r7
    279c:	cmp	r3, r1
    279e:	bcc.n	277a <Sd2Card::waitNotBusy(unsigned int)+0x16>
  return false;
    27a0:	movs	r0, #0
}
    27a2:	add	sp, #8
    27a4:	pop	{r4, r5, r6, r7}
    27a6:	bx	lr
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    27a8:	movs	r0, #1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    27aa:	add	sp, #8
    27ac:	pop	{r4, r5, r6, r7}
    27ae:	bx	lr
    27b0:	.word	0x1fffafe8
    27b4:	.word	0x4002c000

000027b8 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    27b8:	push	{r3, r4, r5, r6, r7, lr}
    27ba:	mov	r5, r1
  // wait up to 300 ms if busy
  waitNotBusy(300);
    27bc:	mov.w	r1, #300	; 0x12c


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    27c0:	mov	r6, r2
    27c2:	mov	r4, r0
  // wait up to 300 ms if busy
  waitNotBusy(300);
    27c4:	bl	2764 <Sd2Card::waitNotBusy(unsigned int)>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    27c8:	ldr	r3, [pc, #160]	; (286c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    27ca:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    27cc:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    27d0:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    27d4:	orr.w	r1, r5, #64	; 0x40
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    27d8:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    27da:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    27dc:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    27de:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    27e0:	ldr	r3, [r2, #44]	; 0x2c
    27e2:	cmp	r3, #0
    27e4:	bge.n	27e0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x28>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    27e6:	ldr	r1, [pc, #132]	; (286c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    27e8:	movs	r0, #24
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    27ea:	mov.w	r7, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    27ee:	ldr	r2, [r1, #0]
    27f0:	lsr.w	r3, r6, r0
    27f4:	orr.w	r2, r2, #1024	; 0x400
    27f8:	uxtb	r3, r3
    27fa:	str	r2, [r1, #0]
  SPI0_SR = SPI_SR_TCF;
    27fc:	str	r7, [r1, #44]	; 0x2c
  SPI0_PUSHR = b;
    27fe:	str	r3, [r1, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2800:	ldr	r3, [r1, #44]	; 0x2c
    2802:	cmp	r3, #0
    2804:	bge.n	2800 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x48>
    2806:	subs	r0, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    2808:	cmn.w	r0, #8
    280c:	bne.n	27ee <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    280e:	cbz	r5, 2866 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xae>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    2810:	cmp	r5, #8
    2812:	ite	eq
    2814:	moveq	r1, #135	; 0x87
    2816:	movne	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2818:	ldr	r3, [pc, #80]	; (286c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    281a:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    281c:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2820:	orr.w	r2, r2, #1024	; 0x400
    2824:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2826:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2828:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    282a:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    282c:	ldr	r3, [r2, #44]	; 0x2c
    282e:	cmp	r3, #0
    2830:	bge.n	282c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2832:	ldr	r2, [pc, #56]	; (286c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2834:	movs	r7, #0
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2836:	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2838:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    283c:	movs	r1, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    283e:	ldr	r3, [r2, #0]
    2840:	orr.w	r3, r3, #1024	; 0x400
    2844:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2846:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2848:	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    284a:	ldr	r3, [r2, #44]	; 0x2c
    284c:	cmp	r3, #0
    284e:	bge.n	284a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x92>
  return SPI0_POPR;
    2850:	ldr	r3, [r6, #56]	; 0x38
    2852:	uxtb	r0, r3
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    2854:	lsls	r3, r3, #24
    2856:	strb	r0, [r4, #1]
    2858:	bmi.n	285c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>
  return status_;
}
    285a:	pop	{r3, r4, r5, r6, r7, pc}
    285c:	adds	r7, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    285e:	cmp.w	r7, #256	; 0x100
    2862:	bne.n	283e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x86>
  return status_;
}
    2864:	pop	{r3, r4, r5, r6, r7, pc}
    2866:	movs	r1, #149	; 0x95
    2868:	b.n	2818 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x60>
    286a:	nop
    286c:	.word	0x4002c000

00002870 <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    2870:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2872:	ldr	r1, [pc, #84]	; (28c8 <Sd2Card::waitStartBlock()+0x58>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2874:	ldr	r2, [pc, #84]	; (28cc <Sd2Card::waitStartBlock()+0x5c>)
    2876:	ldr	r3, [r1, #0]
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    2878:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    287a:	mov	r6, r2
    287c:	str	r3, [sp, #0]
	return ret;
    287e:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2880:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    2884:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2886:	ldr	r3, [r2, #0]
    2888:	orr.w	r3, r3, #1024	; 0x400
    288c:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    288e:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2890:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2892:	ldr	r3, [r2, #44]	; 0x2c
    2894:	cmp	r3, #0
    2896:	bge.n	2892 <Sd2Card::waitStartBlock()+0x22>
  return SPI0_POPR;
    2898:	ldr	r3, [r6, #56]	; 0x38
    289a:	uxtb	r3, r3
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    289c:	cmp	r3, #255	; 0xff
    289e:	strb	r3, [r0, #1]
    28a0:	bne.n	28b8 <Sd2Card::waitStartBlock()+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28a2:	ldr	r3, [r1, #0]
    28a4:	str	r3, [sp, #4]
	return ret;
    28a6:	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    28a8:	subs	r3, r3, r7
    28aa:	cmp.w	r3, #300	; 0x12c
    28ae:	bls.n	2886 <Sd2Card::waitStartBlock()+0x16>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    28b0:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    28b2:	add	sp, #8
    28b4:	pop	{r4, r5, r6, r7}
    28b6:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    28b8:	sub.w	r0, r3, #254	; 0xfe
    28bc:	clz	r0, r0
    28c0:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    28c2:	add	sp, #8
    28c4:	pop	{r4, r5, r6, r7}
    28c6:	bx	lr
    28c8:	.word	0x1fffafe8
    28cc:	.word	0x4002c000

000028d0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    28d0:	push	{r3, r4, r5, r6, r7, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    28d2:	ldrb	r3, [r0, #2]
    28d4:	cmp	r3, #3

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    28d6:	mov	r6, r1
    28d8:	mov	r4, r0
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    28da:	it	ne
    28dc:	lslne	r6, r1, #9

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    28de:	mov	r5, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
  chipSelectLow();
    28e0:	bl	26c8 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    28e4:	mov	r2, r6
    28e6:	movs	r1, #17
    28e8:	mov	r0, r4
    28ea:	bl	27b8 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    28ee:	cbnz	r0, 28f8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    28f0:	mov	r0, r4
    28f2:	bl	2870 <Sd2Card::waitStartBlock()>
    28f6:	cbnz	r0, 2902 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    28f8:	mov	r0, r4
    28fa:	bl	2670 <Sd2Card::chipSelectHigh()>
  return false;
    28fe:	movs	r0, #0
}
    2900:	pop	{r3, r4, r5, r6, r7, pc}
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2902:	ldr	r3, [pc, #128]	; (2984 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2904:	ldr	r1, [pc, #128]	; (2988 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2906:	ldr	r2, [pc, #132]	; (298c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    2908:	str	r2, [r3, #0]
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    290a:	mov	lr, r1
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    290c:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    290e:	mov	r2, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2910:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2912:	mov	r6, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2914:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
    2916:	add.w	r0, r5, #506	; 0x1fa
    291a:	adds	r1, r5, #2
    291c:	add.w	r7, r5, #508	; 0x1fc
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2920:	ldr	r3, [r2, #44]	; 0x2c
    2922:	tst.w	r3, #240	; 0xf0
    2926:	beq.n	2920 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2928:	str.w	lr, [r6, #52]	; 0x34
    uint16_t w = SPI0_POPR;
    292c:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    292e:	strb.w	r3, [r1, #-1]
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    2932:	asrs	r3, r3, #8
    2934:	strb.w	r3, [r1, #-2]
    2938:	adds	r1, #2
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    293a:	cmp	r7, r1
    293c:	bne.n	2920 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
    293e:	add.w	r5, r5, #512	; 0x200
  while (buf < limit) {
    2942:	cmp	r0, r5
    2944:	bcs.n	2962 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x92>
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2946:	ldr	r2, [pc, #60]	; (2984 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    2948:	mov	r6, r2
    294a:	ldr	r3, [r2, #44]	; 0x2c
    294c:	tst.w	r3, #240	; 0xf0
    2950:	beq.n	294a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
    uint16_t w = SPI0_POPR;
    2952:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    2954:	asrs	r1, r3, #8
    2956:	strb.w	r1, [r0], #2
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    295a:	cmp	r0, r5
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    295c:	strb.w	r3, [r0, #-1]
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    2960:	bcc.n	294a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2962:	ldr	r3, [pc, #32]	; (2984 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    2964:	ldr	r1, [pc, #36]	; (298c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2966:	ldr	r2, [pc, #32]	; (2988 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2968:	str	r1, [r3, #0]
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    296a:	mov	r1, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    296c:	str	r2, [r3, #52]	; 0x34
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    296e:	ldr	r3, [r1, #44]	; 0x2c
    2970:	ldr	r2, [pc, #16]	; (2984 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    2972:	tst.w	r3, #240	; 0xf0
    2976:	beq.n	296e <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x9e>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    2978:	mov	r0, r4
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_POPR;
    297a:	ldr	r3, [r2, #56]	; 0x38
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    297c:	bl	2670 <Sd2Card::chipSelectHigh()>
  return true;
    2980:	movs	r0, #1
    2982:	pop	{r3, r4, r5, r6, r7, pc}
    2984:	.word	0x4002c000
    2988:	.word	0x9000ffff
    298c:	.word	0x801f0400

00002990 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    2990:	push	{r4, r5, r6, r7}
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2992:	ldr	r6, [pc, #196]	; (2a58 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2994:	ldr	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    2996:	mov.w	r7, #2147483648	; 0x80000000
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    299a:	orr.w	r3, r3, #1024	; 0x400
    299e:	str	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    29a0:	mov	r5, r7
    29a2:	str	r7, [r6, #44]	; 0x2c
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    29a4:	mov	r4, r6
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
		SPI0_SR = SPI_SR_TCF;
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    29a6:	str	r1, [r6, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    29a8:	mov	r3, r6
    29aa:	adds	r1, r2, #1
    29ac:	addw	r7, r2, #513	; 0x201
    29b0:	ldr	r2, [r4, #44]	; 0x2c
    29b2:	cmp	r2, #0
    29b4:	bge.n	29b0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    29b6:	ldr	r2, [r3, #0]
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i];
    29b8:	ldrb.w	r6, [r1, #-1]
    29bc:	orr.w	r2, r2, #1024	; 0x400
    29c0:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    29c2:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    29c4:	str	r6, [r3, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    29c6:	ldr	r2, [r4, #44]	; 0x2c
    29c8:	cmp	r2, #0
    29ca:	bge.n	29c6 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x36>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    29cc:	ldr	r2, [r3, #0]
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
    29ce:	ldrb.w	r6, [r1], #2
    29d2:	orr.w	r2, r2, #1024	; 0x400

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    29d6:	cmp	r7, r1
    29d8:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    29da:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    29dc:	str	r6, [r3, #52]	; 0x34
    29de:	bne.n	29b0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    29e0:	ldr	r1, [pc, #116]	; (2a58 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    29e2:	ldr	r2, [r1, #44]	; 0x2c
    29e4:	ldr	r3, [pc, #112]	; (2a58 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    29e6:	cmp	r2, #0
    29e8:	bge.n	29e2 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x52>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    29ea:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    29ec:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    29f0:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    29f4:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    29f6:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    29f8:	mov	r1, r3
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    29fa:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
    29fc:	str	r4, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    29fe:	ldr	r3, [r1, #44]	; 0x2c
    2a00:	ldr	r2, [pc, #84]	; (2a58 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a02:	cmp	r3, #0
    2a04:	bge.n	29fe <Sd2Card::writeData(unsigned char, unsigned char const*)+0x6e>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a06:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2a08:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a0c:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2a10:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a12:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a14:	mov	r1, r2
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2a16:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    2a18:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a1a:	ldr	r3, [r1, #44]	; 0x2c
    2a1c:	ldr	r2, [pc, #56]	; (2a58 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a1e:	cmp	r3, #0
    2a20:	bge.n	2a1a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8a>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a22:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2a24:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a28:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    2a2c:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a2e:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a30:	mov	r1, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2a32:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2a34:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a36:	ldr	r3, [r1, #44]	; 0x2c
    2a38:	ldr	r2, [pc, #28]	; (2a58 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a3a:	cmp	r3, #0
    2a3c:	bge.n	2a36 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa6>
  return SPI0_POPR;
    2a3e:	ldr	r3, [r2, #56]	; 0x38
    2a40:	uxtb	r3, r3
    2a42:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    2a46:	strb	r3, [r0, #1]
    2a48:	sub.w	r0, r2, #5
    2a4c:	clz	r0, r0
    2a50:	lsrs	r0, r0, #5
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    2a52:	pop	{r4, r5, r6, r7}
    2a54:	bx	lr
    2a56:	nop
    2a58:	.word	0x4002c000

00002a5c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    2a5c:	push	{r4, r5, r6, lr}
    2a5e:	mov	r4, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    2a60:	cbz	r1, 2a80 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    2a62:	ldrb	r3, [r0, #2]
    2a64:	cmp	r3, #3
    2a66:	mov	r5, r1
    2a68:	it	ne
    2a6a:	lslne	r5, r1, #9
    2a6c:	mov	r6, r2
  chipSelectLow();
    2a6e:	bl	26c8 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    2a72:	mov	r2, r5
    2a74:	movs	r1, #24
    2a76:	mov	r0, r4
    2a78:	bl	27b8 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2a7c:	mov	r5, r0
    2a7e:	cbz	r0, 2a8a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2e>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    2a80:	mov	r0, r4
    2a82:	bl	2670 <Sd2Card::chipSelectHigh()>
  return false;
    2a86:	movs	r0, #0
}
    2a88:	pop	{r4, r5, r6, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    2a8a:	mov	r2, r6
    2a8c:	movs	r1, #254	; 0xfe
    2a8e:	mov	r0, r4
    2a90:	bl	2990 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    2a94:	cmp	r0, #0
    2a96:	beq.n	2a80 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    2a98:	mov.w	r1, #600	; 0x258
    2a9c:	mov	r0, r4
    2a9e:	bl	2764 <Sd2Card::waitNotBusy(unsigned int)>
    2aa2:	cmp	r0, #0
    2aa4:	beq.n	2a80 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    2aa6:	mov	r2, r5
    2aa8:	movs	r1, #13
    2aaa:	mov	r0, r4
    2aac:	bl	27b8 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2ab0:	cmp	r0, #0
    2ab2:	bne.n	2a80 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2ab4:	ldr	r3, [pc, #44]	; (2ae4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    2ab6:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2ab8:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2abc:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    2ac0:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2ac2:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2ac4:	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2ac6:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2ac8:	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2aca:	ldr	r3, [r1, #44]	; 0x2c
    2acc:	ldr	r2, [pc, #20]	; (2ae4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    2ace:	cmp	r3, #0
    2ad0:	bge.n	2aca <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x6e>
  return SPI0_POPR;
    2ad2:	ldr	r3, [r2, #56]	; 0x38
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    2ad4:	tst.w	r3, #255	; 0xff
    2ad8:	bne.n	2a80 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    2ada:	mov	r0, r4
    2adc:	bl	2670 <Sd2Card::chipSelectHigh()>
  return true;
    2ae0:	movs	r0, #1
    2ae2:	pop	{r4, r5, r6, pc}
    2ae4:	.word	0x4002c000

00002ae8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    2ae8:	ldr	r3, [pc, #4]	; (2af0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    2aea:	ldr	r2, [pc, #8]	; (2af4 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    2aec:	str	r2, [r3, #0]
    2aee:	bx	lr
    2af0:	.word	0x1fffae2c
    2af4:	.word	0x38011001

00002af8 <IRrecv::IRrecv(int)>:
}

//+=============================================================================
IRrecv::IRrecv (int recvpin)
{
	irparams.recvpin = recvpin;
    2af8:	ldr	r3, [pc, #8]	; (2b04 <IRrecv::IRrecv(int)+0xc>)
    2afa:	uxtb	r1, r1
	irparams.blinkflag = 0;
    2afc:	movs	r2, #0
}

//+=============================================================================
IRrecv::IRrecv (int recvpin)
{
	irparams.recvpin = recvpin;
    2afe:	strb	r1, [r3, #1]
	irparams.blinkflag = 0;
    2b00:	strb	r2, [r3, #3]
}
    2b02:	bx	lr
    2b04:	.word	0x1fffae34

00002b08 <cmt_isr>:
#ifdef IR_TIMER_USE_ESP32
void IRTimer()
#else
ISR (TIMER_INTR_NAME)
#endif
{
    2b08:	push	{r4, lr}
	TIMER_RESET;
    2b0a:	ldr	r2, [pc, #308]	; (2c40 <cmt_isr+0x138>)
    2b0c:	ldr	r3, [pc, #308]	; (2c44 <cmt_isr+0x13c>)

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	// digitalRead() is very slow. Optimisation is possible, but makes the code unportable
	uint8_t  irdata = (uint8_t)digitalRead(irparams.recvpin);
    2b0e:	ldr	r4, [pc, #312]	; (2c48 <cmt_isr+0x140>)
void IRTimer()
#else
ISR (TIMER_INTR_NAME)
#endif
{
	TIMER_RESET;
    2b10:	ldrb	r2, [r2, #0]
    2b12:	movs	r2, #30
    2b14:	strb	r2, [r3, #0]

	// Read if IR Receiver -> SPACE [xmt LED off] or a MARK [xmt LED on]
	// digitalRead() is very slow. Optimisation is possible, but makes the code unportable
	uint8_t  irdata = (uint8_t)digitalRead(irparams.recvpin);
    2b16:	ldrb	r0, [r4, #1]
    2b18:	bl	32cc <digitalRead>

	irparams.timer++;  // One more 50uS tick
    2b1c:	ldr	r3, [r4, #8]
    2b1e:	adds	r3, #1
    2b20:	str	r3, [r4, #8]
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
    2b22:	ldrb	r3, [r4, #4]
    2b24:	cmp	r3, #100	; 0x64
    2b26:	itt	hi
    2b28:	movhi	r3, #6
    2b2a:	strbhi	r3, [r4, #0]

	switch(irparams.rcvstate) {
    2b2c:	ldrb	r3, [r4, #0]
    2b2e:	subs	r3, #2
    2b30:	cmp	r3, #4
    2b32:	bhi.n	2b48 <cmt_isr+0x40>
    2b34:	tbb	[pc, r3]
    2b38:	.word	0x5b1c4740
    2b3c:	.byte	0x03
    2b3d:	.byte	0x00
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
    2b3e:	movs	r2, #1
			irparams.rcvstate = STATE_STOP;
    2b40:	movs	r3, #5
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
		 	break;
		//......................................................................
		case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
			irparams.overflow = true;
    2b42:	strb.w	r2, [r4, #416]	; 0x1a0
			irparams.rcvstate = STATE_STOP;
    2b46:	strb	r3, [r4, #0]
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
    2b48:	ldrb	r3, [r4, #3]
    2b4a:	cbz	r3, 2b94 <cmt_isr+0x8c>
		if (irdata == MARK)
    2b4c:	cbnz	r0, 2b96 <cmt_isr+0x8e>
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    2b4e:	ldrb	r3, [r4, #2]
    2b50:	ldr	r2, [pc, #244]	; (2c48 <cmt_isr+0x140>)
    2b52:	cmp	r3, #0
    2b54:	bne.n	2c10 <cmt_isr+0x108>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2b56:	ldr	r2, [pc, #244]	; (2c4c <cmt_isr+0x144>)
			digitalWriteFast(12, HIGH);
			if (!(CORE_PIN12_DDRREG & CORE_PIN12_BIT)) CORE_PIN12_CONFIG = CONFIG_PULLUP;
		}
		if (val & (1<<5)) {
			digitalWriteFast(13, HIGH);
			if (!(CORE_PIN13_DDRREG & CORE_PIN13_BIT)) CORE_PIN13_CONFIG = CONFIG_PULLUP;
    2b58:	ldr	r3, [pc, #244]	; (2c50 <cmt_isr+0x148>)
    2b5a:	movs	r1, #32
    2b5c:	str	r1, [r2, #0]
    2b5e:	ldr	r3, [r3, #0]
    2b60:	tst.w	r3, #5
    2b64:	bne.n	2b94 <cmt_isr+0x8c>
    2b66:	ldr	r3, [pc, #236]	; (2c54 <cmt_isr+0x14c>)
    2b68:	movw	r2, #259	; 0x103
    2b6c:	str	r2, [r3, #0]
    2b6e:	pop	{r4, pc}
				irparams.rcvstate                  = STATE_SPACE;
			}
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
    2b70:	cmp	r0, #0
    2b72:	bne.n	2bf6 <cmt_isr+0xee>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    2b74:	ldrb	r3, [r4, #4]
    2b76:	uxtb	r3, r3
    2b78:	adds	r2, r3, #1
    2b7a:	uxtb	r2, r2
    2b7c:	adds	r3, #2
    2b7e:	strb	r2, [r4, #4]
    2b80:	add.w	r3, r4, r3, lsl #2
    2b84:	ldr	r2, [r4, #8]
    2b86:	str	r2, [r3, #4]
				irparams.timer                     = 0;
				irparams.rcvstate                  = STATE_MARK;
    2b88:	movs	r3, #3
			break;
		//......................................................................
		case STATE_SPACE:  // Timing Space
			if (irdata == MARK) {  // Space just ended; Record time
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
				irparams.timer                     = 0;
    2b8a:	str	r0, [r4, #8]
				irparams.rcvstate                  = STATE_MARK;
    2b8c:	strb	r3, [r4, #0]
			irparams.rcvstate = STATE_STOP;
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
    2b8e:	ldrb	r3, [r4, #3]
    2b90:	cmp	r3, #0
    2b92:	bne.n	2b4e <cmt_isr+0x46>
    2b94:	pop	{r4, pc}
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    2b96:	ldrb	r3, [r4, #2]
    2b98:	ldr	r2, [pc, #172]	; (2c48 <cmt_isr+0x140>)
    2b9a:	cmp	r3, #0
    2b9c:	bne.n	2c04 <cmt_isr+0xfc>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2b9e:	ldr	r2, [pc, #184]	; (2c58 <cmt_isr+0x150>)
			digitalWriteFast(12, LOW);
			if (!(CORE_PIN12_DDRREG & CORE_PIN12_BIT)) CORE_PIN12_CONFIG = CONFIG_NOPULLUP;
		}
		if (!(val & (1<<5))) {
			digitalWriteFast(13, LOW);
			if (!(CORE_PIN13_DDRREG & CORE_PIN13_BIT)) CORE_PIN13_CONFIG = CONFIG_NOPULLUP;
    2ba0:	ldr	r3, [pc, #172]	; (2c50 <cmt_isr+0x148>)
    2ba2:	movs	r1, #32
    2ba4:	str	r1, [r2, #0]
    2ba6:	ldr	r3, [r3, #0]
    2ba8:	tst.w	r3, #5
    2bac:	bne.n	2b94 <cmt_isr+0x8c>
    2bae:	ldr	r3, [pc, #164]	; (2c54 <cmt_isr+0x14c>)
    2bb0:	mov.w	r2, #256	; 0x100
    2bb4:	str	r2, [r3, #0]
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
	}
}
    2bb6:	pop	{r4, pc}
	if (irparams.rawlen >= RAWBUF)  irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow

	switch(irparams.rcvstate) {
		//......................................................................
		case STATE_IDLE: // In the middle of a gap
			if (irdata == MARK) {
    2bb8:	cbnz	r0, 2be6 <cmt_isr+0xde>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
    2bba:	ldr	r2, [r4, #8]
    2bbc:	ldr	r3, [pc, #136]	; (2c48 <cmt_isr+0x140>)
    2bbe:	cmp	r2, #99	; 0x63
    2bc0:	bhi.n	2c1c <cmt_isr+0x114>
					irparams.timer = 0;
    2bc2:	str	r0, [r3, #8]
    2bc4:	b.n	2b8e <cmt_isr+0x86>
				}
			}
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
    2bc6:	cmp	r0, #1
    2bc8:	bne.n	2b48 <cmt_isr+0x40>
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    2bca:	ldrb	r3, [r4, #4]
    2bcc:	uxtb	r3, r3
    2bce:	adds	r2, r3, #1
    2bd0:	uxtb	r2, r2
    2bd2:	adds	r3, #2
    2bd4:	strb	r2, [r4, #4]
    2bd6:	add.w	r3, r4, r3, lsl #2
    2bda:	ldr	r2, [r4, #8]
    2bdc:	str	r2, [r3, #4]
				irparams.timer                     = 0;
    2bde:	movs	r2, #0
				irparams.rcvstate                  = STATE_SPACE;
    2be0:	movs	r3, #4
			break;
		//......................................................................
		case STATE_MARK:  // Timing Mark
			if (irdata == SPACE) {   // Mark ended; Record time
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
				irparams.timer                     = 0;
    2be2:	str	r2, [r4, #8]
				irparams.rcvstate                  = STATE_SPACE;
    2be4:	strb	r3, [r4, #0]
			irparams.rcvstate = STATE_STOP;
		 	break;
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
    2be6:	ldrb	r3, [r4, #3]
    2be8:	cmp	r3, #0
    2bea:	bne.n	2b96 <cmt_isr+0x8e>
    2bec:	pop	{r4, pc}
					irparams.rcvstate = STATE_STOP;
			}
			break;
		//......................................................................
		case STATE_STOP:  // Waiting; Measuring Gap
		 	if (irdata == MARK)  irparams.timer = 0 ;  // Reset gap timer
    2bee:	cmp	r0, #0
    2bf0:	bne.n	2be6 <cmt_isr+0xde>
    2bf2:	str	r0, [r4, #8]
    2bf4:	b.n	2b8e <cmt_isr+0x86>
			if (irdata == MARK) {  // Space just ended; Record time
				irparams.rawbuf[irparams.rawlen++] = irparams.timer;
				irparams.timer                     = 0;
				irparams.rcvstate                  = STATE_MARK;

			} else if (irparams.timer > GAP_TICKS) {  // Space
    2bf6:	ldr	r3, [r4, #8]
    2bf8:	ldr	r2, [pc, #76]	; (2c48 <cmt_isr+0x140>)
    2bfa:	cmp	r3, #100	; 0x64
    2bfc:	bls.n	2be6 <cmt_isr+0xde>
					// A long Space, indicates gap between codes
					// Flag the current code as ready for processing
					// Switch to STOP
					// Don't reset timer; keep counting Space width
					irparams.rcvstate = STATE_STOP;
    2bfe:	movs	r3, #5
    2c00:	strb	r3, [r2, #0]
    2c02:	b.n	2be6 <cmt_isr+0xde>
	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    2c04:	ldrb	r0, [r2, #2]
    2c06:	movs	r1, #0
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
	}
}
    2c08:	ldmia.w	sp!, {r4, lr}
	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
    2c0c:	b.w	32c0 <digitalWrite>
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    2c10:	ldrb	r0, [r2, #2]
    2c12:	movs	r1, #1
				else BLINKLED_ON() ;   // if no user defined LED pin, turn default LED pin for the hardware on
		else if (irparams.blinkpin) digitalWrite(irparams.blinkpin, LOW); // Turn user defined pin LED on
				else BLINKLED_OFF() ;   // if no user defined LED pin, turn default LED pin for the hardware on
	}
}
    2c14:	ldmia.w	sp!, {r4, lr}
	}

	// If requested, flash LED while receiving IR data
	if (irparams.blinkflag) {
		if (irdata == MARK)
			if (irparams.blinkpin) digitalWrite(irparams.blinkpin, HIGH); // Turn user defined pin LED on
    2c18:	b.w	32c0 <digitalWrite>
				if (irparams.timer < GAP_TICKS)  {  // Not big enough to be a gap.
					irparams.timer = 0;

				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
    2c1c:	strb.w	r0, [r3, #416]	; 0x1a0
					irparams.rawlen                    = 0;
    2c20:	strb	r0, [r3, #4]
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
    2c22:	ldrb	r2, [r3, #4]
    2c24:	uxtb	r2, r2
    2c26:	adds	r1, r2, #1
    2c28:	uxtb	r1, r1
    2c2a:	adds	r2, #2
    2c2c:	strb	r1, [r3, #4]
    2c2e:	add.w	r2, r3, r2, lsl #2
    2c32:	ldr	r1, [r3, #8]
    2c34:	str	r1, [r2, #4]
					irparams.timer                     = 0;
					irparams.rcvstate                  = STATE_MARK;
    2c36:	movs	r2, #3
				} else {
					// Gap just ended; Record duration; Start recording transmission
					irparams.overflow                  = false;
					irparams.rawlen                    = 0;
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
					irparams.timer                     = 0;
    2c38:	str	r0, [r3, #8]
					irparams.rcvstate                  = STATE_MARK;
    2c3a:	strb	r2, [r3, #0]
    2c3c:	b.n	2b8e <cmt_isr+0x86>
    2c3e:	nop
    2c40:	.word	0x40062005
    2c44:	.word	0x40062007
    2c48:	.word	0x1fffae34
    2c4c:	.word	0x400ff084
    2c50:	.word	0x400ff094
    2c54:	.word	0x4004b014
    2c58:	.word	0x400ff088

00002c5c <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    2c5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    2c60:	add.w	lr, r0, #256	; 0x100

00002c64 <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    2c64:	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    2c68:	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    2c6c:	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    2c70:	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    2c74:	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    2c78:	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    2c7c:	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    2c80:	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    2c84:	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    2c88:	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    2c8c:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    2c90:	cmp	lr, r0
	bne .loopLR
    2c92:	bne.n	2c64 <.loopLR>

	pop	{r4-r11,r14}	
    2c94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8,r14}	
#endif
	BX lr
    2c98:	bx	lr

00002c9a <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    2c9a:	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    2c9e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    2ca2:	add.w	ip, r0, #256	; 0x100
    2ca6:	nop

00002ca8 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    2ca8:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    2cac:	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    2cb0:	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    2cb4:	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    2cb8:	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    2cbc:	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    2cc0:	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    2cc4:	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    2cc8:	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    2ccc:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    2cd0:	cmp	ip, r0
	bne .loopL
    2cd2:	bne.n	2ca8 <.loopL>

	pop	{r4-r11}
    2cd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    2cd8:	bx	lr

00002cda <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    2cda:	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    2cde:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    2ce2:	add.w	ip, r0, #256	; 0x100
    2ce6:	nop

00002ce8 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    2ce8:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    2cec:	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    2cf0:	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    2cf4:	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    2cf8:	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    2cfc:	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    2d00:	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    2d04:	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    2d08:	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    2d0c:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    2d10:	cmp	ip, r0
	bne .loopR
    2d12:	bne.n	2ce8 <.loopR>

	pop	{r4-r11}
    2d14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    2d18:	bx	lr

00002d1a <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    2d1a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    2d1e:	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    2d20:	add.w	fp, r0, #512	; 0x200

00002d24 <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    2d24:	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    2d28:	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    2d2c:	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    2d30:	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    2d34:	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    2d38:	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    2d3c:	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    2d40:	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    2d44:	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    2d48:	cmp	fp, r0
	bne .loopQuad
    2d4a:	bne.n	2d24 <.loopQuad>

	pop	{r4-r11}
    2d4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    2d50:	bx	lr
    2d52:	nop

00002d54 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2d54:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2d56:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2d5a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    2d5e:	bne.n	2e3c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2d60:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    2d62:	bcc.n	2de8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2d64:	ldr.w	r3, [r1], #4
    2d68:	str.w	r3, [r0], #4
    2d6c:	ldr.w	r3, [r1], #4
    2d70:	str.w	r3, [r0], #4
    2d74:	ldr.w	r3, [r1], #4
    2d78:	str.w	r3, [r0], #4
    2d7c:	ldr.w	r3, [r1], #4
    2d80:	str.w	r3, [r0], #4
    2d84:	ldr.w	r3, [r1], #4
    2d88:	str.w	r3, [r0], #4
    2d8c:	ldr.w	r3, [r1], #4
    2d90:	str.w	r3, [r0], #4
    2d94:	ldr.w	r3, [r1], #4
    2d98:	str.w	r3, [r0], #4
    2d9c:	ldr.w	r3, [r1], #4
    2da0:	str.w	r3, [r0], #4
    2da4:	ldr.w	r3, [r1], #4
    2da8:	str.w	r3, [r0], #4
    2dac:	ldr.w	r3, [r1], #4
    2db0:	str.w	r3, [r0], #4
    2db4:	ldr.w	r3, [r1], #4
    2db8:	str.w	r3, [r0], #4
    2dbc:	ldr.w	r3, [r1], #4
    2dc0:	str.w	r3, [r0], #4
    2dc4:	ldr.w	r3, [r1], #4
    2dc8:	str.w	r3, [r0], #4
    2dcc:	ldr.w	r3, [r1], #4
    2dd0:	str.w	r3, [r0], #4
    2dd4:	ldr.w	r3, [r1], #4
    2dd8:	str.w	r3, [r0], #4
    2ddc:	ldr.w	r3, [r1], #4
    2de0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2de4:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2de6:	bcs.n	2d64 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2de8:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2dea:	bcc.n	2e10 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2dec:	ldr.w	r3, [r1], #4
    2df0:	str.w	r3, [r0], #4
    2df4:	ldr.w	r3, [r1], #4
    2df8:	str.w	r3, [r0], #4
    2dfc:	ldr.w	r3, [r1], #4
    2e00:	str.w	r3, [r0], #4
    2e04:	ldr.w	r3, [r1], #4
    2e08:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2e0c:	subs	r2, #16
	bhs	.Lmid_block_loop
    2e0e:	bcs.n	2dec <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2e10:	adds	r2, #12
	blo	.Lcopy_less_than_4
    2e12:	bcc.n	2e20 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2e14:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2e18:	str.w	r3, [r0], #4
	subs	r2, #4
    2e1c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2e1e:	bcs.n	2e14 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2e20:	adds	r2, #4
	beq	.Ldone
    2e22:	beq.n	2e36 <memcpy+0xe2>

	lsls	r2, r2, #31
    2e24:	lsls	r2, r2, #31
	itt ne
    2e26:	itt	ne
	ldrbne  r3, [r1], #1
    2e28:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2e2c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2e30:	bcc.n	2e36 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    2e32:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2e34:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2e36:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2e38:	bx	lr
    2e3a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2e3c:	cmp	r2, #8
	blo	.Lbyte_copy
    2e3e:	bcc.n	2e68 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2e40:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2e42:	beq.n	2d60 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2e44:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2e48:	beq.n	2d60 <memcpy+0xc>

	rsb	r3, #4
    2e4a:	rsb	r3, r3, #4
	subs	r2, r3
    2e4e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    2e50:	lsls	r3, r3, #31
	itt ne
    2e52:	itt	ne
	ldrbne  r3, [r1], #1
    2e54:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2e58:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2e5c:	bcc.n	2d60 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2e5e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2e62:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2e66:	b.n	2d60 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2e68:	subs	r2, #4
	blo	.Lcopy_less_than_4
    2e6a:	bcc.n	2e20 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2e6c:	subs	r2, #1
	ldrb    r3, [r1], #1
    2e6e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2e72:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2e76:	bcs.n	2e6c <memcpy+0x118>

	ldrb	r3, [r1]
    2e78:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2e7a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2e7c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2e7e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2e80:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2e82:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2e84:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2e86:	bx	lr

00002e88 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2e88:	ldr	r3, [pc, #16]	; (2e9c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    2e8a:	ldr	r2, [pc, #20]	; (2ea0 <usb_serial_available+0x18>)
    2e8c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    2e8e:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2e90:	cbz	r3, 2e9a <usb_serial_available+0x12>
    2e92:	ldrh	r2, [r3, #0]
    2e94:	ldrh	r3, [r3, #2]
    2e96:	subs	r3, r2, r3
    2e98:	add	r0, r3
	return count;
}
    2e9a:	bx	lr
    2e9c:	.word	0x1fffafe0
    2ea0:	.word	0x1fffb2f4

00002ea4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    2ea4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    2ea6:	ldr	r3, [pc, #56]	; (2ee0 <usb_serial_flush_callback+0x3c>)
    2ea8:	ldrb	r3, [r3, #0]
    2eaa:	cbnz	r3, 2eca <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    2eac:	ldr	r4, [pc, #52]	; (2ee4 <usb_serial_flush_callback+0x40>)
    2eae:	ldr	r1, [r4, #0]
    2eb0:	cbz	r1, 2ecc <usb_serial_flush_callback+0x28>
    2eb2:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    2eb6:	ldrh	r3, [r1, #2]
    2eb8:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    2eba:	movs	r0, #4
    2ebc:	bl	35c4 <usb_tx>
		tx_packet = NULL;
    2ec0:	str	r5, [r4, #0]
    2ec2:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    2ec4:	ldr	r3, [pc, #32]	; (2ee8 <usb_serial_flush_callback+0x44>)
    2ec6:	movs	r2, #1
    2ec8:	strb	r2, [r3, #0]
    2eca:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    2ecc:	bl	3470 <usb_malloc>
		if (tx) {
    2ed0:	cmp	r0, #0
    2ed2:	beq.n	2ec4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    2ed4:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    2ed6:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    2eda:	movs	r0, #4
    2edc:	b.w	35c4 <usb_tx>
    2ee0:	.word	0x1fffafd9
    2ee4:	.word	0x1fffafdc
    2ee8:	.word	0x1fffafd8

00002eec <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2eec:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2eee:	ldr	r0, [pc, #164]	; (2f94 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2ef0:	ldr	r2, [pc, #164]	; (2f98 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2ef2:	ldr	r3, [pc, #168]	; (2f9c <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2ef4:	ldr	r5, [pc, #168]	; (2fa0 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2ef6:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2ef8:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2efa:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2efc:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    2efe:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2f00:	ldr	r4, [pc, #160]	; (2fa4 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2f02:	cmp	r3, #8
    2f04:	beq.n	2f68 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2f06:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2f08:	ldr	r0, [pc, #156]	; (2fa8 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2f0a:	ldr	r1, [pc, #160]	; (2fac <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2f0c:	beq.n	2f7e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2f0e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2f10:	ite	eq
    2f12:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2f14:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2f16:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2f18:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2f1a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2f1c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2f1e:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2f20:	ldr	r3, [pc, #140]	; (2fb0 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2f22:	ldr	r1, [pc, #144]	; (2fb4 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2f24:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2f26:	ldr	r2, [pc, #144]	; (2fb8 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2f28:	cbz	r3, 2f5a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2f2a:	movs	r3, #1
    2f2c:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2f2e:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2f30:	ldr	r3, [pc, #136]	; (2fbc <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2f32:	ldr	r1, [pc, #140]	; (2fc0 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2f34:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2f36:	ldr	r2, [pc, #140]	; (2fc4 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    2f38:	cmp	r3, #1
    2f3a:	bls.n	2f8a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2f3c:	cmp	r3, #4
    2f3e:	bls.n	2f60 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2f40:	cmp	r3, #8
    2f42:	bls.n	2f82 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2f44:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    2f46:	ite	ls
    2f48:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2f4a:	movhi	r3, #135	; 0x87
    2f4c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2f4e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2f50:	ldr	r3, [pc, #116]	; (2fc8 <analog_init+0xdc>)
    2f52:	movs	r2, #1
    2f54:	strb	r2, [r3, #0]
}
    2f56:	pop	{r4, r5}
    2f58:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2f5a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2f5c:	str	r3, [r2, #0]
    2f5e:	b.n	2f30 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2f60:	movs	r3, #132	; 0x84
    2f62:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2f64:	str	r3, [r2, #0]
    2f66:	b.n	2f50 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2f68:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2f6c:	ldr	r1, [pc, #60]	; (2fac <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2f6e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2f70:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2f72:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2f74:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2f76:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2f78:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2f7a:	str	r3, [r1, #0]
    2f7c:	b.n	2f20 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    2f7e:	movs	r2, #57	; 0x39
    2f80:	b.n	2f72 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2f82:	movs	r3, #133	; 0x85
    2f84:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    2f86:	str	r3, [r2, #0]
    2f88:	b.n	2f50 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2f8a:	movs	r3, #128	; 0x80
    2f8c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    2f8e:	str	r3, [r2, #0]
    2f90:	b.n	2f50 <analog_init+0x64>
    2f92:	nop
    2f94:	.word	0x40074000
    2f98:	.word	0x40074001
    2f9c:	.word	0x1fff8b14
    2fa0:	.word	0x4003b008
    2fa4:	.word	0x4003b00c
    2fa8:	.word	0x400bb008
    2fac:	.word	0x400bb00c
    2fb0:	.word	0x1fffafe6
    2fb4:	.word	0x4003b020
    2fb8:	.word	0x400bb020
    2fbc:	.word	0x1fff8b15
    2fc0:	.word	0x4003b024
    2fc4:	.word	0x400bb024
    2fc8:	.word	0x1fffafe5

00002fcc <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    2fcc:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2fce:	ldr	r4, [pc, #64]	; (3010 <fault_isr+0x44>)
    2fd0:	b.n	2fe4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2fd2:	ldr	r3, [r4, #0]
    2fd4:	lsls	r1, r3, #21
    2fd6:	bmi.n	2ff4 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2fd8:	ldr	r3, [r4, #0]
    2fda:	lsls	r2, r3, #20
    2fdc:	bmi.n	2ffe <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2fde:	ldr	r3, [r4, #0]
    2fe0:	lsls	r3, r3, #19
    2fe2:	bmi.n	3008 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2fe4:	ldr	r3, [r4, #0]
    2fe6:	lsls	r0, r3, #13
    2fe8:	bpl.n	2fd2 <fault_isr+0x6>
    2fea:	bl	3648 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2fee:	ldr	r3, [r4, #0]
    2ff0:	lsls	r1, r3, #21
    2ff2:	bpl.n	2fd8 <fault_isr+0xc>
    2ff4:	bl	4a08 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2ff8:	ldr	r3, [r4, #0]
    2ffa:	lsls	r2, r3, #20
    2ffc:	bpl.n	2fde <fault_isr+0x12>
    2ffe:	bl	48dc <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3002:	ldr	r3, [r4, #0]
    3004:	lsls	r3, r3, #19
    3006:	bpl.n	2fe4 <fault_isr+0x18>
    3008:	bl	4c04 <uart2_status_isr>
    300c:	b.n	2fe4 <fault_isr+0x18>
    300e:	nop
    3010:	.word	0x40048034

00003014 <unused_isr>:
	}
}

void unused_isr(void)
{
    3014:	push	{r3, lr}
	fault_isr();
    3016:	bl	2fcc <fault_isr>
    301a:	nop

0000301c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    301c:	ldr	r3, [pc, #4]	; (3024 <startup_early_hook+0x8>)
    301e:	movs	r2, #16
    3020:	strh	r2, [r3, #0]
    3022:	bx	lr
    3024:	.word	0x40052000

00003028 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3028:	bx	lr
    302a:	nop

0000302c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    302c:	ldr	r1, [pc, #36]	; (3054 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    302e:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3030:	ldr	r3, [r1, #0]
	if (incr != 0) {
    3032:	cbz	r0, 3042 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3034:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3036:	add	r0, r3
    3038:	sub.w	r2, r2, #4096	; 0x1000
    303c:	cmp	r0, r2
    303e:	bcs.n	3046 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3040:	str	r0, [r1, #0]
	}
	return prev;
    3042:	mov	r0, r3
}
    3044:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3046:	bl	51f8 <__errno>
    304a:	movs	r3, #12
    304c:	str	r3, [r0, #0]
			return (void *)-1;
    304e:	mov.w	r0, #4294967295
    3052:	pop	{r3, pc}
    3054:	.word	0x1fff8b18

00003058 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    3058:	b.n	3058 <__cxa_pure_virtual>
    305a:	nop

0000305c <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    305c:	bx	lr
    305e:	nop

00003060 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    3060:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    3062:	ldr	r3, [pc, #60]	; (30a0 <digitalWrite.part.1+0x40>)
    3064:	ldr.w	r2, [r3, r0, lsl #3]
    3068:	ldrb.w	r4, [r2, #640]	; 0x280
    306c:	cbz	r4, 307a <digitalWrite.part.1+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    306e:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    3070:	cbz	r1, 308e <digitalWrite.part.1+0x2e>
			*portSetRegister(pin) = 1;
    3072:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    3076:	pop	{r4}
    3078:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    307a:	add.w	r3, r3, r0, lsl #3
    307e:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    3080:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    3082:	cbnz	r1, 3096 <digitalWrite.part.1+0x36>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    3084:	bic.w	r2, r2, #2
    3088:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    308a:	pop	{r4}
    308c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    308e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    3092:	pop	{r4}
    3094:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    3096:	orr.w	r2, r2, #3
    309a:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    309c:	pop	{r4}
    309e:	bx	lr
    30a0:	.word	0x00005da8

000030a4 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    30a4:	ldr	r2, [pc, #112]	; (3118 <pinMode.part.2+0x74>)
    30a6:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    30aa:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    30ac:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    30ae:	beq.n	30d4 <pinMode.part.2+0x30>
    30b0:	cmp	r1, #4
    30b2:	beq.n	30ec <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    30b4:	ldr.w	r0, [r2, r0, lsl #3]
    30b8:	movs	r2, #0
    30ba:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    30be:	cbz	r1, 30cc <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    30c0:	cmp	r1, #2
    30c2:	beq.n	3106 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    30c4:	cmp	r1, #3
    30c6:	beq.n	310e <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    30c8:	str	r2, [r3, #0]
    30ca:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    30cc:	mov.w	r2, #256	; 0x100
    30d0:	str	r2, [r3, #0]
    30d2:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    30d4:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    30d8:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    30dc:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    30e0:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    30e2:	ldr	r2, [r3, #0]
    30e4:	bic.w	r2, r2, #32
    30e8:	str	r2, [r3, #0]
    30ea:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    30ec:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    30f0:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    30f4:	movs	r0, #1
    30f6:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    30fa:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    30fc:	ldr	r2, [r3, #0]
    30fe:	orr.w	r2, r2, #32
    3102:	str	r2, [r3, #0]
    3104:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    3106:	movw	r2, #259	; 0x103
    310a:	str	r2, [r3, #0]
    310c:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    310e:	mov.w	r2, #258	; 0x102
    3112:	str	r2, [r3, #0]
    3114:	bx	lr
    3116:	nop
    3118:	.word	0x00005da8

0000311c <attachInterrupt>:
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    311c:	cmp	r0, #33	; 0x21
    311e:	bhi.n	31b2 <attachInterrupt+0x96>
{
	_VectorsRam[irq + 16] = function;
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
    3120:	push	{r3, r4, r5, r6, r7, lr}
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    3122:	cmp	r2, #4
    3124:	bhi.n	31b0 <attachInterrupt+0x94>
    3126:	tbb	[pc, r2]
    312a:	.short	0x4b48
    312c:	.short	0x034e
    312e:	.byte	0x45
    312f:	.byte	0x00
    3130:	mov.w	r6, #589824	; 0x90000
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);
    3134:	ldr	r3, [pc, #172]	; (31e4 <attachInterrupt+0xc8>)
    3136:	add.w	r3, r3, r0, lsl #3
    313a:	mov	r5, r1
    313c:	ldr	r4, [r3, #4]
	if ((*config & 0x00000700) == 0) {
    313e:	ldr	r1, [r4, #0]
    3140:	ands.w	r1, r1, #1792	; 0x700
    3144:	beq.n	31d8 <attachInterrupt+0xbc>
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    3146:	ldr	r3, [pc, #160]	; (31e8 <attachInterrupt+0xcc>)
    3148:	ldr	r2, [pc, #160]	; (31ec <attachInterrupt+0xd0>)
    314a:	ldr	r1, [pc, #164]	; (31f0 <attachInterrupt+0xd4>)
    314c:	str.w	r2, [r3, #412]	; 0x19c

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    3150:	add.w	r2, r4, #3221225472	; 0xc0000000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    3154:	ldr	r0, [pc, #156]	; (31f4 <attachInterrupt+0xd8>)
    3156:	str.w	r1, [r3, #420]	; 0x1a4

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    315a:	sub.w	r1, r2, #299008	; 0x49000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    315e:	ldr	r7, [pc, #152]	; (31f8 <attachInterrupt+0xdc>)
    3160:	str.w	r0, [r3, #416]	; 0x1a0

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    3164:	cmp	r1, #124	; 0x7c
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    3166:	ldr	r0, [pc, #148]	; (31fc <attachInterrupt+0xe0>)
    3168:	str.w	r7, [r3, #424]	; 0x1a8
    316c:	str.w	r0, [r3, #428]	; 0x1ac

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    3170:	bls.n	31cc <attachInterrupt+0xb0>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    3172:	sub.w	r3, r2, #303104	; 0x4a000
    3176:	cmp	r3, #124	; 0x7c
    3178:	bls.n	31d0 <attachInterrupt+0xb4>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    317a:	sub.w	r3, r2, #307200	; 0x4b000
    317e:	cmp	r3, #124	; 0x7c
    3180:	bls.n	31d4 <attachInterrupt+0xb8>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    3182:	sub.w	r3, r2, #311296	; 0x4c000
    3186:	cmp	r3, #124	; 0x7c
    3188:	bls.n	31de <attachInterrupt+0xc2>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    318a:	sub.w	r2, r2, #315392	; 0x4d000
    318e:	cmp	r2, #124	; 0x7c
    3190:	bhi.n	31e2 <attachInterrupt+0xc6>
    3192:	ldr	r0, [pc, #108]	; (3200 <attachInterrupt+0xe4>)
	attachInterruptVector(IRQ_PORTD, port_D_isr);
	attachInterruptVector(IRQ_PORTE, port_E_isr);
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    3194:	cpsid	i
	cfg = *config;
    3196:	ldr	r3, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    3198:	bic.w	r3, r3, #983040	; 0xf0000
    319c:	orr.w	r2, r3, #16777216	; 0x1000000
	*config = cfg;
	isr_table[pin_index] = function;	// set the function pointer
    31a0:	ubfx	r1, r4, #2, #5
	cfg |= mask;
    31a4:	orrs	r6, r2
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
    31a6:	str	r3, [r4, #0]
	isr_table[pin_index] = function;	// set the function pointer
    31a8:	str.w	r5, [r0, r1, lsl #2]
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
    31ac:	str	r6, [r4, #0]
	__enable_irq();
    31ae:	cpsie	i
    31b0:	pop	{r3, r4, r5, r6, r7, pc}
    31b2:	bx	lr
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    31b4:	mov.w	r6, #720896	; 0xb0000
    31b8:	b.n	3134 <attachInterrupt+0x18>
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
    31ba:	mov.w	r6, #524288	; 0x80000
    31be:	b.n	3134 <attachInterrupt+0x18>
	  case HIGH:	mask = 0x0C; break;
    31c0:	mov.w	r6, #786432	; 0xc0000
    31c4:	b.n	3134 <attachInterrupt+0x18>
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    31c6:	mov.w	r6, #655360	; 0xa0000
    31ca:	b.n	3134 <attachInterrupt+0x18>

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    31cc:	ldr	r0, [pc, #52]	; (3204 <attachInterrupt+0xe8>)
    31ce:	b.n	3194 <attachInterrupt+0x78>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    31d0:	ldr	r0, [pc, #52]	; (3208 <attachInterrupt+0xec>)
    31d2:	b.n	3194 <attachInterrupt+0x78>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    31d4:	ldr	r0, [pc, #52]	; (320c <attachInterrupt+0xf0>)
    31d6:	b.n	3194 <attachInterrupt+0x78>
    31d8:	bl	30a4 <pinMode.part.2>
    31dc:	b.n	3146 <attachInterrupt+0x2a>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    31de:	ldr	r0, [pc, #48]	; (3210 <attachInterrupt+0xf4>)
    31e0:	b.n	3194 <attachInterrupt+0x78>
    31e2:	pop	{r3, r4, r5, r6, r7, pc}
    31e4:	.word	0x00005da8
    31e8:	.word	0x1fff8400
    31ec:	.word	0x1fff89d1
    31f0:	.word	0x1fff8979
    31f4:	.word	0x1fff89a5
    31f8:	.word	0x1fff894d
    31fc:	.word	0x1fff8921
    3200:	.word	0x1fff8bf4
    3204:	.word	0x1fff8b1c
    3208:	.word	0x1fff8b54
    320c:	.word	0x1fff8ba4
    3210:	.word	0x1fff8bd4

00003214 <detachInterrupt>:

void detachInterrupt(uint8_t pin)
{
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    3214:	ldr	r3, [pc, #104]	; (3280 <detachInterrupt+0x6c>)
    3216:	add.w	r0, r3, r0, lsl #3
	__enable_irq();
#endif
}

void detachInterrupt(uint8_t pin)
{
    321a:	push	{r4}
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    321c:	ldr	r2, [r0, #4]

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    321e:	add.w	r3, r2, #3221225472	; 0xc0000000
    3222:	sub.w	r1, r3, #299008	; 0x49000
    3226:	cmp	r1, #124	; 0x7c
    3228:	bls.n	3272 <detachInterrupt+0x5e>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    322a:	sub.w	r1, r3, #303104	; 0x4a000
    322e:	cmp	r1, #124	; 0x7c
    3230:	bls.n	324e <detachInterrupt+0x3a>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    3232:	sub.w	r1, r3, #307200	; 0x4b000
    3236:	cmp	r1, #124	; 0x7c
    3238:	bls.n	327a <detachInterrupt+0x66>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    323a:	sub.w	r1, r3, #311296	; 0x4c000
    323e:	cmp	r1, #124	; 0x7c
    3240:	bls.n	3276 <detachInterrupt+0x62>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    3242:	sub.w	r3, r3, #315392	; 0x4d000
    3246:	cmp	r3, #124	; 0x7c
    3248:	bhi.n	326e <detachInterrupt+0x5a>
    324a:	ldr	r4, [pc, #56]	; (3284 <detachInterrupt+0x70>)
    324c:	b.n	3250 <detachInterrupt+0x3c>
// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    324e:	ldr	r4, [pc, #56]	; (3288 <detachInterrupt+0x74>)
	config = portConfigRegister(pin);
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    3250:	cpsid	i
	*config = ((*config & ~0x000F0000) | 0x01000000);
    3252:	ldr	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    3254:	ldr	r0, [pc, #52]	; (328c <detachInterrupt+0x78>)
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    3256:	bic.w	r3, r3, #17694720	; 0x10e0000
	isr_table[pin_index] = dummy_isr;
    325a:	ubfx	r1, r2, #2, #5
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    325e:	bic.w	r3, r3, #65536	; 0x10000
    3262:	orr.w	r3, r3, #16777216	; 0x1000000
    3266:	str	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    3268:	str.w	r0, [r4, r1, lsl #2]
	__enable_irq();
    326c:	cpsie	i
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
	intFunc[pin] = dummy_isr;
	__enable_irq();
#endif
}
    326e:	pop	{r4}
    3270:	bx	lr

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    3272:	ldr	r4, [pc, #28]	; (3290 <detachInterrupt+0x7c>)
    3274:	b.n	3250 <detachInterrupt+0x3c>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    3276:	ldr	r4, [pc, #28]	; (3294 <detachInterrupt+0x80>)
    3278:	b.n	3250 <detachInterrupt+0x3c>
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    327a:	ldr	r4, [pc, #28]	; (3298 <detachInterrupt+0x84>)
    327c:	b.n	3250 <detachInterrupt+0x3c>
    327e:	nop
    3280:	.word	0x00005da8
    3284:	.word	0x1fff8bf4
    3288:	.word	0x1fff8b54
    328c:	.word	0x0000305d
    3290:	.word	0x1fff8b1c
    3294:	.word	0x1fff8bd4
    3298:	.word	0x1fff8ba4

0000329c <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    329c:	push	{r4, r5}
	RTC_SR = 0;
    329e:	ldr	r3, [pc, #20]	; (32b4 <rtc_set+0x18>)
	RTC_TPR = 0;
    32a0:	ldr	r5, [pc, #20]	; (32b8 <rtc_set+0x1c>)
	RTC_TSR = t;
    32a2:	ldr	r4, [pc, #24]	; (32bc <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    32a4:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    32a6:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    32a8:	str	r2, [r3, #0]
	RTC_TPR = 0;
    32aa:	str	r2, [r5, #0]
	RTC_TSR = t;
    32ac:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    32ae:	str	r1, [r3, #0]
}
    32b0:	pop	{r4, r5}
    32b2:	bx	lr
    32b4:	.word	0x4003d014
    32b8:	.word	0x4003d004
    32bc:	.word	0x4003d000

000032c0 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    32c0:	cmp	r0, #33	; 0x21
    32c2:	bhi.n	32c8 <digitalWrite+0x8>
    32c4:	b.w	3060 <digitalWrite.part.1>
    32c8:	bx	lr
    32ca:	nop

000032cc <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    32cc:	cmp	r0, #33	; 0x21
    32ce:	bhi.n	32de <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    32d0:	ldr	r3, [pc, #16]	; (32e4 <digitalRead+0x18>)
    32d2:	ldr.w	r3, [r3, r0, lsl #3]
    32d6:	ldrb.w	r0, [r3, #512]	; 0x200
    32da:	uxtb	r0, r0
    32dc:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    32de:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    32e0:	bx	lr
    32e2:	nop
    32e4:	.word	0x00005da8

000032e8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    32e8:	cmp	r0, #33	; 0x21
    32ea:	bhi.n	32f0 <pinMode+0x8>
    32ec:	b.w	30a4 <pinMode.part.2>
    32f0:	bx	lr
    32f2:	nop

000032f4 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    32f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    32f8:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    32fa:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    32fc:	ldr	r7, [pc, #128]	; (3380 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    32fe:	ldr	r3, [pc, #132]	; (3384 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3300:	ldr	r2, [pc, #132]	; (3388 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3302:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    3304:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3306:	ldr	r2, [r2, #0]
	__enable_irq();
    3308:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    330a:	lsls	r2, r2, #5
    330c:	bpl.n	3314 <delay+0x20>
    330e:	cmp	r3, #50	; 0x32
    3310:	it	hi
    3312:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    3314:	cbz	r5, 337c <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    3316:	rsb	r3, r3, #95744	; 0x17600
    331a:	ldr	r6, [pc, #112]	; (338c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    331c:	ldr.w	r9, [pc, #100]	; 3384 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3320:	ldr.w	r8, [pc, #100]	; 3388 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    3324:	adds	r3, #255	; 0xff
    3326:	mov.w	r2, #1000	; 0x3e8
    332a:	umull	r1, r3, r6, r3
    332e:	mul.w	r4, r2, r4
    3332:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    3336:	cpsid	i
	current = SYST_CVR;
    3338:	ldr.w	r1, [r9]
	count = systick_millis_count;
    333c:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    333e:	ldr.w	lr, [r8]
	__enable_irq();
    3342:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3344:	rsb	r3, r1, #95744	; 0x17600
    3348:	adds	r3, #255	; 0xff
    334a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    334e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3352:	rsb	r3, r4, r3, lsr #6
    3356:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    335a:	beq.n	3362 <delay+0x6e>
    335c:	cmp	r1, #50	; 0x32
    335e:	it	hi
    3360:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3362:	mla	r3, r0, r2, r3
    3366:	cmp.w	r3, #1000	; 0x3e8
    336a:	bcc.n	3376 <delay+0x82>
				ms--;
				if (ms == 0) return;
    336c:	subs	r5, #1
    336e:	beq.n	337c <delay+0x88>
				start += 1000;
    3370:	add.w	r4, r4, #1000	; 0x3e8
    3374:	b.n	3336 <delay+0x42>
			}
			yield();
    3376:	bl	44c4 <yield>
		}
    337a:	b.n	3336 <delay+0x42>
    337c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3380:	.word	0x1fffafe8
    3384:	.word	0xe000e018
    3388:	.word	0xe000ed04
    338c:	.word	0xaaaaaaab

00003390 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    3390:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3392:	ldr	r3, [pc, #180]	; (3448 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    3394:	ldr	r1, [pc, #180]	; (344c <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3396:	ldr.w	lr, [pc, #208]	; 3468 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    339a:	ldr.w	ip, [pc, #208]	; 346c <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    339e:	ldr	r6, [pc, #176]	; (3450 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    33a0:	ldr	r5, [pc, #176]	; (3454 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    33a2:	ldr	r4, [pc, #180]	; (3458 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    33a4:	ldr	r2, [pc, #180]	; (345c <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    33a6:	ldr	r7, [pc, #184]	; (3460 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    33a8:	mov.w	r0, #8388608	; 0x800000
    33ac:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    33ae:	mov.w	r0, #16777216	; 0x1000000
    33b2:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    33b4:	mov.w	r0, #33554432	; 0x2000000
    33b8:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    33ba:	mov.w	r0, #67108864	; 0x4000000
    33be:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    33c0:	mov.w	r0, #134217728	; 0x8000000
    33c4:	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    33c6:	movs	r0, #0
    33c8:	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    33ca:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    33cc:	movw	r1, #49151	; 0xbfff
    33d0:	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    33d4:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    33d8:	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    33da:	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    33dc:	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    33de:	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    33e0:	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    33e2:	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    33e4:	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    33e6:	movs	r2, #9
    33e8:	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    33ec:	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    33f0:	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    33f4:	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    33f8:	add.w	r7, r7, #522240	; 0x7f800
    33fc:	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    3400:	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    3404:	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    3406:	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    340a:	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    340e:	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    3412:	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    3416:	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    3418:	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    341c:	ldr	r0, [pc, #68]	; (3464 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    341e:	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    3420:	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    3424:	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    3428:	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    342a:	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    342c:	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    342e:	bl	2eec <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    3432:	movs	r0, #25
    3434:	bl	32f4 <delay>
	usb_init();
    3438:	bl	4118 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    343c:	movw	r0, #275	; 0x113
}
    3440:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    3444:	b.w	32f4 <delay>
    3448:	.word	0xe000e108
    344c:	.word	0x40038004
    3450:	.word	0x40038014
    3454:	.word	0x40038024
    3458:	.word	0x4003802c
    345c:	.word	0x4003801c
    3460:	.word	0x40038034
    3464:	.word	0x400b8000
    3468:	.word	0x4003800c
    346c:	.word	0x40038008

00003470 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3470:	cpsid	i
	avail = usb_buffer_available;
    3472:	ldr	r0, [pc, #52]	; (34a8 <usb_malloc+0x38>)
    3474:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    3476:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    347a:	cmp	r3, #11
    347c:	bgt.n	34a0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    347e:	mov.w	r1, #2147483648	; 0x80000000
    3482:	lsrs	r1, r3
    3484:	bic.w	r2, r2, r1
    3488:	str	r2, [r0, #0]
	__enable_irq();
    348a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    348c:	ldr	r0, [pc, #28]	; (34ac <usb_malloc+0x3c>)
    348e:	add.w	r3, r3, r3, lsl #3
    3492:	lsls	r3, r3, #3
    3494:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    3496:	movs	r1, #0
    3498:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    349a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    349c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    349e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    34a0:	cpsie	i
		return NULL;
    34a2:	movs	r0, #0
    34a4:	bx	lr
    34a6:	nop
    34a8:	.word	0x1fff8bfc
    34ac:	.word	0x1fff85bc

000034b0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    34b0:	ldr	r3, [pc, #52]	; (34e8 <usb_free+0x38>)
    34b2:	ldr	r2, [pc, #56]	; (34ec <usb_free+0x3c>)
    34b4:	subs	r3, r0, r3
    34b6:	umull	r2, r3, r2, r3
    34ba:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    34bc:	cmp	r3, #11
    34be:	bhi.n	34da <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    34c0:	ldr	r2, [pc, #44]	; (34f0 <usb_free+0x40>)
    34c2:	ldrb	r2, [r2, #0]
    34c4:	cbnz	r2, 34dc <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    34c6:	cpsid	i
	usb_buffer_available |= mask;
    34c8:	ldr	r0, [pc, #40]	; (34f4 <usb_free+0x44>)
    34ca:	mov.w	r1, #2147483648	; 0x80000000
    34ce:	ldr	r2, [r0, #0]
    34d0:	lsr.w	r3, r1, r3
    34d4:	orrs	r2, r3
    34d6:	str	r2, [r0, #0]
	__enable_irq();
    34d8:	cpsie	i
    34da:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    34dc:	ldr	r2, [pc, #24]	; (34f8 <usb_free+0x48>)
    34de:	ldrb	r2, [r2, #0]
    34e0:	cmp	r2, #0
    34e2:	beq.n	34c6 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    34e4:	b.w	34fc <usb_rx_memory>
    34e8:	.word	0x1fff85bc
    34ec:	.word	0x38e38e39
    34f0:	.word	0x1fffb0c1
    34f4:	.word	0x1fff8bfc
    34f8:	.word	0x1fffb0cc

000034fc <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    34fc:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    34fe:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3500:	ldr	r2, [pc, #172]	; (35b0 <usb_rx_memory+0xb4>)
    3502:	ldrb	r3, [r2, #0]
    3504:	lsls	r5, r3, #28
    3506:	bpl.n	3516 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3508:	ldr	r3, [pc, #168]	; (35b4 <usb_rx_memory+0xb8>)
    350a:	ldr	r1, [r3, #32]
    350c:	cmp	r1, #0
    350e:	beq.n	357e <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3510:	ldr	r1, [r3, #40]	; 0x28
    3512:	cmp	r1, #0
    3514:	beq.n	359a <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3516:	ldrb	r3, [r2, #1]
    3518:	lsls	r4, r3, #28
    351a:	bpl.n	352a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    351c:	ldr	r3, [pc, #148]	; (35b4 <usb_rx_memory+0xb8>)
    351e:	ldr	r1, [r3, #64]	; 0x40
    3520:	cmp	r1, #0
    3522:	beq.n	35a2 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3524:	ldr	r1, [r3, #72]	; 0x48
    3526:	cmp	r1, #0
    3528:	beq.n	359e <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    352a:	ldrb	r3, [r2, #2]
    352c:	lsls	r1, r3, #28
    352e:	bpl.n	353c <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3530:	ldr	r3, [pc, #128]	; (35b4 <usb_rx_memory+0xb8>)
    3532:	ldr	r1, [r3, #96]	; 0x60
    3534:	cmp	r1, #0
    3536:	beq.n	35a6 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3538:	ldr	r1, [r3, #104]	; 0x68
    353a:	cbz	r1, 3560 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    353c:	ldrb	r3, [r2, #3]
    353e:	lsls	r3, r3, #28
    3540:	bpl.n	3552 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3542:	ldr	r3, [pc, #112]	; (35b4 <usb_rx_memory+0xb8>)
    3544:	ldr.w	r2, [r3, #128]	; 0x80
    3548:	cbz	r2, 35aa <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    354a:	ldr.w	r2, [r3, #136]	; 0x88
    354e:	movs	r1, #17
    3550:	cbz	r2, 3562 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    3552:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    3554:	ldr	r3, [pc, #96]	; (35b8 <usb_rx_memory+0xbc>)
    3556:	movs	r2, #0
    3558:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    355a:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    355c:	b.w	34b0 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3560:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3562:	ldr	r4, [pc, #84]	; (35b8 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3564:	ldr	r5, [pc, #84]	; (35bc <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    3566:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3568:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    356c:	add.w	r3, r3, r1, lsl #3
    3570:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3572:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    3574:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3576:	strb	r2, [r4, #0]
				__enable_irq();
    3578:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    357a:	pop	{r4, r5}
    357c:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    357e:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3580:	ldr	r4, [pc, #52]	; (35b8 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3582:	ldr	r5, [pc, #60]	; (35c0 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    3584:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3586:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    358a:	add.w	r3, r3, r2, lsl #3
    358e:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3590:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3592:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3594:	strb	r2, [r4, #0]
				__enable_irq();
    3596:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    3598:	b.n	357a <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    359a:	movs	r1, #5
    359c:	b.n	3562 <usb_rx_memory+0x66>
    359e:	movs	r1, #9
    35a0:	b.n	3562 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    35a2:	movs	r2, #8
    35a4:	b.n	3580 <usb_rx_memory+0x84>
    35a6:	movs	r2, #12
    35a8:	b.n	3580 <usb_rx_memory+0x84>
    35aa:	movs	r2, #16
    35ac:	b.n	3580 <usb_rx_memory+0x84>
    35ae:	nop
    35b0:	.word	0x00005eb8
    35b4:	.word	0x1fff8000
    35b8:	.word	0x1fffb0c1
    35bc:	.word	0x004000c8
    35c0:	.word	0x00400088

000035c4 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    35c4:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    35c6:	cmp	r3, #3
    35c8:	bhi.n	3606 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    35ca:	ldr	r2, [pc, #108]	; (3638 <usb_tx+0x74>)
    35cc:	lsls	r0, r0, #5
    35ce:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    35d2:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    35d4:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    35d6:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    35d8:	ldr	r4, [pc, #96]	; (363c <usb_tx+0x78>)
    35da:	ldrb	r2, [r4, r3]
    35dc:	cmp	r2, #3
    35de:	bhi.n	3618 <usb_tx+0x54>
    35e0:	tbb	[pc, r2]
    35e4:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    35e8:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    35ea:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    35ec:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    35ee:	tst.w	r0, #8
    35f2:	ite	ne
    35f4:	movne	r3, #200	; 0xc8
    35f6:	moveq	r3, #136	; 0x88
    35f8:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    35fc:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    35fe:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3600:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    3602:	cpsie	i
}
    3604:	pop	{r4, r5}
    3606:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3608:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    360a:	movs	r2, #2
		break;
    360c:	b.n	35ea <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    360e:	movs	r2, #5
    3610:	b.n	35ea <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    3612:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    3614:	movs	r2, #4
		break;
    3616:	b.n	35ea <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3618:	ldr	r2, [pc, #36]	; (3640 <usb_tx+0x7c>)
    361a:	ldr.w	r0, [r2, r3, lsl #2]
    361e:	cbz	r0, 3630 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3620:	ldr	r2, [pc, #32]	; (3644 <usb_tx+0x80>)
    3622:	ldr.w	r0, [r2, r3, lsl #2]
    3626:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3628:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    362c:	cpsie	i
		return;
    362e:	b.n	3604 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    3630:	str.w	r1, [r2, r3, lsl #2]
    3634:	ldr	r2, [pc, #12]	; (3644 <usb_tx+0x80>)
    3636:	b.n	3628 <usb_tx+0x64>
    3638:	.word	0x1fff8000
    363c:	.word	0x1fffb0d0
    3640:	.word	0x1fffb098
    3644:	.word	0x1fffb0a8

00003648 <usb_isr>:
}



void usb_isr(void)
{
    3648:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    364c:	ldr.w	fp, [pc, #780]	; 395c <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    3650:	ldr.w	sl, [pc, #780]	; 3960 <usb_isr+0x318>
}



void usb_isr(void)
{
    3654:	sub	sp, #28
    3656:	b.n	36e2 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3658:	ldr	r7, [pc, #684]	; (3908 <usb_isr+0x2c0>)
    365a:	mov.w	r8, r3, lsr #2
    365e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3662:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3664:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3668:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    366c:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    366e:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3672:	and.w	r4, r3, #255	; 0xff
    3676:	cmp	r3, #0
    3678:	bne.w	3880 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    367c:	ldr.w	r3, [r7, r8, lsl #3]
    3680:	lsrs	r3, r3, #16
    3682:	uxth	r1, r3
    3684:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    3688:	cmp	r3, #0
    368a:	beq.w	386e <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    368e:	ldr	r3, [pc, #636]	; (390c <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3690:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    3694:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    3698:	ldr.w	r2, [r3, r6, lsl #2]
    369c:	cmp	r2, #0
    369e:	beq.w	3c2c <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    36a2:	ldr	r5, [pc, #620]	; (3910 <usb_isr+0x2c8>)
    36a4:	ldr.w	r3, [r5, r6, lsl #2]
    36a8:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    36aa:	ldr	r4, [pc, #616]	; (3914 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    36ac:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    36b0:	ldrh.w	r3, [r4, r6, lsl #1]
    36b4:	add	r1, r3
    36b6:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    36ba:	bl	3470 <usb_malloc>
					if (packet) {
    36be:	cmp	r0, #0
    36c0:	beq.w	3c1e <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    36c4:	ldr	r2, [pc, #592]	; (3918 <usb_isr+0x2d0>)
    36c6:	ldr	r3, [pc, #596]	; (391c <usb_isr+0x2d4>)
    36c8:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    36cc:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    36d0:	it	ne
    36d2:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    36d4:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    36d8:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    36dc:	movs	r3, #8
    36de:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    36e2:	ldrb.w	r4, [fp]
    36e6:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    36e8:	lsls	r1, r4, #29
    36ea:	bpl.n	3722 <usb_isr+0xda>
		if (usb_configuration) {
    36ec:	ldr	r3, [pc, #560]	; (3920 <usb_isr+0x2d8>)
    36ee:	ldrb	r3, [r3, #0]
    36f0:	cbz	r3, 371c <usb_isr+0xd4>
			t = usb_reboot_timer;
    36f2:	ldr	r1, [pc, #560]	; (3924 <usb_isr+0x2dc>)
    36f4:	ldrb	r2, [r1, #0]
			if (t) {
    36f6:	and.w	r3, r2, #255	; 0xff
    36fa:	cbz	r2, 3706 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    36fc:	subs	r3, #1
    36fe:	uxtb	r3, r3
    3700:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    3702:	cbnz	r3, 3706 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    3704:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    3706:	ldr	r1, [pc, #544]	; (3928 <usb_isr+0x2e0>)
    3708:	ldrb	r2, [r1, #0]
			if (t) {
    370a:	and.w	r3, r2, #255	; 0xff
    370e:	cbz	r2, 371c <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    3710:	subs	r3, #1
    3712:	uxtb	r3, r3
    3714:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    3716:	cmp	r3, #0
    3718:	beq.w	3bca <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    371c:	movs	r3, #4
    371e:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    3722:	and.w	r3, r4, #8
    3726:	and.w	r2, r3, #255	; 0xff
    372a:	cmp	r3, #0
    372c:	beq.w	38c8 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    3730:	ldrb.w	r3, [sl]
    3734:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    3736:	lsrs	r6, r3, #4
    3738:	bne.n	3658 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    373a:	lsrs	r4, r3, #2
    373c:	ldr.w	r9, [pc, #456]	; 3908 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3740:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    3744:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3748:	ubfx	r2, r2, #2, #4
    374c:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    374e:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    3750:	cmp	r2, #12
    3752:	bhi.w	3866 <usb_isr+0x21e>
    3756:	tbb	[pc, r2]
    375a:	.short	0x7c7c
    375c:	.word	0x86868686
    3760:	.word	0x86478686
    3764:	.short	0x8686
    3766:	.byte	0x07
    3767:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3768:	ldr	r0, [r1, #0]
    376a:	ldr	r5, [pc, #448]	; (392c <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    376c:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    376e:	ldr	r7, [pc, #448]	; (3930 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3770:	ldr	r6, [pc, #448]	; (3934 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    3772:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3774:	uxth	r1, r0
    3776:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    377a:	ldr	r3, [pc, #412]	; (3918 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    377c:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    377e:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    3782:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3784:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3786:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    378a:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    378c:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    3790:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    3794:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    3798:	ldr	r4, [pc, #364]	; (3908 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    379a:	bhi.w	3964 <usb_isr+0x31c>
    379e:	cmp.w	r1, #1664	; 0x680
    37a2:	bcs.w	3e32 <usb_isr+0x7ea>
    37a6:	cmp.w	r1, #258	; 0x102
    37aa:	beq.w	3da6 <usb_isr+0x75e>
    37ae:	bhi.w	3ccc <usb_isr+0x684>
    37b2:	cmp	r1, #128	; 0x80
    37b4:	beq.w	3ea6 <usb_isr+0x85e>
    37b8:	cmp	r1, #130	; 0x82
    37ba:	bne.w	3db2 <usb_isr+0x76a>
    37be:	ldrh	r1, [r5, #4]
    37c0:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    37c4:	cmp	r1, #4
    37c6:	bhi.w	3db2 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    37ca:	ldr	r0, [pc, #364]	; (3938 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    37cc:	ldr	r4, [pc, #364]	; (393c <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    37ce:	lsls	r1, r1, #2
    37d0:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    37d2:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    37d4:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    37d6:	ldrb	r2, [r0, #0]
    37d8:	lsls	r3, r2, #30
    37da:	bpl.w	408e <usb_isr+0xa46>
    37de:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    37e2:	mov.w	lr, #2
    37e6:	b.n	3e6e <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    37e8:	ldr	r7, [pc, #324]	; (3930 <usb_isr+0x2e8>)
    37ea:	ldr	r2, [r7, #0]
		if (data) {
    37ec:	cbz	r2, 383c <usb_isr+0x1f4>
			size = ep0_tx_len;
    37ee:	ldr	r3, [pc, #336]	; (3940 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37f0:	ldr	r6, [pc, #320]	; (3934 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    37f2:	ldr	r1, [pc, #336]	; (3944 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    37f4:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    37f6:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    37f8:	ldrb	r5, [r1, #0]
    37fa:	cmp	r0, #64	; 0x40
    37fc:	mov	lr, r0
    37fe:	orr.w	r8, r5, #2
    3802:	it	cs
    3804:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3808:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    380a:	eor.w	r4, r4, #1
    380e:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    3810:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3814:	ite	eq
    3816:	moveq	r4, #136	; 0x88
    3818:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    381a:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    381e:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3820:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3824:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3828:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    382a:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    382c:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    3830:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3832:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3834:	cmp	r0, #0
    3836:	beq.w	3ac4 <usb_isr+0x47c>
    383a:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    383c:	ldr	r3, [pc, #236]	; (392c <usb_isr+0x2e4>)
    383e:	ldrh	r2, [r3, #0]
    3840:	cmp.w	r2, #1280	; 0x500
    3844:	bne.n	3866 <usb_isr+0x21e>
			setup.bRequest = 0;
    3846:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    3848:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    384a:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    384c:	ldr	r3, [pc, #248]	; (3948 <usb_isr+0x300>)
    384e:	strb	r2, [r3, #0]
    3850:	b.n	3866 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3852:	ldr	r2, [pc, #216]	; (392c <usb_isr+0x2e4>)
    3854:	ldrh	r0, [r2, #0]
    3856:	movw	r2, #8225	; 0x2021
    385a:	cmp	r0, r2
    385c:	beq.w	3ace <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    3860:	ldr	r2, [pc, #180]	; (3918 <usb_isr+0x2d0>)
    3862:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3866:	ldr	r2, [pc, #228]	; (394c <usb_isr+0x304>)
    3868:	movs	r3, #1
    386a:	strb	r3, [r2, #0]
    386c:	b.n	36dc <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    386e:	ldr	r2, [pc, #168]	; (3918 <usb_isr+0x2d0>)
    3870:	ldr	r3, [pc, #168]	; (391c <usb_isr+0x2d4>)
    3872:	tst.w	r9, #8
    3876:	it	ne
    3878:	movne	r3, r2
    387a:	str.w	r3, [r7, r8, lsl #3]
    387e:	b.n	36dc <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    3880:	bl	34b0 <usb_free>
				packet = tx_first[endpoint];
    3884:	ldr	r2, [pc, #200]	; (3950 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3886:	ldr	r1, [pc, #204]	; (3954 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    3888:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    388c:	cmp	r3, #0
    388e:	beq.w	3c34 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3892:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    3894:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    3896:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    389a:	add.w	r2, r3, #8
    389e:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    38a2:	cmp	r4, #3
    38a4:	bhi.n	38b2 <usb_isr+0x26a>
    38a6:	tbb	[pc, r4]
    38aa:	.short	0x022c
    38ac:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    38ae:	movs	r2, #2
    38b0:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    38b2:	ldrh	r2, [r3, #0]
    38b4:	tst.w	r9, #8
    38b8:	ite	eq
    38ba:	moveq	r3, #136	; 0x88
    38bc:	movne	r3, #200	; 0xc8
    38be:	orr.w	r3, r3, r2, lsl #16
    38c2:	str.w	r3, [r7, r8, lsl #3]
    38c6:	b.n	36dc <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    38c8:	lsls	r0, r4, #31
    38ca:	bmi.w	3bd0 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    38ce:	lsls	r1, r4, #24
    38d0:	bmi.w	3cb8 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    38d4:	lsls	r2, r4, #30
    38d6:	bpl.n	38e6 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    38d8:	ldr	r2, [pc, #124]	; (3958 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    38da:	ldr	r1, [pc, #128]	; (395c <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    38dc:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    38de:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    38e0:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    38e2:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    38e4:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    38e6:	lsls	r3, r4, #27
    38e8:	bpl.n	38f0 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    38ea:	ldr	r3, [pc, #112]	; (395c <usb_isr+0x314>)
    38ec:	movs	r2, #16
    38ee:	strb	r2, [r3, #0]
	}

}
    38f0:	add	sp, #28
    38f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    38f6:	movs	r2, #4
    38f8:	strb	r2, [r1, r6]
						break;
    38fa:	b.n	38b2 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    38fc:	movs	r2, #5
    38fe:	strb	r2, [r1, r6]
						break;
    3900:	b.n	38b2 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    3902:	movs	r2, #3
    3904:	strb	r2, [r1, r6]
						break;
    3906:	b.n	38b2 <usb_isr+0x26a>
    3908:	.word	0x1fff8000
    390c:	.word	0x1fffb044
    3910:	.word	0x1fffaff0
    3914:	.word	0x1fffb2f4
    3918:	.word	0x004000c8
    391c:	.word	0x00400088
    3920:	.word	0x1fffb0cc
    3924:	.word	0x1fffb055
    3928:	.word	0x1fffafd8
    392c:	.word	0x1fffb0b8
    3930:	.word	0x1fffafec
    3934:	.word	0x1fffb054
    3938:	.word	0x400720c0
    393c:	.word	0x1fffb0c4
    3940:	.word	0x1fffb000
    3944:	.word	0x1fffb0c0
    3948:	.word	0x40072098
    394c:	.word	0x40072094
    3950:	.word	0x1fffb098
    3954:	.word	0x1fffb0d0
    3958:	.word	0x40072088
    395c:	.word	0x40072080
    3960:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3964:	movw	r0, #8225	; 0x2021
    3968:	cmp	r1, r0
    396a:	beq.w	3bc2 <usb_isr+0x57a>
    396e:	bhi.w	3b22 <usb_isr+0x4da>
    3972:	cmp.w	r1, #2176	; 0x880
    3976:	beq.w	3e66 <usb_isr+0x81e>
    397a:	cmp.w	r1, #2304	; 0x900
    397e:	bne.w	3db2 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    3982:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    3984:	ldr	r1, [pc, #716]	; (3c54 <usb_isr+0x60c>)
    3986:	ldrb	r0, [r5, #2]
    3988:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    398a:	lsls	r2, r2, #24
    398c:	bmi.w	4004 <usb_isr+0x9bc>
    3990:	ldr.w	r2, [r9, #40]	; 0x28
    3994:	ldr	r1, [pc, #704]	; (3c58 <usb_isr+0x610>)
    3996:	lsls	r3, r2, #24
    3998:	bmi.w	3fb4 <usb_isr+0x96c>
    399c:	ldr.w	r2, [r9, #48]	; 0x30
    39a0:	ldr	r1, [pc, #692]	; (3c58 <usb_isr+0x610>)
    39a2:	lsls	r5, r2, #24
    39a4:	bmi.w	3faa <usb_isr+0x962>
    39a8:	ldr.w	r2, [r9, #56]	; 0x38
    39ac:	ldr	r1, [pc, #680]	; (3c58 <usb_isr+0x610>)
    39ae:	lsls	r4, r2, #24
    39b0:	bmi.w	3fa0 <usb_isr+0x958>
    39b4:	ldr.w	r2, [r9, #64]	; 0x40
    39b8:	ldr	r1, [pc, #668]	; (3c58 <usb_isr+0x610>)
    39ba:	lsls	r0, r2, #24
    39bc:	bmi.w	4054 <usb_isr+0xa0c>
    39c0:	ldr.w	r2, [r9, #72]	; 0x48
    39c4:	ldr	r1, [pc, #656]	; (3c58 <usb_isr+0x610>)
    39c6:	lsls	r2, r2, #24
    39c8:	bmi.w	404a <usb_isr+0xa02>
    39cc:	ldr.w	r2, [r9, #80]	; 0x50
    39d0:	ldr	r1, [pc, #644]	; (3c58 <usb_isr+0x610>)
    39d2:	lsls	r3, r2, #24
    39d4:	bmi.w	4040 <usb_isr+0x9f8>
    39d8:	ldr.w	r2, [r9, #88]	; 0x58
    39dc:	ldr	r1, [pc, #632]	; (3c58 <usb_isr+0x610>)
    39de:	lsls	r5, r2, #24
    39e0:	bmi.w	4036 <usb_isr+0x9ee>
    39e4:	ldr.w	r2, [r9, #96]	; 0x60
    39e8:	ldr	r1, [pc, #620]	; (3c58 <usb_isr+0x610>)
    39ea:	lsls	r4, r2, #24
    39ec:	bmi.w	402c <usb_isr+0x9e4>
    39f0:	ldr.w	r2, [r9, #104]	; 0x68
    39f4:	ldr	r1, [pc, #608]	; (3c58 <usb_isr+0x610>)
    39f6:	lsls	r0, r2, #24
    39f8:	bmi.w	4022 <usb_isr+0x9da>
    39fc:	ldr.w	r2, [r9, #112]	; 0x70
    3a00:	ldr	r1, [pc, #596]	; (3c58 <usb_isr+0x610>)
    3a02:	lsls	r2, r2, #24
    3a04:	bmi.w	4018 <usb_isr+0x9d0>
    3a08:	ldr.w	r2, [r9, #120]	; 0x78
    3a0c:	ldr	r1, [pc, #584]	; (3c58 <usb_isr+0x610>)
    3a0e:	lsls	r3, r2, #24
    3a10:	bmi.w	400e <usb_isr+0x9c6>
    3a14:	ldr.w	r2, [r9, #128]	; 0x80
    3a18:	ldr	r1, [pc, #572]	; (3c58 <usb_isr+0x610>)
    3a1a:	lsls	r5, r2, #24
    3a1c:	bmi.w	4082 <usb_isr+0xa3a>
    3a20:	ldr.w	r2, [r9, #136]	; 0x88
    3a24:	ldr	r1, [pc, #560]	; (3c58 <usb_isr+0x610>)
    3a26:	lsls	r4, r2, #24
    3a28:	bmi.w	4076 <usb_isr+0xa2e>
    3a2c:	ldr.w	r2, [r9, #144]	; 0x90
    3a30:	ldr	r1, [pc, #548]	; (3c58 <usb_isr+0x610>)
    3a32:	lsls	r0, r2, #24
    3a34:	bmi.w	406a <usb_isr+0xa22>
    3a38:	ldr.w	r2, [r9, #152]	; 0x98
    3a3c:	ldr	r1, [pc, #536]	; (3c58 <usb_isr+0x610>)
    3a3e:	lsls	r2, r2, #24
    3a40:	bmi.w	405e <usb_isr+0xa16>
    3a44:	ldr	r0, [pc, #532]	; (3c5c <usb_isr+0x614>)
    3a46:	ldr	r2, [pc, #536]	; (3c60 <usb_isr+0x618>)
    3a48:	ldr	r1, [pc, #536]	; (3c64 <usb_isr+0x61c>)
    3a4a:	str	r0, [sp, #4]
    3a4c:	ldr	r0, [pc, #536]	; (3c68 <usb_isr+0x620>)
    3a4e:	ldr	r5, [pc, #540]	; (3c6c <usb_isr+0x624>)
    3a50:	ldr	r4, [pc, #540]	; (3c70 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3a52:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    3a54:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3a56:	str	r6, [sp, #20]
    3a58:	str	r5, [sp, #8]
    3a5a:	mov	r8, r0
    3a5c:	mov	r7, r1
    3a5e:	mov	r6, r2
    3a60:	mov	r5, r3
    3a62:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    3a64:	ldr	r0, [r6, #0]
			while (p) {
    3a66:	cbz	r0, 3a74 <usb_isr+0x42c>
				n = p->next;
    3a68:	ldr	r4, [r0, #4]
				usb_free(p);
    3a6a:	bl	34b0 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    3a6e:	mov	r0, r4
    3a70:	cmp	r4, #0
    3a72:	bne.n	3a68 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    3a74:	movs	r3, #0
    3a76:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    3a78:	ldr	r3, [sp, #8]
			p = tx_first[i];
    3a7a:	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    3a7c:	mov	r2, r3
    3a7e:	movs	r3, #0
    3a80:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    3a84:	cbz	r0, 3a92 <usb_isr+0x44a>
				n = p->next;
    3a86:	ldr	r4, [r0, #4]
				usb_free(p);
    3a88:	bl	34b0 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    3a8c:	mov	r0, r4
    3a8e:	cmp	r4, #0
    3a90:	bne.n	3a86 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    3a92:	movs	r2, #0
    3a94:	str	r2, [r7, #0]
			tx_last[i] = NULL;
    3a96:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3a98:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3a9c:	mov	r1, r2
    3a9e:	movs	r2, #0
    3aa0:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    3aa4:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    3aa6:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    3aa8:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    3aaa:	mov.w	r1, #0
    3aae:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    3ab2:	cmp	r3, #3
    3ab4:	bhi.w	3d0e <usb_isr+0x6c6>
    3ab8:	tbh	[pc, r3, lsl #1]
    3abc:	.word	0x01250170
    3ac0:	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    3ac4:	cmp.w	lr, #64	; 0x40
    3ac8:	it	ne
    3aca:	movne	r2, #0
    3acc:	b.n	383a <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3ace:	ldr	r2, [pc, #420]	; (3c74 <usb_isr+0x62c>)
    3ad0:	ldrb	r5, [r1, #0]
    3ad2:	ldrb	r0, [r1, #1]
    3ad4:	strb	r5, [r2, #0]
    3ad6:	strb	r0, [r2, #1]
    3ad8:	ldrb	r5, [r1, #2]
    3ada:	ldrb	r0, [r1, #3]
    3adc:	strb	r5, [r2, #2]
    3ade:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3ae0:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3ae2:	ldrb	r5, [r1, #4]
    3ae4:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3ae6:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    3ae8:	ldrb	r5, [r1, #5]
    3aea:	ldrb	r1, [r1, #6]
    3aec:	strb	r5, [r2, #5]
    3aee:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3af0:	beq.w	3e2a <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3af4:	ldr	r1, [pc, #384]	; (3c78 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3af6:	ldr	r6, [pc, #388]	; (3c7c <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3af8:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3afa:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3afc:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b00:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b02:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3b06:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b08:	ite	eq
    3b0a:	moveq	r1, #136	; 0x88
    3b0c:	movne	r1, #200	; 0xc8
    3b0e:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b12:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3b16:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b1a:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3b1c:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b1e:	str	r1, [r2, #4]
    3b20:	b.n	3860 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3b22:	movw	r0, #8737	; 0x2221
    3b26:	cmp	r1, r0
    3b28:	bne.w	3ec2 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3b2c:	ldr	r3, [pc, #336]	; (3c80 <usb_isr+0x638>)
    3b2e:	ldr	r4, [pc, #340]	; (3c84 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3b30:	ldr	r1, [pc, #340]	; (3c88 <usb_isr+0x640>)
    3b32:	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3b34:	ldr	r5, [r3, #0]
    3b36:	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    3b38:	str.w	lr, [sp, #4]
    3b3c:	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3b3e:	movs	r0, #0
    3b40:	str	r0, [sp, #8]
    3b42:	mov	r8, r0
    3b44:	mov	ip, r0
    3b46:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b48:	ldr	r1, [pc, #300]	; (3c78 <usb_isr+0x630>)
    3b4a:	ldrb	r5, [r1, #0]
    3b4c:	orr.w	lr, r5, #2
    3b50:	add.w	r3, r9, lr, lsl #3
    3b54:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b56:	ldr	r3, [sp, #4]
    3b58:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b5a:	ldr	r3, [sp, #12]
    3b5c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b5e:	ite	eq
    3b60:	moveq	r4, #136	; 0x88
    3b62:	movne	r4, #200	; 0xc8
    3b64:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3b68:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b6c:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    3b70:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3b72:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b74:	ldr.w	lr, [pc, #224]	; 3c58 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    3b78:	ldr	r3, [pc, #256]	; (3c7c <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    3b7a:	ldr.w	r8, [pc, #252]	; 3c78 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3b7e:	cmp	r0, #0
    3b80:	bne.w	3dc0 <usb_isr+0x778>
    3b84:	cmp.w	ip, #64	; 0x40
    3b88:	bne.n	3bc2 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3b8a:	orr.w	ip, r4, #2
    3b8e:	add.w	r3, r9, ip, lsl #3
    3b92:	ldr	r4, [sp, #8]
    3b94:	ldr.w	lr, [pc, #192]	; 3c58 <usb_isr+0x610>
    3b98:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3b9a:	cmp	r2, #0
    3b9c:	bne.w	3dec <usb_isr+0x7a4>
    3ba0:	lsls	r2, r0, #16
    3ba2:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    3ba6:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3baa:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3bae:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    3bb0:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    3bb2:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3bb4:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    3bb6:	cmp	r0, #64	; 0x40
    3bb8:	bne.n	3bc2 <usb_isr+0x57a>
    3bba:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    3bbc:	ldr	r2, [pc, #204]	; (3c8c <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    3bbe:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    3bc0:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3bc2:	ldr	r2, [pc, #204]	; (3c90 <usb_isr+0x648>)
    3bc4:	movs	r3, #1
    3bc6:	strb	r3, [r2, #0]
    3bc8:	b.n	3866 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    3bca:	bl	2ea4 <usb_serial_flush_callback>
    3bce:	b.n	371c <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3bd0:	ldr	r3, [pc, #132]	; (3c58 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3bd2:	ldr	r0, [pc, #188]	; (3c90 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    3bd4:	ldr	r1, [pc, #160]	; (3c78 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    3bd6:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    3bd8:	mov.w	lr, #2
    3bdc:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3be0:	ldr	r7, [pc, #176]	; (3c94 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    3be2:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    3be4:	ldr	r1, [pc, #176]	; (3c98 <usb_isr+0x650>)
    3be6:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    3be8:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3bea:	ldr	r6, [pc, #176]	; (3c9c <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    3bec:	ldr	r5, [pc, #176]	; (3ca0 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3bee:	ldr	r4, [pc, #180]	; (3ca4 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    3bf0:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3bf2:	movs	r1, #13
    3bf4:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    3bf6:	movs	r1, #255	; 0xff
    3bf8:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3bfa:	ldr.w	lr, [pc, #184]	; 3cb4 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    3bfe:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    3c00:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3c02:	ldr	r5, [pc, #164]	; (3ca8 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3c04:	ldr	r2, [pc, #164]	; (3cac <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    3c06:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3c0a:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3c0c:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    3c0e:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    3c12:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    3c14:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    3c16:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    3c18:	add	sp, #28
    3c1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    3c1e:	ldr	r2, [pc, #144]	; (3cb0 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    3c20:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    3c24:	ldrb	r3, [r2, #0]
    3c26:	adds	r3, #1
    3c28:	strb	r3, [r2, #0]
    3c2a:	b.n	36dc <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    3c2c:	str.w	r0, [r3, r6, lsl #2]
    3c30:	ldr	r5, [pc, #56]	; (3c6c <usb_isr+0x624>)
    3c32:	b.n	36aa <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    3c34:	ldrb	r3, [r1, r6]
    3c36:	cmp	r3, #3
    3c38:	bhi.w	3e1c <usb_isr+0x7d4>
    3c3c:	add	r2, pc, #4	; (adr r2, 3c44 <usb_isr+0x5fc>)
    3c3e:	ldr.w	pc, [r2, r3, lsl #2]
    3c42:	nop
    3c44:	.word	0x000036dd
    3c48:	.word	0x000036dd
    3c4c:	.word	0x00003d01
    3c50:	.word	0x00003cfb
    3c54:	.word	0x1fffb0cc
    3c58:	.word	0x1fff8000
    3c5c:	.word	0x1fffb0a8
    3c60:	.word	0x1fffb044
    3c64:	.word	0x1fffb098
    3c68:	.word	0x1fffb0d0
    3c6c:	.word	0x1fffaff0
    3c70:	.word	0x1fffb2f4
    3c74:	.word	0x1fffb2e8
    3c78:	.word	0x1fffb0c0
    3c7c:	.word	0x1fffb054
    3c80:	.word	0x1fffafe8
    3c84:	.word	0x1fffb2f0
    3c88:	.word	0x1fffafe4
    3c8c:	.word	0x1fffb000
    3c90:	.word	0x40072094
    3c94:	.word	0x400720c0
    3c98:	.word	0x00400088
    3c9c:	.word	0x40072088
    3ca0:	.word	0x40072080
    3ca4:	.word	0x40072098
    3ca8:	.word	0x1fffb004
    3cac:	.word	0x1fffb058
    3cb0:	.word	0x1fffb0c1
    3cb4:	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3cb8:	ldr	r1, [pc, #772]	; (3fc0 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    3cba:	ldr	r3, [pc, #776]	; (3fc4 <usb_isr+0x97c>)
    3cbc:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3cbe:	movs	r0, #13
    3cc0:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    3cc2:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    3cc4:	lsls	r2, r4, #30
    3cc6:	bpl.w	38e6 <usb_isr+0x29e>
    3cca:	b.n	38d8 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3ccc:	movw	r2, #770	; 0x302
    3cd0:	cmp	r1, r2
    3cd2:	bne.w	3eb2 <usb_isr+0x86a>
    3cd6:	ldrh	r1, [r5, #4]
    3cd8:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3cdc:	cmp	r1, #4
    3cde:	bhi.n	3db2 <usb_isr+0x76a>
    3ce0:	ldrh	r2, [r5, #2]
    3ce2:	cmp	r2, #0
    3ce4:	bne.n	3db2 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    3ce6:	ldr	r0, [pc, #728]	; (3fc0 <usb_isr+0x978>)
    3ce8:	str.w	lr, [sp, #4]
    3cec:	lsls	r1, r1, #2
    3cee:	add	r0, r1
    3cf0:	ldrb	r1, [r0, #0]
    3cf2:	orr.w	r1, r1, #2
    3cf6:	strb	r1, [r0, #0]
    3cf8:	b.n	3b3e <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3cfa:	movs	r3, #1
    3cfc:	strb	r3, [r1, r6]
						break;
    3cfe:	b.n	36dc <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3d00:	movs	r3, #0
    3d02:	strb	r3, [r1, r6]
						break;
    3d04:	b.n	36dc <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    3d06:	mov.w	r3, #1
    3d0a:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    3d0e:	adds	r5, #1
    3d10:	cmp	r5, #4
    3d12:	add.w	r6, r6, #4
    3d16:	add.w	r7, r7, #4
    3d1a:	add.w	r8, r8, #1
    3d1e:	bne.w	3a64 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d22:	ldr	r4, [pc, #676]	; (3fc8 <usb_isr+0x980>)
			*reg = epconf;
    3d24:	ldr	r3, [pc, #676]	; (3fcc <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d26:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    3d28:	ldr	r5, [pc, #676]	; (3fd0 <usb_isr+0x988>)
    3d2a:	ldr	r7, [sp, #16]
    3d2c:	ldr	r6, [sp, #20]
    3d2e:	movs	r1, #0
    3d30:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3d32:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d34:	lsls	r3, r2, #28
    3d36:	bmi.w	3f44 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d3a:	ldrb	r2, [r4, #1]
			*reg = epconf;
    3d3c:	ldr	r1, [pc, #660]	; (3fd4 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d3e:	ldr.w	r8, [pc, #672]	; 3fe0 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3d42:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d44:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d46:	mov.w	r1, #0
    3d4a:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    3d4e:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d52:	bmi.w	3f16 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3d56:	ldr	r1, [pc, #640]	; (3fd8 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d58:	ldrb	r2, [r4, #2]
			*reg = epconf;
    3d5a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d5c:	movs	r1, #0
    3d5e:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    3d62:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d66:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d68:	ldr.w	r8, [pc, #628]	; 3fe0 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d6c:	bmi.w	3f72 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    3d70:	ldrb	r2, [r4, #3]
			*reg = epconf;
    3d72:	ldr	r1, [pc, #616]	; (3fdc <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d74:	ldr	r4, [pc, #616]	; (3fe0 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    3d76:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d78:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d7a:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d7c:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    3d80:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    3d84:	bmi.w	3ee8 <usb_isr+0x8a0>
    3d88:	ldrb	r3, [r6, #0]
    3d8a:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    3d8c:	movs	r1, #0
    3d8e:	eor.w	r2, r3, #1
    3d92:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    3d96:	str.w	r1, [r9, #152]	; 0x98
    3d9a:	b.n	3b3e <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    3d9c:	mov.w	r3, #0
    3da0:	strb.w	r3, [r8]
    3da4:	b.n	3d0e <usb_isr+0x6c6>
    3da6:	ldrh	r1, [r5, #4]
    3da8:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3dac:	cmp	r1, #4
    3dae:	bls.w	3ecc <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    3db2:	ldr	r2, [pc, #524]	; (3fc0 <usb_isr+0x978>)
    3db4:	movs	r3, #15
    3db6:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    3db8:	ldr	r2, [pc, #552]	; (3fe4 <usb_isr+0x99c>)
    3dba:	movs	r3, #1
    3dbc:	strb	r3, [r2, #0]
    3dbe:	b.n	3866 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    3dc0:	cmp	r0, #64	; 0x40
    3dc2:	bls.w	3b8a <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3dc6:	orr.w	r4, r4, #2
    3dca:	add.w	r1, lr, r4, lsl #3
    3dce:	ldr	r6, [sp, #8]
    3dd0:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3dd2:	cbz	r2, 3e04 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    3dd4:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3dd8:	ldr	r2, [pc, #524]	; (3fe8 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    3dda:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3ddc:	mov	r3, r6
    3dde:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3de0:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3de4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3de6:	str.w	r2, [lr, r4, lsl #3]
    3dea:	b.n	3bbc <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    3dec:	ldrb.w	r3, [sp, #4]
    3df0:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3df2:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3df4:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3df6:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3df8:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3dfc:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3dfe:	str.w	r2, [lr, ip, lsl #3]
    3e02:	b.n	3bb6 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    3e04:	ldrb.w	r1, [sp, #4]
    3e08:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3e0a:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e0c:	ldr	r2, [pc, #476]	; (3fec <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    3e0e:	strb.w	r5, [r8]
    3e12:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    3e14:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3e16:	str.w	r2, [lr, r4, lsl #3]
    3e1a:	b.n	3bbc <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    3e1c:	tst.w	r9, #8
    3e20:	ite	eq
    3e22:	moveq	r3, #2
    3e24:	movne	r3, #3
    3e26:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    3e28:	b.n	36dc <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    3e2a:	ldr	r2, [pc, #452]	; (3ff0 <usb_isr+0x9a8>)
    3e2c:	movs	r1, #15
    3e2e:	strb	r1, [r2, #0]
    3e30:	b.n	3af4 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    3e32:	ldr	r2, [pc, #448]	; (3ff4 <usb_isr+0x9ac>)
    3e34:	ldr	r4, [r2, #4]
    3e36:	cmp	r4, #0
    3e38:	beq.n	3db2 <usb_isr+0x76a>
    3e3a:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3e3c:	ldrh.w	lr, [r5, #4]
    3e40:	b.n	3e4a <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    3e42:	adds	r2, #12
			if (list->addr == NULL) break;
    3e44:	ldr	r4, [r2, #4]
    3e46:	cmp	r4, #0
    3e48:	beq.n	3db2 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3e4a:	ldrh	r3, [r2, #0]
    3e4c:	cmp	r3, r0
    3e4e:	bne.n	3e42 <usb_isr+0x7fa>
    3e50:	ldrh	r3, [r2, #2]
    3e52:	cmp	r3, lr
    3e54:	bne.n	3e42 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    3e56:	lsrs	r0, r0, #8
    3e58:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    3e5a:	ite	eq
    3e5c:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    3e60:	ldrhne.w	lr, [r2, #8]
    3e64:	b.n	3e6e <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3e66:	ldr	r2, [pc, #400]	; (3ff8 <usb_isr+0x9b0>)
    3e68:	ldr	r4, [pc, #400]	; (3ffc <usb_isr+0x9b4>)
    3e6a:	ldrb	r2, [r2, #0]
    3e6c:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    3e6e:	ldrh	r0, [r5, #6]
    3e70:	cmp	r0, lr
    3e72:	bcs.w	40f4 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    3e76:	ldr	r1, [pc, #392]	; (4000 <usb_isr+0x9b8>)
    3e78:	ldrb	r5, [r1, #0]
    3e7a:	cmp	r0, #64	; 0x40
    3e7c:	mov	ip, r0
    3e7e:	orr.w	lr, r5, #2
    3e82:	it	cs
    3e84:	movcs.w	ip, #64	; 0x40
    3e88:	add.w	r3, r4, ip
    3e8c:	add.w	r2, r9, lr, lsl #3
    3e90:	str	r3, [sp, #8]
    3e92:	movs	r3, #1
    3e94:	str	r4, [r2, #4]
    3e96:	rsb	r0, ip, r0
    3e9a:	mov.w	r8, ip, lsl #16
    3e9e:	movs	r2, #0
    3ea0:	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    3ea2:	movs	r4, #200	; 0xc8
    3ea4:	b.n	3b64 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3ea6:	ldr	r4, [pc, #340]	; (3ffc <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    3ea8:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3eac:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    3eae:	strb	r2, [r4, #1]
    3eb0:	b.n	3e6e <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    3eb2:	cmp.w	r1, #1280	; 0x500
    3eb6:	bne.w	3db2 <usb_isr+0x76a>
    3eba:	movs	r3, #1
    3ebc:	movs	r2, #0
    3ebe:	str	r3, [sp, #4]
    3ec0:	b.n	3b3e <usb_isr+0x4f6>
    3ec2:	movw	r2, #8993	; 0x2321
    3ec6:	cmp	r1, r2
    3ec8:	beq.n	3eba <usb_isr+0x872>
    3eca:	b.n	3db2 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3ecc:	ldrh	r2, [r5, #2]
    3ece:	cmp	r2, #0
    3ed0:	bne.w	3db2 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3ed4:	ldr	r0, [pc, #232]	; (3fc0 <usb_isr+0x978>)
    3ed6:	str.w	lr, [sp, #4]
    3eda:	lsls	r1, r1, #2
    3edc:	add	r0, r1
    3ede:	ldrb	r1, [r0, #0]
    3ee0:	bic.w	r1, r1, #2
    3ee4:	strb	r1, [r0, #0]
    3ee6:	b.n	3b3e <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3ee8:	bl	3470 <usb_malloc>
				if (p) {
    3eec:	cmp	r0, #0
    3eee:	beq.w	40d0 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    3ef2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ef4:	ldr	r2, [pc, #244]	; (3fec <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3ef6:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3efa:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3efe:	bl	3470 <usb_malloc>
				if (p) {
    3f02:	cmp	r0, #0
    3f04:	beq.w	40c4 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    3f08:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f0a:	ldr	r2, [pc, #220]	; (3fe8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f0c:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f10:	str.w	r2, [r9, #136]	; 0x88
    3f14:	b.n	3d88 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f16:	bl	3470 <usb_malloc>
				if (p) {
    3f1a:	cmp	r0, #0
    3f1c:	beq.w	40a0 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f20:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f22:	ldr	r2, [pc, #200]	; (3fec <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f24:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f28:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f2c:	bl	3470 <usb_malloc>
				if (p) {
    3f30:	cmp	r0, #0
    3f32:	beq.w	4094 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    3f36:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f38:	ldr	r2, [pc, #172]	; (3fe8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f3a:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f3e:	str.w	r2, [r9, #72]	; 0x48
    3f42:	b.n	3d56 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f44:	bl	3470 <usb_malloc>
				if (p) {
    3f48:	cmp	r0, #0
    3f4a:	beq.w	40e8 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f4e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f50:	ldr	r2, [pc, #152]	; (3fec <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f52:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f56:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f5a:	bl	3470 <usb_malloc>
				if (p) {
    3f5e:	cmp	r0, #0
    3f60:	beq.w	40dc <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    3f64:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f66:	ldr	r2, [pc, #128]	; (3fe8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f68:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f6c:	str.w	r2, [r9, #40]	; 0x28
    3f70:	b.n	3d3a <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3f72:	bl	3470 <usb_malloc>
				if (p) {
    3f76:	cmp	r0, #0
    3f78:	beq.w	40b8 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    3f7c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f7e:	ldr	r2, [pc, #108]	; (3fec <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3f80:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3f84:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3f88:	bl	3470 <usb_malloc>
				if (p) {
    3f8c:	cmp	r0, #0
    3f8e:	beq.w	40ac <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    3f92:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f94:	ldr	r2, [pc, #80]	; (3fe8 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3f96:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3f9a:	str.w	r2, [r9, #104]	; 0x68
    3f9e:	b.n	3d70 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    3fa0:	ldr	r0, [r1, #60]	; 0x3c
    3fa2:	subs	r0, #8
    3fa4:	bl	34b0 <usb_free>
    3fa8:	b.n	39b4 <usb_isr+0x36c>
    3faa:	ldr	r0, [r1, #52]	; 0x34
    3fac:	subs	r0, #8
    3fae:	bl	34b0 <usb_free>
    3fb2:	b.n	39a8 <usb_isr+0x360>
    3fb4:	ldr	r0, [r1, #44]	; 0x2c
    3fb6:	subs	r0, #8
    3fb8:	bl	34b0 <usb_free>
    3fbc:	b.n	399c <usb_isr+0x354>
    3fbe:	nop
    3fc0:	.word	0x400720c0
    3fc4:	.word	0x40072080
    3fc8:	.word	0x00005eb8
    3fcc:	.word	0x400720c4
    3fd0:	.word	0x1fffb0c1
    3fd4:	.word	0x400720c8
    3fd8:	.word	0x400720cc
    3fdc:	.word	0x400720d0
    3fe0:	.word	0x1fff8000
    3fe4:	.word	0x40072094
    3fe8:	.word	0x004000c8
    3fec:	.word	0x00400088
    3ff0:	.word	0x1fffb055
    3ff4:	.word	0x00005ebc
    3ff8:	.word	0x1fffb0cc
    3ffc:	.word	0x1fffb0c4
    4000:	.word	0x1fffb0c0
    4004:	ldr	r0, [r4, #36]	; 0x24
    4006:	subs	r0, #8
    4008:	bl	34b0 <usb_free>
    400c:	b.n	3990 <usb_isr+0x348>
    400e:	ldr	r0, [r1, #124]	; 0x7c
    4010:	subs	r0, #8
    4012:	bl	34b0 <usb_free>
    4016:	b.n	3a14 <usb_isr+0x3cc>
    4018:	ldr	r0, [r1, #116]	; 0x74
    401a:	subs	r0, #8
    401c:	bl	34b0 <usb_free>
    4020:	b.n	3a08 <usb_isr+0x3c0>
    4022:	ldr	r0, [r1, #108]	; 0x6c
    4024:	subs	r0, #8
    4026:	bl	34b0 <usb_free>
    402a:	b.n	39fc <usb_isr+0x3b4>
    402c:	ldr	r0, [r1, #100]	; 0x64
    402e:	subs	r0, #8
    4030:	bl	34b0 <usb_free>
    4034:	b.n	39f0 <usb_isr+0x3a8>
    4036:	ldr	r0, [r1, #92]	; 0x5c
    4038:	subs	r0, #8
    403a:	bl	34b0 <usb_free>
    403e:	b.n	39e4 <usb_isr+0x39c>
    4040:	ldr	r0, [r1, #84]	; 0x54
    4042:	subs	r0, #8
    4044:	bl	34b0 <usb_free>
    4048:	b.n	39d8 <usb_isr+0x390>
    404a:	ldr	r0, [r1, #76]	; 0x4c
    404c:	subs	r0, #8
    404e:	bl	34b0 <usb_free>
    4052:	b.n	39cc <usb_isr+0x384>
    4054:	ldr	r0, [r1, #68]	; 0x44
    4056:	subs	r0, #8
    4058:	bl	34b0 <usb_free>
    405c:	b.n	39c0 <usb_isr+0x378>
    405e:	ldr.w	r0, [r1, #156]	; 0x9c
    4062:	subs	r0, #8
    4064:	bl	34b0 <usb_free>
    4068:	b.n	3a44 <usb_isr+0x3fc>
    406a:	ldr.w	r0, [r1, #148]	; 0x94
    406e:	subs	r0, #8
    4070:	bl	34b0 <usb_free>
    4074:	b.n	3a38 <usb_isr+0x3f0>
    4076:	ldr.w	r0, [r1, #140]	; 0x8c
    407a:	subs	r0, #8
    407c:	bl	34b0 <usb_free>
    4080:	b.n	3a2c <usb_isr+0x3e4>
    4082:	ldr.w	r0, [r1, #132]	; 0x84
    4086:	subs	r0, #8
    4088:	bl	34b0 <usb_free>
    408c:	b.n	3a20 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    408e:	mov.w	lr, #2
    4092:	b.n	3e6e <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4094:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4096:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    409a:	adds	r2, #1
    409c:	strb	r2, [r5, #0]
    409e:	b.n	3d56 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    40a0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    40a2:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    40a6:	adds	r2, #1
    40a8:	strb	r2, [r5, #0]
    40aa:	b.n	3f2c <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    40ac:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    40ae:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    40b2:	adds	r2, #1
    40b4:	strb	r2, [r5, #0]
    40b6:	b.n	3d70 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    40b8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    40ba:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    40be:	adds	r2, #1
    40c0:	strb	r2, [r5, #0]
    40c2:	b.n	3f88 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    40c4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    40c6:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    40ca:	adds	r2, #1
    40cc:	strb	r2, [r5, #0]
    40ce:	b.n	3d88 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    40d0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    40d2:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    40d6:	adds	r2, #1
    40d8:	strb	r2, [r5, #0]
    40da:	b.n	3efe <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    40dc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    40de:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    40e2:	adds	r2, #1
    40e4:	strb	r2, [r5, #0]
    40e6:	b.n	3d3a <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    40e8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    40ea:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    40ee:	adds	r2, #1
    40f0:	strb	r2, [r5, #0]
    40f2:	b.n	3f5a <usb_isr+0x912>
    40f4:	cmp.w	lr, #64	; 0x40
    40f8:	mov	ip, lr
    40fa:	it	cs
    40fc:	movcs.w	ip, #64	; 0x40
    4100:	add.w	r3, r4, ip
    4104:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4106:	movs	r3, #1
    4108:	rsb	r0, ip, lr
    410c:	mov.w	r8, ip, lsl #16
    4110:	movs	r2, #0
    4112:	str	r3, [sp, #4]
    4114:	b.n	3b48 <usb_isr+0x500>
    4116:	nop

00004118 <usb_init>:
}



void usb_init(void)
{
    4118:	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    411a:	bl	4b14 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    411e:	ldr	r3, [pc, #164]	; (41c4 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4120:	ldr	r0, [pc, #164]	; (41c8 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4122:	ldr	r4, [pc, #168]	; (41cc <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4124:	ldr	r7, [pc, #168]	; (41d0 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4126:	ldr	r5, [pc, #172]	; (41d4 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    4128:	ldr.w	ip, [pc, #188]	; 41e8 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    412c:	ldr.w	lr, [pc, #188]	; 41ec <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    4130:	ldr	r6, [pc, #164]	; (41d8 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4132:	movs	r2, #0
    4134:	str	r2, [r3, #0]
		table[i].addr = 0;
    4136:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4138:	str	r2, [r3, #8]
		table[i].addr = 0;
    413a:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    413c:	str	r2, [r3, #16]
		table[i].addr = 0;
    413e:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4140:	str	r2, [r3, #24]
		table[i].addr = 0;
    4142:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4144:	str	r2, [r3, #32]
		table[i].addr = 0;
    4146:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4148:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    414a:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    414c:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    414e:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4150:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    4152:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4154:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    4156:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4158:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    415a:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    415c:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    415e:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4160:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    4162:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4164:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    4166:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4168:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    416a:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    416c:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    416e:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4170:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    4172:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4174:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4178:	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    417a:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    417e:	orr.w	r1, r1, #262144	; 0x40000
    4182:	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4184:	ubfx	r1, r3, #8, #8
    4188:	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    418a:	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    418e:	ldr	r1, [pc, #76]	; (41dc <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4190:	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4192:	lsrs	r3, r3, #24
    4194:	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    4196:	movs	r3, #255	; 0xff
    4198:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    419c:	ldr	r5, [pc, #64]	; (41e0 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    419e:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    41a2:	ldr	r0, [pc, #64]	; (41e4 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    41a4:	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    41a6:	movs	r3, #1
    41a8:	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    41aa:	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    41ae:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    41b0:	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    41b4:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    41b6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    41ba:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    41bc:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    41be:	strb.w	r2, [r1, #248]	; 0xf8
    41c2:	pop	{r3, r4, r5, r6, r7, pc}
    41c4:	.word	0x1fff8000
    41c8:	.word	0x40048034
    41cc:	.word	0x4007209c
    41d0:	.word	0x400720b0
    41d4:	.word	0x400720b4
    41d8:	.word	0x40072094
    41dc:	.word	0x40072010
    41e0:	.word	0xe000e449
    41e4:	.word	0xe000e108
    41e8:	.word	0x40072080
    41ec:	.word	0x40072088

000041f0 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    41f0:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    41f2:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    41f4:	cbnz	r1, 421e <DMAChannel::begin(bool)+0x2e>
    41f6:	ldr	r2, [r0, #0]
    41f8:	cbz	r2, 421e <DMAChannel::begin(bool)+0x2e>
    41fa:	ldrb	r3, [r0, #4]
    41fc:	cmp	r3, #15
    41fe:	bhi.n	421e <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    4200:	ldr	r4, [pc, #156]	; (42a0 <DMAChannel::begin(bool)+0xb0>)
    4202:	ldrh	r1, [r4, #0]
    4204:	asr.w	r5, r1, r3
    4208:	lsls	r5, r5, #31
    420a:	bpl.n	4222 <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    420c:	add.w	r3, r3, #33554432	; 0x2000000
    4210:	add.w	r3, r3, #1152	; 0x480
    4214:	cmp.w	r2, r3, lsl #5
    4218:	bne.n	4222 <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    421a:	cpsie	i
		return;
    421c:	pop	{r4, r5, r6, r7, pc}
    421e:	ldr	r4, [pc, #128]	; (42a0 <DMAChannel::begin(bool)+0xb0>)
    4220:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    4222:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    4224:	asr.w	r2, r1, r3
    4228:	ands.w	r2, r2, #1
    422c:	beq.n	423e <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    422e:	adds	r3, #1
    4230:	cmp	r3, #16
    4232:	bne.n	4224 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    4234:	cpsie	i
			TCD = (TCD_t *)0;
    4236:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    4238:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    423a:	str	r2, [r0, #0]
    423c:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    423e:	movs	r5, #1
    4240:	lsls	r5, r3
    4242:	orrs	r1, r5
    4244:	strh	r1, [r4, #0]
			__enable_irq();
    4246:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    4248:	ldr	r6, [pc, #88]	; (42a4 <DMAChannel::begin(bool)+0xb4>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    424a:	ldr	r5, [pc, #92]	; (42a8 <DMAChannel::begin(bool)+0xb8>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    424c:	ldr	r7, [pc, #92]	; (42ac <DMAChannel::begin(bool)+0xbc>)
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    424e:	ldr.w	lr, [pc, #100]	; 42b4 <DMAChannel::begin(bool)+0xc4>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    4252:	uxtb	r1, r3
    4254:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    4256:	ldr	r4, [r6, #0]
    4258:	orr.w	r4, r4, #2
    425c:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    425e:	ldr	r4, [r5, #0]
    4260:	orr.w	r4, r4, #2
    4264:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    4266:	sub.w	r6, r6, #262144	; 0x40000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    426a:	movs	r4, #130	; 0x82
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    426c:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    4270:	add.w	r3, r3, #33554432	; 0x2000000
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    4274:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    4276:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    427a:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    427c:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    427e:	ldr	r4, [pc, #48]	; (42b0 <DMAChannel::begin(bool)+0xc0>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    4280:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    4284:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    4286:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    4288:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    428a:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    428c:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    428e:	str	r2, [r3, #0]
	*p++ = 0;
    4290:	str	r2, [r3, #4]
	*p++ = 0;
    4292:	str	r2, [r3, #8]
	*p++ = 0;
    4294:	str	r2, [r3, #12]
	*p++ = 0;
    4296:	str	r2, [r3, #16]
	*p++ = 0;
    4298:	str	r2, [r3, #20]
	*p++ = 0;
    429a:	str	r2, [r3, #24]
	*p++ = 0;
    429c:	str	r2, [r3, #28]
    429e:	pop	{r4, r5, r6, r7, pc}
    42a0:	.word	0x1fffb0d4
    42a4:	.word	0x40048040
    42a8:	.word	0x4004803c
    42ac:	.word	0x40008000
    42b0:	.word	0x4000801f
    42b4:	.word	0x4000801a

000042b8 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    42b8:	ldrb	r3, [r0, #4]
    42ba:	cmp	r3, #15
    42bc:	bhi.n	42e2 <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    42be:	ldr	r2, [pc, #36]	; (42e4 <DMAChannel::release()+0x2c>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    42c0:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    42c2:	strb	r3, [r2, #0]
	__disable_irq();
    42c4:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    42c6:	ldr	r1, [pc, #32]	; (42e8 <DMAChannel::release()+0x30>)
    42c8:	ldrb	r4, [r0, #4]
    42ca:	ldrh	r2, [r1, #0]
    42cc:	movs	r3, #1
    42ce:	lsls	r3, r4
    42d0:	bic.w	r3, r2, r3
    42d4:	strh	r3, [r1, #0]
	__enable_irq();
    42d6:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    42d8:	movs	r2, #16
	TCD = (TCD_t *)0;
    42da:	movs	r3, #0
}
    42dc:	pop	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    42de:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    42e0:	str	r3, [r0, #0]
}
    42e2:	bx	lr
    42e4:	.word	0x4000801a
    42e8:	.word	0x1fffb0d4

000042ec <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    42ec:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    42ee:	mrs	r2, PRIMASK
		__disable_irq();
    42f2:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    42f4:	ldrb	r3, [r0, #29]
    42f6:	cbnz	r3, 4306 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    42f8:	ldrb	r1, [r0, #28]
    42fa:	cmp	r1, #1
    42fc:	beq.n	430e <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    42fe:	cmp	r1, #3
    4300:	beq.n	4322 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4302:	movs	r3, #1
    4304:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4306:	cbnz	r2, 430a <EventResponder::triggerEventNotImmediate()+0x1e>
    4308:	cpsie	i
	}
	enableInterrupts(irq);
}
    430a:	pop	{r4}
    430c:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    430e:	ldr	r4, [pc, #72]	; (4358 <EventResponder::triggerEventNotImmediate()+0x6c>)
    4310:	ldr	r1, [r4, #0]
    4312:	cbz	r1, 433e <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4314:	ldr	r1, [pc, #68]	; (435c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4316:	str	r3, [r0, #20]
				_prev = lastYield;
    4318:	ldr	r3, [r1, #0]
    431a:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    431c:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    431e:	str	r0, [r3, #20]
    4320:	b.n	4302 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4322:	ldr	r4, [pc, #60]	; (4360 <EventResponder::triggerEventNotImmediate()+0x74>)
    4324:	ldr	r1, [r4, #0]
    4326:	cbz	r1, 434a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4328:	ldr	r1, [pc, #56]	; (4364 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    432a:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    432c:	ldr	r3, [r1, #0]
    432e:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4330:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4332:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4334:	ldr	r3, [pc, #48]	; (4368 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4336:	mov.w	r1, #268435456	; 0x10000000
    433a:	str	r1, [r3, #0]
    433c:	b.n	4302 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    433e:	ldr	r3, [pc, #28]	; (435c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4340:	str	r1, [r0, #20]
				_prev = nullptr;
    4342:	str	r1, [r0, #24]
				firstYield = this;
    4344:	str	r0, [r4, #0]
				lastYield = this;
    4346:	str	r0, [r3, #0]
    4348:	b.n	4302 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    434a:	ldr	r3, [pc, #24]	; (4364 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    434c:	str	r1, [r0, #20]
				_prev = nullptr;
    434e:	str	r1, [r0, #24]
				firstInterrupt = this;
    4350:	str	r0, [r4, #0]
				lastInterrupt = this;
    4352:	str	r0, [r3, #0]
    4354:	b.n	4334 <EventResponder::triggerEventNotImmediate()+0x48>
    4356:	nop
    4358:	.word	0x1fffb0e8
    435c:	.word	0x1fffb0e4
    4360:	.word	0x1fffb0d8
    4364:	.word	0x1fffb0dc
    4368:	.word	0xe000ed04

0000436c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    436c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    436e:	mrs	r2, PRIMASK
		__disable_irq();
    4372:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4374:	ldr	r4, [pc, #48]	; (43a8 <EventResponder::runFromInterrupt()+0x3c>)
    4376:	ldr	r0, [r4, #0]
		if (first) {
    4378:	cbz	r0, 439c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    437a:	ldr	r6, [pc, #48]	; (43ac <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    437c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    437e:	ldr	r3, [r0, #20]
    4380:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4382:	cbz	r3, 43a2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4384:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4386:	cbnz	r2, 438a <EventResponder::runFromInterrupt()+0x1e>
    4388:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    438a:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    438c:	ldr	r3, [r0, #8]
    438e:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4390:	mrs	r2, PRIMASK
		__disable_irq();
    4394:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4396:	ldr	r0, [r4, #0]
		if (first) {
    4398:	cmp	r0, #0
    439a:	bne.n	437e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    439c:	cbnz	r2, 43a0 <EventResponder::runFromInterrupt()+0x34>
    439e:	cpsie	i
    43a0:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    43a2:	str	r3, [r6, #0]
    43a4:	b.n	4386 <EventResponder::runFromInterrupt()+0x1a>
    43a6:	nop
    43a8:	.word	0x1fffb0d8
    43ac:	.word	0x1fffb0dc

000043b0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    43b0:	b.w	436c <EventResponder::runFromInterrupt()>

000043b4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    43b4:	ldr	r2, [pc, #96]	; (4418 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    43b6:	push	{r4, r5}
	if (listActive == nullptr) {
    43b8:	ldr	r4, [r2, #0]
    43ba:	cmp	r4, #0
    43bc:	beq.n	440e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    43be:	ldr	r3, [r0, #0]
    43c0:	ldr	r1, [r4, #0]
    43c2:	cmp	r3, r1
    43c4:	bcs.n	43e4 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    43c6:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    43c8:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    43ca:	str	r4, [r0, #8]
		_prev = nullptr;
    43cc:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    43ce:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    43d0:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    43d2:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    43d4:	movs	r3, #2
    43d6:	strb	r3, [r0, #20]
}
    43d8:	pop	{r4, r5}
    43da:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    43dc:	ldr	r1, [r2, #0]
    43de:	cmp	r3, r1
    43e0:	mov	r4, r2
    43e2:	bcc.n	43f6 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    43e4:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    43e6:	subs	r3, r3, r1
    43e8:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    43ea:	cmp	r2, #0
    43ec:	bne.n	43dc <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    43ee:	str	r2, [r0, #8]
		_prev = timer;
    43f0:	str	r4, [r0, #12]
		timer->_next = this;
    43f2:	str	r0, [r4, #8]
    43f4:	b.n	43d4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    43f6:	ldr	r2, [r2, #12]
    43f8:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    43fa:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    43fc:	str	r0, [r4, #12]
				_prev->_next = this;
    43fe:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4400:	subs	r3, r1, r3
				_state = TimerActive;
    4402:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4404:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4406:	str	r3, [r4, #0]
				_state = TimerActive;
    4408:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    440a:	pop	{r4, r5}
    440c:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    440e:	str	r4, [r0, #8]
		_prev = nullptr;
    4410:	str	r4, [r0, #12]
		listActive = this;
    4412:	str	r0, [r2, #0]
    4414:	b.n	43d4 <MillisTimer::addToActiveList()+0x20>
    4416:	nop
    4418:	.word	0x1fffb0e0

0000441c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    441c:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    441e:	ldr	r6, [pc, #136]	; (44a8 <MillisTimer::runFromTimer()+0x8c>)
    4420:	ldr	r4, [r6, #0]
	while (timer) {
    4422:	cbz	r4, 4470 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4424:	ldr	r3, [r4, #0]
    4426:	cmp	r3, #0
    4428:	bne.n	44a0 <MillisTimer::runFromTimer()+0x84>
    442a:	ldr	r7, [pc, #128]	; (44ac <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    442c:	mov	r5, r3
    442e:	b.n	443a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4430:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4432:	cbz	r4, 4470 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4434:	ldr	r3, [r4, #0]
    4436:	cmp	r3, #0
    4438:	bne.n	44a0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    443a:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    443c:	cbz	r3, 4440 <MillisTimer::runFromTimer()+0x24>
    443e:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4440:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4442:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4444:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4446:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4448:	ldr	r3, [r3, #0]
    444a:	cmp	r3, r7
    444c:	bne.n	4492 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    444e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4450:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4452:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4454:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4456:	beq.n	449a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4458:	bl	42ec <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    445c:	ldr	r3, [r4, #4]
    445e:	cmp	r3, #0
    4460:	beq.n	4430 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4462:	str	r3, [r4, #0]
				timer->addToActiveList();
    4464:	mov	r0, r4
    4466:	bl	43b4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    446a:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    446c:	cmp	r4, #0
    446e:	bne.n	4434 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4470:	mrs	r3, PRIMASK
		__disable_irq();
    4474:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4476:	ldr	r2, [pc, #56]	; (44b0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4478:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    447a:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    447c:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    447e:	cbnz	r3, 4482 <MillisTimer::runFromTimer()+0x66>
    4480:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4482:	cbz	r0, 4490 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4484:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4486:	bl	43b4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    448a:	mov	r0, r4
    448c:	cmp	r0, #0
    448e:	bne.n	4484 <MillisTimer::runFromTimer()+0x68>
    4490:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4492:	mov	r2, r4
    4494:	movs	r1, #0
    4496:	blx	r3
    4498:	b.n	445c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    449a:	ldr	r3, [r0, #8]
    449c:	blx	r3
    449e:	b.n	445c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    44a0:	subs	r3, #1
    44a2:	str	r3, [r4, #0]
			break;
    44a4:	b.n	4470 <MillisTimer::runFromTimer()+0x54>
    44a6:	nop
    44a8:	.word	0x1fffb0e0
    44ac:	.word	0x00001d01
    44b0:	.word	0x1fffb0f0

000044b4 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    44b4:	ldr	r2, [pc, #8]	; (44c0 <systick_isr+0xc>)
    44b6:	ldr	r3, [r2, #0]
    44b8:	adds	r3, #1
    44ba:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    44bc:	b.w	441c <MillisTimer::runFromTimer()>
    44c0:	.word	0x1fffafe8

000044c4 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    44c4:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    44c6:	ldr	r4, [pc, #136]	; (4550 <yield+0x8c>)
    44c8:	ldrb	r3, [r4, #0]
    44ca:	cbz	r3, 44ce <yield+0xa>
    44cc:	pop	{r3, r4, r5, pc}
	running = 1;
    44ce:	movs	r3, #1
    44d0:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    44d2:	bl	2e88 <usb_serial_available>
	if (Serial.available()) serialEvent();
    44d6:	cbnz	r0, 4536 <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    44d8:	bl	49e8 <serial_available>
	if (Serial1.available()) serialEvent1();
    44dc:	cbnz	r0, 4530 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    44de:	bl	48bc <serial2_available>
	if (Serial2.available()) serialEvent2();
    44e2:	cbnz	r0, 452a <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    44e4:	bl	4be4 <serial3_available>
	if (Serial3.available()) serialEvent3();
    44e8:	cbnz	r0, 4524 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    44ea:	movs	r3, #0
    44ec:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    44ee:	mrs	r3, IPSR
		if (ipsr != 0) return;
    44f2:	cmp	r3, #0
    44f4:	bne.n	44cc <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    44f6:	mrs	r1, PRIMASK
		__disable_irq();
    44fa:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    44fc:	ldr	r3, [pc, #84]	; (4554 <yield+0x90>)
    44fe:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4500:	cbz	r0, 453c <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    4502:	ldr	r4, [pc, #84]	; (4558 <yield+0x94>)
    4504:	ldrb	r2, [r4, #0]
    4506:	cbnz	r2, 453c <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    4508:	ldr	r5, [r0, #20]
    450a:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    450c:	movs	r3, #1
    450e:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    4510:	cbz	r5, 4544 <yield+0x80>
			firstYield->_prev = nullptr;
    4512:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4514:	cbnz	r1, 4518 <yield+0x54>
    4516:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4518:	movs	r5, #0
    451a:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    451c:	ldr	r3, [r0, #8]
    451e:	blx	r3
		runningFromYield = false;
    4520:	strb	r5, [r4, #0]
    4522:	b.n	44cc <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    4524:	bl	4ce0 <serialEvent3()>
    4528:	b.n	44ea <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    452a:	bl	4590 <serialEvent2()>
    452e:	b.n	44e4 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    4530:	bl	4cdc <serialEvent1()>
    4534:	b.n	44de <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    4536:	bl	4560 <serialEvent()>
    453a:	b.n	44d8 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    453c:	cmp	r1, #0
    453e:	bne.n	44cc <yield+0x8>
    4540:	cpsie	i
    4542:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    4544:	ldr	r3, [pc, #20]	; (455c <yield+0x98>)
    4546:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4548:	cmp	r1, #0
    454a:	bne.n	4518 <yield+0x54>
    454c:	b.n	4516 <yield+0x52>
    454e:	nop
    4550:	.word	0x1fffb0f4
    4554:	.word	0x1fffb0e8
    4558:	.word	0x1fffb0ec
    455c:	.word	0x1fffb0e4

00004560 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    4560:	bx	lr
    4562:	nop

00004564 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    4564:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    4566:	mov	r6, r1
    4568:	cbz	r1, 4588 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    456a:	cbz	r2, 458c <Print::write(unsigned char const*, unsigned int)+0x28>
    456c:	mov	r7, r0
    456e:	mov	r4, r2
    4570:	movs	r5, #0
    4572:	ldr	r3, [r7, #0]
    4574:	ldrb.w	r1, [r6], #1
    4578:	ldr	r3, [r3, #0]
    457a:	mov	r0, r7
    457c:	blx	r3
    457e:	subs	r4, #1
    4580:	add	r5, r0
    4582:	bne.n	4572 <Print::write(unsigned char const*, unsigned int)+0xe>
    4584:	mov	r0, r5
    4586:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    4588:	mov	r0, r1
    458a:	pop	{r3, r4, r5, r6, r7, pc}
    458c:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    458e:	pop	{r3, r4, r5, r6, r7, pc}

00004590 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    4590:	bx	lr
    4592:	nop

00004594 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    4594:	b.n	4594 <main>
    4596:	nop

00004598 <AudioStream::allocate()>:
}

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    4598:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    459a:	cpsid	i
	index = memory_pool_first_mask;
    459c:	ldr	r7, [pc, #140]	; (462c <AudioStream::allocate()+0x94>)
	p += index;
    459e:	ldr	r6, [pc, #144]	; (4630 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    45a0:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    45a2:	add.w	r3, r6, #24

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    45a6:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    45aa:	cmp	r0, r3
    45ac:	bcs.n	45d4 <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    45ae:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    45b2:	cbnz	r1, 45dc <AudioStream::allocate()+0x44>
    45b4:	adds	r2, r0, #4
    45b6:	add.w	r5, r6, #27
    45ba:	adds	r3, r4, #1
    45bc:	subs	r5, r5, r2
    45be:	add.w	r5, r3, r5, lsr #2
    45c2:	b.n	45cc <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    45c4:	ldr.w	r1, [r2], #4
		if (avail) break;
    45c8:	cbnz	r1, 45dc <AudioStream::allocate()+0x44>
    45ca:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    45cc:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    45ce:	mov	r4, r3
		p++;
    45d0:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    45d2:	bne.n	45c4 <AudioStream::allocate()+0x2c>
			__enable_irq();
    45d4:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    45d6:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    45d8:	pop	{r4, r5, r6, r7}
    45da:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    45dc:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    45e0:	mov.w	r2, #2147483648	; 0x80000000
    45e4:	lsrs	r2, r3
    45e6:	bic.w	r1, r1, r2
	*p = avail;
    45ea:	str	r1, [r0, #0]
	if (!avail) index++;
    45ec:	cbnz	r1, 45f0 <AudioStream::allocate()+0x58>
    45ee:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    45f0:	ldr	r1, [pc, #64]	; (4634 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    45f2:	strh	r4, [r7, #0]
	used = memory_used + 1;
    45f4:	ldrh	r2, [r1, #0]
    45f6:	adds	r2, #1
	memory_used = used;
    45f8:	uxth	r4, r2
    45fa:	strh	r4, [r1, #0]
	__enable_irq();
    45fc:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    45fe:	subs	r0, r0, r6
    4600:	asrs	r0, r0, #2
    4602:	rsb	r0, r3, r0, lsl #5
    4606:	add.w	r0, r0, r0, lsl #6
    460a:	lsls	r3, r0, #2
    460c:	ldr	r0, [pc, #40]	; (4638 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    460e:	ldr	r1, [pc, #44]	; (463c <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    4610:	ldr	r0, [r0, #0]
    4612:	add.w	r3, r3, #8032	; 0x1f60
    4616:	adds	r3, #28
	block->ref_count = 1;
    4618:	movs	r5, #1
    461a:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    461c:	ldrh	r5, [r1, #0]
    461e:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    4620:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    4622:	it	hi
    4624:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    4626:	pop	{r4, r5, r6, r7}
    4628:	bx	lr
    462a:	nop
    462c:	.word	0x1fffb122
    4630:	.word	0x1fffb108
    4634:	.word	0x1fffb124
    4638:	.word	0x1fffb100
    463c:	.word	0x1fffb0fc

00004640 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    4640:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    4642:	cpsid	i
	if (block->ref_count > 1) {
    4644:	ldrb	r3, [r0, #0]
    4646:	cmp	r3, #1
    4648:	bls.n	4652 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    464a:	subs	r3, #1
    464c:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    464e:	cpsie	i
    4650:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    4652:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    4654:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    4656:	ldr	r4, [pc, #48]	; (4688 <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    4658:	ldr	r5, [pc, #48]	; (468c <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    465a:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    465e:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    4660:	mvns	r2, r2
    4662:	mov.w	r0, #2147483648	; 0x80000000
    4666:	and.w	r2, r2, #31
    466a:	lsr.w	r2, r0, r2
    466e:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    4670:	ldr	r2, [pc, #28]	; (4690 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    4672:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    4676:	cmp	r3, r6
    4678:	it	cc
    467a:	strhcc	r3, [r5, #0]
		memory_used--;
    467c:	ldrh	r3, [r2, #0]
    467e:	subs	r3, #1
    4680:	strh	r3, [r2, #0]
	}
	__enable_irq();
    4682:	cpsie	i
}
    4684:	pop	{r4, r5, r6}
    4686:	bx	lr
    4688:	.word	0x1fffb108
    468c:	.word	0x1fffb122
    4690:	.word	0x1fffb124

00004694 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    4694:	ldr	r3, [r0, #12]
    4696:	cbz	r3, 46c6 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    4698:	push	{r4, r5}
    469a:	b.n	46a0 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    469c:	ldr	r3, [r3, #12]
    469e:	cbz	r3, 46c4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    46a0:	ldrb	r0, [r3, #8]
    46a2:	cmp	r0, r2
    46a4:	bne.n	469c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    46a6:	ldr	r0, [r3, #4]
    46a8:	ldrb	r4, [r3, #9]
    46aa:	ldr	r0, [r0, #16]
    46ac:	ldr.w	r5, [r0, r4, lsl #2]
    46b0:	cmp	r5, #0
    46b2:	bne.n	469c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    46b4:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    46b8:	ldrb	r0, [r1, #0]
    46ba:	adds	r0, #1
    46bc:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    46be:	ldr	r3, [r3, #12]
    46c0:	cmp	r3, #0
    46c2:	bne.n	46a0 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    46c4:	pop	{r4, r5}
    46c6:	bx	lr

000046c8 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    46c8:	ldrb	r3, [r0, #9]
    46ca:	cmp	r3, r1
    46cc:	bls.n	46dc <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    46ce:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    46d0:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    46d2:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    46d6:	str.w	r2, [r3, r1, lsl #2]
	return in;
    46da:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    46dc:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    46de:	bx	lr

000046e0 <AudioStream::receiveWritable(unsigned int)>:

// Receive block from an input.  The block will not
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
    46e0:	push	{r3, r4, r5, lr}
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    46e2:	ldrb	r3, [r0, #9]
    46e4:	cmp	r3, r1
    46e6:	bls.n	471e <AudioStream::receiveWritable(unsigned int)+0x3e>
	in = inputQueue[index];
    46e8:	ldr	r3, [r0, #16]
    46ea:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    46ee:	movs	r2, #0
    46f0:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    46f4:	cbz	r4, 471e <AudioStream::receiveWritable(unsigned int)+0x3e>
    46f6:	ldrb	r3, [r4, #0]
    46f8:	cmp	r3, #1
    46fa:	bls.n	471a <AudioStream::receiveWritable(unsigned int)+0x3a>
		p = allocate();
    46fc:	bl	4598 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    4700:	mov	r5, r0
    4702:	cbz	r0, 4710 <AudioStream::receiveWritable(unsigned int)+0x30>
    4704:	mov.w	r2, #256	; 0x100
    4708:	adds	r1, r4, #4
    470a:	adds	r0, #4
    470c:	bl	2d54 <memcpy>
		in->ref_count--;
    4710:	ldrb	r3, [r4, #0]
    4712:	subs	r3, #1
    4714:	strb	r3, [r4, #0]

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
    4716:	mov	r0, r5
    4718:	pop	{r3, r4, r5, pc}
    471a:	mov	r0, r4
		if (p) memcpy(p->data, in->data, sizeof(p->data));
		in->ref_count--;
		in = p;
	}
	return in;
}
    471c:	pop	{r3, r4, r5, pc}
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    471e:	movs	r0, #0
    4720:	pop	{r3, r4, r5, pc}
    4722:	nop

00004724 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    4724:	ldrb	r3, [r0, #16]
    4726:	cbnz	r3, 4772 <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    4728:	ldr	r3, [r0, #4]
    472a:	ldrb	r2, [r0, #9]
    472c:	ldrb	r3, [r3, #9]
    472e:	cmp	r2, r3
    4730:	bhi.n	4772 <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    4732:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    4734:	cpsid	i
	p = src.destination_list;
    4736:	ldr	r4, [r0, #0]
    4738:	ldr	r3, [r4, #12]
	if (p == NULL) {
    473a:	cbz	r3, 4788 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    473c:	ldr	r2, [r3, #12]
    473e:	cbz	r2, 474e <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    4740:	ldr	r1, [r3, #0]
    4742:	cmp	r4, r1
    4744:	beq.n	4774 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    4746:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    4748:	ldr	r2, [r3, #12]
    474a:	cmp	r2, #0
    474c:	bne.n	4740 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    474e:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    4750:	movs	r3, #0
    4752:	str	r3, [r0, #12]
	src.numConnections++;
    4754:	ldrb	r3, [r4, #10]
    4756:	adds	r3, #1
    4758:	strb	r3, [r4, #10]
	src.active = true;
    475a:	ldr	r2, [r0, #0]

	dst.numConnections++;
    475c:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    475e:	movs	r3, #1
    4760:	strb	r3, [r2, #8]

	dst.numConnections++;
    4762:	ldrb	r2, [r1, #10]
    4764:	add	r2, r3
    4766:	strb	r2, [r1, #10]
	dst.active = true;
    4768:	ldr	r2, [r0, #4]
    476a:	strb	r3, [r2, #8]

	isConnected = true;
    476c:	strb	r3, [r0, #16]

	__enable_irq();
    476e:	cpsie	i
}
    4770:	pop	{r4, r5}
    4772:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    4774:	ldr	r5, [r3, #4]
    4776:	ldr	r1, [r0, #4]
    4778:	cmp	r5, r1
    477a:	bne.n	4746 <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    477c:	ldrh	r1, [r3, #8]
    477e:	ldrh	r3, [r0, #8]
    4780:	cmp	r1, r3
    4782:	beq.n	476e <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    4784:	mov	r3, r2
    4786:	b.n	4748 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    4788:	str	r0, [r4, #12]
    478a:	b.n	4750 <AudioConnection::connect()+0x2c>

0000478c <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    478c:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    478e:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    4790:	cmp	r3, #0
    4792:	beq.n	47fa <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    4794:	ldr	r3, [r0, #4]
    4796:	ldrb	r2, [r0, #9]
    4798:	ldrb	r3, [r3, #9]
    479a:	cmp	r2, r3
    479c:	bhi.n	47fa <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    479e:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    47a0:	ldr	r2, [r0, #0]
    47a2:	ldr	r3, [r2, #12]
	if (p == NULL) {
    47a4:	cbz	r3, 47f8 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    47a6:	cmp	r0, r3
    47a8:	bne.n	47b0 <AudioConnection::disconnect()+0x24>
    47aa:	b.n	4800 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    47ac:	cmp	r0, r3
    47ae:	beq.n	47b6 <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    47b0:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    47b2:	cmp	r3, #0
    47b4:	bne.n	47ac <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    47b6:	ldr	r3, [r0, #4]
    47b8:	ldrb	r1, [r0, #9]
    47ba:	ldr	r3, [r3, #16]
    47bc:	mov	r4, r0
    47be:	ldr.w	r0, [r3, r1, lsl #2]
    47c2:	cbz	r0, 47d8 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    47c4:	bl	4640 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    47c8:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    47ca:	ldr	r3, [r4, #4]
    47cc:	ldrb	r2, [r4, #9]
    47ce:	ldr	r3, [r3, #16]
    47d0:	movs	r1, #0
    47d2:	str.w	r1, [r3, r2, lsl #2]
    47d6:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    47d8:	ldrb	r3, [r2, #10]
    47da:	subs	r3, #1
    47dc:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    47de:	ldr	r3, [r4, #0]
    47e0:	ldrb	r2, [r3, #10]
    47e2:	cbnz	r2, 47e6 <AudioConnection::disconnect()+0x5a>
		src.active = false;
    47e4:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    47e6:	ldr	r2, [r4, #4]
    47e8:	ldrb	r3, [r2, #10]
    47ea:	subs	r3, #1
    47ec:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    47ee:	ldr	r3, [r4, #4]
    47f0:	ldrb	r2, [r3, #10]
    47f2:	cbz	r2, 47fc <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    47f4:	movs	r3, #0
    47f6:	strb	r3, [r4, #16]

	__enable_irq();
    47f8:	cpsie	i
    47fa:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    47fc:	strb	r2, [r3, #8]
    47fe:	b.n	47f4 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    4800:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    4802:	str	r3, [r2, #12]
    4804:	b.n	47b6 <AudioConnection::disconnect()+0x2a>
    4806:	nop

00004808 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    4808:	ldr	r3, [pc, #32]	; (482c <AudioStream::update_setup()+0x24>)
    480a:	ldrb	r2, [r3, #0]
    480c:	cbnz	r2, 4828 <AudioStream::update_setup()+0x20>
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    480e:	push	{r4, r5}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    4810:	ldr	r0, [pc, #28]	; (4830 <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    4812:	ldr	r1, [pc, #32]	; (4834 <AudioStream::update_setup()+0x2c>)
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    4814:	movs	r5, #208	; 0xd0
    4816:	strb	r5, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    4818:	mov.w	r4, #1073741824	; 0x40000000
	update_scheduled = true;
    481c:	movs	r2, #1

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    481e:	str	r4, [r1, #0]
	update_scheduled = true;
	return true;
    4820:	mov	r0, r2
bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
	update_scheduled = true;
    4822:	strb	r2, [r3, #0]
	return true;
}
    4824:	pop	{r4, r5}
    4826:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    4828:	movs	r0, #0
    482a:	bx	lr
    482c:	.word	0x1fffb104
    4830:	.word	0xe000e45e
    4834:	.word	0xe000e108

00004838 <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    4838:	ldr	r1, [pc, #104]	; (48a4 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    483a:	ldr	r2, [pc, #108]	; (48a8 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    483c:	ldr	r0, [pc, #108]	; (48ac <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    483e:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    4840:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    4842:	ldr	r5, [pc, #108]	; (48b0 <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4844:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    4846:	orr.w	r3, r3, #16777216	; 0x1000000
    484a:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    484c:	ldr	r3, [r2, #0]
    484e:	orr.w	r3, r3, #1
    4852:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    4854:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4856:	cbnz	r4, 485e <software_isr+0x26>
    4858:	b.n	4886 <software_isr+0x4e>
    485a:	ldr	r4, [r4, #20]
    485c:	cbz	r4, 4886 <software_isr+0x4e>
		if (p->active) {
    485e:	ldrb	r3, [r4, #8]
    4860:	cmp	r3, #0
    4862:	beq.n	485a <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    4864:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    4866:	ldr	r7, [r5, #0]
			p->update();
    4868:	ldr	r3, [r3, #0]
    486a:	mov	r0, r4
    486c:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    486e:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    4870:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    4872:	subs	r3, r3, r7
    4874:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    4876:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    4878:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    487a:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    487c:	it	hi
    487e:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    4880:	ldr	r4, [r4, #20]
    4882:	cmp	r4, #0
    4884:	bne.n	485e <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    4886:	ldr	r3, [pc, #40]	; (48b0 <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    4888:	ldr	r2, [pc, #40]	; (48b4 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    488a:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    488c:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    488e:	ldr	r4, [pc, #40]	; (48b8 <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    4890:	subs	r3, r3, r6
    4892:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    4894:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    4896:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    4898:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    489a:	bls.n	48a0 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    489c:	strh	r1, [r2, #0]
    489e:	pop	{r3, r4, r5, r6, r7, pc}
    48a0:	pop	{r3, r4, r5, r6, r7, pc}
    48a2:	nop
    48a4:	.word	0xe000edfc
    48a8:	.word	0xe0001000
    48ac:	.word	0x1fffb0f8
    48b0:	.word	0xe0001004
    48b4:	.word	0x1fffb120
    48b8:	.word	0x1fffb126

000048bc <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    48bc:	ldr	r2, [pc, #20]	; (48d4 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    48be:	ldr	r3, [pc, #24]	; (48d8 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    48c0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    48c2:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    48c4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    48c6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    48c8:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    48ca:	it	cc
    48cc:	addcc	r0, #64	; 0x40
    48ce:	subs	r0, r0, r3
}
    48d0:	bx	lr
    48d2:	nop
    48d4:	.word	0x1fffb198
    48d8:	.word	0x1fffb12d

000048dc <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    48dc:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    48de:	ldr	r3, [pc, #224]	; (49c0 <uart1_status_isr+0xe4>)
    48e0:	ldrb	r2, [r3, #4]
    48e2:	tst.w	r2, #48	; 0x30
    48e6:	beq.n	4942 <uart1_status_isr+0x66>
		__disable_irq();
    48e8:	cpsid	i
		avail = UART1_RCFIFO;
    48ea:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    48ec:	and.w	r2, r1, #255	; 0xff
    48f0:	cmp	r1, #0
    48f2:	beq.n	4970 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    48f4:	cpsie	i
			head = rx_buffer_head;
    48f6:	ldr	r7, [pc, #204]	; (49c4 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    48f8:	ldr	r1, [pc, #204]	; (49c8 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    48fa:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    48fc:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    48fe:	ldr	r6, [pc, #204]	; (49cc <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4900:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4902:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4904:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    4906:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    4908:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    490a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    490c:	it	cs
    490e:	movcs	r3, #0
				if (newhead != tail) {
    4910:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4912:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    4916:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4918:	itt	ne
    491a:	strbne	r1, [r6, r3]
    491c:	movne	r0, r3
				}
			} while (--avail > 0);
    491e:	ands.w	r2, r2, #255	; 0xff
    4922:	bne.n	4906 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4924:	ldr	r3, [pc, #168]	; (49d0 <uart1_status_isr+0xf4>)
    4926:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4928:	uxtb	r2, r0
    492a:	strb	r2, [r7, #0]
			if (rts_pin) {
    492c:	cbz	r3, 4942 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    492e:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4930:	itet	cc
    4932:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4936:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    4938:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    493a:	cmp	r0, #39	; 0x27
    493c:	itt	gt
    493e:	movgt	r2, #1
    4940:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    4942:	ldr	r1, [pc, #124]	; (49c0 <uart1_status_isr+0xe4>)
    4944:	ldrb	r2, [r1, #3]
    4946:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    4948:	lsls	r5, r2, #24
    494a:	bmi.n	497a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    494c:	lsls	r2, r2, #25
    494e:	bpl.n	496c <uart1_status_isr+0x90>
    4950:	ldr	r3, [pc, #108]	; (49c0 <uart1_status_isr+0xe4>)
    4952:	ldrb	r3, [r3, #4]
    4954:	lsls	r3, r3, #25
    4956:	bpl.n	496c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4958:	ldr	r3, [pc, #120]	; (49d4 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    495a:	ldr	r1, [pc, #124]	; (49d8 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    495c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    495e:	movs	r2, #0
    4960:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4962:	cbz	r3, 4966 <uart1_status_isr+0x8a>
    4964:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    4966:	ldr	r3, [pc, #88]	; (49c0 <uart1_status_isr+0xe4>)
    4968:	movs	r2, #60	; 0x3c
    496a:	strb	r2, [r3, #3]
	}
}
    496c:	pop	{r4, r5, r6, r7}
    496e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    4970:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    4972:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    4974:	strb	r2, [r3, #17]
			__enable_irq();
    4976:	cpsie	i
    4978:	b.n	4942 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    497a:	ldrb	r3, [r1, #4]
    497c:	lsls	r4, r3, #24
    497e:	bpl.n	494c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    4980:	ldr	r3, [pc, #88]	; (49dc <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    4982:	ldr	r6, [pc, #92]	; (49e0 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4984:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    4986:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4988:	uxtb	r4, r4
		tail = tx_buffer_tail;
    498a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    498c:	cmp	r4, r3
    498e:	beq.n	49ae <uart1_status_isr+0xd2>
    4990:	ldr	r5, [pc, #80]	; (49e4 <uart1_status_isr+0x108>)
    4992:	b.n	4998 <uart1_status_isr+0xbc>
    4994:	cmp	r3, r4
    4996:	beq.n	49ae <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    4998:	adds	r3, #1
    499a:	cmp	r3, #40	; 0x28
    499c:	it	cs
    499e:	movcs	r3, #0
			avail = UART1_S1;
    49a0:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    49a2:	ldrb	r0, [r5, r3]
    49a4:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    49a6:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    49a8:	ldrb	r0, [r1, #20]
    49aa:	cmp	r0, #7
    49ac:	bls.n	4994 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    49ae:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    49b0:	ldr	r1, [pc, #12]	; (49c0 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    49b2:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    49b4:	ldrb	r3, [r1, #4]
    49b6:	lsls	r0, r3, #24
    49b8:	itt	mi
    49ba:	movmi	r3, #124	; 0x7c
    49bc:	strbmi	r3, [r1, #3]
    49be:	b.n	494c <uart1_status_isr+0x70>
    49c0:	.word	0x4006b000
    49c4:	.word	0x1fffb198
    49c8:	.word	0x1fffb12d
    49cc:	.word	0x1fffb158
    49d0:	.word	0x1fffb128
    49d4:	.word	0x1fffb19c
    49d8:	.word	0x1fffb12c
    49dc:	.word	0x1fffb1a0
    49e0:	.word	0x1fffb199
    49e4:	.word	0x1fffb130

000049e8 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    49e8:	ldr	r2, [pc, #20]	; (4a00 <serial_available+0x18>)
	tail = rx_buffer_tail;
    49ea:	ldr	r3, [pc, #24]	; (4a04 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    49ec:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    49ee:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    49f0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    49f2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    49f4:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    49f6:	it	cc
    49f8:	addcc	r0, #64	; 0x40
    49fa:	subs	r0, r0, r3
}
    49fc:	bx	lr
    49fe:	nop
    4a00:	.word	0x1fffb1a8
    4a04:	.word	0x1fffb1a9

00004a08 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    4a08:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    4a0a:	ldr	r3, [pc, #224]	; (4aec <uart0_status_isr+0xe4>)
    4a0c:	ldrb	r2, [r3, #4]
    4a0e:	tst.w	r2, #48	; 0x30
    4a12:	beq.n	4a6e <uart0_status_isr+0x66>
		__disable_irq();
    4a14:	cpsid	i
		avail = UART0_RCFIFO;
    4a16:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    4a18:	and.w	r2, r1, #255	; 0xff
    4a1c:	cmp	r1, #0
    4a1e:	beq.n	4a9c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    4a20:	cpsie	i
			head = rx_buffer_head;
    4a22:	ldr	r7, [pc, #204]	; (4af0 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    4a24:	ldr	r1, [pc, #204]	; (4af4 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4a26:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    4a28:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4a2a:	ldr	r6, [pc, #204]	; (4af8 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4a2c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    4a2e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    4a30:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    4a32:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4a34:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4a36:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    4a38:	it	cs
    4a3a:	movcs	r3, #0
				if (newhead != tail) {
    4a3c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    4a3e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    4a42:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    4a44:	itt	ne
    4a46:	strbne	r1, [r6, r3]
    4a48:	movne	r0, r3
				}
			} while (--avail > 0);
    4a4a:	ands.w	r2, r2, #255	; 0xff
    4a4e:	bne.n	4a32 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    4a50:	ldr	r3, [pc, #168]	; (4afc <uart0_status_isr+0xf4>)
    4a52:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    4a54:	uxtb	r2, r0
    4a56:	strb	r2, [r7, #0]
			if (rts_pin) {
    4a58:	cbz	r3, 4a6e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    4a5a:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4a5c:	itet	cc
    4a5e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    4a62:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    4a64:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4a66:	cmp	r0, #39	; 0x27
    4a68:	itt	gt
    4a6a:	movgt	r2, #1
    4a6c:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    4a6e:	ldr	r1, [pc, #124]	; (4aec <uart0_status_isr+0xe4>)
    4a70:	ldrb	r2, [r1, #3]
    4a72:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4a74:	lsls	r5, r2, #24
    4a76:	bmi.n	4aa6 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    4a78:	lsls	r2, r2, #25
    4a7a:	bpl.n	4a98 <uart0_status_isr+0x90>
    4a7c:	ldr	r3, [pc, #108]	; (4aec <uart0_status_isr+0xe4>)
    4a7e:	ldrb	r3, [r3, #4]
    4a80:	lsls	r3, r3, #25
    4a82:	bpl.n	4a98 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4a84:	ldr	r3, [pc, #120]	; (4b00 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    4a86:	ldr	r1, [pc, #124]	; (4b04 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    4a88:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    4a8a:	movs	r2, #0
    4a8c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4a8e:	cbz	r3, 4a92 <uart0_status_isr+0x8a>
    4a90:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    4a92:	ldr	r3, [pc, #88]	; (4aec <uart0_status_isr+0xe4>)
    4a94:	movs	r2, #60	; 0x3c
    4a96:	strb	r2, [r3, #3]
	}
}
    4a98:	pop	{r4, r5, r6, r7}
    4a9a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4a9c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    4a9e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    4aa0:	strb	r2, [r3, #17]
			__enable_irq();
    4aa2:	cpsie	i
    4aa4:	b.n	4a6e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    4aa6:	ldrb	r3, [r1, #4]
    4aa8:	lsls	r4, r3, #24
    4aaa:	bpl.n	4a78 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    4aac:	ldr	r3, [pc, #88]	; (4b08 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    4aae:	ldr	r6, [pc, #92]	; (4b0c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4ab0:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    4ab2:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4ab4:	uxtb	r4, r4
		tail = tx_buffer_tail;
    4ab6:	uxtb	r3, r3
		do {
			if (tail == head) break;
    4ab8:	cmp	r4, r3
    4aba:	beq.n	4ada <uart0_status_isr+0xd2>
    4abc:	ldr	r5, [pc, #80]	; (4b10 <uart0_status_isr+0x108>)
    4abe:	b.n	4ac4 <uart0_status_isr+0xbc>
    4ac0:	cmp	r3, r4
    4ac2:	beq.n	4ada <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    4ac4:	adds	r3, #1
    4ac6:	cmp	r3, #64	; 0x40
    4ac8:	it	cs
    4aca:	movcs	r3, #0
			avail = UART0_S1;
    4acc:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    4ace:	ldrb	r0, [r5, r3]
    4ad0:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    4ad2:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    4ad4:	ldrb	r0, [r1, #20]
    4ad6:	cmp	r0, #7
    4ad8:	bls.n	4ac0 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    4ada:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4adc:	ldr	r1, [pc, #12]	; (4aec <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    4ade:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    4ae0:	ldrb	r3, [r1, #4]
    4ae2:	lsls	r0, r3, #24
    4ae4:	itt	mi
    4ae6:	movmi	r3, #124	; 0x7c
    4ae8:	strbmi	r3, [r1, #3]
    4aea:	b.n	4a78 <uart0_status_isr+0x70>
    4aec:	.word	0x4006a000
    4af0:	.word	0x1fffb1a8
    4af4:	.word	0x1fffb1a9
    4af8:	.word	0x1fffb1ec
    4afc:	.word	0x1fffb1a4
    4b00:	.word	0x1fffb230
    4b04:	.word	0x1fffb22c
    4b08:	.word	0x1fffb234
    4b0c:	.word	0x1fffb22d
    4b10:	.word	0x1fffb1ac

00004b14 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    4b14:	push	{r4, r5, r6, lr}
    4b16:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    4b18:	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4b1a:	ldr	r3, [pc, #100]	; (4b80 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    4b1c:	ldr	r5, [pc, #100]	; (4b84 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    4b1e:	ldr	r0, [pc, #104]	; (4b88 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4b20:	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    4b22:	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    4b24:	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4b26:	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    4b28:	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    4b2a:	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4b2c:	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    4b2e:	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    4b30:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    4b32:	ldrb	r3, [r2, #0]
    4b34:	lsls	r3, r3, #24
    4b36:	bpl.n	4b32 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    4b38:	ldr	r3, [pc, #80]	; (4b8c <usb_init_serialnumber+0x78>)
    4b3a:	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    4b3c:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4b3e:	ldr	r3, [pc, #80]	; (4b90 <usb_init_serialnumber+0x7c>)
    4b40:	ldr	r4, [pc, #80]	; (4b94 <usb_init_serialnumber+0x80>)
    4b42:	cmp	r0, r3
    4b44:	it	ls
    4b46:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    4b4a:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4b4c:	it	ls
    4b4e:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    4b50:	movs	r2, #10
    4b52:	bl	4b98 <ultoa>
    4b56:	add	r1, sp, #4
    4b58:	mov	r0, r4
	for (i=0; i<10; i++) {
    4b5a:	movs	r3, #0
		char c = buf[i];
    4b5c:	ldrb.w	r2, [r1], #1
    4b60:	adds	r3, #1
		if (!c) break;
    4b62:	cbz	r2, 4b74 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4b64:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    4b66:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    4b6a:	bne.n	4b5c <usb_init_serialnumber+0x48>
    4b6c:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4b6e:	strb	r3, [r4, #0]
}
    4b70:	add	sp, #16
    4b72:	pop	{r4, r5, r6, pc}
    4b74:	lsls	r3, r3, #1
    4b76:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4b78:	strb	r3, [r4, #0]
}
    4b7a:	add	sp, #16
    4b7c:	pop	{r4, r5, r6, pc}
    4b7e:	nop
    4b80:	.word	0x40020000
    4b84:	.word	0x40020007
    4b88:	.word	0x40020006
    4b8c:	.word	0x40020008
    4b90:	.word	0x0098967f
    4b94:	.word	0x1fff8c8c

00004b98 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4b98:	push	{r4, r5, r6, r7}
    4b9a:	subs	r5, r1, #1
    4b9c:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    4b9e:	movs	r4, #0
    4ba0:	b.n	4ba4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4ba2:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4ba4:	udiv	r3, r0, r2
    4ba8:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4bac:	cmp	r0, #9
    4bae:	add.w	r7, r0, #48	; 0x30
    4bb2:	itet	hi
    4bb4:	addhi	r0, #55	; 0x37
    4bb6:	uxtbls	r0, r7
    4bb8:	uxtbhi	r0, r0
    4bba:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    4bbe:	mov	r0, r3
    4bc0:	cmp	r3, #0
    4bc2:	bne.n	4ba2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    4bc4:	adds	r2, r1, r4
    4bc6:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    4bc8:	cbz	r4, 4bde <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    4bca:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    4bcc:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    4bd0:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4bd2:	adds	r3, #1
    4bd4:	subs	r0, r4, r3
    4bd6:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    4bd8:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4bdc:	blt.n	4bca <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4bde:	mov	r0, r1
    4be0:	pop	{r4, r5, r6, r7}
    4be2:	bx	lr

00004be4 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4be4:	ldr	r2, [pc, #20]	; (4bfc <serial3_available+0x18>)
	tail = rx_buffer_tail;
    4be6:	ldr	r3, [pc, #24]	; (4c00 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4be8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4bea:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4bec:	uxtb	r0, r0
	tail = rx_buffer_tail;
    4bee:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4bf0:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    4bf2:	it	cc
    4bf4:	addcc	r0, #64	; 0x40
    4bf6:	subs	r0, r0, r3
}
    4bf8:	bx	lr
    4bfa:	nop
    4bfc:	.word	0x1fffb23c
    4c00:	.word	0x1fffb23d

00004c04 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    4c04:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    4c06:	ldr	r3, [pc, #172]	; (4cb4 <uart2_status_isr+0xb0>)
    4c08:	ldrb	r2, [r3, #4]
    4c0a:	lsls	r4, r2, #26
    4c0c:	bpl.n	4c4e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4c0e:	ldr	r0, [pc, #168]	; (4cb8 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4c10:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    4c12:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4c14:	ldr	r1, [pc, #164]	; (4cbc <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4c16:	adds	r3, #1
    4c18:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4c1a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    4c1c:	it	gt
    4c1e:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4c20:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    4c22:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    4c24:	beq.n	4c2e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    4c26:	ldr	r4, [pc, #152]	; (4cc0 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    4c28:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    4c2a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    4c2c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    4c2e:	ldr	r2, [pc, #148]	; (4cc4 <uart2_status_isr+0xc0>)
    4c30:	ldr	r1, [r2, #0]
    4c32:	cbz	r1, 4c4e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    4c34:	ldr	r2, [pc, #144]	; (4cc8 <uart2_status_isr+0xc4>)
    4c36:	ldrb	r2, [r2, #0]
    4c38:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    4c3a:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4c3c:	itet	cc
    4c3e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    4c42:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    4c44:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    4c46:	cmp	r3, #39	; 0x27
    4c48:	itt	gt
    4c4a:	movgt	r3, #1
    4c4c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    4c4e:	ldr	r2, [pc, #100]	; (4cb4 <uart2_status_isr+0xb0>)
    4c50:	ldrb	r3, [r2, #3]
    4c52:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4c54:	lsls	r0, r3, #24
    4c56:	bmi.n	4c7c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    4c58:	lsls	r2, r3, #25
    4c5a:	bpl.n	4c78 <uart2_status_isr+0x74>
    4c5c:	ldr	r3, [pc, #84]	; (4cb4 <uart2_status_isr+0xb0>)
    4c5e:	ldrb	r3, [r3, #4]
    4c60:	lsls	r3, r3, #25
    4c62:	bpl.n	4c78 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4c64:	ldr	r3, [pc, #100]	; (4ccc <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4c66:	ldr	r1, [pc, #104]	; (4cd0 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4c68:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    4c6a:	movs	r2, #0
    4c6c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4c6e:	cbz	r3, 4c72 <uart2_status_isr+0x6e>
    4c70:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    4c72:	ldr	r3, [pc, #64]	; (4cb4 <uart2_status_isr+0xb0>)
    4c74:	movs	r2, #44	; 0x2c
    4c76:	strb	r2, [r3, #3]
	}
}
    4c78:	pop	{r4, r5}
    4c7a:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4c7c:	ldrb	r1, [r2, #4]
    4c7e:	lsls	r1, r1, #24
    4c80:	bpl.n	4c58 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    4c82:	ldr	r1, [pc, #80]	; (4cd4 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4c84:	ldr	r0, [pc, #64]	; (4cc8 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4c86:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4c88:	ldrb	r1, [r0, #0]
    4c8a:	uxtb	r1, r1
		if (head == tail) {
    4c8c:	cmp	r4, r1
    4c8e:	beq.n	4cac <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4c90:	adds	r2, r1, #1
    4c92:	cmp	r2, #39	; 0x27
    4c94:	itt	hi
    4c96:	movhi	r1, #0
    4c98:	movhi	r2, r1
			n = tx_buffer[tail];
    4c9a:	ldr	r5, [pc, #60]	; (4cd8 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4c9c:	ldr	r4, [pc, #20]	; (4cb4 <uart2_status_isr+0xb0>)
    4c9e:	it	ls
    4ca0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4ca2:	ldrb	r2, [r5, r2]
    4ca4:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4ca6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4ca8:	strb	r1, [r0, #0]
    4caa:	b.n	4c58 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4cac:	movs	r1, #108	; 0x6c
    4cae:	strb	r1, [r2, #3]
    4cb0:	b.n	4c58 <uart2_status_isr+0x54>
    4cb2:	nop
    4cb4:	.word	0x4006c000
    4cb8:	.word	0x1fffb23c
    4cbc:	.word	0x1fffb23d
    4cc0:	.word	0x1fffb268
    4cc4:	.word	0x1fffb238
    4cc8:	.word	0x1fffb2a9
    4ccc:	.word	0x1fffb2ac
    4cd0:	.word	0x1fffb2a8
    4cd4:	.word	0x1fffb2b0
    4cd8:	.word	0x1fffb240

00004cdc <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    4cdc:	bx	lr
    4cde:	nop

00004ce0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    4ce0:	bx	lr
    4ce2:	nop

00004ce4 <__aeabi_frsub>:
    4ce4:	eor.w	r0, r0, #2147483648	; 0x80000000
    4ce8:	b.n	4cf0 <__addsf3>
    4cea:	nop

00004cec <__aeabi_fsub>:
    4cec:	eor.w	r1, r1, #2147483648	; 0x80000000

00004cf0 <__addsf3>:
    4cf0:	lsls	r2, r0, #1
    4cf2:	itttt	ne
    4cf4:	movsne.w	r3, r1, lsl #1
    4cf8:	teqne	r2, r3
    4cfc:	mvnsne.w	ip, r2, asr #24
    4d00:	mvnsne.w	ip, r3, asr #24
    4d04:	beq.n	4ddc <__addsf3+0xec>
    4d06:	mov.w	r2, r2, lsr #24
    4d0a:	rsbs	r3, r2, r3, lsr #24
    4d0e:	itttt	gt
    4d10:	addgt	r2, r2, r3
    4d12:	eorgt	r1, r0
    4d14:	eorgt	r0, r1
    4d16:	eorgt	r1, r0
    4d18:	it	lt
    4d1a:	neglt	r3, r3
    4d1c:	cmp	r3, #25
    4d1e:	it	hi
    4d20:	bxhi	lr
    4d22:	tst.w	r0, #2147483648	; 0x80000000
    4d26:	orr.w	r0, r0, #8388608	; 0x800000
    4d2a:	bic.w	r0, r0, #4278190080	; 0xff000000
    4d2e:	it	ne
    4d30:	negne	r0, r0
    4d32:	tst.w	r1, #2147483648	; 0x80000000
    4d36:	orr.w	r1, r1, #8388608	; 0x800000
    4d3a:	bic.w	r1, r1, #4278190080	; 0xff000000
    4d3e:	it	ne
    4d40:	negne	r1, r1
    4d42:	teq	r2, r3
    4d46:	beq.n	4dc8 <__addsf3+0xd8>
    4d48:	sub.w	r2, r2, #1
    4d4c:	asr.w	ip, r1, r3
    4d50:	adds.w	r0, r0, ip
    4d54:	rsb	r3, r3, #32
    4d58:	lsl.w	r1, r1, r3
    4d5c:	and.w	r3, r0, #2147483648	; 0x80000000
    4d60:	bpl.n	4d68 <__addsf3+0x78>
    4d62:	negs	r1, r1
    4d64:	sbc.w	r0, r0, r0, lsl #1
    4d68:	cmp.w	r0, #8388608	; 0x800000
    4d6c:	bcc.n	4d96 <__addsf3+0xa6>
    4d6e:	cmp.w	r0, #16777216	; 0x1000000
    4d72:	bcc.n	4d82 <__addsf3+0x92>
    4d74:	lsrs	r0, r0, #1
    4d76:	mov.w	r1, r1, rrx
    4d7a:	add.w	r2, r2, #1
    4d7e:	cmp	r2, #254	; 0xfe
    4d80:	bcs.n	4e26 <__addsf3+0x136>
    4d82:	cmp.w	r1, #2147483648	; 0x80000000
    4d86:	adc.w	r0, r0, r2, lsl #23
    4d8a:	it	eq
    4d8c:	biceq.w	r0, r0, #1
    4d90:	orr.w	r0, r0, r3
    4d94:	bx	lr
    4d96:	lsls	r1, r1, #1
    4d98:	adc.w	r0, r0, r0
    4d9c:	tst.w	r0, #8388608	; 0x800000
    4da0:	sub.w	r2, r2, #1
    4da4:	bne.n	4d82 <__addsf3+0x92>
    4da6:	clz	ip, r0
    4daa:	sub.w	ip, ip, #8
    4dae:	subs.w	r2, r2, ip
    4db2:	lsl.w	r0, r0, ip
    4db6:	itet	ge
    4db8:	addge.w	r0, r0, r2, lsl #23
    4dbc:	neglt	r2, r2
    4dbe:	orrge	r0, r3
    4dc0:	itt	lt
    4dc2:	lsrlt	r0, r2
    4dc4:	orrlt	r0, r3
    4dc6:	bx	lr
    4dc8:	teq	r2, #0
    4dcc:	eor.w	r1, r1, #8388608	; 0x800000
    4dd0:	itte	eq
    4dd2:	eoreq.w	r0, r0, #8388608	; 0x800000
    4dd6:	addeq	r2, #1
    4dd8:	subne	r3, #1
    4dda:	b.n	4d48 <__addsf3+0x58>
    4ddc:	mov.w	r3, r1, lsl #1
    4de0:	mvns.w	ip, r2, asr #24
    4de4:	it	ne
    4de6:	mvnsne.w	ip, r3, asr #24
    4dea:	beq.n	4e30 <__addsf3+0x140>
    4dec:	teq	r2, r3
    4df0:	beq.n	4dfc <__addsf3+0x10c>
    4df2:	teq	r2, #0
    4df6:	it	eq
    4df8:	moveq	r0, r1
    4dfa:	bx	lr
    4dfc:	teq	r0, r1
    4e00:	itt	ne
    4e02:	movne	r0, #0
    4e04:	bxne	lr
    4e06:	tst.w	r2, #4278190080	; 0xff000000
    4e0a:	bne.n	4e16 <__addsf3+0x126>
    4e0c:	lsls	r0, r0, #1
    4e0e:	it	cs
    4e10:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4e14:	bx	lr
    4e16:	adds.w	r2, r2, #33554432	; 0x2000000
    4e1a:	itt	cc
    4e1c:	addcc.w	r0, r0, #8388608	; 0x800000
    4e20:	bxcc	lr
    4e22:	and.w	r3, r0, #2147483648	; 0x80000000
    4e26:	orr.w	r0, r3, #2130706432	; 0x7f000000
    4e2a:	orr.w	r0, r0, #8388608	; 0x800000
    4e2e:	bx	lr
    4e30:	mvns.w	r2, r2, asr #24
    4e34:	itet	ne
    4e36:	movne	r0, r1
    4e38:	mvnseq.w	r3, r3, asr #24
    4e3c:	movne	r1, r0
    4e3e:	lsls	r2, r0, #9
    4e40:	itte	eq
    4e42:	movseq.w	r3, r1, lsl #9
    4e46:	teqeq	r0, r1
    4e4a:	orrne.w	r0, r0, #4194304	; 0x400000
    4e4e:	bx	lr

00004e50 <__aeabi_ui2f>:
    4e50:	mov.w	r3, #0
    4e54:	b.n	4e60 <__aeabi_i2f+0x8>
    4e56:	nop

00004e58 <__aeabi_i2f>:
    4e58:	ands.w	r3, r0, #2147483648	; 0x80000000
    4e5c:	it	mi
    4e5e:	negmi	r0, r0
    4e60:	movs.w	ip, r0
    4e64:	it	eq
    4e66:	bxeq	lr
    4e68:	orr.w	r3, r3, #1258291200	; 0x4b000000
    4e6c:	mov	r1, r0
    4e6e:	mov.w	r0, #0
    4e72:	b.n	4eae <__aeabi_l2f+0x2a>

00004e74 <__aeabi_ul2f>:
    4e74:	orrs.w	r2, r0, r1
    4e78:	it	eq
    4e7a:	bxeq	lr
    4e7c:	mov.w	r3, #0
    4e80:	b.n	4e98 <__aeabi_l2f+0x14>
    4e82:	nop

00004e84 <__aeabi_l2f>:
    4e84:	orrs.w	r2, r0, r1
    4e88:	it	eq
    4e8a:	bxeq	lr
    4e8c:	ands.w	r3, r1, #2147483648	; 0x80000000
    4e90:	bpl.n	4e98 <__aeabi_l2f+0x14>
    4e92:	negs	r0, r0
    4e94:	sbc.w	r1, r1, r1, lsl #1
    4e98:	movs.w	ip, r1
    4e9c:	ittt	eq
    4e9e:	moveq	ip, r0
    4ea0:	moveq	r1, r0
    4ea2:	moveq	r0, #0
    4ea4:	orr.w	r3, r3, #1526726656	; 0x5b000000
    4ea8:	it	eq
    4eaa:	subeq.w	r3, r3, #268435456	; 0x10000000
    4eae:	sub.w	r3, r3, #8388608	; 0x800000
    4eb2:	clz	r2, ip
    4eb6:	subs	r2, #8
    4eb8:	sub.w	r3, r3, r2, lsl #23
    4ebc:	blt.n	4ee0 <__aeabi_l2f+0x5c>
    4ebe:	lsl.w	ip, r1, r2
    4ec2:	add	r3, ip
    4ec4:	lsl.w	ip, r0, r2
    4ec8:	rsb	r2, r2, #32
    4ecc:	cmp.w	ip, #2147483648	; 0x80000000
    4ed0:	lsr.w	r2, r0, r2
    4ed4:	adc.w	r0, r3, r2
    4ed8:	it	eq
    4eda:	biceq.w	r0, r0, #1
    4ede:	bx	lr
    4ee0:	add.w	r2, r2, #32
    4ee4:	lsl.w	ip, r1, r2
    4ee8:	rsb	r2, r2, #32
    4eec:	orrs.w	r0, r0, ip, lsl #1
    4ef0:	lsr.w	r2, r1, r2
    4ef4:	adc.w	r0, r3, r2
    4ef8:	it	eq
    4efa:	biceq.w	r0, r0, ip, lsr #31
    4efe:	bx	lr

00004f00 <__aeabi_fmul>:
    4f00:	mov.w	ip, #255	; 0xff
    4f04:	ands.w	r2, ip, r0, lsr #23
    4f08:	ittt	ne
    4f0a:	andsne.w	r3, ip, r1, lsr #23
    4f0e:	teqne	r2, ip
    4f12:	teqne	r3, ip
    4f16:	beq.n	4ff8 <__aeabi_fmul+0xf8>
    4f18:	add	r2, r3
    4f1a:	eor.w	ip, r0, r1
    4f1e:	lsls	r0, r0, #9
    4f20:	it	ne
    4f22:	movsne.w	r1, r1, lsl #9
    4f26:	beq.n	4f66 <__aeabi_fmul+0x66>
    4f28:	mov.w	r3, #134217728	; 0x8000000
    4f2c:	orr.w	r0, r3, r0, lsr #5
    4f30:	orr.w	r1, r3, r1, lsr #5
    4f34:	umull	r3, r1, r0, r1
    4f38:	and.w	r0, ip, #2147483648	; 0x80000000
    4f3c:	cmp.w	r1, #8388608	; 0x800000
    4f40:	ittt	cc
    4f42:	lslcc	r1, r1, #1
    4f44:	orrcc.w	r1, r1, r3, lsr #31
    4f48:	lslcc	r3, r3, #1
    4f4a:	orr.w	r0, r0, r1
    4f4e:	sbc.w	r2, r2, #127	; 0x7f
    4f52:	cmp	r2, #253	; 0xfd
    4f54:	bhi.n	4f92 <__aeabi_fmul+0x92>
    4f56:	cmp.w	r3, #2147483648	; 0x80000000
    4f5a:	adc.w	r0, r0, r2, lsl #23
    4f5e:	it	eq
    4f60:	biceq.w	r0, r0, #1
    4f64:	bx	lr
    4f66:	teq	r0, #0
    4f6a:	and.w	ip, ip, #2147483648	; 0x80000000
    4f6e:	it	eq
    4f70:	lsleq	r1, r1, #9
    4f72:	orr.w	r0, ip, r0, lsr #9
    4f76:	orr.w	r0, r0, r1, lsr #9
    4f7a:	subs	r2, #127	; 0x7f
    4f7c:	ittt	gt
    4f7e:	rsbsgt	r3, r2, #255	; 0xff
    4f82:	orrgt.w	r0, r0, r2, lsl #23
    4f86:	bxgt	lr
    4f88:	orr.w	r0, r0, #8388608	; 0x800000
    4f8c:	mov.w	r3, #0
    4f90:	subs	r2, #1
    4f92:	bgt.n	5050 <__aeabi_fmul+0x150>
    4f94:	cmn.w	r2, #25
    4f98:	itt	le
    4f9a:	andle.w	r0, r0, #2147483648	; 0x80000000
    4f9e:	bxle	lr
    4fa0:	rsb	r2, r2, #0
    4fa4:	lsls	r1, r0, #1
    4fa6:	lsr.w	r1, r1, r2
    4faa:	rsb	r2, r2, #32
    4fae:	lsl.w	ip, r0, r2
    4fb2:	movs.w	r0, r1, rrx
    4fb6:	adc.w	r0, r0, #0
    4fba:	orrs.w	r3, r3, ip, lsl #1
    4fbe:	it	eq
    4fc0:	biceq.w	r0, r0, ip, lsr #31
    4fc4:	bx	lr
    4fc6:	teq	r2, #0
    4fca:	and.w	ip, r0, #2147483648	; 0x80000000
    4fce:	ittt	eq
    4fd0:	lsleq	r0, r0, #1
    4fd2:	tsteq.w	r0, #8388608	; 0x800000
    4fd6:	subeq	r2, #1
    4fd8:	beq.n	4fce <__aeabi_fmul+0xce>
    4fda:	orr.w	r0, r0, ip
    4fde:	teq	r3, #0
    4fe2:	and.w	ip, r1, #2147483648	; 0x80000000
    4fe6:	ittt	eq
    4fe8:	lsleq	r1, r1, #1
    4fea:	tsteq.w	r1, #8388608	; 0x800000
    4fee:	subeq	r3, #1
    4ff0:	beq.n	4fe6 <__aeabi_fmul+0xe6>
    4ff2:	orr.w	r1, r1, ip
    4ff6:	b.n	4f18 <__aeabi_fmul+0x18>
    4ff8:	and.w	r3, ip, r1, lsr #23
    4ffc:	teq	r2, ip
    5000:	it	ne
    5002:	teqne	r3, ip
    5006:	beq.n	501e <__aeabi_fmul+0x11e>
    5008:	bics.w	ip, r0, #2147483648	; 0x80000000
    500c:	it	ne
    500e:	bicsne.w	ip, r1, #2147483648	; 0x80000000
    5012:	bne.n	4fc6 <__aeabi_fmul+0xc6>
    5014:	eor.w	r0, r0, r1
    5018:	and.w	r0, r0, #2147483648	; 0x80000000
    501c:	bx	lr
    501e:	teq	r0, #0
    5022:	itett	ne
    5024:	teqne	r0, #2147483648	; 0x80000000
    5028:	moveq	r0, r1
    502a:	teqne	r1, #0
    502e:	teqne	r1, #2147483648	; 0x80000000
    5032:	beq.n	505e <__aeabi_fmul+0x15e>
    5034:	teq	r2, ip
    5038:	bne.n	503e <__aeabi_fmul+0x13e>
    503a:	lsls	r2, r0, #9
    503c:	bne.n	505e <__aeabi_fmul+0x15e>
    503e:	teq	r3, ip
    5042:	bne.n	504c <__aeabi_fmul+0x14c>
    5044:	lsls	r3, r1, #9
    5046:	it	ne
    5048:	movne	r0, r1
    504a:	bne.n	505e <__aeabi_fmul+0x15e>
    504c:	eor.w	r0, r0, r1
    5050:	and.w	r0, r0, #2147483648	; 0x80000000
    5054:	orr.w	r0, r0, #2130706432	; 0x7f000000
    5058:	orr.w	r0, r0, #8388608	; 0x800000
    505c:	bx	lr
    505e:	orr.w	r0, r0, #2130706432	; 0x7f000000
    5062:	orr.w	r0, r0, #12582912	; 0xc00000
    5066:	bx	lr

00005068 <__aeabi_fdiv>:
    5068:	mov.w	ip, #255	; 0xff
    506c:	ands.w	r2, ip, r0, lsr #23
    5070:	ittt	ne
    5072:	andsne.w	r3, ip, r1, lsr #23
    5076:	teqne	r2, ip
    507a:	teqne	r3, ip
    507e:	beq.n	5154 <__aeabi_fdiv+0xec>
    5080:	sub.w	r2, r2, r3
    5084:	eor.w	ip, r0, r1
    5088:	lsls	r1, r1, #9
    508a:	mov.w	r0, r0, lsl #9
    508e:	beq.n	5100 <__aeabi_fdiv+0x98>
    5090:	mov.w	r3, #268435456	; 0x10000000
    5094:	orr.w	r1, r3, r1, lsr #4
    5098:	orr.w	r3, r3, r0, lsr #4
    509c:	and.w	r0, ip, #2147483648	; 0x80000000
    50a0:	cmp	r3, r1
    50a2:	it	cc
    50a4:	lslcc	r3, r3, #1
    50a6:	adc.w	r2, r2, #125	; 0x7d
    50aa:	mov.w	ip, #8388608	; 0x800000
    50ae:	cmp	r3, r1
    50b0:	itt	cs
    50b2:	subcs	r3, r3, r1
    50b4:	orrcs.w	r0, r0, ip
    50b8:	cmp.w	r3, r1, lsr #1
    50bc:	itt	cs
    50be:	subcs.w	r3, r3, r1, lsr #1
    50c2:	orrcs.w	r0, r0, ip, lsr #1
    50c6:	cmp.w	r3, r1, lsr #2
    50ca:	itt	cs
    50cc:	subcs.w	r3, r3, r1, lsr #2
    50d0:	orrcs.w	r0, r0, ip, lsr #2
    50d4:	cmp.w	r3, r1, lsr #3
    50d8:	itt	cs
    50da:	subcs.w	r3, r3, r1, lsr #3
    50de:	orrcs.w	r0, r0, ip, lsr #3
    50e2:	lsls	r3, r3, #4
    50e4:	it	ne
    50e6:	movsne.w	ip, ip, lsr #4
    50ea:	bne.n	50ae <__aeabi_fdiv+0x46>
    50ec:	cmp	r2, #253	; 0xfd
    50ee:	bhi.w	4f92 <__aeabi_fmul+0x92>
    50f2:	cmp	r3, r1
    50f4:	adc.w	r0, r0, r2, lsl #23
    50f8:	it	eq
    50fa:	biceq.w	r0, r0, #1
    50fe:	bx	lr
    5100:	and.w	ip, ip, #2147483648	; 0x80000000
    5104:	orr.w	r0, ip, r0, lsr #9
    5108:	adds	r2, #127	; 0x7f
    510a:	ittt	gt
    510c:	rsbsgt	r3, r2, #255	; 0xff
    5110:	orrgt.w	r0, r0, r2, lsl #23
    5114:	bxgt	lr
    5116:	orr.w	r0, r0, #8388608	; 0x800000
    511a:	mov.w	r3, #0
    511e:	subs	r2, #1
    5120:	b.n	4f92 <__aeabi_fmul+0x92>
    5122:	teq	r2, #0
    5126:	and.w	ip, r0, #2147483648	; 0x80000000
    512a:	ittt	eq
    512c:	lsleq	r0, r0, #1
    512e:	tsteq.w	r0, #8388608	; 0x800000
    5132:	subeq	r2, #1
    5134:	beq.n	512a <__aeabi_fdiv+0xc2>
    5136:	orr.w	r0, r0, ip
    513a:	teq	r3, #0
    513e:	and.w	ip, r1, #2147483648	; 0x80000000
    5142:	ittt	eq
    5144:	lsleq	r1, r1, #1
    5146:	tsteq.w	r1, #8388608	; 0x800000
    514a:	subeq	r3, #1
    514c:	beq.n	5142 <__aeabi_fdiv+0xda>
    514e:	orr.w	r1, r1, ip
    5152:	b.n	5080 <__aeabi_fdiv+0x18>
    5154:	and.w	r3, ip, r1, lsr #23
    5158:	teq	r2, ip
    515c:	bne.n	5170 <__aeabi_fdiv+0x108>
    515e:	lsls	r2, r0, #9
    5160:	bne.w	505e <__aeabi_fmul+0x15e>
    5164:	teq	r3, ip
    5168:	bne.w	504c <__aeabi_fmul+0x14c>
    516c:	mov	r0, r1
    516e:	b.n	505e <__aeabi_fmul+0x15e>
    5170:	teq	r3, ip
    5174:	bne.n	5180 <__aeabi_fdiv+0x118>
    5176:	lsls	r3, r1, #9
    5178:	beq.w	5014 <__aeabi_fmul+0x114>
    517c:	mov	r0, r1
    517e:	b.n	505e <__aeabi_fmul+0x15e>
    5180:	bics.w	ip, r0, #2147483648	; 0x80000000
    5184:	it	ne
    5186:	bicsne.w	ip, r1, #2147483648	; 0x80000000
    518a:	bne.n	5122 <__aeabi_fdiv+0xba>
    518c:	bics.w	r2, r0, #2147483648	; 0x80000000
    5190:	bne.w	504c <__aeabi_fmul+0x14c>
    5194:	bics.w	r3, r1, #2147483648	; 0x80000000
    5198:	bne.w	5014 <__aeabi_fmul+0x114>
    519c:	b.n	505e <__aeabi_fmul+0x15e>
    519e:	nop

000051a0 <__aeabi_f2uiz>:
    51a0:	lsls	r2, r0, #1
    51a2:	bcs.n	51c2 <__aeabi_f2uiz+0x22>
    51a4:	cmp.w	r2, #2130706432	; 0x7f000000
    51a8:	bcc.n	51c2 <__aeabi_f2uiz+0x22>
    51aa:	mov.w	r3, #158	; 0x9e
    51ae:	subs.w	r2, r3, r2, lsr #24
    51b2:	bmi.n	51c8 <__aeabi_f2uiz+0x28>
    51b4:	mov.w	r3, r0, lsl #8
    51b8:	orr.w	r3, r3, #2147483648	; 0x80000000
    51bc:	lsr.w	r0, r3, r2
    51c0:	bx	lr
    51c2:	mov.w	r0, #0
    51c6:	bx	lr
    51c8:	cmn.w	r2, #97	; 0x61
    51cc:	bne.n	51d2 <__aeabi_f2uiz+0x32>
    51ce:	lsls	r2, r0, #9
    51d0:	bne.n	51d8 <__aeabi_f2uiz+0x38>
    51d2:	mov.w	r0, #4294967295
    51d6:	bx	lr
    51d8:	mov.w	r0, #0
    51dc:	bx	lr
    51de:	nop

000051e0 <__aeabi_atexit>:
    51e0:	mov	r3, r1
    51e2:	mov	r1, r0
    51e4:	mov	r0, r3
    51e6:	b.w	51ec <__cxa_atexit>
    51ea:	nop

000051ec <__cxa_atexit>:
    51ec:	mov	r3, r2
    51ee:	mov	r2, r1
    51f0:	mov	r1, r0
    51f2:	movs	r0, #2
    51f4:	b.w	58ac <__register_exitproc>

000051f8 <__errno>:
    51f8:	ldr	r3, [pc, #4]	; (5200 <__errno+0x8>)
    51fa:	ldr	r0, [r3, #0]
    51fc:	bx	lr
    51fe:	nop
    5200:	.word	0x1fff90d0

00005204 <__libc_init_array>:
    5204:	push	{r4, r5, r6, lr}
    5206:	ldr	r6, [pc, #60]	; (5244 <__libc_init_array+0x40>)
    5208:	ldr	r5, [pc, #60]	; (5248 <__libc_init_array+0x44>)
    520a:	subs	r6, r6, r5
    520c:	asrs	r6, r6, #2
    520e:	it	ne
    5210:	movne	r4, #0
    5212:	beq.n	5220 <__libc_init_array+0x1c>
    5214:	adds	r4, #1
    5216:	ldr.w	r3, [r5], #4
    521a:	blx	r3
    521c:	cmp	r6, r4
    521e:	bne.n	5214 <__libc_init_array+0x10>
    5220:	ldr	r6, [pc, #40]	; (524c <__libc_init_array+0x48>)
    5222:	ldr	r5, [pc, #44]	; (5250 <__libc_init_array+0x4c>)
    5224:	subs	r6, r6, r5
    5226:	bl	5f14 <_init>
    522a:	asrs	r6, r6, #2
    522c:	it	ne
    522e:	movne	r4, #0
    5230:	beq.n	5240 <__libc_init_array+0x3c>
    5232:	adds	r4, #1
    5234:	ldr.w	r3, [r5], #4
    5238:	blx	r3
    523a:	cmp	r6, r4
    523c:	bne.n	5232 <__libc_init_array+0x2e>
    523e:	pop	{r4, r5, r6, pc}
    5240:	pop	{r4, r5, r6, pc}
    5242:	nop
    5244:	.word	0x00005f20
    5248:	.word	0x00005f20
    524c:	.word	0x00005f70
    5250:	.word	0x00005f20

00005254 <malloc>:
    5254:	ldr	r3, [pc, #8]	; (5260 <malloc+0xc>)
    5256:	mov	r1, r0
    5258:	ldr	r0, [r3, #0]
    525a:	b.w	5274 <_malloc_r>
    525e:	nop
    5260:	.word	0x1fff90d0

00005264 <free>:
    5264:	ldr	r3, [pc, #8]	; (5270 <free+0xc>)
    5266:	mov	r1, r0
    5268:	ldr	r0, [r3, #0]
    526a:	b.w	5a28 <_free_r>
    526e:	nop
    5270:	.word	0x1fff90d0

00005274 <_malloc_r>:
    5274:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5278:	add.w	r5, r1, #11
    527c:	cmp	r5, #22
    527e:	sub	sp, #12
    5280:	mov	r6, r0
    5282:	bls.w	53c4 <_malloc_r+0x150>
    5286:	bics.w	r5, r5, #7
    528a:	bmi.w	540c <_malloc_r+0x198>
    528e:	cmp	r1, r5
    5290:	bhi.w	540c <_malloc_r+0x198>
    5294:	bl	5880 <__malloc_lock>
    5298:	cmp.w	r5, #504	; 0x1f8
    529c:	bcc.w	57d8 <_malloc_r+0x564>
    52a0:	lsrs	r3, r5, #9
    52a2:	beq.w	541a <_malloc_r+0x1a6>
    52a6:	cmp	r3, #4
    52a8:	bhi.w	55b2 <_malloc_r+0x33e>
    52ac:	lsrs	r0, r5, #6
    52ae:	add.w	lr, r0, #57	; 0x39
    52b2:	mov.w	r3, lr, lsl #1
    52b6:	adds	r0, #56	; 0x38
    52b8:	ldr	r7, [pc, #784]	; (55cc <_malloc_r+0x358>)
    52ba:	add.w	r3, r7, r3, lsl #2
    52be:	sub.w	r1, r3, #8
    52c2:	ldr	r4, [r3, #4]
    52c4:	cmp	r1, r4
    52c6:	bne.n	52d8 <_malloc_r+0x64>
    52c8:	b.n	5424 <_malloc_r+0x1b0>
    52ca:	cmp	r2, #0
    52cc:	bge.w	5428 <_malloc_r+0x1b4>
    52d0:	ldr	r4, [r4, #12]
    52d2:	cmp	r1, r4
    52d4:	beq.w	5424 <_malloc_r+0x1b0>
    52d8:	ldr	r3, [r4, #4]
    52da:	bic.w	r3, r3, #3
    52de:	subs	r2, r3, r5
    52e0:	cmp	r2, #15
    52e2:	ble.n	52ca <_malloc_r+0x56>
    52e4:	ldr	r1, [pc, #740]	; (55cc <_malloc_r+0x358>)
    52e6:	ldr	r4, [r7, #16]
    52e8:	add.w	lr, r1, #8
    52ec:	cmp	r4, lr
    52ee:	beq.w	5658 <_malloc_r+0x3e4>
    52f2:	ldr	r3, [r4, #4]
    52f4:	bic.w	r3, r3, #3
    52f8:	subs	r2, r3, r5
    52fa:	cmp	r2, #15
    52fc:	bgt.w	5632 <_malloc_r+0x3be>
    5300:	cmp	r2, #0
    5302:	str.w	lr, [r1, #20]
    5306:	str.w	lr, [r1, #16]
    530a:	bge.w	544a <_malloc_r+0x1d6>
    530e:	cmp.w	r3, #512	; 0x200
    5312:	bcs.w	55e4 <_malloc_r+0x370>
    5316:	lsrs	r3, r3, #3
    5318:	add.w	ip, r3, #1
    531c:	movs	r2, #1
    531e:	asrs	r3, r3, #2
    5320:	lsl.w	r3, r2, r3
    5324:	ldr	r2, [r1, #4]
    5326:	ldr.w	r8, [r1, ip, lsl #3]
    532a:	str.w	r8, [r4, #8]
    532e:	add.w	r9, r1, ip, lsl #3
    5332:	orrs	r2, r3
    5334:	sub.w	r3, r9, #8
    5338:	str	r3, [r4, #12]
    533a:	str	r2, [r1, #4]
    533c:	str.w	r4, [r1, ip, lsl #3]
    5340:	str.w	r4, [r8, #12]
    5344:	asrs	r3, r0, #2
    5346:	movs	r4, #1
    5348:	lsls	r4, r3
    534a:	cmp	r4, r2
    534c:	bhi.w	5464 <_malloc_r+0x1f0>
    5350:	tst	r4, r2
    5352:	bne.n	5362 <_malloc_r+0xee>
    5354:	bic.w	r0, r0, #3
    5358:	lsls	r4, r4, #1
    535a:	tst	r4, r2
    535c:	add.w	r0, r0, #4
    5360:	beq.n	5358 <_malloc_r+0xe4>
    5362:	add.w	r9, r7, r0, lsl #3
    5366:	mov	ip, r9
    5368:	mov	r8, r0
    536a:	ldr.w	r1, [ip, #12]
    536e:	cmp	ip, r1
    5370:	bne.n	5382 <_malloc_r+0x10e>
    5372:	b.n	565c <_malloc_r+0x3e8>
    5374:	cmp	r2, #0
    5376:	bge.w	567c <_malloc_r+0x408>
    537a:	ldr	r1, [r1, #12]
    537c:	cmp	ip, r1
    537e:	beq.w	565c <_malloc_r+0x3e8>
    5382:	ldr	r3, [r1, #4]
    5384:	bic.w	r3, r3, #3
    5388:	subs	r2, r3, r5
    538a:	cmp	r2, #15
    538c:	ble.n	5374 <_malloc_r+0x100>
    538e:	mov	r4, r1
    5390:	ldr.w	ip, [r1, #12]
    5394:	ldr.w	r8, [r4, #8]!
    5398:	adds	r3, r1, r5
    539a:	orr.w	r5, r5, #1
    539e:	str	r5, [r1, #4]
    53a0:	orr.w	r1, r2, #1
    53a4:	str.w	ip, [r8, #12]
    53a8:	mov	r0, r6
    53aa:	str.w	r8, [ip, #8]
    53ae:	str	r3, [r7, #20]
    53b0:	str	r3, [r7, #16]
    53b2:	str.w	lr, [r3, #12]
    53b6:	str.w	lr, [r3, #8]
    53ba:	str	r1, [r3, #4]
    53bc:	str	r2, [r3, r2]
    53be:	bl	5884 <__malloc_unlock>
    53c2:	b.n	5404 <_malloc_r+0x190>
    53c4:	cmp	r1, #16
    53c6:	bhi.n	540c <_malloc_r+0x198>
    53c8:	bl	5880 <__malloc_lock>
    53cc:	movs	r5, #16
    53ce:	movs	r3, #6
    53d0:	movs	r0, #2
    53d2:	ldr	r7, [pc, #504]	; (55cc <_malloc_r+0x358>)
    53d4:	add.w	r3, r7, r3, lsl #2
    53d8:	sub.w	r2, r3, #8
    53dc:	ldr	r4, [r3, #4]
    53de:	cmp	r4, r2
    53e0:	beq.w	566e <_malloc_r+0x3fa>
    53e4:	ldr	r3, [r4, #4]
    53e6:	ldr	r1, [r4, #12]
    53e8:	ldr	r5, [r4, #8]
    53ea:	bic.w	r3, r3, #3
    53ee:	add	r3, r4
    53f0:	mov	r0, r6
    53f2:	ldr	r2, [r3, #4]
    53f4:	str	r1, [r5, #12]
    53f6:	orr.w	r2, r2, #1
    53fa:	str	r5, [r1, #8]
    53fc:	str	r2, [r3, #4]
    53fe:	bl	5884 <__malloc_unlock>
    5402:	adds	r4, #8
    5404:	mov	r0, r4
    5406:	add	sp, #12
    5408:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    540c:	movs	r4, #0
    540e:	movs	r3, #12
    5410:	mov	r0, r4
    5412:	str	r3, [r6, #0]
    5414:	add	sp, #12
    5416:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    541a:	movs	r3, #128	; 0x80
    541c:	mov.w	lr, #64	; 0x40
    5420:	movs	r0, #63	; 0x3f
    5422:	b.n	52b8 <_malloc_r+0x44>
    5424:	mov	r0, lr
    5426:	b.n	52e4 <_malloc_r+0x70>
    5428:	add	r3, r4
    542a:	ldr	r1, [r4, #12]
    542c:	ldr	r2, [r3, #4]
    542e:	ldr	r5, [r4, #8]
    5430:	orr.w	r2, r2, #1
    5434:	str	r1, [r5, #12]
    5436:	mov	r0, r6
    5438:	str	r5, [r1, #8]
    543a:	str	r2, [r3, #4]
    543c:	bl	5884 <__malloc_unlock>
    5440:	adds	r4, #8
    5442:	mov	r0, r4
    5444:	add	sp, #12
    5446:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    544a:	add	r3, r4
    544c:	mov	r0, r6
    544e:	ldr	r2, [r3, #4]
    5450:	orr.w	r2, r2, #1
    5454:	str	r2, [r3, #4]
    5456:	bl	5884 <__malloc_unlock>
    545a:	adds	r4, #8
    545c:	mov	r0, r4
    545e:	add	sp, #12
    5460:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5464:	ldr	r4, [r7, #8]
    5466:	ldr	r3, [r4, #4]
    5468:	bic.w	r8, r3, #3
    546c:	cmp	r8, r5
    546e:	bcc.n	547a <_malloc_r+0x206>
    5470:	rsb	r3, r5, r8
    5474:	cmp	r3, #15
    5476:	bgt.w	5592 <_malloc_r+0x31e>
    547a:	ldr	r3, [pc, #340]	; (55d0 <_malloc_r+0x35c>)
    547c:	ldr.w	r9, [pc, #352]	; 55e0 <_malloc_r+0x36c>
    5480:	ldr	r2, [r3, #0]
    5482:	ldr.w	r3, [r9]
    5486:	adds	r3, #1
    5488:	add	r2, r5
    548a:	add.w	sl, r4, r8
    548e:	beq.w	5752 <_malloc_r+0x4de>
    5492:	add.w	r2, r2, #4096	; 0x1000
    5496:	adds	r2, #15
    5498:	bic.w	r2, r2, #4080	; 0xff0
    549c:	bic.w	r2, r2, #15
    54a0:	mov	r1, r2
    54a2:	mov	r0, r6
    54a4:	str	r2, [sp, #4]
    54a6:	bl	5888 <_sbrk_r>
    54aa:	cmp.w	r0, #4294967295
    54ae:	mov	fp, r0
    54b0:	ldr	r2, [sp, #4]
    54b2:	beq.w	5766 <_malloc_r+0x4f2>
    54b6:	cmp	sl, r0
    54b8:	bhi.w	56b4 <_malloc_r+0x440>
    54bc:	ldr	r3, [pc, #276]	; (55d4 <_malloc_r+0x360>)
    54be:	ldr	r1, [r3, #0]
    54c0:	cmp	sl, fp
    54c2:	add	r1, r2
    54c4:	str	r1, [r3, #0]
    54c6:	beq.w	5770 <_malloc_r+0x4fc>
    54ca:	ldr.w	r0, [r9]
    54ce:	ldr.w	lr, [pc, #272]	; 55e0 <_malloc_r+0x36c>
    54d2:	adds	r0, #1
    54d4:	ittet	ne
    54d6:	rsbne	sl, sl, fp
    54da:	addne	r1, sl
    54dc:	streq.w	fp, [lr]
    54e0:	strne	r1, [r3, #0]
    54e2:	ands.w	r1, fp, #7
    54e6:	beq.w	5718 <_malloc_r+0x4a4>
    54ea:	rsb	r0, r1, #8
    54ee:	rsb	r1, r1, #4096	; 0x1000
    54f2:	add	fp, r0
    54f4:	adds	r1, #8
    54f6:	add	r2, fp
    54f8:	ubfx	r2, r2, #0, #12
    54fc:	rsb	r9, r2, r1
    5500:	mov	r1, r9
    5502:	mov	r0, r6
    5504:	str	r3, [sp, #4]
    5506:	bl	5888 <_sbrk_r>
    550a:	adds	r3, r0, #1
    550c:	ldr	r3, [sp, #4]
    550e:	beq.w	5790 <_malloc_r+0x51c>
    5512:	rsb	r2, fp, r0
    5516:	add	r2, r9
    5518:	orr.w	r2, r2, #1
    551c:	ldr	r1, [r3, #0]
    551e:	str.w	fp, [r7, #8]
    5522:	add	r1, r9
    5524:	cmp	r4, r7
    5526:	str.w	r2, [fp, #4]
    552a:	str	r1, [r3, #0]
    552c:	ldr.w	r9, [pc, #164]	; 55d4 <_malloc_r+0x360>
    5530:	beq.n	5560 <_malloc_r+0x2ec>
    5532:	cmp.w	r8, #15
    5536:	bls.w	5734 <_malloc_r+0x4c0>
    553a:	ldr	r2, [r4, #4]
    553c:	sub.w	r3, r8, #12
    5540:	bic.w	r3, r3, #7
    5544:	adds	r0, r4, r3
    5546:	and.w	r2, r2, #1
    554a:	mov.w	lr, #5
    554e:	orrs	r2, r3
    5550:	cmp	r3, #15
    5552:	str	r2, [r4, #4]
    5554:	str.w	lr, [r0, #4]
    5558:	str.w	lr, [r0, #8]
    555c:	bhi.w	5798 <_malloc_r+0x524>
    5560:	ldr	r3, [pc, #116]	; (55d8 <_malloc_r+0x364>)
    5562:	ldr	r4, [r7, #8]
    5564:	ldr	r2, [r3, #0]
    5566:	cmp	r1, r2
    5568:	it	hi
    556a:	strhi	r1, [r3, #0]
    556c:	ldr	r3, [pc, #108]	; (55dc <_malloc_r+0x368>)
    556e:	ldr	r2, [r3, #0]
    5570:	cmp	r1, r2
    5572:	ldr	r2, [r4, #4]
    5574:	it	hi
    5576:	strhi	r1, [r3, #0]
    5578:	bic.w	r2, r2, #3
    557c:	cmp	r5, r2
    557e:	sub.w	r3, r2, r5
    5582:	bhi.n	5588 <_malloc_r+0x314>
    5584:	cmp	r3, #15
    5586:	bgt.n	5592 <_malloc_r+0x31e>
    5588:	mov	r0, r6
    558a:	bl	5884 <__malloc_unlock>
    558e:	movs	r4, #0
    5590:	b.n	5404 <_malloc_r+0x190>
    5592:	adds	r2, r4, r5
    5594:	orr.w	r3, r3, #1
    5598:	orr.w	r5, r5, #1
    559c:	str	r5, [r4, #4]
    559e:	mov	r0, r6
    55a0:	str	r2, [r7, #8]
    55a2:	str	r3, [r2, #4]
    55a4:	bl	5884 <__malloc_unlock>
    55a8:	adds	r4, #8
    55aa:	mov	r0, r4
    55ac:	add	sp, #12
    55ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55b2:	cmp	r3, #20
    55b4:	bls.n	569a <_malloc_r+0x426>
    55b6:	cmp	r3, #84	; 0x54
    55b8:	bhi.w	5704 <_malloc_r+0x490>
    55bc:	lsrs	r0, r5, #12
    55be:	add.w	lr, r0, #111	; 0x6f
    55c2:	mov.w	r3, lr, lsl #1
    55c6:	adds	r0, #110	; 0x6e
    55c8:	b.n	52b8 <_malloc_r+0x44>
    55ca:	nop
    55cc:	.word	0x1fff90d4
    55d0:	.word	0x1fffb2bc
    55d4:	.word	0x1fffb2c0
    55d8:	.word	0x1fffb2b8
    55dc:	.word	0x1fffb2b4
    55e0:	.word	0x1fff94e0
    55e4:	lsrs	r2, r3, #9
    55e6:	cmp	r2, #4
    55e8:	bls.n	56a8 <_malloc_r+0x434>
    55ea:	cmp	r2, #20
    55ec:	bhi.w	5756 <_malloc_r+0x4e2>
    55f0:	add.w	r1, r2, #92	; 0x5c
    55f4:	lsls	r1, r1, #1
    55f6:	adds	r2, #91	; 0x5b
    55f8:	add.w	ip, r7, r1, lsl #2
    55fc:	ldr.w	r1, [r7, r1, lsl #2]
    5600:	ldr.w	r8, [pc, #476]	; 57e0 <_malloc_r+0x56c>
    5604:	sub.w	ip, ip, #8
    5608:	cmp	ip, r1
    560a:	beq.w	571e <_malloc_r+0x4aa>
    560e:	ldr	r2, [r1, #4]
    5610:	bic.w	r2, r2, #3
    5614:	cmp	r3, r2
    5616:	bcs.n	561e <_malloc_r+0x3aa>
    5618:	ldr	r1, [r1, #8]
    561a:	cmp	ip, r1
    561c:	bne.n	560e <_malloc_r+0x39a>
    561e:	ldr.w	ip, [r1, #12]
    5622:	ldr	r2, [r7, #4]
    5624:	str.w	ip, [r4, #12]
    5628:	str	r1, [r4, #8]
    562a:	str.w	r4, [ip, #8]
    562e:	str	r4, [r1, #12]
    5630:	b.n	5344 <_malloc_r+0xd0>
    5632:	adds	r3, r4, r5
    5634:	orr.w	r7, r2, #1
    5638:	orr.w	r5, r5, #1
    563c:	str	r5, [r4, #4]
    563e:	mov	r0, r6
    5640:	str	r3, [r1, #20]
    5642:	str	r3, [r1, #16]
    5644:	str.w	lr, [r3, #12]
    5648:	str.w	lr, [r3, #8]
    564c:	str	r7, [r3, #4]
    564e:	str	r2, [r3, r2]
    5650:	adds	r4, #8
    5652:	bl	5884 <__malloc_unlock>
    5656:	b.n	5404 <_malloc_r+0x190>
    5658:	ldr	r2, [r1, #4]
    565a:	b.n	5344 <_malloc_r+0xd0>
    565c:	add.w	r8, r8, #1
    5660:	tst.w	r8, #3
    5664:	add.w	ip, ip, #8
    5668:	bne.w	536a <_malloc_r+0xf6>
    566c:	b.n	56d0 <_malloc_r+0x45c>
    566e:	ldr	r4, [r3, #12]
    5670:	cmp	r3, r4
    5672:	it	eq
    5674:	addeq	r0, #2
    5676:	beq.w	52e4 <_malloc_r+0x70>
    567a:	b.n	53e4 <_malloc_r+0x170>
    567c:	add	r3, r1
    567e:	mov	r4, r1
    5680:	ldr	r2, [r3, #4]
    5682:	ldr	r1, [r1, #12]
    5684:	ldr.w	r5, [r4, #8]!
    5688:	orr.w	r2, r2, #1
    568c:	str	r2, [r3, #4]
    568e:	mov	r0, r6
    5690:	str	r1, [r5, #12]
    5692:	str	r5, [r1, #8]
    5694:	bl	5884 <__malloc_unlock>
    5698:	b.n	5404 <_malloc_r+0x190>
    569a:	add.w	lr, r3, #92	; 0x5c
    569e:	add.w	r0, r3, #91	; 0x5b
    56a2:	mov.w	r3, lr, lsl #1
    56a6:	b.n	52b8 <_malloc_r+0x44>
    56a8:	lsrs	r2, r3, #6
    56aa:	add.w	r1, r2, #57	; 0x39
    56ae:	lsls	r1, r1, #1
    56b0:	adds	r2, #56	; 0x38
    56b2:	b.n	55f8 <_malloc_r+0x384>
    56b4:	cmp	r4, r7
    56b6:	ldr	r3, [pc, #296]	; (57e0 <_malloc_r+0x56c>)
    56b8:	beq.w	54bc <_malloc_r+0x248>
    56bc:	ldr	r4, [r3, #8]
    56be:	ldr	r2, [r4, #4]
    56c0:	bic.w	r2, r2, #3
    56c4:	b.n	557c <_malloc_r+0x308>
    56c6:	ldr.w	r3, [r9], #-8
    56ca:	cmp	r9, r3
    56cc:	bne.w	57d4 <_malloc_r+0x560>
    56d0:	tst.w	r0, #3
    56d4:	add.w	r0, r0, #4294967295
    56d8:	bne.n	56c6 <_malloc_r+0x452>
    56da:	ldr	r3, [r7, #4]
    56dc:	bic.w	r3, r3, r4
    56e0:	str	r3, [r7, #4]
    56e2:	lsls	r4, r4, #1
    56e4:	cmp	r4, r3
    56e6:	bhi.w	5464 <_malloc_r+0x1f0>
    56ea:	cmp	r4, #0
    56ec:	beq.w	5464 <_malloc_r+0x1f0>
    56f0:	tst	r4, r3
    56f2:	mov	r0, r8
    56f4:	bne.w	5362 <_malloc_r+0xee>
    56f8:	lsls	r4, r4, #1
    56fa:	tst	r4, r3
    56fc:	add.w	r0, r0, #4
    5700:	beq.n	56f8 <_malloc_r+0x484>
    5702:	b.n	5362 <_malloc_r+0xee>
    5704:	cmp.w	r3, #340	; 0x154
    5708:	bhi.n	573c <_malloc_r+0x4c8>
    570a:	lsrs	r0, r5, #15
    570c:	add.w	lr, r0, #120	; 0x78
    5710:	mov.w	r3, lr, lsl #1
    5714:	adds	r0, #119	; 0x77
    5716:	b.n	52b8 <_malloc_r+0x44>
    5718:	mov.w	r1, #4096	; 0x1000
    571c:	b.n	54f6 <_malloc_r+0x282>
    571e:	movs	r1, #1
    5720:	ldr.w	r3, [r8, #4]
    5724:	asrs	r2, r2, #2
    5726:	lsl.w	r2, r1, r2
    572a:	orrs	r2, r3
    572c:	str.w	r2, [r8, #4]
    5730:	mov	r1, ip
    5732:	b.n	5624 <_malloc_r+0x3b0>
    5734:	movs	r3, #1
    5736:	str.w	r3, [fp, #4]
    573a:	b.n	5588 <_malloc_r+0x314>
    573c:	movw	r2, #1364	; 0x554
    5740:	cmp	r3, r2
    5742:	bhi.n	5786 <_malloc_r+0x512>
    5744:	lsrs	r0, r5, #18
    5746:	add.w	lr, r0, #125	; 0x7d
    574a:	mov.w	r3, lr, lsl #1
    574e:	adds	r0, #124	; 0x7c
    5750:	b.n	52b8 <_malloc_r+0x44>
    5752:	adds	r2, #16
    5754:	b.n	54a0 <_malloc_r+0x22c>
    5756:	cmp	r2, #84	; 0x54
    5758:	bhi.n	57a8 <_malloc_r+0x534>
    575a:	lsrs	r2, r3, #12
    575c:	add.w	r1, r2, #111	; 0x6f
    5760:	lsls	r1, r1, #1
    5762:	adds	r2, #110	; 0x6e
    5764:	b.n	55f8 <_malloc_r+0x384>
    5766:	ldr	r4, [r7, #8]
    5768:	ldr	r2, [r4, #4]
    576a:	bic.w	r2, r2, #3
    576e:	b.n	557c <_malloc_r+0x308>
    5770:	ubfx	r0, sl, #0, #12
    5774:	cmp	r0, #0
    5776:	bne.w	54ca <_malloc_r+0x256>
    577a:	add	r2, r8
    577c:	ldr	r3, [r7, #8]
    577e:	orr.w	r2, r2, #1
    5782:	str	r2, [r3, #4]
    5784:	b.n	5560 <_malloc_r+0x2ec>
    5786:	movs	r3, #254	; 0xfe
    5788:	mov.w	lr, #127	; 0x7f
    578c:	movs	r0, #126	; 0x7e
    578e:	b.n	52b8 <_malloc_r+0x44>
    5790:	movs	r2, #1
    5792:	mov.w	r9, #0
    5796:	b.n	551c <_malloc_r+0x2a8>
    5798:	add.w	r1, r4, #8
    579c:	mov	r0, r6
    579e:	bl	5a28 <_free_r>
    57a2:	ldr.w	r1, [r9]
    57a6:	b.n	5560 <_malloc_r+0x2ec>
    57a8:	cmp.w	r2, #340	; 0x154
    57ac:	bhi.n	57ba <_malloc_r+0x546>
    57ae:	lsrs	r2, r3, #15
    57b0:	add.w	r1, r2, #120	; 0x78
    57b4:	lsls	r1, r1, #1
    57b6:	adds	r2, #119	; 0x77
    57b8:	b.n	55f8 <_malloc_r+0x384>
    57ba:	movw	r1, #1364	; 0x554
    57be:	cmp	r2, r1
    57c0:	bhi.n	57ce <_malloc_r+0x55a>
    57c2:	lsrs	r2, r3, #18
    57c4:	add.w	r1, r2, #125	; 0x7d
    57c8:	lsls	r1, r1, #1
    57ca:	adds	r2, #124	; 0x7c
    57cc:	b.n	55f8 <_malloc_r+0x384>
    57ce:	movs	r1, #254	; 0xfe
    57d0:	movs	r2, #126	; 0x7e
    57d2:	b.n	55f8 <_malloc_r+0x384>
    57d4:	ldr	r3, [r7, #4]
    57d6:	b.n	56e2 <_malloc_r+0x46e>
    57d8:	lsrs	r0, r5, #3
    57da:	adds	r3, r0, #1
    57dc:	lsls	r3, r3, #1
    57de:	b.n	53d2 <_malloc_r+0x15e>
    57e0:	.word	0x1fff90d4

000057e4 <memset>:
    57e4:	push	{r4, r5, r6}
    57e6:	lsls	r4, r0, #30
    57e8:	beq.n	5878 <memset+0x94>
    57ea:	subs	r4, r2, #1
    57ec:	cmp	r2, #0
    57ee:	beq.n	5874 <memset+0x90>
    57f0:	uxtb	r5, r1
    57f2:	mov	r3, r0
    57f4:	b.n	57fc <memset+0x18>
    57f6:	subs	r2, r4, #1
    57f8:	cbz	r4, 5874 <memset+0x90>
    57fa:	mov	r4, r2
    57fc:	strb.w	r5, [r3], #1
    5800:	lsls	r2, r3, #30
    5802:	bne.n	57f6 <memset+0x12>
    5804:	cmp	r4, #3
    5806:	bls.n	5866 <memset+0x82>
    5808:	uxtb	r5, r1
    580a:	orr.w	r5, r5, r5, lsl #8
    580e:	cmp	r4, #15
    5810:	orr.w	r5, r5, r5, lsl #16
    5814:	bls.n	584a <memset+0x66>
    5816:	add.w	r2, r3, #16
    581a:	mov	r6, r4
    581c:	subs	r6, #16
    581e:	cmp	r6, #15
    5820:	str.w	r5, [r2, #-16]
    5824:	str.w	r5, [r2, #-12]
    5828:	str.w	r5, [r2, #-8]
    582c:	str.w	r5, [r2, #-4]
    5830:	add.w	r2, r2, #16
    5834:	bhi.n	581c <memset+0x38>
    5836:	sub.w	r2, r4, #16
    583a:	bic.w	r2, r2, #15
    583e:	and.w	r4, r4, #15
    5842:	adds	r2, #16
    5844:	cmp	r4, #3
    5846:	add	r3, r2
    5848:	bls.n	5866 <memset+0x82>
    584a:	mov	r6, r3
    584c:	mov	r2, r4
    584e:	subs	r2, #4
    5850:	cmp	r2, #3
    5852:	str.w	r5, [r6], #4
    5856:	bhi.n	584e <memset+0x6a>
    5858:	subs	r2, r4, #4
    585a:	bic.w	r2, r2, #3
    585e:	adds	r2, #4
    5860:	add	r3, r2
    5862:	and.w	r4, r4, #3
    5866:	cbz	r4, 5874 <memset+0x90>
    5868:	uxtb	r1, r1
    586a:	add	r4, r3
    586c:	strb.w	r1, [r3], #1
    5870:	cmp	r3, r4
    5872:	bne.n	586c <memset+0x88>
    5874:	pop	{r4, r5, r6}
    5876:	bx	lr
    5878:	mov	r4, r2
    587a:	mov	r3, r0
    587c:	b.n	5804 <memset+0x20>
    587e:	nop

00005880 <__malloc_lock>:
    5880:	bx	lr
    5882:	nop

00005884 <__malloc_unlock>:
    5884:	bx	lr
    5886:	nop

00005888 <_sbrk_r>:
    5888:	push	{r3, r4, r5, lr}
    588a:	ldr	r4, [pc, #28]	; (58a8 <_sbrk_r+0x20>)
    588c:	movs	r3, #0
    588e:	mov	r5, r0
    5890:	mov	r0, r1
    5892:	str	r3, [r4, #0]
    5894:	bl	302c <_sbrk>
    5898:	adds	r3, r0, #1
    589a:	beq.n	589e <_sbrk_r+0x16>
    589c:	pop	{r3, r4, r5, pc}
    589e:	ldr	r3, [r4, #0]
    58a0:	cmp	r3, #0
    58a2:	beq.n	589c <_sbrk_r+0x14>
    58a4:	str	r3, [r5, #0]
    58a6:	pop	{r3, r4, r5, pc}
    58a8:	.word	0x1fffb2fc

000058ac <__register_exitproc>:
    58ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58b0:	ldr	r4, [pc, #148]	; (5948 <__register_exitproc+0x9c>)
    58b2:	ldr	r5, [r4, #0]
    58b4:	ldr.w	r4, [r5, #328]	; 0x148
    58b8:	mov	r6, r0
    58ba:	mov	r8, r1
    58bc:	mov	sl, r2
    58be:	mov	r9, r3
    58c0:	cbz	r4, 5934 <__register_exitproc+0x88>
    58c2:	ldr	r0, [r4, #4]
    58c4:	cmp	r0, #31
    58c6:	bgt.n	58f8 <__register_exitproc+0x4c>
    58c8:	adds	r3, r0, #1
    58ca:	cbz	r6, 58ea <__register_exitproc+0x3e>
    58cc:	add.w	r5, r4, r0, lsl #2
    58d0:	movs	r2, #1
    58d2:	str.w	sl, [r5, #136]	; 0x88
    58d6:	ldr.w	r1, [r4, #392]	; 0x188
    58da:	lsls	r2, r0
    58dc:	orrs	r1, r2
    58de:	cmp	r6, #2
    58e0:	str.w	r1, [r4, #392]	; 0x188
    58e4:	str.w	r9, [r5, #264]	; 0x108
    58e8:	beq.n	5928 <__register_exitproc+0x7c>
    58ea:	adds	r0, #2
    58ec:	str	r3, [r4, #4]
    58ee:	str.w	r8, [r4, r0, lsl #2]
    58f2:	movs	r0, #0
    58f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58f8:	ldr	r3, [pc, #80]	; (594c <__register_exitproc+0xa0>)
    58fa:	cbz	r3, 593e <__register_exitproc+0x92>
    58fc:	mov.w	r0, #400	; 0x190
    5900:	bl	5254 <malloc>
    5904:	mov	r4, r0
    5906:	cbz	r0, 593e <__register_exitproc+0x92>
    5908:	ldr.w	r3, [r5, #328]	; 0x148
    590c:	movs	r7, #0
    590e:	stmia.w	r0, {r3, r7}
    5912:	str.w	r4, [r5, #328]	; 0x148
    5916:	mov	r0, r7
    5918:	movs	r3, #1
    591a:	str.w	r7, [r4, #392]	; 0x188
    591e:	str.w	r7, [r4, #396]	; 0x18c
    5922:	cmp	r6, #0
    5924:	beq.n	58ea <__register_exitproc+0x3e>
    5926:	b.n	58cc <__register_exitproc+0x20>
    5928:	ldr.w	r1, [r4, #396]	; 0x18c
    592c:	orrs	r2, r1
    592e:	str.w	r2, [r4, #396]	; 0x18c
    5932:	b.n	58ea <__register_exitproc+0x3e>
    5934:	add.w	r4, r5, #332	; 0x14c
    5938:	str.w	r4, [r5, #328]	; 0x148
    593c:	b.n	58c2 <__register_exitproc+0x16>
    593e:	mov.w	r0, #4294967295
    5942:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5946:	nop
    5948:	.word	0x00005f10
    594c:	.word	0x00005255

00005950 <register_fini>:
    5950:	ldr	r3, [pc, #8]	; (595c <register_fini+0xc>)
    5952:	cbz	r3, 595a <register_fini+0xa>
    5954:	ldr	r0, [pc, #8]	; (5960 <register_fini+0x10>)
    5956:	b.w	9f4 <atexit>
    595a:	bx	lr
    595c:	.word	0x00000000
    5960:	.word	0x00005965

00005964 <__libc_fini_array>:
    5964:	push	{r3, r4, r5, lr}
    5966:	ldr	r5, [pc, #28]	; (5984 <__libc_fini_array+0x20>)
    5968:	ldr	r4, [pc, #28]	; (5988 <__libc_fini_array+0x24>)
    596a:	subs	r4, r5, r4
    596c:	asrs	r4, r4, #2
    596e:	beq.n	597c <__libc_fini_array+0x18>
    5970:	subs	r4, #1
    5972:	ldr.w	r3, [r5, #-4]!
    5976:	blx	r3
    5978:	cmp	r4, #0
    597a:	bne.n	5970 <__libc_fini_array+0xc>
    597c:	ldmia.w	sp!, {r3, r4, r5, lr}
    5980:	b.w	5f70 <__init_array_end>
	...

0000598c <_malloc_trim_r>:
    598c:	push	{r3, r4, r5, r6, r7, lr}
    598e:	ldr	r7, [pc, #140]	; (5a1c <_malloc_trim_r+0x90>)
    5990:	mov	r4, r1
    5992:	mov	r6, r0
    5994:	bl	5880 <__malloc_lock>
    5998:	ldr	r3, [r7, #8]
    599a:	ldr	r5, [r3, #4]
    599c:	bic.w	r5, r5, #3
    59a0:	subs	r1, r5, r4
    59a2:	addw	r1, r1, #4079	; 0xfef
    59a6:	bic.w	r1, r1, #4080	; 0xff0
    59aa:	bic.w	r1, r1, #15
    59ae:	sub.w	r4, r1, #4096	; 0x1000
    59b2:	cmp.w	r4, #4096	; 0x1000
    59b6:	blt.n	59c8 <_malloc_trim_r+0x3c>
    59b8:	movs	r1, #0
    59ba:	mov	r0, r6
    59bc:	bl	5888 <_sbrk_r>
    59c0:	ldr	r3, [r7, #8]
    59c2:	add	r3, r5
    59c4:	cmp	r0, r3
    59c6:	beq.n	59d2 <_malloc_trim_r+0x46>
    59c8:	mov	r0, r6
    59ca:	bl	5884 <__malloc_unlock>
    59ce:	movs	r0, #0
    59d0:	pop	{r3, r4, r5, r6, r7, pc}
    59d2:	negs	r1, r4
    59d4:	mov	r0, r6
    59d6:	bl	5888 <_sbrk_r>
    59da:	adds	r0, #1
    59dc:	beq.n	59fa <_malloc_trim_r+0x6e>
    59de:	ldr	r3, [pc, #64]	; (5a20 <_malloc_trim_r+0x94>)
    59e0:	ldr	r2, [r7, #8]
    59e2:	ldr	r1, [r3, #0]
    59e4:	subs	r5, r5, r4
    59e6:	orr.w	r5, r5, #1
    59ea:	mov	r0, r6
    59ec:	subs	r1, r1, r4
    59ee:	str	r5, [r2, #4]
    59f0:	str	r1, [r3, #0]
    59f2:	bl	5884 <__malloc_unlock>
    59f6:	movs	r0, #1
    59f8:	pop	{r3, r4, r5, r6, r7, pc}
    59fa:	movs	r1, #0
    59fc:	mov	r0, r6
    59fe:	bl	5888 <_sbrk_r>
    5a02:	ldr	r2, [r7, #8]
    5a04:	subs	r3, r0, r2
    5a06:	cmp	r3, #15
    5a08:	ble.n	59c8 <_malloc_trim_r+0x3c>
    5a0a:	ldr	r4, [pc, #24]	; (5a24 <_malloc_trim_r+0x98>)
    5a0c:	ldr	r1, [pc, #16]	; (5a20 <_malloc_trim_r+0x94>)
    5a0e:	ldr	r4, [r4, #0]
    5a10:	orr.w	r3, r3, #1
    5a14:	subs	r0, r0, r4
    5a16:	str	r3, [r2, #4]
    5a18:	str	r0, [r1, #0]
    5a1a:	b.n	59c8 <_malloc_trim_r+0x3c>
    5a1c:	.word	0x1fff90d4
    5a20:	.word	0x1fffb2c0
    5a24:	.word	0x1fff94e0

00005a28 <_free_r>:
    5a28:	cmp	r1, #0
    5a2a:	beq.n	5ab8 <_free_r+0x90>
    5a2c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a30:	mov	r5, r1
    5a32:	mov	r8, r0
    5a34:	bl	5880 <__malloc_lock>
    5a38:	ldr.w	r7, [r5, #-4]
    5a3c:	ldr	r1, [pc, #424]	; (5be8 <_free_r+0x1c0>)
    5a3e:	bic.w	r3, r7, #1
    5a42:	sub.w	r4, r5, #8
    5a46:	adds	r2, r4, r3
    5a48:	ldr	r6, [r1, #8]
    5a4a:	ldr	r0, [r2, #4]
    5a4c:	cmp	r2, r6
    5a4e:	bic.w	r0, r0, #3
    5a52:	beq.n	5b1a <_free_r+0xf2>
    5a54:	lsls	r6, r7, #31
    5a56:	str	r0, [r2, #4]
    5a58:	bmi.n	5a72 <_free_r+0x4a>
    5a5a:	ldr.w	r7, [r5, #-8]
    5a5e:	subs	r4, r4, r7
    5a60:	add.w	lr, r1, #8
    5a64:	ldr	r5, [r4, #8]
    5a66:	cmp	r5, lr
    5a68:	add	r3, r7
    5a6a:	beq.n	5b4c <_free_r+0x124>
    5a6c:	ldr	r7, [r4, #12]
    5a6e:	str	r7, [r5, #12]
    5a70:	str	r5, [r7, #8]
    5a72:	adds	r5, r2, r0
    5a74:	ldr	r5, [r5, #4]
    5a76:	lsls	r5, r5, #31
    5a78:	bpl.n	5b00 <_free_r+0xd8>
    5a7a:	orr.w	r2, r3, #1
    5a7e:	str	r2, [r4, #4]
    5a80:	str	r3, [r4, r3]
    5a82:	cmp.w	r3, #512	; 0x200
    5a86:	bcs.n	5aba <_free_r+0x92>
    5a88:	lsrs	r3, r3, #3
    5a8a:	adds	r2, r3, #1
    5a8c:	ldr	r5, [r1, #4]
    5a8e:	ldr.w	r7, [r1, r2, lsl #3]
    5a92:	str	r7, [r4, #8]
    5a94:	movs	r0, #1
    5a96:	asrs	r3, r3, #2
    5a98:	lsl.w	r3, r0, r3
    5a9c:	add.w	r0, r1, r2, lsl #3
    5aa0:	orrs	r5, r3
    5aa2:	subs	r0, #8
    5aa4:	str	r0, [r4, #12]
    5aa6:	str	r5, [r1, #4]
    5aa8:	str.w	r4, [r1, r2, lsl #3]
    5aac:	str	r4, [r7, #12]
    5aae:	mov	r0, r8
    5ab0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ab4:	b.w	5884 <__malloc_unlock>
    5ab8:	bx	lr
    5aba:	lsrs	r2, r3, #9
    5abc:	cmp	r2, #4
    5abe:	bhi.n	5b68 <_free_r+0x140>
    5ac0:	lsrs	r2, r3, #6
    5ac2:	add.w	r7, r2, #57	; 0x39
    5ac6:	lsls	r7, r7, #1
    5ac8:	add.w	r5, r2, #56	; 0x38
    5acc:	add.w	r0, r1, r7, lsl #2
    5ad0:	ldr.w	r2, [r1, r7, lsl #2]
    5ad4:	ldr	r1, [pc, #272]	; (5be8 <_free_r+0x1c0>)
    5ad6:	subs	r0, #8
    5ad8:	cmp	r0, r2
    5ada:	beq.n	5b78 <_free_r+0x150>
    5adc:	ldr	r1, [r2, #4]
    5ade:	bic.w	r1, r1, #3
    5ae2:	cmp	r3, r1
    5ae4:	bcs.n	5aec <_free_r+0xc4>
    5ae6:	ldr	r2, [r2, #8]
    5ae8:	cmp	r0, r2
    5aea:	bne.n	5adc <_free_r+0xb4>
    5aec:	ldr	r0, [r2, #12]
    5aee:	str	r0, [r4, #12]
    5af0:	str	r2, [r4, #8]
    5af2:	str	r4, [r0, #8]
    5af4:	str	r4, [r2, #12]
    5af6:	mov	r0, r8
    5af8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5afc:	b.w	5884 <__malloc_unlock>
    5b00:	ldr	r5, [r2, #8]
    5b02:	ldr	r7, [pc, #232]	; (5bec <_free_r+0x1c4>)
    5b04:	cmp	r5, r7
    5b06:	add	r3, r0
    5b08:	beq.n	5b8a <_free_r+0x162>
    5b0a:	ldr	r0, [r2, #12]
    5b0c:	str	r0, [r5, #12]
    5b0e:	orr.w	r2, r3, #1
    5b12:	str	r5, [r0, #8]
    5b14:	str	r2, [r4, #4]
    5b16:	str	r3, [r4, r3]
    5b18:	b.n	5a82 <_free_r+0x5a>
    5b1a:	lsls	r7, r7, #31
    5b1c:	add	r3, r0
    5b1e:	bmi.n	5b30 <_free_r+0x108>
    5b20:	ldr.w	r2, [r5, #-8]
    5b24:	subs	r4, r4, r2
    5b26:	add	r3, r2
    5b28:	ldr	r0, [r4, #8]
    5b2a:	ldr	r2, [r4, #12]
    5b2c:	str	r2, [r0, #12]
    5b2e:	str	r0, [r2, #8]
    5b30:	ldr	r2, [pc, #188]	; (5bf0 <_free_r+0x1c8>)
    5b32:	ldr	r2, [r2, #0]
    5b34:	orr.w	r0, r3, #1
    5b38:	cmp	r3, r2
    5b3a:	str	r0, [r4, #4]
    5b3c:	str	r4, [r1, #8]
    5b3e:	bcc.n	5aae <_free_r+0x86>
    5b40:	ldr	r3, [pc, #176]	; (5bf4 <_free_r+0x1cc>)
    5b42:	mov	r0, r8
    5b44:	ldr	r1, [r3, #0]
    5b46:	bl	598c <_malloc_trim_r>
    5b4a:	b.n	5aae <_free_r+0x86>
    5b4c:	adds	r1, r2, r0
    5b4e:	ldr	r1, [r1, #4]
    5b50:	lsls	r1, r1, #31
    5b52:	bmi.n	5bde <_free_r+0x1b6>
    5b54:	ldr	r1, [r2, #8]
    5b56:	ldr	r2, [r2, #12]
    5b58:	str	r2, [r1, #12]
    5b5a:	add	r3, r0
    5b5c:	orr.w	r0, r3, #1
    5b60:	str	r1, [r2, #8]
    5b62:	str	r0, [r4, #4]
    5b64:	str	r3, [r4, r3]
    5b66:	b.n	5aae <_free_r+0x86>
    5b68:	cmp	r2, #20
    5b6a:	bhi.n	5b9c <_free_r+0x174>
    5b6c:	add.w	r7, r2, #92	; 0x5c
    5b70:	lsls	r7, r7, #1
    5b72:	add.w	r5, r2, #91	; 0x5b
    5b76:	b.n	5acc <_free_r+0xa4>
    5b78:	asrs	r2, r5, #2
    5b7a:	ldr	r3, [r1, #4]
    5b7c:	movs	r5, #1
    5b7e:	lsl.w	r2, r5, r2
    5b82:	orrs	r3, r2
    5b84:	str	r3, [r1, #4]
    5b86:	mov	r2, r0
    5b88:	b.n	5aee <_free_r+0xc6>
    5b8a:	orr.w	r2, r3, #1
    5b8e:	str	r4, [r1, #20]
    5b90:	str	r4, [r1, #16]
    5b92:	str	r5, [r4, #12]
    5b94:	str	r5, [r4, #8]
    5b96:	str	r2, [r4, #4]
    5b98:	str	r3, [r4, r3]
    5b9a:	b.n	5aae <_free_r+0x86>
    5b9c:	cmp	r2, #84	; 0x54
    5b9e:	bhi.n	5bae <_free_r+0x186>
    5ba0:	lsrs	r2, r3, #12
    5ba2:	add.w	r7, r2, #111	; 0x6f
    5ba6:	lsls	r7, r7, #1
    5ba8:	add.w	r5, r2, #110	; 0x6e
    5bac:	b.n	5acc <_free_r+0xa4>
    5bae:	cmp.w	r2, #340	; 0x154
    5bb2:	bhi.n	5bc2 <_free_r+0x19a>
    5bb4:	lsrs	r2, r3, #15
    5bb6:	add.w	r7, r2, #120	; 0x78
    5bba:	lsls	r7, r7, #1
    5bbc:	add.w	r5, r2, #119	; 0x77
    5bc0:	b.n	5acc <_free_r+0xa4>
    5bc2:	movw	r0, #1364	; 0x554
    5bc6:	cmp	r2, r0
    5bc8:	bhi.n	5bd8 <_free_r+0x1b0>
    5bca:	lsrs	r2, r3, #18
    5bcc:	add.w	r7, r2, #125	; 0x7d
    5bd0:	lsls	r7, r7, #1
    5bd2:	add.w	r5, r2, #124	; 0x7c
    5bd6:	b.n	5acc <_free_r+0xa4>
    5bd8:	movs	r7, #254	; 0xfe
    5bda:	movs	r5, #126	; 0x7e
    5bdc:	b.n	5acc <_free_r+0xa4>
    5bde:	orr.w	r2, r3, #1
    5be2:	str	r2, [r4, #4]
    5be4:	str	r3, [r4, r3]
    5be6:	b.n	5aae <_free_r+0x86>
    5be8:	.word	0x1fff90d4
    5bec:	.word	0x1fff90dc
    5bf0:	.word	0x1fff94dc
    5bf4:	.word	0x1fffb2bc

00005bf8 <vtable for AudioStream>:
	...
    5c00:	Y0..

00005c04 <vtable for ArduinoJson::DynamicJsonBufferBase<ArduinoJson::DefaultAllocator>>:
	...
    5c0c:	m...............
    5c1c:	................
    5c2c:	................
    5c3c:	................
    5c4c:	....

00005c50 <vtable for AudioControlSGTL5000>:
	...
    5c58:	....M...Q...Q...
    5c68:	....

00005c6c <vtable for AudioMixer4>:
	...
    5c74:	}...

00005c78 <vtable for AudioPlaySdWav>:
	...
    5c80:	i...

00005c84 <vtable for AudioOutputI2S>:
	...
    5c8c:	m...

00005c90 <TwoWire::i2c0_hardware>:
    5c90:	4..@@...........
    5ca0:	................

00005cb0 <TwoWire::i2c1_hardware>:
    5cb0:	4..@............
    5cc0:	................

00005cd0 <vtable for TwoWire>:
	...
    5cd8:	....Q.......M...
    5ce8:	........5...

00005cf4 <SPIClass::spi0_hardware>:
    5cf4:	<..@............
    5d04:	................
    5d14:	........@.......
    5d24:	....@...........
    5d34:	................
    5d44:	................
    5d54:	................
    5d64:	........

00005d6c <vtable for File>:
	...
    5d74:	............=...
    5d84:	............

00005d90 <vtable for SdFile>:
	...
    5d98:	Y&..eE......}...

00005da8 <digital_pin_to_info_PGM>:
    5da8:	@..C@..@D..CD..@
    5db8:	...C...@0..C0..@
    5dc8:	4..C4..@...C...@
    5dd8:	...C...@...C...@
    5de8:	...C...@...C...@
    5df8:	...C...@...C...@
    5e08:	...C...@...C...@
    5e18:	...C...@...C...@
    5e28:	...C...@...C...@
    5e38:	...C...@...C...@
    5e48:	...C...@...C...@
    5e58:	...C...@...C...@
    5e68:	...C...@L..CL..@
    5e78:	. .C...@$..C$..@
    5e88:	 ..C ..@(..C(..@
    5e98:	,..C,..@. .C...@
    5ea8:	H..CH..@...C...@

00005eb8 <usb_endpoint_config_table>:
    5eb8:	....

00005ebc <usb_descriptor_list>:
    5ebc:	................
    5ecc:	,...C...........
    5edc:	................
    5eec:	....p...........
    5efc:	................
    5f0c:	....

00005f10 <_global_impure_ptr>:
    5f10:	....

00005f14 <_init>:
    5f14:	push	{r3, r4, r5, r6, r7, lr}
    5f16:	nop
    5f18:	pop	{r3, r4, r5, r6, r7}
    5f1a:	pop	{r3}
    5f1c:	mov	lr, r3
    5f1e:	bx	lr

00005f20 <__init_array_start>:
    5f20:	.word	0x00005951

00005f24 <__frame_dummy_init_array_entry>:
    5f24:	5...............
    5f34:	5...q...........
    5f44:	................
    5f54:	!...9...Q.......
    5f64:	.........*..

Disassembly of section .fini:

00005f70 <_fini>:
    5f70:	push	{r3, r4, r5, r6, r7, lr}
    5f72:	nop

Disassembly of section .data:

1fff8920 <port_E_isr>:
#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
PORT_ISR_FUNCTION_CLZ(E)
1fff8920:	push	{r3, r4, r5, lr}
1fff8922:	ldr	r3, [pc, #32]	; (1fff8944 <port_E_isr+0x24>)
1fff8924:	ldr	r4, [r3, #0]
1fff8926:	str	r4, [r3, #0]
1fff8928:	cbz	r4, 1fff8940 <port_E_isr+0x20>
1fff892a:	ldr	r5, [pc, #28]	; (1fff8948 <port_E_isr+0x28>)
1fff892c:	rbit	r3, r4
1fff8930:	clz	r3, r3
1fff8934:	ldr.w	r3, [r5, r3, lsl #2]
1fff8938:	blx	r3
1fff893a:	subs	r3, r4, #1
1fff893c:	ands	r4, r3
1fff893e:	bne.n	1fff892c <port_E_isr+0xc>
1fff8940:	pop	{r3, r4, r5, pc}
1fff8942:	nop
1fff8944:	.word	0x4004d0a0
1fff8948:	.word	0x1fff8bf4

1fff894c <port_D_isr>:

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
1fff894c:	push	{r3, r4, r5, lr}
1fff894e:	ldr	r3, [pc, #32]	; (1fff8970 <port_D_isr+0x24>)
1fff8950:	ldr	r4, [r3, #0]
1fff8952:	str	r4, [r3, #0]
1fff8954:	cbz	r4, 1fff896c <port_D_isr+0x20>
1fff8956:	ldr	r5, [pc, #28]	; (1fff8974 <port_D_isr+0x28>)
1fff8958:	rbit	r3, r4
1fff895c:	clz	r3, r3
1fff8960:	ldr.w	r3, [r5, r3, lsl #2]
1fff8964:	blx	r3
1fff8966:	subs	r3, r4, #1
1fff8968:	ands	r4, r3
1fff896a:	bne.n	1fff8958 <port_D_isr+0xc>
1fff896c:	pop	{r3, r4, r5, pc}
1fff896e:	nop
1fff8970:	.word	0x4004c0a0
1fff8974:	.word	0x1fff8bd4

1fff8978 <port_C_isr>:
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
1fff8978:	push	{r3, r4, r5, lr}
1fff897a:	ldr	r3, [pc, #32]	; (1fff899c <port_C_isr+0x24>)
1fff897c:	ldr	r4, [r3, #0]
1fff897e:	str	r4, [r3, #0]
1fff8980:	cbz	r4, 1fff8998 <port_C_isr+0x20>
1fff8982:	ldr	r5, [pc, #28]	; (1fff89a0 <port_C_isr+0x28>)
1fff8984:	rbit	r3, r4
1fff8988:	clz	r3, r3
1fff898c:	ldr.w	r3, [r5, r3, lsl #2]
1fff8990:	blx	r3
1fff8992:	subs	r3, r4, #1
1fff8994:	ands	r4, r3
1fff8996:	bne.n	1fff8984 <port_C_isr+0xc>
1fff8998:	pop	{r3, r4, r5, pc}
1fff899a:	nop
1fff899c:	.word	0x4004b0a0
1fff89a0:	.word	0x1fff8ba4

1fff89a4 <port_B_isr>:
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
1fff89a4:	push	{r3, r4, r5, lr}
1fff89a6:	ldr	r3, [pc, #32]	; (1fff89c8 <port_B_isr+0x24>)
1fff89a8:	ldr	r4, [r3, #0]
1fff89aa:	str	r4, [r3, #0]
1fff89ac:	cbz	r4, 1fff89c4 <port_B_isr+0x20>
1fff89ae:	ldr	r5, [pc, #28]	; (1fff89cc <port_B_isr+0x28>)
1fff89b0:	rbit	r3, r4
1fff89b4:	clz	r3, r3
1fff89b8:	ldr.w	r3, [r5, r3, lsl #2]
1fff89bc:	blx	r3
1fff89be:	subs	r3, r4, #1
1fff89c0:	ands	r4, r3
1fff89c2:	bne.n	1fff89b0 <port_B_isr+0xc>
1fff89c4:	pop	{r3, r4, r5, pc}
1fff89c6:	nop
1fff89c8:	.word	0x4004a0a0
1fff89cc:	.word	0x1fff8b54

1fff89d0 <port_A_isr>:
		}                                                     \
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
1fff89d0:	push	{r3, r4, r5, lr}
1fff89d2:	ldr	r3, [pc, #32]	; (1fff89f4 <port_A_isr+0x24>)
1fff89d4:	ldr	r4, [r3, #0]
1fff89d6:	str	r4, [r3, #0]
1fff89d8:	cbz	r4, 1fff89f0 <port_A_isr+0x20>
1fff89da:	ldr	r5, [pc, #28]	; (1fff89f8 <port_A_isr+0x28>)
1fff89dc:	rbit	r3, r4
1fff89e0:	clz	r3, r3
1fff89e4:	ldr.w	r3, [r5, r3, lsl #2]
1fff89e8:	blx	r3
1fff89ea:	subs	r3, r4, #1
1fff89ec:	ands	r4, r3
1fff89ee:	bne.n	1fff89dc <port_A_isr+0xc>
1fff89f0:	pop	{r3, r4, r5, pc}
1fff89f2:	nop
1fff89f4:	.word	0x400490a0
1fff89f8:	.word	0x1fff8b1c

1fff89fc <__dso_handle>:
1fff89fc:	....

1fff8a00 <Wire>:
1fff8a00:	.\..............
1fff8a10:	.`.@.\..........
	...

1fff8a6c <Wire1>:
1fff8a6c:	.\..............
1fff8a7c:	.p.@.\..........
	...

1fff8ad8 <SPI>:
1fff8ad8:	...@.\..........
	...

1fff8b10 <SdVolume::cacheBlockNumber_>:
1fff8b10:	....

1fff8b14 <analog_config_bits>:
1fff8b14:	.

1fff8b15 <analog_num_average>:
1fff8b15:	...

1fff8b18 <__brkval>:
1fff8b18:	....

1fff8b1c <isr_table_portA>:
1fff8b1c:	]0..]0..]0..]0..
1fff8b2c:	]0..]0..]0..]0..
1fff8b3c:	]0..]0..]0..]0..
1fff8b4c:	]0..]0..

1fff8b54 <isr_table_portB>:
1fff8b54:	]0..]0..]0..]0..
1fff8b64:	]0..]0..]0..]0..
1fff8b74:	]0..]0..]0..]0..
1fff8b84:	]0..]0..]0..]0..
1fff8b94:	]0..]0..]0..]0..

1fff8ba4 <isr_table_portC>:
1fff8ba4:	]0..]0..]0..]0..
1fff8bb4:	]0..]0..]0..]0..
1fff8bc4:	]0..]0..]0..]0..

1fff8bd4 <isr_table_portD>:
1fff8bd4:	]0..]0..]0..]0..
1fff8be4:	]0..]0..]0..]0..

1fff8bf4 <isr_table_portE>:
1fff8bf4:	]0..]0..

1fff8bfc <usb_buffer_available>:
1fff8bfc:	....

1fff8c00 <device_descriptor>:
1fff8c00:	.......@....u...
1fff8c10:	....

1fff8c14 <usb_string_manufacturer_name_default>:
1fff8c14:	..T.e.e.n.s.y.d.
1fff8c24:	u.i.n.o.

1fff8c2c <config_descriptor>:
1fff8c2c:	..C.....2.......
1fff8c3c:	...$....$....$..
1fff8c4c:	.$.........@....
1fff8c5c:	.........@......
1fff8c6c:	@...

1fff8c70 <usb_string_product_name_default>:
1fff8c70:	..U.S.B. .S.e.r.
1fff8c80:	i.a.l...

1fff8c88 <string0>:
1fff8c88:	....

1fff8c8c <usb_string_serial_number_default>:
1fff8c8c:	................
	...

1fff8ca8 <impure_data>:
1fff8ca8:	............d...
	...
1fff8d50:	.........3..4.m.
1fff8d60:	................
	...

1fff90d0 <_impure_ptr>:
1fff90d0:	....

1fff90d4 <__malloc_av_>:
	...
1fff90dc:	................
1fff90ec:	................
1fff90fc:	................
1fff910c:	................
1fff911c:	................
1fff912c:	$...$...,...,...
1fff913c:	4...4...<...<...
1fff914c:	D...D...L...L...
1fff915c:	T...T...\...\...
1fff916c:	d...d...l...l...
1fff917c:	t...t...|...|...
1fff918c:	................
1fff919c:	................
1fff91ac:	................
1fff91bc:	................
1fff91cc:	................
1fff91dc:	................
1fff91ec:	................
1fff91fc:	................
1fff920c:	................
1fff921c:	................
1fff922c:	$...$...,...,...
1fff923c:	4...4...<...<...
1fff924c:	D...D...L...L...
1fff925c:	T...T...\...\...
1fff926c:	d...d...l...l...
1fff927c:	t...t...|...|...
1fff928c:	................
1fff929c:	................
1fff92ac:	................
1fff92bc:	................
1fff92cc:	................
1fff92dc:	................
1fff92ec:	................
1fff92fc:	................
1fff930c:	................
1fff931c:	................
1fff932c:	$...$...,...,...
1fff933c:	4...4...<...<...
1fff934c:	D...D...L...L...
1fff935c:	T...T...\...\...
1fff936c:	d...d...l...l...
1fff937c:	t...t...|...|...
1fff938c:	................
1fff939c:	................
1fff93ac:	................
1fff93bc:	................
1fff93cc:	................
1fff93dc:	................
1fff93ec:	................
1fff93fc:	................
1fff940c:	................
1fff941c:	................
1fff942c:	$...$...,...,...
1fff943c:	4...4...<...<...
1fff944c:	D...D...L...L...
1fff945c:	T...T...\...\...
1fff946c:	d...d...l...l...
1fff947c:	t...t...|...|...
1fff948c:	................
1fff949c:	................
1fff94ac:	................
1fff94bc:	................
1fff94cc:	................

1fff94dc <__malloc_trim_threshold>:
1fff94dc:	....

1fff94e0 <__malloc_sbrk_base>:
1fff94e0:	....
